# coding: utf-8
# Test for model
require 'minitest/autorun'
require_relative 'load_model'

class TestModel < Minitest::Unit::TestCase
  def self.runnable_methods
    puts 'Overriding minitest to run tests in a defined order'
    methods = methods_matching(/^test_/)
  end
  def worksheet; @worksheet ||= init_spreadsheet; end
  def init_spreadsheet; ModelShim.new end
  def test_control_d5; assert_equal("Gas Power Stations", worksheet.control_d5); end
  def test_control_f5; assert_in_epsilon(4.0, worksheet.control_f5, 0.002); end
  def test_control_h5; assert_equal("Least Effort Scenario : No new capacity added due to high prices. The gas based generation would reach a level of 109.9 TWh in 2047.", worksheet.control_h5); end
  def test_control_i5; assert_equal("Determined Effort Scenario: New projects get connected to the pipeline.  The gas based power generation capacity will remain reach to 67 GW in 2047.", worksheet.control_i5); end
  def test_control_j5; assert_equal("Aggressive Effort Scenario:  Assumes free gas market in the country . This level the gas based generation capacity would reach to a level of 122 GW and the corresponding generation would be about 641 TWh in 2047. ", worksheet.control_j5); end
  def test_control_k5; assert_equal("Heroic Effort Scenario: No constraint in gas availability and that imports are unlimited and there is a complete free gas market.  the gas based generation capacity and the corresponding generation would be about 1161 TWh in the year 2047.", worksheet.control_k5); end
  def test_control_bo5; assert_equal("Least Effort Scenario No new capacity added due to high prices. The gas based generation would reach a level of 109.9 TWh in 2047.", worksheet.control_bo5); end
  def test_control_bp5; assert_equal("Determined Effort Scenario: New projects get connected to the pipeline.  The gas based power generation capacity will remain reach to 67 GW in 2047.", worksheet.control_bp5); end
  def test_control_bq5; assert_equal("Aggressive Effort Scenario:  assumes free gas market in the country . This level the gas based generation capacity would reach to a level of 122 GW and the corresponding generation would be about 641 TWh in 2047. ", worksheet.control_bq5); end
  def test_control_br5; assert_equal("Heroic Effort Scenario: no constraint in gas availability and that imports are unlimited and there is a complete free gas market.  the gas based generation capacity and the corresponding generation would be about 1161 TWh in the year 2047.", worksheet.control_br5); end
  def test_control_d6; assert_equal("Coal Power Stations", worksheet.control_d6); end
  def test_control_d7; assert_equal("Coal Power Stations", worksheet.control_d7); end
  def test_control_f7; assert_in_epsilon(4.0, worksheet.control_f7, 0.002); end
  def test_control_h7; assert_equal("Least Effort Scenario :  Increasing fuel prices, import dependence, pressure to reduce carbon emissions. total electricity generated in 2047 from coal-fired power plants would be 1584 TWh.", worksheet.control_h7); end
  def test_control_i7; assert_equal("Determined Effort Scenario: Electricity generated from coal-fired plants in 2047 would be 2141 TWh.", worksheet.control_i7); end
  def test_control_j7; assert_equal("Aggressive Effort Scenario: Capacity addition at a slightly lower level . Total generation of 3051 TWh in 2047.", worksheet.control_j7); end
  def test_control_k7; assert_equal("Heroic Effort Scenario: Assumes a high coal based capacity. electricity generation of 4038 TWh in 2047. ", worksheet.control_k7); end
  def test_control_bo7; assert_equal("Least Effort Scenario :  Increasing fuel prices, import dependence, pressure to reduce carbon emissions. total electricity generated in 2047 from coal-fired power plants would be 1584 TWh.", worksheet.control_bo7); end
  def test_control_bp7; assert_equal("Determined Effort Scenario: Electricity generated from coal-fired plants in 2047 would be 2141 TWh.", worksheet.control_bp7); end
  def test_control_bq7; assert_equal("Aggressive Effort Scenario: Capacity addition at a slightly lower level . Total generation of 3051 TWh in 2047.", worksheet.control_bq7); end
  def test_control_br7; assert_equal("Heroic Effort Scenario: Assumes a high coal based capacity. electricity generation of 4038 TWh in 2047. ", worksheet.control_br7); end
  def test_control_d8; assert_equal("Efficiency of Coal Power Stations", worksheet.control_d8); end
  def test_control_f8; assert_in_epsilon(4.0, worksheet.control_f8, 0.002); end
  def test_control_h8; assert_equal("Least Effort Scenario : New technology development/deployment will be slow. total demand for Indian grade coal in 2047 for India, would be 1383 million tons. ", worksheet.control_h8); end
  def test_control_i8; assert_equal("Determined Effort Scenario : New technology development/deployment will be slightly faster. Total demand for Indian grade coal in 2047 is expected at 1345 million tons.", worksheet.control_i8); end
  def test_control_j8; assert_equal("Aggressive Effort Scenario : New technology development/deployment will be encouraged and hence its adoption would be faster. demand for Indian grade coal in 2047 in this scenario is 1309 million tons.", worksheet.control_j8); end
  def test_control_k8; assert_equal("Heroic Effort Scenario : New technology development/deployment will be aggressively promoted. Total demand for Indian grade coal in 2047 in this scenario is 1277 million tons.", worksheet.control_k8); end
  def test_control_bo8; assert_equal("Least Effort Scenario : New technology development/deployment will be slow. total demand for Indian grade coal in 2047 for India, would be 1383 million tons. ", worksheet.control_bo8); end
  def test_control_bp8; assert_equal("Determined Effort Scenario : New technology development/deployment will be slightly faster. Total demand for Indian grade coal in 2047 is expected at 1345 million tons.", worksheet.control_bp8); end
  def test_control_bq8; assert_equal("Aggressive Effort Scenario : New technology development/deployment will be encouraged and hence its adoption would be faster. demand for Indian grade coal in 2047 in this scenario is 1309 million tons.", worksheet.control_bq8); end
  def test_control_br8; assert_equal("Heroic Effort Scenario : New technology development/deployment will be aggressively promoted. Total demand for Indian grade coal in 2047 in this scenario is 1277 million tons.", worksheet.control_br8); end
  def test_control_d9; assert_equal("CCS power stations", worksheet.control_d9); end
  def test_control_d10; assert_equal("CCS power Stations", worksheet.control_d10); end
  def test_control_f10; assert_in_epsilon(4.0, worksheet.control_f10, 0.002); end
  def test_control_h10; assert_equal("Least Effort Scenario :  No planned generation plants with CCS until 2025. Generation with CCS usage will increase to 7 GW till 2047.", worksheet.control_h10); end
  def test_control_i10; assert_equal("Determined Effort Scenario : Generation with CCS usage will be deployed at a slow rate. Generation with CCS will reach 35 GW by 2047.", worksheet.control_i10); end
  def test_control_j10; assert_equal("Aggressive Effort Scenario : CCS-equipped capacity is expected to grow, India will target generation capacity of 70 GW by 2047.", worksheet.control_j10); end
  def test_control_k10; assert_equal("Heroic Effort Scenario : More generation plants with CCS technology will be deployed, increasing to 88 GW by 2047.", worksheet.control_k10); end
  def test_control_bo10; assert_equal("Least Effort Scenario :  no planned generation plants with CCS until 2025. Generation with CCS usage will increase to 7 GW till 2047.", worksheet.control_bo10); end
  def test_control_bp10; assert_equal("Determined Effort Scenario : Generation with CCS usage will be deployed at a slow rate. Generation with CCS will reach 35 GW by 2047.", worksheet.control_bp10); end
  def test_control_bq10; assert_equal("Aggressive Effort Scenario : CCS-equipped capacity is expected to grow, India will target generation capacity of 70 GW by 2047.", worksheet.control_bq10); end
  def test_control_br10; assert_equal("Heroic Effort Scenario : More generation plants with CCS technology will be deployed, increasing to 88 GW by 2047.", worksheet.control_br10); end
  def test_control_d11; assert_equal("CCS fuel Mix", worksheet.control_d11); end
  def test_control_f11; assert_in_epsilon(4.0, worksheet.control_f11, 0.002); end
  def test_control_h11; assert_equal("Least Effort Scenario : The Fuel Split for level 1 is completely based on coal supply. Gas supply is not being utilized for CCS at this stage.", worksheet.control_h11); end
  def test_control_i11; assert_equal("Determined Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_i11); end
  def test_control_j11; assert_equal("Aggressive Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_j11); end
  def test_control_k11; assert_equal("Heroic Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_k11); end
  def test_control_bo11; assert_equal("Least Effort Scenario : The Fuel Split for level 1 is completely based on coal supply. Gas supply is not being utilized for CCS at this stage.", worksheet.control_bo11); end
  def test_control_bp11; assert_equal("Determined Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_bp11); end
  def test_control_bq11; assert_equal("Aggressive Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_bq11); end
  def test_control_br11; assert_equal("Heroic Effort Scenario : The Fuel Split is in the ratio 9:1 for coal and gas respectively.", worksheet.control_br11); end
  def test_control_d12; assert_equal("Nuclear Power Stations", worksheet.control_d12); end
  def test_control_f12; assert_in_epsilon(4.0, worksheet.control_f12, 0.002); end
  def test_control_h12; assert_equal("Least Effort Scenario : Reactors currently under construction (5,300 MW) are completed and commissioned. ", worksheet.control_h12); end
  def test_control_i12; assert_equal("Determined Effort Scenario : Assumes that new reactors are developed in the eight new sites identified. ", worksheet.control_i12); end
  def test_control_j12; assert_equal("Aggressive Effort Scenario : Assumes that all the new sites are fully utilized with new reactors. Six reactors are assumed per site. ", worksheet.control_j12); end
  def test_control_k12; assert_equal("Heroic Effort Scenario : This assumes that three new sites are identified, which can accommodate about 15,000 MW through new PHWRs and LWRs. ", worksheet.control_k12); end
  def test_control_bo12; assert_equal("Least Effort Scenario : Reactors currently under construction (5,300 MW) are completed and commissioned. ", worksheet.control_bo12); end
  def test_control_bp12; assert_equal("Determined Effort Scenario : Assumes that new reactors are developed in the eight new sites identified. ", worksheet.control_bp12); end
  def test_control_bq12; assert_equal("Aggressive Effort Scenario : Assumes that all the new sites are fully utilized with new reactors. Six reactors are assumed per site. ", worksheet.control_bq12); end
  def test_control_br12; assert_equal("Heroic Effort Scenario : This assumes that three new sites are identified, which can accommodate about 15,000 MW through new PHWRs and LWRs. ", worksheet.control_br12); end
  def test_control_d13; assert_equal("Hydro Power Sations", worksheet.control_d13); end
  def test_control_f13; assert_in_epsilon(4.0, worksheet.control_f13, 0.002); end
  def test_control_h13; assert_equal(" Least Effort Scenario : The current hydro plants continue to operate with scheduled maintenance efforts through the period of analysis. ", worksheet.control_h13); end
  def test_control_i13; assert_equal("Determined Effort Scenario :  Through various measures, the Government of India (GoI) aims to realize 100% hydropower potential of the country by 2025 – 26. Pumped hydro schemes which are under construction are completed.", worksheet.control_i13); end
  def test_control_j13; assert_equal("Aggressive Effort Scenario : In addition to achievement of govt. plans, this scenario includes the benefits from completion of R&M and Life Extension (LE) efforts. ", worksheet.control_j13); end
  def test_control_k13; assert_equal("Heroic Effort Scenario :  Technology advancements are assumed to result in exploitation of full potential of large hydro. There are advances in technology development, and R&D efforts in de-silting, integration of regional grids, forecasting and such.", worksheet.control_k13); end
  def test_control_bo13; assert_equal(" Least Effort Scenario : The current hydro plants continue to operate with scheduled maintenance efforts through the period of analysis. ", worksheet.control_bo13); end
  def test_control_bp13; assert_equal("Determined Effort Scenario :  Through various measures, the Government of India (GoI) aims to realize 100% hydropower potential of the country by 2025 – 26. Pumped hydro schemes which are under construction are completed.", worksheet.control_bp13); end
  def test_control_bq13; assert_equal("Aggressive Effort Scenario : In addition to achievement of govt. plans, this scenario includes the benefits from completion of R&M and Life Extension (LE) efforts. ", worksheet.control_bq13); end
  def test_control_br13; assert_equal("Heroic Effort Scenario :  Technology advancements are assumed to result in exploitation of full potential of large hydro. There are advances in technology development, and R&D efforts in de-silting, integration of regional grids, forecasting and such.", worksheet.control_br13); end
  def test_control_d14; assert_equal("Solar PV", worksheet.control_d14); end
  def test_control_f14; assert_in_epsilon(4.0, worksheet.control_f14, 0.002); end
  def test_control_h14; assert_equal("Least Effort Scenario : Solar PV capacity addition would be significantly slower. Capacity would increase to roughly 11 GW by 2022, peak at 37 GW in 2047.", worksheet.control_h14); end
  def test_control_i14; assert_equal("Determined Effort Scenario: Capacity addition would follow the JNNSM trajectory. Capacity addition increases strongly thereafter culminating in a cumulative capacity of 150 GW by 2047. ", worksheet.control_i14); end
  def test_control_j14; assert_equal("Aggressive Effort Scenario: Steady drop in solar PV prices and marginal increase in fossil fuels prices, reach 248 GW by 2047. ", worksheet.control_j14); end
  def test_control_k14; assert_equal("Heroic Effort Scenario: In this scenario, there is absolutely no barrier (economic, social or technical) to the growth of solar PV. reaches a potential of 420 GW.", worksheet.control_k14); end
  def test_control_bo14; assert_equal("Least Effort Scenario : Solar PV capacity addition would be significantly slower. Capacity would increase to roughly 11 GW by 2022, peak at 37 GW in 2047.", worksheet.control_bo14); end
  def test_control_bp14; assert_equal("Determined Effort Scenario: Capacity addition would follow the JNNSM trajectory. Capacity addition increases strongly thereafter culminating in a cumulative capacity of 150 GW by 2047. ", worksheet.control_bp14); end
  def test_control_bq14; assert_equal("Aggressive Effort Scenario: Steady drop in solar PV prices and marginal increase in fossil fuels prices, reach 248 GW by 2047. ", worksheet.control_bq14); end
  def test_control_br14; assert_equal("Heroic Effort Scenario: In this scenario, there is absolutely no barrier (economic, social or technical) to the growth of solar PV. reaches a potential of 420 GW.", worksheet.control_br14); end
  def test_control_d15; assert_equal("Solar CSP", worksheet.control_d15); end
  def test_control_f15; assert_in_epsilon(4.0, worksheet.control_f15, 0.002); end
  def test_control_h15; assert_equal("Least Effort Scenario : Only 1 GW would be operational in the next 5 years (mainly due to higher costs), beyond which there will be a slight increase in generation capacity. Generation in 2047 would be to the tune of 35 TWh.", worksheet.control_h15); end
  def test_control_i15; assert_equal("Determined Effort Scenario: Assumes that there is slow but consistent growth in capacity addition of CSP. Capacity in this level in year 2047 is 46 GW. ", worksheet.control_i15); end
  def test_control_j15; assert_equal("Aggressive Effort Scenario:  Assumes that CSP costs come down significantly and that there are no limitations on plant size. Generation by 2047 reaches 357 TWh.", worksheet.control_j15); end
  def test_control_k15; assert_equal("Heroic Effort Scenario: Costs of solar system and storage fall as higher temperature technologies are introduced. Generation by 2047 reaches 745 TWh.", worksheet.control_k15); end
  def test_control_bo15; assert_equal("Least Effort Scenario : Only 1 GW would be operational in the next 5 years (mainly due to higher costs), beyond which there will be a slight increase in generation capacity. Generation in 2047 would be to the tune of 35 TWh.", worksheet.control_bo15); end
  def test_control_bp15; assert_equal("Determined Effort Scenario: assumes that there is slow but consistent growth in capacity addition of CSP. Capacity in this level in year 2047 is 46 GW. ", worksheet.control_bp15); end
  def test_control_bq15; assert_equal("Aggressive Effort Scenario:  assumes that CSP costs come down significantly and that there are no limitations on plant size. Generation by 2047 reaches 357 TWh.", worksheet.control_bq15); end
  def test_control_br15; assert_equal("Heroic Effort Scenario: Costs of solar system and storage fall as higher temperature technologies are introduced. Generation by 2047 reaches 745 TWh.", worksheet.control_br15); end
  def test_control_d16; assert_equal("Onshore Wind", worksheet.control_d16); end
  def test_control_f16; assert_in_epsilon(4.0, worksheet.control_f16, 0.002); end
  def test_control_h16; assert_equal("Least Effort Scenario : capacity addition would be significantly slower. Capacity would increase to 67 GW by 2047. ", worksheet.control_h16); end
  def test_control_i16; assert_equal("Determined Effort Scenario: Assumes that the capacity addition would follow the 12th and 13th Plan trajectories. Reaches a capacity of 202 GW by 2047. ", worksheet.control_i16); end
  def test_control_j16; assert_equal("Aggressive Effort Scenario: Capacity addition in this highly optimistic scenario, to be slightly higher than the 12/13th Plan requirements. It would reach 270 GW by 2047", worksheet.control_j16); end
  def test_control_k16; assert_equal("Heroic Effort Scenario: There is absolutely no barrier (economic, social or technical) to the growth of onshore wind power. it reaches approximately 300 GW and by 2047 a high of 410 GW.", worksheet.control_k16); end
  def test_control_bo16; assert_equal("Least Effort Scenario : capacity addition would be significantly slower. Capacity would increase to 67 GW by 2047. ", worksheet.control_bo16); end
  def test_control_bp16; assert_equal("Determined Effort Scenario: assumes that the capacity addition would follow the 12th and 13th Plan trajectories. Reaches a capacity of 202 GW by 2047. ", worksheet.control_bp16); end
  def test_control_bq16; assert_equal("Aggressive Effort Scenario: capacity addition in this highly optimistic scenario, to be slightly higher than the 12/13th Plan requirements. It would reach 270 GW by 2047", worksheet.control_bq16); end
  def test_control_br16; assert_equal("Heroic Effort Scenario: There is absolutely no barrier (economic, social or technical) to the growth of onshore wind power. it reaches approximately 300 GW and by 2047 a high of 410 GW.", worksheet.control_br16); end
  def test_control_d17; assert_equal("Offshore Wind", worksheet.control_d17); end
  def test_control_f17; assert_in_epsilon(4.0, worksheet.control_f17, 0.002); end
  def test_control_h17; assert_equal("Least Effort Scenario : Offshore wind takes off very slowly due to higher cost and other barriers, especially with regard to regulatory and associated clearances.", worksheet.control_h17); end
  def test_control_i17; assert_equal("Determined Effort Scenario: Without any further improvement in technology and offshore wind potential assessment, the sector witnesses a gradual growth in capacity addition.", worksheet.control_i17); end
  def test_control_j17; assert_equal("Aggressive Effort Scenario: With the improvement in potential, offshore site identification and cost reductions, India would gradually built up its offshore wind capacity/", worksheet.control_j17); end
  def test_control_k17; assert_equal("Heroic Effort Scenario: Offshore wind power does not face any economic or physical constraints and hence sees a rapid growth in capacity addition. ", worksheet.control_k17); end
  def test_control_bo17; assert_equal("Least Effort Scenario : Offshore wind takes off very slowly due to higher cost and other barriers, especially with regard to regulatory and associated clearances.", worksheet.control_bo17); end
  def test_control_bp17; assert_equal("Determined Effort Scenario: Without any further improvement in technology and offshore wind potential assessment, the sector witnesses a gradual growth in capacity addition.", worksheet.control_bp17); end
  def test_control_bq17; assert_equal("Aggressive Effort Scenario: With the improvement in potential, offshore site identification and cost reductions, India would gradually built up its offshore wind capacity/", worksheet.control_bq17); end
  def test_control_br17; assert_equal("Heroic Effort Scenario: offshore wind power does not face any economic or physical constraints and hence sees a rapid growth in capacity addition. ", worksheet.control_br17); end
  def test_control_d18; assert_equal("Small Hydro", worksheet.control_d18); end
  def test_control_f18; assert_in_epsilon(4.0, worksheet.control_f18, 0.002); end
  def test_control_h18; assert_equal("Least Effort Scenario : Essentially capacity addition is very slow and only takes care of retirement. It further increases to 7.5 GW by 2027 and plateaus at 9 GW from about 2032-2047.", worksheet.control_h18); end
  def test_control_i18; assert_equal("Determined Effort Scenario: Capacity addition slows down after this point and reaches the ultimate capacity of 15 GW 2047. ", worksheet.control_i18); end
  def test_control_j18; assert_equal("Aggressive Effort Scenario: Assumes an optimistic view by meeting not only the 12th and 13th Plan targets, but a slightly faster deployment. roughly 20 GW is met and maintained thereafter till 2047", worksheet.control_j18); end
  def test_control_k18; assert_equal("heroic Effort Scenario: Capacity deployment increases rapidly. overall SHP generation resulting in 115 TWh by 2047.", worksheet.control_k18); end
  def test_control_bo18; assert_equal("Least Effort Scenario : Essentially capacity addition is very slow and only takes care of retirement. It further increases to 7.5 GW by 2027 and plateaus at 9 GW from about 2032-2047.", worksheet.control_bo18); end
  def test_control_bp18; assert_equal("Determined Effort Scenario: Capacity addition slows down after this point and reaches the ultimate capacity of 15 GW 2047. ", worksheet.control_bp18); end
  def test_control_bq18; assert_equal("Aggressive Effort Scenario: assumes an optimistic view by meeting not only the 12th and 13th Plan targets, but a slightly faster deployment. roughly 20 GW is met and maintained thereafter till 2047", worksheet.control_bq18); end
  def test_control_br18; assert_equal("heroic Effort Scenario: Capacity deployment increases rapidly. overall SHP generation resulting in 115 TWh by 2047.", worksheet.control_br18); end
  def test_control_d19; assert_equal("Electricity imports", worksheet.control_d19); end
  def test_control_f19; assert_in_epsilon(4.0, worksheet.control_f19, 0.002); end
  def test_control_h19; assert_equal("Least Effort Scenario : Imports continue to be low as India also has opportunities for domestic power generation. ", worksheet.control_h19); end
  def test_control_i19; assert_equal("Determined Effort Scenario: Assumes imports continue to grow at a moderate pace of 5 GW from 13th Plan up to 2037 and thereafter maintain same level.   ", worksheet.control_i19); end
  def test_control_j19; assert_equal("Aggressive Effort Scenario: Assumes aggressive growth in imports and assumes 7 GW from 13th Plan up to 2037 and thereafter it remains constant. ", worksheet.control_j19); end
  def test_control_k19; assert_equal("Heroic Effort Scenario: Assumes optimistic growth in imports and assumes power import from countries other than Bhutan and Nepal (an international grid). ", worksheet.control_k19); end
  def test_control_bo19; assert_equal("Least Effort Scenario : Imports continue to be low as India also has opportunities for domestic power generation. ", worksheet.control_bo19); end
  def test_control_bp19; assert_equal("Determined Effort Scenario: assumes imports continue to grow at a moderate pace of 5 GW from 13th Plan up to 2037 and thereafter maintain same level.   ", worksheet.control_bp19); end
  def test_control_bq19; assert_equal("Aggressive Effort Scenario: assumes aggressive growth in imports and assumes 7 GW from 13th Plan up to 2037 and thereafter it remains constant. ", worksheet.control_bq19); end
  def test_control_br19; assert_equal("Heroic Effort Scenario: assumes optimistic growth in imports and assumes power import from countries other than Bhutan and Nepal (an international grid). ", worksheet.control_br19); end
  def test_control_d20; assert_equal("Agriculture and land use", worksheet.control_d20); end
  def test_control_d21; assert_equal("Biomass residue production", worksheet.control_d21); end
  def test_control_f21; assert_in_epsilon(4.0, worksheet.control_f21, 0.002); end
  def test_control_h21; assert_equal("Least Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  144 MT/year", worksheet.control_h21); end
  def test_control_i21; assert_equal("Determined Effort Scenario : Agri Residue productivity increases at 0.25%/year, forest residue for cooking is close to saturation at  158 MT/year", worksheet.control_i21); end
  def test_control_j21; assert_equal("Aggressive Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  171MT/year", worksheet.control_j21); end
  def test_control_k21; assert_equal("Heroic Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  180 MT/year", worksheet.control_k21); end
  def test_control_bo21; assert_equal("Least Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  144 MT/year", worksheet.control_bo21); end
  def test_control_bp21; assert_equal("Determined Effort Scenario : Agri Residue productivity increases at 0.25%/year, forest residue for cooking is close to saturation at  158 MT/year", worksheet.control_bp21); end
  def test_control_bq21; assert_equal("Aggressive Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  171MT/year", worksheet.control_bq21); end
  def test_control_br21; assert_equal("Heroic Effort Scenario : Agri Residue productivity constant, forest residue for cooking is close to saturation at  180 MT/year", worksheet.control_br21); end
  def test_control_d22; assert_equal("Biomass residue End Use Application", worksheet.control_d22); end
  def test_control_f22; assert_in_epsilon(4.0, worksheet.control_f22, 0.002); end
  def test_control_h22; assert_equal("Least Effort Scenario : 52% of the Agri Residue goes into cooking along with forestry arisings, 10% in electricity and 5% for liquid fuels. ", worksheet.control_h22); end
  def test_control_i22; assert_equal("Determined Effort Scenario : 39% of the Agri Residue goes into cooking along with forestry arisings, 18% in electricity and 10% for liquid fuels. ", worksheet.control_i22); end
  def test_control_j22; assert_equal("Aggressive Effort Scenario : 15% of the Agri Residue goes into cooking along with forestry arisings, 30% in electricity and 22% for liquid fuels. ", worksheet.control_j22); end
  def test_control_k22; assert_equal("Heroic Effort Scenario : 5% of the Agri Residue goes into cooking along with forestry arisings, 24% in electricity and 38% for liquid fuels. ", worksheet.control_k22); end
  def test_control_bo22; assert_equal("Least Effort Scenario : 52% of the Agri Residue goes into cooking along with forestry arisings, 10% in electricity and 5% for liquid fuels. ", worksheet.control_bo22); end
  def test_control_bp22; assert_equal("Determined Effort Scenario : 39% of the Agri Residue goes into cooking along with forestry arisings, 18% in electricity and 10% for liquid fuels. ", worksheet.control_bp22); end
  def test_control_bq22; assert_equal("Aggressive Effort Scenario : 15% of the Agri Residue goes into cooking along with forestry arisings, 30% in electricity and 22% for liquid fuels. ", worksheet.control_bq22); end
  def test_control_br22; assert_equal("Heroic Effort Scenario : 5% of the Agri Residue goes into cooking along with forestry arisings, 24% in electricity and 38% for liquid fuels. ", worksheet.control_br22); end
  def test_control_d23; assert_equal("1st Gen/2nd Gen Biofuel Productn", worksheet.control_d23); end
  def test_control_f23; assert_in_epsilon(4.0, worksheet.control_f23, 0.002); end
  def test_control_h23; assert_equal("Least Effort Scenario : Production of 1st/2nd Gen biofuel reaches 4.7 MTOE", worksheet.control_h23); end
  def test_control_i23; assert_equal("Determined Effort Scenario: More crop residue and waste land is utlized for biomass resulting in 8.8 MTOE of bio-fuel production", worksheet.control_i23); end
  def test_control_j23; assert_equal("Aggressive Effort Scenario: Biofuel production reaches 40.2 MTOE", worksheet.control_j23); end
  def test_control_k23; assert_equal("Heroic Effort Scenario: Better yeild from Sugarcane biproducts and more wasteland allocation increases production to 49 MTOE", worksheet.control_k23); end
  def test_control_bo23; assert_equal("Least Effort Scenario : Production of 1st/2nd Gen biofuel reaches 4.7 MTOE", worksheet.control_bo23); end
  def test_control_bp23; assert_equal("Determined Effort Scenario: More crop residue and waste land is utlized for biomass resulting in 8.8 MTOE of bio-fuel production", worksheet.control_bp23); end
  def test_control_bq23; assert_equal("Aggressive Effort Scenario: Biofuel production reaches 40.2 MTOE", worksheet.control_bq23); end
  def test_control_br23; assert_equal("Heroic Effort Scenario: Better yeild from Sugarcane biproducts and more wasteland allocation increases production to 49 MTOE", worksheet.control_br23); end
  def test_control_d24; assert_equal("Algae Biofuel Productn", worksheet.control_d24); end
  def test_control_f24; assert_in_epsilon(4.0, worksheet.control_f24, 0.002); end
  def test_control_h24; assert_equal("Least Effort Scenario : Assumes almost no bio-production from Micro and Macro Algae", worksheet.control_h24); end
  def test_control_i24; assert_equal("Determined Effort Scenario: Production increases to 2.8 MTOE", worksheet.control_i24); end
  def test_control_j24; assert_equal("Aggressive Effort Scenario: Biofuel yeild from algae increases and production reaches to 28.6 MTOE", worksheet.control_j24); end
  def test_control_k24; assert_equal("Heroic Effort Scenario: More Land and Sea area is allocated for algae production and production reaches 113.7 MTOE", worksheet.control_k24); end
  def test_control_bo24; assert_equal("Least Effort Scenario : Assumes almost no bio-production from Micro and Macro Algae", worksheet.control_bo24); end
  def test_control_bp24; assert_equal("Determined Effort Scenario: Production increases to 2.8 MTOE", worksheet.control_bp24); end
  def test_control_bq24; assert_equal("Aggressive Effort Scenario: Biofuel yeild from algae increases and production reaches to 28.6 MTOE", worksheet.control_bq24); end
  def test_control_br24; assert_equal("Heroic Effort Scenario: More Land and Sea area is allocated for algae production and production reaches 113.7 MTOE", worksheet.control_br24); end
  def test_control_d25; assert_equal("Energy from Waste", worksheet.control_d25); end
  def test_control_f25; assert_in_epsilon(4.0, worksheet.control_f25, 0.002); end
  def test_control_h25; assert_equal("Least Effort Scenario :  Not much government impetus is assumed. Once the existing projects have lived their life, there will be no MSW based WtE projects, beyond 2037.", worksheet.control_h25); end
  def test_control_i25; assert_equal("Determined Effort Scenario: Assumes that the capacity addition happens in line with 12th Plan targets, 18% of total ‘waste to electricity generation’ potential will be realized, resulting in approx 3,500MW installed power generation capacity.", worksheet.control_i25); end
  def test_control_j25; assert_equal("Aggressive Effort Scenario: Assumes that Government and ULBs emphasize on MSW based WtE as a key resource recovery option. The policies and incentives get alignedrgy. 32% of segregated urban combustibles will be used as fuel yielding 0.003Mtoe of thermal energy", worksheet.control_j25); end
  def test_control_k25; assert_equal("Heroic Effort Scenario: There are absolutely no barriers to the growth of MSW based WtE. Inter - agency conflicts are also resolved. Environmental considerations in urban and rural areas drive this technology. 30% of total ‘waste to electricity generation’ potential will be realized, resulting in approx 5,850MW installed power generation capacity", worksheet.control_k25); end
  def test_control_bo25; assert_equal("Least Effort Scenario : . Not much government impetus is assumed. Once the existing projects have lived their life, there will be no MSW based WtE projects, beyond 2037.", worksheet.control_bo25); end
  def test_control_bp25; assert_equal("Determined Effort Scenario: assumes that the capacity addition happens in line with 12th Plan targets, 18% of total ‘waste to electricity generation’ potential will be realized, resulting in approx 3,500MW installed power generation capacity.", worksheet.control_bp25); end
  def test_control_bq25; assert_equal("Aggressive Effort Scenario: assumes that Government and ULBs emphasize on MSW based WtE as a key resource recovery option. The policies and incentives get alignedrgy. 32% of segregated urban combustibles will be used as fuel yielding 0.003Mtoe of thermal energy", worksheet.control_bq25); end
  def test_control_br25; assert_equal("Heroic Effort Scenario: there are absolutely no barriers to the growth of MSW based WtE. Inter - agency conflicts are also resolved. Environmental considerations in urban and rural areas drive this technology. 30% of total ‘waste to electricity generation’ potential will be realized, resulting in approx 5,850MW installed power generation capacity", worksheet.control_br25); end
  def test_control_d27; assert_equal("Domestic Gas Production", worksheet.control_d27); end
  def test_control_f27; assert_in_epsilon(4.0, worksheet.control_f27, 0.002); end
  def test_control_h27; assert_equal("Least Effort Scenario : Incorporates only future production from the current discoveries of conventional gas and CBM. Historical production has been taken into account. ", worksheet.control_h27); end
  def test_control_i27; assert_equal("Determined Effort scenario:  assumes moderate development of CBM achieving peak production of 5 BCM in 2032 and remains static thereafter. It assumes improvement in existing pipeline policies. ", worksheet.control_i27); end
  def test_control_j27; assert_equal("Aggressive Effort Scenario: Requires additional policy inputs to spur the growth of natural gas sector. It assumes cost recovery provision continue  price/utilization approvals are no longer required as the gas market has completely evolved in India. CBM ", worksheet.control_j27); end
  def test_control_k27; assert_equal("Heroic Effort Scenario:  Assumes a highly favourable upstream regime wherein IOCs find it attractive to invest in India and free gas market has set in. It assumes an aggressive conventional gas scenario.", worksheet.control_k27); end
  def test_control_bo27; assert_equal("Least Effort Scenario : Incorporates only future production from the current discoveries of conventional gas and CBM. Historical production has been taken into account. ", worksheet.control_bo27); end
  def test_control_bp27; assert_equal("Determined Effort scenario:  assumes moderate development of CBM achieving peak production of 5 BCM in 2032 and remains static thereafter. It assumes improvement in existing pipeline policies. ", worksheet.control_bp27); end
  def test_control_bq27; assert_equal("Aggressive Effort Scenario: Requires additional policy inputs to spur the growth of natural gas sector. It assumes cost recovery provision continue  price/utilization approvals are no longer required as the gas market has completely evolved in India. CBM ", worksheet.control_bq27); end
  def test_control_br27; assert_equal("Heroic Effort Scenario:  assumes a highly favourable upstream regime wherein IOCs find it attractive to invest in India and free gas market has set in. It assumes an aggressive conventional gas scenario.", worksheet.control_br27); end
  def test_control_d28; assert_equal("Domestic Coal Production", worksheet.control_d28); end
  def test_control_f28; assert_in_epsilon(4.0, worksheet.control_f28, 0.002); end
  def test_control_h28; assert_equal("Least Effort Scenario : Assumes that only the currently operating, on-going and planned coal mining projects. In this scenario, coal production gradually increases to 619 MTPA in 2047. ", worksheet.control_h28); end
  def test_control_i28; assert_equal("Determined Effort Scenario: There would be some improvement in mine ability due to technological improvement. In this scenario, coal production will grow by 2047 to 1163 MTPA. ", worksheet.control_i28); end
  def test_control_j28; assert_equal(" Aggressive Effort Scenario: Proved coal reserves will grow at about 1.3% p.a. and there would also be further improvement in mine ability. Positive conditions for coal based energy supply, coal production will be 1407 MTPA in 2047. About 55% of mineable coal reserves would have been extracted by 2047.", worksheet.control_j28); end
  def test_control_k28; assert_equal("Heroic Effort Scenario: Proved coal reserves will grow at 1.5% p.a.  In this scenario, coal production will increase to about 1602 MTPA in 2047, In this scenario, about 48% of mineable coal reserves would have been extracted by 2047.", worksheet.control_k28); end
  def test_control_bo28; assert_equal("Least Effort Scenario : Assumes that only the currently operating, on-going and planned coal mining projects. In this scenario, coal production gradually increases to 619 MTPA in 2047. ", worksheet.control_bo28); end
  def test_control_bp28; assert_equal("Determined Effort Scenario: There would be some improvement in mine ability due to technological improvement. In this scenario, coal production will grow by 2047 to 1163 MTPA. ", worksheet.control_bp28); end
  def test_control_bq28; assert_equal(" Aggressive Effort Scenario: Proved coal reserves will grow at about 1.3% p.a. and there would also be further improvement in mine ability. Positive conditions for coal based energy supply, coal production will be 1407 MTPA in 2047. About 55% of mineable coal reserves would have been extracted by 2047.", worksheet.control_bq28); end
  def test_control_br28; assert_equal("Heroic Effort Scenario: Proved coal reserves will grow at 1.5% p.a.  In this scenario, coal production will increase to about 1602 MTPA in 2047, In this scenario, about 48% of mineable coal reserves would have been extracted by 2047.", worksheet.control_br28); end
  def test_control_d29; assert_equal("Domestic Oil Production", worksheet.control_d29); end
  def test_control_f29; assert_in_epsilon(4.0, worksheet.control_f29, 0.002); end
  def test_control_h29; assert_equal("Least Effort Scenario : Assumes no new fields come into production, barring the ones for which investment decision has been taken.", worksheet.control_h29); end
  def test_control_i29; assert_equal("Determined Effort Scenario: A number of IOR/EOR schemes are underway to enhance production. Additionally about 35 discoveries which are under various stages of DOC approvals, have been considered to start production.", worksheet.control_i29); end
  def test_control_j29; assert_equal("Aggressive Effort Scenario: Under this scenario, a number of oil discoveries which are awaiting appraisal and development are found to be commercially viable. Marginal fields would supplement the production. ", worksheet.control_j29); end
  def test_control_k29; assert_equal("Heroic Effort Scenario: This envisages NOCs registering a continuous growth in oil production. Share from tight oil and shale oil has been taken into account. However, this scenario includes technological alliance with super majors, better R/F, deep-water exploitation of reserves and no rig availability problems for deep-water development. ", worksheet.control_k29); end
  def test_control_bo29; assert_equal("Least Effort Scenario : Assumes no new fields come into production, barring the ones for which investment decision has been taken.", worksheet.control_bo29); end
  def test_control_bp29; assert_equal("A number of IOR/EOR schemes are underway to enhance production. Additionally about 35 discoveries which are under various stages of DOC approvals, have been considered to start production.", worksheet.control_bp29); end
  def test_control_bq29; assert_equal("Under this scenario, a number of oil discoveries which are awaiting appraisal and development are found to be commercially viable. Marginal fields would supplement the production. ", worksheet.control_bq29); end
  def test_control_br29; assert_equal("This envisages NOCs registering a continuous growth in oil production. Share from tight oil and shale oil has been taken into account. However, this scenario includes technological alliance with super majors, better R/F, deep-water exploitation of reserves and no rig availability problems for deep-water development. ", worksheet.control_br29); end
  def test_control_d31; assert_equal("Domestic passenger transport", worksheet.control_d31); end
  def test_control_d32; assert_equal("Domestic transport behaviour", worksheet.control_d32); end
  def test_control_f32; assert_in_epsilon(4.0, worksheet.control_f32, 0.002); end
  def test_control_h32; assert_equal("Least Effort Scenario : From current levels, distance travelled annually per person is expected to increase to 18,978 km by 2046-47. Improved access to transport infrastructure, accompanied by increasing demand for mobility due to increased economic activity would lead to an increase in total passenger transport demand. ", worksheet.control_h32); end
  def test_control_i32; assert_equal("Determined Effort Scenario : This Level would see a drop in the overall annual demand for mobility per capita by about 9 per cent from the mobility demands envisioned by 2046-47 in Level One, reaching 17,312 km by 2046-47.", worksheet.control_i32); end
  def test_control_j32; assert_equal("Aggressive Effort Scenario : Visualizes a world where all new cities that come up in the country in the next four decades plan for Transit Oriented Development. 18 per cent over the present mobility demands envisioned by 2046-47 under Level One, reaching 15,646 km by 2046-47.", worksheet.control_j32); end
  def test_control_k32; assert_equal("Heroic Effort Scenario : Growth of passenger transport demand would be moderated by conscious policy initiatives on urbanization patterns and transport demand management. 26 per cent over the passenger transport demands reaching 13,979 km by 2046-47.", worksheet.control_k32); end
  def test_control_bo32; assert_equal("Least Effort Scenario : From current levels, distance travelled annually per person is expected to increase to 18,978 km by 2046-47. Improved access to transport infrastructure, accompanied by increasing demand for mobility due to increased economic activity would lead to an increase in total passenger transport demand. ", worksheet.control_bo32); end
  def test_control_bp32; assert_equal("Determined Effort Scenario : This Level would see a drop in the overall annual demand for mobility per capita by about 9 per cent from the mobility demands envisioned by 2046-47 in Level One, reaching 17,312 km by 2046-47.", worksheet.control_bp32); end
  def test_control_bq32; assert_equal("Aggressive Effort Scenario : Visualizes a world where all new cities that come up in the country in the next four decades plan for Transit Oriented Development. 18 per cent over the present mobility demands envisioned by 2046-47 under Level One, reaching 15,646 km by 2046-47.", worksheet.control_bq32); end
  def test_control_br32; assert_equal("Heroic Effort Scenario : Growth of passenger transport demand would be moderated by conscious policy initiatives on urbanization patterns and transport demand management. 26 per cent over the passenger transport demands reaching 13,979 km by 2046-47.", worksheet.control_br32); end
  def test_control_d33; assert_equal("Passenger Transport Mode", worksheet.control_d33); end
  def test_control_f33; assert_in_epsilon(4.0, worksheet.control_f33, 0.002); end
  def test_control_h33; assert_equal("Least Effort Scenario :  There would be a surge in the total number of cars and jeeps by 2046-47 thereby decreasing the share of public road based transport to 46%.", worksheet.control_h33); end
  def test_control_i33; assert_equal("Determined Effort Scenario : While road based passenger transport would still dominate, with an increase in the share of public road based transport to about 57%, its share would marginally reduce to about 83% of the total passenger transport demand by 2046-47.", worksheet.control_i33); end
  def test_control_j33; assert_equal("Aggressive Effort Scenario : The share of road is assumed to decrease to less than 81% by 2046-47 in this level while rail and aviation will occupy about 17% and less than 2% shares respectively. Incentivizing metro services would increase the share of public transportation in road based transport to about 66% in 2046-47", worksheet.control_j33); end
  def test_control_k33; assert_equal("Heroic Effort Scenario : For inter-city travel, priority in investment will be to shrink travel time between all state capitals and major metros to 12 hours or less through faster train services. High Speed Rail at 300 km/hour for high demand passenger corridors will help reduce the incidence of air travel", worksheet.control_k33); end
  def test_control_bo33; assert_equal("Least Effort Scenario : .  There would be a surge in the total number of cars and jeeps by 2046-47 thereby decreasing the share of public road based transport to 46%.", worksheet.control_bo33); end
  def test_control_bp33; assert_equal("Determined Effort Scenario : While road based passenger transport would still dominate, with an increase in the share of public road based transport to about 57%, its share would marginally reduce to about 83% of the total passenger transport demand by 2046-47.", worksheet.control_bp33); end
  def test_control_bq33; assert_equal("Aggressive Effort Scenario : The share of road is assumed to decrease to less than 81% by 2046-47 in this level while rail and aviation will occupy about 17% and less than 2% shares respectively. Incentivizing metro services would increase the share of public transportation in road based transport to about 66% in 2046-47", worksheet.control_bq33); end
  def test_control_br33; assert_equal("Heroic Effort Scenario : For inter-city travel, priority in investment will be to shrink travel time between all state capitals and major metros to 12 hours or less through faster train services. High Speed Rail at 300 km/hour for high demand passenger corridors will help reduce the incidence of air travel", worksheet.control_br33); end
  def test_control_d34; assert_equal("Share of Public Transport", worksheet.control_d34); end
  def test_control_f34; assert_in_epsilon(4.0, worksheet.control_f34, 0.002); end
  def test_control_h34; assert_equal("Least Effort Scenario : Assumes that 42% of the transport demand will be met by public transport and the rest 48% will be met by private transport.", worksheet.control_h34); end
  def test_control_i34; assert_equal("Determined Effort Scenario : Approximately  49% of demand will be met by public the rest 51% will be met by private forms of transport.", worksheet.control_i34); end
  def test_control_j34; assert_equal("Aggressive Effort Scenario : 57% of the demand will be met by public transport the rest of the 43% will be met by private transport.", worksheet.control_j34); end
  def test_control_k34; assert_equal("Heroic Effort Scenario : 66% of the demand will be met by public transport the rest of 34% will be met by private forms of transport.", worksheet.control_k34); end
  def test_control_bo34; assert_equal("Least Effort Scenario : Assumes that 42% of the transport demand will be met by public transport and the rest 48% will be met by private transport.", worksheet.control_bo34); end
  def test_control_bp34; assert_equal("Determined Effort Scenario : Approximately  49% of demand will be met by public the rest 51% will be met by private forms of transport.", worksheet.control_bp34); end
  def test_control_bq34; assert_equal("Aggressive Effort Scenario : 57% of the demand will be met by public transport the rest of the 43% will be met by private transport.", worksheet.control_bq34); end
  def test_control_br34; assert_equal("Heroic Effort Scenario : 66% of the demand will be met by public transport the rest of 34% will be met by private forms of transport.", worksheet.control_br34); end
  def test_control_d35; assert_equal("Shift to EVs", worksheet.control_d35); end
  def test_control_f35; assert_in_epsilon(4.0, worksheet.control_f35, 0.002); end
  def test_control_h35; assert_equal("Least Effort Scenario : EV penetration for buses is 7% cars 2%and 4% for 2 wheelers", worksheet.control_h35); end
  def test_control_i35; assert_equal("Determined Effort Scenario : In level 2, the EV penetration for buses is 11%, for cars 5% , 9% for the 2 wheelers.", worksheet.control_i35); end
  def test_control_j35; assert_equal("Aggressive Effort Scenario : The EV penetration for buses is 22%, for cars 13%, for the 2 wheelers is 26%.", worksheet.control_j35); end
  def test_control_k35; assert_equal("Heroic Effort Scenario : EV penetration for buses is 44%, for cars is 35%, and for 2 wheelers is 53%.", worksheet.control_k35); end
  def test_control_bo35; assert_equal("Least Effort Scenario : EV penetration for buses is 7% cars 2%and 4% for 2 wheelers", worksheet.control_bo35); end
  def test_control_bp35; assert_equal("Determined Effort Scenario : In level 2, the EV penetration for buses is 11%, for cars 5% , 9% for the 2 wheelers.", worksheet.control_bp35); end
  def test_control_bq35; assert_equal("Aggressive Effort Scenario : The EV penetration for buses is 22%, for cars 13%, for the 2 wheelers is 26%.", worksheet.control_bq35); end
  def test_control_br35; assert_equal("Heroic Effort Scenario : EV penetration for buses is 44%, for cars is 35%, and for 2 wheelers is 53%.", worksheet.control_br35); end
  def test_control_d36; assert_equal("Domestic freight", worksheet.control_d36); end
  def test_control_d37; assert_equal("Freight Transport Demand", worksheet.control_d37); end
  def test_control_f37; assert_in_epsilon(4.0, worksheet.control_f37, 0.002); end
  def test_control_h37; assert_equal("Least Effort Scenario: With increasing economic wealth, the demand for white goods is also expected to grow, adding to the overall freight demand. All this would lead to an increase in the freight transport requirement from present levels to about 16,250 BTKMs by 2046-47.", worksheet.control_h37); end
  def test_control_i37; assert_equal("Determined Effort Scenario: Better planned markets and points of consumption, the freight traffic volumes are expected to reduce by 9% of  levels to reach 14,823 BTKM’s by 2046-47.  ", worksheet.control_i37); end
  def test_control_j37; assert_equal("Aggressive Effort Scenario: Planned industrial clusters along with optimized transport logistics serving commercial and industrial needs would help in reducing the total volume of freight traffic by about 13 per cent  to reach 14,110 BTKM’s by 2046-47. ", worksheet.control_j37); end
  def test_control_k37; assert_equal("Heroic Effort Scenario: Concentrated economic activity in the form of logistics parks, industrial clusters, and industrial centers would result in reduction in the average leads for freight transport on both rail and road. This would imply a reduction in volume of freight traffic by about 18 per cent over Level One by 2046-47 to reach 13, 397 BTKM’s by 2046-47.", worksheet.control_k37); end
  def test_control_bo37; assert_equal("Least Effort Scenario: with increasing economic wealth, the demand for white goods is also expected to grow, adding to the overall freight demand. All this would lead to an increase in the freight transport requirement from present levels to about 16,250 BTKMs by 2046-47.", worksheet.control_bo37); end
  def test_control_bp37; assert_equal("Determined Effort Scenario: better planned markets and points of consumption, the freight traffic volumes are expected to reduce by 9% of  levels to reach 14,823 BTKM’s by 2046-47.  ", worksheet.control_bp37); end
  def test_control_bq37; assert_equal("Aggressive Effort Scenario: Planned industrial clusters along with optimized transport logistics serving commercial and industrial needs would help in reducing the total volume of freight traffic by about 13 per cent  to reach 14,110 BTKM’s by 2046-47. ", worksheet.control_bq37); end
  def test_control_br37; assert_equal("Heroic Effort Scenario: Concentrated economic activity in the form of logistics parks, industrial clusters, and industrial centers would result in reduction in the average leads for freight transport on both rail and road. This would imply a reduction in volume of freight traffic by about 18 per cent over Level One by 2046-47 to reach 13, 397 BTKM’s by 2046-47.", worksheet.control_br37); end
  def test_control_d38; assert_equal("Freight Transport Mode", worksheet.control_d38); end
  def test_control_f38; assert_in_epsilon(4.0, worksheet.control_f38, 0.002); end
  def test_control_h38; assert_equal(" Least Effort Scenario : The share of road in India’s total freight traffic by 2046-47 will show a marked increase to 71%, and the share of rail will decline to 29%.  ", worksheet.control_h38); end
  def test_control_i38; assert_equal("Determined Effort Scenario: Railway freight transport will see a manifold increase in average speeds from 25 kmph to 50-60 kmph on the freight corridors. This would also be accompanied with tariff rationalization. Thus the trend of falling share of rail based transport is expected to get arrested at about 35% by 2046-47. ", worksheet.control_i38); end
  def test_control_j38; assert_equal("Aggressive Effort Scenario: Rationalization in the tariff regime of railway freight transport, coupled with increased speeds and a shift towards containerization would increase the share of the freight traffic on railways to 40% by 2046-47, with roads accounting for 60%.", worksheet.control_j38); end
  def test_control_k38; assert_equal("Heroic Effort Scenario: New technologies, such as RoadRailers (highway trailers that are specially equipped for intermodal movement on railway tracks and highways) would further help increase the inter-modal share of Railways to 44% by 2046-47.", worksheet.control_k38); end
  def test_control_bo38; assert_equal(" Least Effort Scenario : . The share of road in India’s total freight traffic by 2046-47 will show a marked increase to 71%, and the share of rail will decline to 29%.  ", worksheet.control_bo38); end
  def test_control_bp38; assert_equal("Determined Effort Scenario: Railway freight transport will see a manifold increase in average speeds from 25 kmph to 50-60 kmph on the freight corridors. This would also be accompanied with tariff rationalization. Thus the trend of falling share of rail based transport is expected to get arrested at about 35% by 2046-47. ", worksheet.control_bp38); end
  def test_control_bq38; assert_equal("Aggressive Effort Scenario: Rationalization in the tariff regime of railway freight transport, coupled with increased speeds and a shift towards containerization would increase the share of the freight traffic on railways to 40% by 2046-47, with roads accounting for 60%.", worksheet.control_bq38); end
  def test_control_br38; assert_equal("Heroic Effort Scenario: New technologies, such as RoadRailers (highway trailers that are specially equipped for intermodal movement on railway tracks and highways) would further help increase the inter-modal share of Railways to 44% by 2046-47.", worksheet.control_br38); end
  def test_control_d39; assert_equal("Household Cooking: Fuel Split", worksheet.control_d39); end
  def test_control_f39; assert_in_epsilon(4.0, worksheet.control_f39, 0.002); end
  def test_control_h39; assert_equal("Least Effort Scenario : Biomass decline in cooking continues as per past trends.  65% of Rural and 10% of urban households still use non-clean fuels.Efficiency of LPG and PNG cook stoves improve marginally by 3%, while the electricity ones improve by 2%.", worksheet.control_h39); end
  def test_control_i39; assert_equal("Determined Effort Scenario : More penetration of cleaner fuels with better implementation of LPG and Electriicty access programs of the government.  PNG access is made available to 2% of the rural households.  Urban areas use 50% PNG", worksheet.control_i39); end
  def test_control_j39; assert_equal("Aggressive Effort Scenario : Increased quality & service in rural areas leads to active adoption of electricity, LPG and PNG, with 17% of the households using electricity and 36 % LPG and 10% PNG. Urban areas use 63% PNG", worksheet.control_j39); end
  def test_control_k39; assert_equal("Heroic Effort Scenario : By 2047, 32% of the rural households use LPG and 22% depend on electricity. Only a quarter of rural households use biomass (mostly with clean cook-stoves) and PNG penetration has increased to 18%. Efficiency increase of the cookstoves is maximum", worksheet.control_k39); end
  def test_control_bo39; assert_equal("Least Effort Scenario : Biomass decline in cooking continues as per past trends.  65% of Rural and 10% of urban households still use non-clean fuels.Efficiency of LPG and PNG cook stoves improve marginally by 3%, while the electricity ones improve by 2%.", worksheet.control_bo39); end
  def test_control_bp39; assert_equal("Determined Effort Scenario : More penetration of cleaner fuels with better implementation of LPG and Electriicty access programs of the government.  PNG access is made available to 2% of the rural households.  Urban areas use 50% PNG", worksheet.control_bp39); end
  def test_control_bq39; assert_equal("Aggressive Effort Scenario : Increased quality & service in rural areas leads to active adoption of electricity, LPG and PNG, with 17% of the households using electricity and 36 % LPG and 10% PNG. Urban areas use 63% PNG", worksheet.control_bq39); end
  def test_control_br39; assert_equal("Heroic Effort Scenario : By 2047, 32% of the rural households use LPG and 22% depend on electricity. Only a quarter of rural households use biomass (mostly with clean cook-stoves) and PNG penetration has increased to 18%. Efficiency increase of the cookstoves is maximum", worksheet.control_br39); end
  def test_control_d40; assert_equal("Domestic lighting, appliances", worksheet.control_d40); end
  def test_control_d41; assert_equal("Effiiciency of Lighing Appliances", worksheet.control_d41); end
  def test_control_f41; assert_in_epsilon(4.0, worksheet.control_f41, 0.002); end
  def test_control_h41; assert_equal("Least Effort Scenario : Assumes only slight improvement in efficiency over 2007 levels. The usage hours of appliances are also high. ", worksheet.control_h41); end
  def test_control_i41; assert_equal("Determined Effort Scenario : Assumes 45% of the appliances have low efficiency while 38% have medium efficiency with balance 17% being high efficiency appliances. ", worksheet.control_i41); end
  def test_control_j41; assert_equal("Aggressive Effort Scenario : Assumes a 50% share of high efficiency appliances and a small 11% share of low efficiency and the balance being medium efficient.", worksheet.control_j41); end
  def test_control_k41; assert_equal("Heroic Effort Scenario : Assumes a complete market transformation to high efficiency appliances.   There is high public awareness on conservation, resulting in 90% of appliances being high efficiency, 9% being medium efficiency and 1% being low efficiency.", worksheet.control_k41); end
  def test_control_bo41; assert_equal("Least Effort Scenario : Assumes only slight improvement in efficiency over 2007 levels. The usage hours of appliances are also high. ", worksheet.control_bo41); end
  def test_control_bp41; assert_equal("Determined Effort Scenario : Assumes 45% of the appliances have low efficiency while 38% have medium efficiency with balance 17% being high efficiency appliances. ", worksheet.control_bp41); end
  def test_control_bq41; assert_equal("Aggressive Effort Scenario : Assumes a 50% share of high efficiency appliances and a small 11% share of low efficiency and the balance being medium efficient.", worksheet.control_bq41); end
  def test_control_br41; assert_equal("Heroic Effort Scenario : Assumes a complete market transformation to high efficiency appliances.   There is high public awareness on conservation, resulting in 90% of appliances being high efficiency, 9% being medium efficiency and 1% being low efficiency.", worksheet.control_br41); end
  def test_control_d42; assert_equal("Green Building Envelope Optmiztn-Households", worksheet.control_d42); end
  def test_control_f42; assert_in_epsilon(4.0, worksheet.control_f42, 0.002); end
  def test_control_h42; assert_equal("Least Effort Scenario : Assumes that compliance to the ECBC codes remains voluntary. Institutional, technological, informational and financial barriers also exist, which hinder the applicability of the same.", worksheet.control_h42); end
  def test_control_i42; assert_equal("Determined Effort Scenario : Assumes that the interventions for ECBC compliance and retrofitting of buildings still target the commercial sector and there are still no interventions targeting the residential sector.", worksheet.control_i42); end
  def test_control_j42; assert_equal("Aggressive Effort Scenario: Assumes that along with standard building bye laws, there is development of ECBC compliance structures at state level, and the modification of the EPI bandwidth based scheme to multi variable EPI scheme. ", worksheet.control_j42); end
  def test_control_k42; assert_equal("Heroic Effort Scenario : Assumes a continuation of the multi variable EPI scheme and increasing mandates in states for implementation of the ECBC code. It  assumes the development of a large retrofitting programme for commercial buildings. Further, this scenario assumes revisions in the code every 10 years increasing the energy savings. ", worksheet.control_k42); end
  def test_control_bo42; assert_equal("Least Effort Scenario : Assumes that compliance to the ECBC codes remains voluntary. Institutional, technological, informational and financial barriers also exist, which hinder the applicability of the same.", worksheet.control_bo42); end
  def test_control_bp42; assert_equal("Determined Effort Scenario : Assumes that the interventions for ECBC compliance and retrofitting of buildings still target the commercial sector and there are still no interventions targeting the residential sector.", worksheet.control_bp42); end
  def test_control_bq42; assert_equal("Aggressive Effort Scenario: Assumes that along with standard building bye laws, there is development of ECBC compliance structures at state level, and the modification of the EPI bandwidth based scheme to multi variable EPI scheme. ", worksheet.control_bq42); end
  def test_control_br42; assert_equal("Heroic Effort Scenario : Assumes a continuation of the multi variable EPI scheme and increasing mandates in states for implementation of the ECBC code. It  assumes the development of a large retrofitting programme for commercial buildings. Further, this scenario assumes revisions in the code every 10 years increasing the energy savings. ", worksheet.control_br42); end
  def test_control_d43; assert_equal("Energy intensity of industry", worksheet.control_d43); end
  def test_control_f43; assert_in_epsilon(4.0, worksheet.control_f43, 0.002); end
  def test_control_h43; assert_equal("Least Effort Scenario : Assumes no new Government policies, although one PAT cycle has been considered resulting in improvement in efficiency of specific units/ designated consumers (DCs) across various PAT sub-sectors.  ", worksheet.control_h43); end
  def test_control_i43; assert_equal("Determined Effort scenario: This scenario not only captures the PAT scheme as it currently stands, but also extends it such that it increases its coverage under the seven sectors. ", worksheet.control_i43); end
  def test_control_j43; assert_equal("Aggressive Effort Scenario: This scenario further increases the PAT coverage as indicated under the seven sectors.  The units not covered under PAT increase their efficiency across processes at rate of 20% of the efficiency improvement under PAT. ", worksheet.control_j43); end
  def test_control_k43; assert_equal("Heroic Effort Scenario: An optimistic scenario, which indicates the maximum improvement that can be achieved in the industry sector. Each industry sub sector is assumed to achieve the best level of efficiencies known today across processes.", worksheet.control_k43); end
  def test_control_bo43; assert_equal("Least Effort Scenario : Assumes no new Government policies, although one PAT cycle has been considered resulting in improvement in efficiency of specific units/ designated consumers (DCs) across various PAT sub-sectors.  ", worksheet.control_bo43); end
  def test_control_bp43; assert_equal("Determined Effort scenario: This scenario not only captures the PAT scheme as it currently stands, but also extends it such that it increases its coverage under the seven sectors. ", worksheet.control_bp43); end
  def test_control_bq43; assert_equal("Aggressive Effort Scenario: This scenario further increases the PAT coverage as indicated under the seven sectors.  The units not covered under PAT increase their efficiency across processes at rate of 20% of the efficiency improvement under PAT. ", worksheet.control_bq43); end
  def test_control_br43; assert_equal("Heroic Effort Scenario: An optimistic scenario, which indicates the maximum improvement that can be achieved in the industry sector. Each industry sub sector is assumed to achieve the best level of efficiencies known today across processes.", worksheet.control_br43); end
  def test_control_d44; assert_equal("Commercial Cooking: Fuel Split", worksheet.control_d44); end
  def test_control_f44; assert_in_epsilon(4.0, worksheet.control_f44, 0.002); end
  def test_control_h44; assert_equal("Least Effort Scenario : Commercial demand  expresses elasticity of 1 with GDP with 85% and 15% demand being met by LPG and PNG respectively.Cookstove efficiency increasing by 3%", worksheet.control_h44); end
  def test_control_i44; assert_equal("Determined Effort Scenario: Commercial demand  expresses elasticity of 0.9 with GDP with 63% and 37% demand being met by LPG and PNG respectively.Cookstove efficiency increases by 5%", worksheet.control_i44); end
  def test_control_j44; assert_equal("Aggressive Effort Scenario: Commercial demand  expresses elasticity of 0.8 with GDP with 50% and 50% demand being met by LPG and PNG respectively.Cookstove efficiency increases by 8%", worksheet.control_j44); end
  def test_control_k44; assert_equal("Heroic Effort Scenario: Commercial demand  expresses elasticity of 0.7 with GDP with 34% and 66% demand being met by LPG and PNG respectively. Cookstove efficiency increases by 10%", worksheet.control_k44); end
  def test_control_bo44; assert_equal("Least Effort Scenario : Commercial demand  expresses elasticity of 1 with GDP with 85% and 15% demand being met by LPG and PNG respectively.Cookstove efficiency increasing by 3%", worksheet.control_bo44); end
  def test_control_bp44; assert_equal("Determined Effort Scenario: Commercial demand  expresses elasticity of 0.9 with GDP with 63% and 37% demand being met by LPG and PNG respectively.Cookstove efficiency increases by 5%", worksheet.control_bp44); end
  def test_control_bq44; assert_equal("Aggressive Effort Scenario: Commercial demand  expresses elasticity of 0.8 with GDP with 50% and 50% demand being met by LPG and PNG respectively.Cookstove efficiency increases by 8%", worksheet.control_bq44); end
  def test_control_br44; assert_equal("Heroic Effort Scenario: Commercial demand  expresses elasticity of 0.7 with GDP with 34% and 66% demand being met by LPG and PNG respectively. Cookstove efficiency increases by 10%", worksheet.control_br44); end
  def test_control_d45; assert_equal("Commercial lighting and appliances", worksheet.control_d45); end
  def test_control_k45; assert_equal(" ", worksheet.control_k45); end
  def test_control_br45; assert_equal(" ", worksheet.control_br45); end
  def test_control_d46; assert_equal("Efficiency of Commercial Lighting & Appliances", worksheet.control_d46); end
  def test_control_f46; assert_in_epsilon(4.0, worksheet.control_f46, 0.002); end
  def test_control_h46; assert_equal("Least Effort Scenario : Assumes only slight improvement in efficiency over 2007 levels.", worksheet.control_h46); end
  def test_control_i46; assert_equal("Determined Effort Scenario : Assumes, in 2047, 45% of the appliances have low efficiency while 38% have medium efficiency with balance 17% being high efficiency appliances. ", worksheet.control_i46); end
  def test_control_j46; assert_equal("Aggressive Effort Scenario : Assumes a 50% share of high efficiency appliances and a small 11% share of low efficiency and the balance being medium efficient in 2047. ", worksheet.control_j46); end
  def test_control_k46; assert_equal("Heroic Effort Scenario : Assumes a complete market transformation to high efficiency appliances. ", worksheet.control_k46); end
  def test_control_bo46; assert_equal("Least Effort Scenario : Assumes only slight improvement in efficiency over 2007 levels.", worksheet.control_bo46); end
  def test_control_bp46; assert_equal("Determined Effort Scenario : Assumes, in 2047, 45% of the appliances have low efficiency while 38% have medium efficiency with balance 17% being high efficiency appliances. ", worksheet.control_bp46); end
  def test_control_bq46; assert_equal("Aggressive Effort Scenario : Assumes a 50% share of high efficiency appliances and a small 11% share of low efficiency and the balance being medium efficient in 2047. ", worksheet.control_bq46); end
  def test_control_br46; assert_equal("Heroic Effort Scenario : Assumes a complete market transformation to high efficiency appliances. ", worksheet.control_br46); end
  def test_control_d47; assert_equal("Green Building Envelope Optmiztn-Commercial Buildings", worksheet.control_d47); end
  def test_control_f47; assert_in_epsilon(4.0, worksheet.control_f47, 0.002); end
  def test_control_h47; assert_equal("Least Effort Scenario : Assumes that compliance to ECBC codes remains voluntary. Institutional, technological, informational and financial barriers also exist, which hinder the applicability of the same. ", worksheet.control_h47); end
  def test_control_i47; assert_equal("Determined Effort Scenario : Assumes, as per the Energy Conservation Act 2001, introduction of a bye law for ECBC compliance in new commercial buildings, and mandatory compliance in government buildings. It also assumes retrofits in the commercial sector.", worksheet.control_i47); end
  def test_control_j47; assert_equal("Aggressive Effort Scenario: Assumes that along with standard building bye laws, there is development of ECBC compliance structures at state level, and the modification of the EPI bandwidth based scheme to multi variable EPI scheme. ", worksheet.control_j47); end
  def test_control_k47; assert_equal("Heroic Effort Scenario : Assumes a continuation of the multi variable EPI scheme and increasing mandates in states for implementation of the ECBC code. It also assumes the development of a large retrofitting programme for commercial buildings. ", worksheet.control_k47); end
  def test_control_bo47; assert_equal("Least Effort Scenario : Assumes that compliance to ECBC codes remains voluntary. Institutional, technological, informational and financial barriers also exist, which hinder the applicability of the same. ", worksheet.control_bo47); end
  def test_control_bp47; assert_equal("Determined Effort Scenario : Assumes, as per the Energy Conservation Act 2001, introduction of a bye law for ECBC compliance in new commercial buildings, and mandatory compliance in government buildings. It also assumes retrofits in the commercial sector.", worksheet.control_bp47); end
  def test_control_bq47; assert_equal("Aggressive Effort Scenario: Assumes that along with standard building bye laws, there is development of ECBC compliance structures at state level, and the modification of the EPI bandwidth based scheme to multi variable EPI scheme. ", worksheet.control_bq47); end
  def test_control_br47; assert_equal("Heroic Effort Scenario : Assumes a continuation of the multi variable EPI scheme and increasing mandates in states for implementation of the ECBC code. It also assumes the development of a large retrofitting programme for commercial buildings. ", worksheet.control_br47); end
  def test_control_d48; assert_equal("Energy Demand for Agriculture", worksheet.control_d48); end
  def test_control_d49; assert_equal("Energy Demand for Pumps and Tractors", worksheet.control_d49); end
  def test_control_f49; assert_in_epsilon(4.0, worksheet.control_f49, 0.002); end
  def test_control_h49; assert_equal("Least Effort Scenario : The demand for mechanization is high due to shortage of farm labour and increased size of land holdings, favourable economics versus animal labour, opportunities for renting out, and favourable policy landscape. ", worksheet.control_h49); end
  def test_control_i49; assert_equal("Determined Effort Scenario : The demand for mechanization grows steadily as availability of farm labour and cost of labour increase. Demand grows by 5.5% and average hours of use reduce to 500 hours from Level 1. ", worksheet.control_i49); end
  def test_control_j49; assert_equal("Aggressive Effort Scenario : Tractor demand grows by 5% as the shift of labour from agriculture is not as rapid, and proportion of land under small and marginal farmer’s increases. Fuel efficiency further improves, with only 3.5 litres needed to run for an hour.", worksheet.control_j49); end
  def test_control_k49; assert_equal("Heroic Effort Scenario : Assumes that fuel efficiency of tractors improves significantly, resulting in fuel savings of 33%. The demand grows still slower at 4.5% due to relatively unfavourable environment for mechanisation. ", worksheet.control_k49); end
  def test_control_bo49; assert_equal("Least Effort Scenario : The demand for mechanization is high due to shortage of farm labour and increased size of land holdings, favourable economics versus animal labour, opportunities for renting out, and favourable policy landscape. ", worksheet.control_bo49); end
  def test_control_bp49; assert_equal("Determined Effort Scenario : The demand for mechanization grows steadily as availability of farm labour and cost of labour increase. Demand grows by 5.5% and average hours of use reduce to 500 hours from Level 1. ", worksheet.control_bp49); end
  def test_control_bq49; assert_equal("Aggressive Effort Scenario : Tractor demand grows by 5% as the shift of labour from agriculture is not as rapid, and proportion of land under small and marginal farmer’s increases. Fuel efficiency further improves, with only 3.5 litres needed to run for an hour.", worksheet.control_bq49); end
  def test_control_br49; assert_equal("Heroic Effort Scenario : Assumes that fuel efficiency of tractors improves significantly, resulting in fuel savings of 33%. The demand grows still slower at 4.5% due to relatively unfavourable environment for mechanisation. ", worksheet.control_br49); end
  def test_control_d50; assert_equal("Fuel Split for Pumps", worksheet.control_d50); end
  def test_control_f50; assert_in_epsilon(4.0, worksheet.control_f50, 0.002); end
  def test_control_h50; assert_equal("Least Effort Scenario : Diesel is used to satisfy about 20% of the total irrigation demand due to unreliability of electricity supply, and deceleration in the growth of pump-sets energised from the grid. Solar pumping remains too expensive to be used. ", worksheet.control_h50); end
  def test_control_i50; assert_equal("Determined Effort Scenario : 85% of the demand is met through electricity and diesel use is restricted to 10% of the total pumping requirementSolar penetration reaches 5% in regions with rich solar insolation.  ", worksheet.control_i50); end
  def test_control_j50; assert_equal("Aggressive Effort Scenario : Diesel and electrical shares further reduce by 5 percentage points from level B, and solar is benefitted through large-scale pilot projects, retrofitting and partial removal of fuel subsidies to agriculture sector. ", worksheet.control_j50); end
  def test_control_k50; assert_equal("Heroic Effort Scenario : Diesel is no longer a preferred fuel source due to unfavourable life-cycle economics in level D. 75% of demand is met through electricity and 25% through solar, owing to rapid decline in solar PV module costs and complete removal of electricity subsidies.", worksheet.control_k50); end
  def test_control_bo50; assert_equal("Least Effort Scenario : Diesel is used to satisfy about 20% of the total irrigation demand due to unreliability of electricity supply, and deceleration in the growth of pump-sets energised from the grid. Solar pumping remains too expensive to be used. ", worksheet.control_bo50); end
  def test_control_bp50; assert_equal("Determined Effort Scenario : 85% of the demand is met through electricity and diesel use is restricted to 10% of the total pumping requirementSolar penetration reaches 5% in regions with rich solar insolation.  ", worksheet.control_bp50); end
  def test_control_bq50; assert_equal("Aggressive Effort Scenario : Diesel and electrical shares further reduce by 5 percentage points from level B, and solar is benefitted through large-scale pilot projects, retrofitting and partial removal of fuel subsidies to agriculture sector. ", worksheet.control_bq50); end
  def test_control_br50; assert_equal("Heroic Effort Scenario : Diesel is no longer a preferred fuel source due to unfavourable life-cycle economics in level D. 75% of demand is met through electricity and 25% through solar, owing to rapid decline in solar PV module costs and complete removal of electricity subsidies.", worksheet.control_br50); end
  def test_control_d51; assert_equal("Shift to Electricity from Diesel for Telecom Towers", worksheet.control_d51); end
  def test_control_f51; assert_in_epsilon(4.0, worksheet.control_f51, 0.002); end
  def test_control_h51; assert_equal("Least Effort Scenario : We assume that no regulations have been enforced and the present scenario continues. Therefore, diesel meets significant proportion (16.67%) of total energy demand required by the telecom towers.", worksheet.control_h51); end
  def test_control_i51; assert_equal("Determined Effort Scenario : We assume that telecom towers will be backed up by diesel and renewables such as solar panels, biomass energy, fuel cells, biogas.", worksheet.control_i51); end
  def test_control_j51; assert_equal("Aggressive Effort Scenario : A positive scenario is represented by this level where all government regulations are met and assumes full electrification of the country. Telecom towers run on grid supply and renewables only in both urban and rural areas. ", worksheet.control_j51); end
  def test_control_k51; assert_equal("Heroic Effort Scenario : It is the most optimistic scenario where we assume that the dependence on grid supply system has reduced. Diesel free telecom sector target is met by 2032. ", worksheet.control_k51); end
  def test_control_bo51; assert_equal("Least Effort Scenario : We assume that no regulations have been enforced and the present scenario continues. Therefore, diesel meets significant proportion (16.67%) of total energy demand required by the telecom towers.", worksheet.control_bo51); end
  def test_control_bp51; assert_equal("Determined Effort Scenario : We assume that telecom towers will be backed up by diesel and renewables such as solar panels, biomass energy, fuel cells, biogas.", worksheet.control_bp51); end
  def test_control_bq51; assert_equal("Aggressive Effort Scenario : A positive scenario is represented by this level where all government regulations are met and assumes full electrification of the country. Telecom towers run on grid supply and renewables only in both urban and rural areas. ", worksheet.control_bq51); end
  def test_control_br51; assert_equal("Heroic Effort Scenario : It is the most optimistic scenario where we assume that the dependence on grid supply system has reduced. Diesel free telecom sector target is met by 2032. ", worksheet.control_br51); end
  def test_control_d53; assert_equal("T&D  Losses", worksheet.control_d53); end
  def test_control_f53; assert_in_epsilon(4.0, worksheet.control_f53, 0.002); end
  def test_control_h53; assert_equal("Least Effort Scenario : Only a marginal improvement in T&D losses is assumed.", worksheet.control_h53); end
  def test_control_i53; assert_equal("Determined Effort Scenario: A pan India large-scale deployment of Smart Grid technologies is assumed to happen at a relatively slow pace.", worksheet.control_i53); end
  def test_control_j53; assert_equal("Aggressive Effort Scenario: Building on the success of the pilot projects, various technologies are leveraged under a clean energy policy drive to achieve financially viable and sustainable Smart Grids. ", worksheet.control_j53); end
  def test_control_k53; assert_equal("Heroic Effort Scenario: Reforms in the electricity sector are carried out via elimination of cross-subsidies, innovative and competitive tariff structures, increased private participation in electricity business, electric vehicles, real-time energy markets, bi-directional flow of electricity and prosumer enablement.", worksheet.control_k53); end
  def test_control_bo53; assert_equal("Least Effort Scenario : Only a marginal improvement in T&D losses is assumed.", worksheet.control_bo53); end
  def test_control_bp53; assert_equal("Determined Effort Scenario: A pan India large-scale deployment of Smart Grid technologies is assumed to happen at a relatively slow pace.", worksheet.control_bp53); end
  def test_control_bq53; assert_equal("Aggressive Effort Scenario: Building on the success of the pilot projects, various technologies are leveraged under a clean energy policy drive to achieve financially viable and sustainable Smart Grids. ", worksheet.control_bq53); end
  def test_control_br53; assert_equal("Heroic Effort Scenario: Reforms in the electricity sector are carried out via elimination of cross-subsidies, innovative and competitive tariff structures, increased private participation in electricity business, electric vehicles, real-time energy markets, bi-directional flow of electricity and prosumer enablement.", worksheet.control_br53); end
  def test_control_m1; assert_equal("Version 1.0.6", worksheet.control_m1); end
  def test_control_m4; assert_equal("Least Effort Scenario (All at level 1)", worksheet.control_m4); end
  def test_control_m5; assert_in_delta(1.0, worksheet.control_m5, 0.002); end
  def test_control_m7; assert_in_delta(1.0, worksheet.control_m7, 0.002); end
  def test_control_m8; assert_in_delta(1.0, worksheet.control_m8, 0.002); end
  def test_control_m10; assert_in_delta(1.0, worksheet.control_m10, 0.002); end
  def test_control_m11; assert_in_delta(1.0, worksheet.control_m11, 0.002); end
  def test_control_m12; assert_in_delta(1.0, worksheet.control_m12, 0.002); end
  def test_control_m13; assert_in_delta(1.0, worksheet.control_m13, 0.002); end
  def test_control_m14; assert_in_delta(1.0, worksheet.control_m14, 0.002); end
  def test_control_m15; assert_in_delta(1.0, worksheet.control_m15, 0.002); end
  def test_control_m16; assert_in_delta(1.0, worksheet.control_m16, 0.002); end
  def test_control_m17; assert_in_delta(1.0, worksheet.control_m17, 0.002); end
  def test_control_m18; assert_in_delta(1.0, worksheet.control_m18, 0.002); end
  def test_control_m19; assert_in_delta(1.0, worksheet.control_m19, 0.002); end
  def test_control_m21; assert_in_delta(1.0, worksheet.control_m21, 0.002); end
  def test_control_m22; assert_in_delta(1.0, worksheet.control_m22, 0.002); end
  def test_control_m23; assert_in_delta(1.0, worksheet.control_m23, 0.002); end
  def test_control_m24; assert_in_delta(1.0, worksheet.control_m24, 0.002); end
  def test_control_m25; assert_in_delta(1.0, worksheet.control_m25, 0.002); end
  def test_control_m27; assert_in_delta(1.0, worksheet.control_m27, 0.002); end
  def test_control_m28; assert_in_delta(1.0, worksheet.control_m28, 0.002); end
  def test_control_m29; assert_in_delta(1.0, worksheet.control_m29, 0.002); end
  def test_control_m32; assert_in_delta(1.0, worksheet.control_m32, 0.002); end
  def test_control_m33; assert_in_delta(1.0, worksheet.control_m33, 0.002); end
  def test_control_m34; assert_in_delta(1.0, worksheet.control_m34, 0.002); end
  def test_control_m35; assert_in_delta(1.0, worksheet.control_m35, 0.002); end
  def test_control_m37; assert_in_delta(1.0, worksheet.control_m37, 0.002); end
  def test_control_m38; assert_in_delta(1.0, worksheet.control_m38, 0.002); end
  def test_control_m39; assert_in_delta(1.0, worksheet.control_m39, 0.002); end
  def test_control_m41; assert_in_delta(1.0, worksheet.control_m41, 0.002); end
  def test_control_m42; assert_in_delta(1.0, worksheet.control_m42, 0.002); end
  def test_control_m43; assert_in_delta(1.0, worksheet.control_m43, 0.002); end
  def test_control_m44; assert_in_delta(1.0, worksheet.control_m44, 0.002); end
  def test_control_m46; assert_in_delta(1.0, worksheet.control_m46, 0.002); end
  def test_control_m47; assert_in_delta(1.0, worksheet.control_m47, 0.002); end
  def test_control_m49; assert_in_delta(1.0, worksheet.control_m49, 0.002); end
  def test_control_m50; assert_in_delta(1.0, worksheet.control_m50, 0.002); end
  def test_control_m51; assert_in_delta(1.0, worksheet.control_m51, 0.002); end
  def test_control_m53; assert_in_delta(1.0, worksheet.control_m53, 0.002); end
  def test_control_n4; assert_equal("Heroic Effort Scenario (All Level 4s)", worksheet.control_n4); end
  def test_control_n5; assert_in_epsilon(4.0, worksheet.control_n5, 0.002); end
  def test_control_n7; assert_in_epsilon(4.0, worksheet.control_n7, 0.002); end
  def test_control_n8; assert_in_epsilon(4.0, worksheet.control_n8, 0.002); end
  def test_control_n10; assert_in_epsilon(4.0, worksheet.control_n10, 0.002); end
  def test_control_n11; assert_in_epsilon(4.0, worksheet.control_n11, 0.002); end
  def test_control_n12; assert_in_epsilon(4.0, worksheet.control_n12, 0.002); end
  def test_control_n13; assert_in_epsilon(4.0, worksheet.control_n13, 0.002); end
  def test_control_n14; assert_in_epsilon(4.0, worksheet.control_n14, 0.002); end
  def test_control_n15; assert_in_epsilon(4.0, worksheet.control_n15, 0.002); end
  def test_control_n16; assert_in_epsilon(4.0, worksheet.control_n16, 0.002); end
  def test_control_n17; assert_in_epsilon(4.0, worksheet.control_n17, 0.002); end
  def test_control_n18; assert_in_epsilon(4.0, worksheet.control_n18, 0.002); end
  def test_control_n19; assert_in_epsilon(4.0, worksheet.control_n19, 0.002); end
  def test_control_n21; assert_in_epsilon(4.0, worksheet.control_n21, 0.002); end
  def test_control_n22; assert_in_epsilon(4.0, worksheet.control_n22, 0.002); end
  def test_control_n23; assert_in_epsilon(4.0, worksheet.control_n23, 0.002); end
  def test_control_n24; assert_in_epsilon(4.0, worksheet.control_n24, 0.002); end
  def test_control_n25; assert_in_epsilon(4.0, worksheet.control_n25, 0.002); end
  def test_control_n27; assert_in_epsilon(4.0, worksheet.control_n27, 0.002); end
  def test_control_n28; assert_in_epsilon(4.0, worksheet.control_n28, 0.002); end
  def test_control_n29; assert_in_epsilon(4.0, worksheet.control_n29, 0.002); end
  def test_control_n32; assert_in_epsilon(4.0, worksheet.control_n32, 0.002); end
  def test_control_n33; assert_in_epsilon(4.0, worksheet.control_n33, 0.002); end
  def test_control_n34; assert_in_epsilon(4.0, worksheet.control_n34, 0.002); end
  def test_control_n35; assert_in_epsilon(4.0, worksheet.control_n35, 0.002); end
  def test_control_n37; assert_in_epsilon(4.0, worksheet.control_n37, 0.002); end
  def test_control_n38; assert_in_epsilon(4.0, worksheet.control_n38, 0.002); end
  def test_control_n39; assert_in_epsilon(4.0, worksheet.control_n39, 0.002); end
  def test_control_n41; assert_in_epsilon(4.0, worksheet.control_n41, 0.002); end
  def test_control_n42; assert_in_epsilon(4.0, worksheet.control_n42, 0.002); end
  def test_control_n43; assert_in_epsilon(4.0, worksheet.control_n43, 0.002); end
  def test_control_n44; assert_in_epsilon(4.0, worksheet.control_n44, 0.002); end
  def test_control_n46; assert_in_epsilon(4.0, worksheet.control_n46, 0.002); end
  def test_control_n47; assert_in_epsilon(4.0, worksheet.control_n47, 0.002); end
  def test_control_n49; assert_in_epsilon(4.0, worksheet.control_n49, 0.002); end
  def test_control_n50; assert_in_epsilon(4.0, worksheet.control_n50, 0.002); end
  def test_control_n51; assert_in_epsilon(4.0, worksheet.control_n51, 0.002); end
  def test_control_n53; assert_in_epsilon(4.0, worksheet.control_n53, 0.002); end
  def test_control_o4; assert_equal("Aggressive Effort Scenario (All Level 3s)", worksheet.control_o4); end
  def test_control_o5; assert_in_epsilon(3.0, worksheet.control_o5, 0.002); end
  def test_control_o7; assert_in_epsilon(3.0, worksheet.control_o7, 0.002); end
  def test_control_o8; assert_in_epsilon(3.0, worksheet.control_o8, 0.002); end
  def test_control_o10; assert_in_epsilon(3.0, worksheet.control_o10, 0.002); end
  def test_control_o11; assert_in_epsilon(3.0, worksheet.control_o11, 0.002); end
  def test_control_o12; assert_in_epsilon(3.0, worksheet.control_o12, 0.002); end
  def test_control_o13; assert_in_epsilon(3.0, worksheet.control_o13, 0.002); end
  def test_control_o14; assert_in_epsilon(3.0, worksheet.control_o14, 0.002); end
  def test_control_o15; assert_in_epsilon(3.0, worksheet.control_o15, 0.002); end
  def test_control_o16; assert_in_epsilon(3.0, worksheet.control_o16, 0.002); end
  def test_control_o17; assert_in_epsilon(3.0, worksheet.control_o17, 0.002); end
  def test_control_o18; assert_in_epsilon(3.0, worksheet.control_o18, 0.002); end
  def test_control_o19; assert_in_epsilon(3.0, worksheet.control_o19, 0.002); end
  def test_control_o21; assert_in_epsilon(3.0, worksheet.control_o21, 0.002); end
  def test_control_o22; assert_in_epsilon(3.0, worksheet.control_o22, 0.002); end
  def test_control_o23; assert_in_epsilon(3.0, worksheet.control_o23, 0.002); end
  def test_control_o24; assert_in_epsilon(3.0, worksheet.control_o24, 0.002); end
  def test_control_o25; assert_in_epsilon(3.0, worksheet.control_o25, 0.002); end
  def test_control_o27; assert_in_epsilon(3.0, worksheet.control_o27, 0.002); end
  def test_control_o28; assert_in_epsilon(3.0, worksheet.control_o28, 0.002); end
  def test_control_o29; assert_in_epsilon(3.0, worksheet.control_o29, 0.002); end
  def test_control_o32; assert_in_epsilon(3.0, worksheet.control_o32, 0.002); end
  def test_control_o33; assert_in_epsilon(3.0, worksheet.control_o33, 0.002); end
  def test_control_o34; assert_in_epsilon(3.0, worksheet.control_o34, 0.002); end
  def test_control_o35; assert_in_epsilon(3.0, worksheet.control_o35, 0.002); end
  def test_control_o37; assert_in_epsilon(3.0, worksheet.control_o37, 0.002); end
  def test_control_o38; assert_in_epsilon(3.0, worksheet.control_o38, 0.002); end
  def test_control_o39; assert_in_epsilon(3.0, worksheet.control_o39, 0.002); end
  def test_control_o41; assert_in_epsilon(3.0, worksheet.control_o41, 0.002); end
  def test_control_o42; assert_in_epsilon(3.0, worksheet.control_o42, 0.002); end
  def test_control_o43; assert_in_epsilon(3.0, worksheet.control_o43, 0.002); end
  def test_control_o44; assert_in_epsilon(3.0, worksheet.control_o44, 0.002); end
  def test_control_o46; assert_in_epsilon(3.0, worksheet.control_o46, 0.002); end
  def test_control_o47; assert_in_epsilon(3.0, worksheet.control_o47, 0.002); end
  def test_control_o49; assert_in_epsilon(3.0, worksheet.control_o49, 0.002); end
  def test_control_o50; assert_in_epsilon(3.0, worksheet.control_o50, 0.002); end
  def test_control_o51; assert_in_epsilon(3.0, worksheet.control_o51, 0.002); end
  def test_control_o53; assert_in_epsilon(3.0, worksheet.control_o53, 0.002); end
  def test_control_p4; assert_equal("Determined Effort Scenario (All Level 2s)", worksheet.control_p4); end
  def test_control_p5; assert_in_epsilon(2.0, worksheet.control_p5, 0.002); end
  def test_control_p7; assert_in_epsilon(2.0, worksheet.control_p7, 0.002); end
  def test_control_p8; assert_in_epsilon(2.0, worksheet.control_p8, 0.002); end
  def test_control_p10; assert_in_epsilon(2.0, worksheet.control_p10, 0.002); end
  def test_control_p11; assert_in_epsilon(2.0, worksheet.control_p11, 0.002); end
  def test_control_p12; assert_in_epsilon(2.0, worksheet.control_p12, 0.002); end
  def test_control_p13; assert_in_epsilon(2.0, worksheet.control_p13, 0.002); end
  def test_control_p14; assert_in_epsilon(2.0, worksheet.control_p14, 0.002); end
  def test_control_p15; assert_in_epsilon(2.0, worksheet.control_p15, 0.002); end
  def test_control_p16; assert_in_epsilon(2.0, worksheet.control_p16, 0.002); end
  def test_control_p17; assert_in_epsilon(2.0, worksheet.control_p17, 0.002); end
  def test_control_p18; assert_in_epsilon(2.0, worksheet.control_p18, 0.002); end
  def test_control_p19; assert_in_epsilon(2.0, worksheet.control_p19, 0.002); end
  def test_control_p21; assert_in_epsilon(2.0, worksheet.control_p21, 0.002); end
  def test_control_p22; assert_in_epsilon(2.0, worksheet.control_p22, 0.002); end
  def test_control_p23; assert_in_epsilon(2.0, worksheet.control_p23, 0.002); end
  def test_control_p24; assert_in_epsilon(2.0, worksheet.control_p24, 0.002); end
  def test_control_p25; assert_in_epsilon(2.0, worksheet.control_p25, 0.002); end
  def test_control_p27; assert_in_epsilon(2.0, worksheet.control_p27, 0.002); end
  def test_control_p28; assert_in_epsilon(2.0, worksheet.control_p28, 0.002); end
  def test_control_p29; assert_in_epsilon(2.0, worksheet.control_p29, 0.002); end
  def test_control_p32; assert_in_epsilon(2.0, worksheet.control_p32, 0.002); end
  def test_control_p33; assert_in_epsilon(2.0, worksheet.control_p33, 0.002); end
  def test_control_p34; assert_in_epsilon(2.0, worksheet.control_p34, 0.002); end
  def test_control_p35; assert_in_epsilon(2.0, worksheet.control_p35, 0.002); end
  def test_control_p37; assert_in_epsilon(2.0, worksheet.control_p37, 0.002); end
  def test_control_p38; assert_in_epsilon(2.0, worksheet.control_p38, 0.002); end
  def test_control_p39; assert_in_epsilon(2.0, worksheet.control_p39, 0.002); end
  def test_control_p41; assert_in_epsilon(2.0, worksheet.control_p41, 0.002); end
  def test_control_p42; assert_in_epsilon(2.0, worksheet.control_p42, 0.002); end
  def test_control_p43; assert_in_epsilon(2.0, worksheet.control_p43, 0.002); end
  def test_control_p44; assert_in_epsilon(2.0, worksheet.control_p44, 0.002); end
  def test_control_p46; assert_in_epsilon(2.0, worksheet.control_p46, 0.002); end
  def test_control_p47; assert_in_epsilon(2.0, worksheet.control_p47, 0.002); end
  def test_control_p49; assert_in_epsilon(2.0, worksheet.control_p49, 0.002); end
  def test_control_p50; assert_in_epsilon(2.0, worksheet.control_p50, 0.002); end
  def test_control_p51; assert_in_epsilon(2.0, worksheet.control_p51, 0.002); end
  def test_control_p53; assert_in_epsilon(2.0, worksheet.control_p53, 0.002); end
  def test_control_q4; assert_equal("Maximum Energy Security (Heroic Effort in Demand Sectors)", worksheet.control_q4); end
  def test_control_q5; assert_in_epsilon(2.0, worksheet.control_q5, 0.002); end
  def test_control_q7; assert_in_epsilon(2.0, worksheet.control_q7, 0.002); end
  def test_control_q8; assert_in_epsilon(4.0, worksheet.control_q8, 0.002); end
  def test_control_q10; assert_in_delta(1.0, worksheet.control_q10, 0.002); end
  def test_control_q11; assert_in_epsilon(4.0, worksheet.control_q11, 0.002); end
  def test_control_q12; assert_in_epsilon(2.0, worksheet.control_q12, 0.002); end
  def test_control_q13; assert_in_epsilon(2.0, worksheet.control_q13, 0.002); end
  def test_control_q14; assert_in_epsilon(2.0, worksheet.control_q14, 0.002); end
  def test_control_q15; assert_in_epsilon(2.0, worksheet.control_q15, 0.002); end
  def test_control_q16; assert_in_epsilon(2.0, worksheet.control_q16, 0.002); end
  def test_control_q17; assert_in_epsilon(2.0, worksheet.control_q17, 0.002); end
  def test_control_q18; assert_in_epsilon(2.0, worksheet.control_q18, 0.002); end
  def test_control_q19; assert_in_delta(1.0, worksheet.control_q19, 0.002); end
  def test_control_q21; assert_in_epsilon(4.0, worksheet.control_q21, 0.002); end
  def test_control_q22; assert_in_epsilon(4.0, worksheet.control_q22, 0.002); end
  def test_control_q23; assert_in_epsilon(4.0, worksheet.control_q23, 0.002); end
  def test_control_q24; assert_in_epsilon(4.0, worksheet.control_q24, 0.002); end
  def test_control_q25; assert_in_epsilon(4.0, worksheet.control_q25, 0.002); end
  def test_control_q27; assert_in_epsilon(4.0, worksheet.control_q27, 0.002); end
  def test_control_q28; assert_in_epsilon(4.0, worksheet.control_q28, 0.002); end
  def test_control_q29; assert_in_epsilon(4.0, worksheet.control_q29, 0.002); end
  def test_control_q32; assert_in_epsilon(4.0, worksheet.control_q32, 0.002); end
  def test_control_q33; assert_in_epsilon(4.0, worksheet.control_q33, 0.002); end
  def test_control_q34; assert_in_epsilon(4.0, worksheet.control_q34, 0.002); end
  def test_control_q35; assert_in_epsilon(4.0, worksheet.control_q35, 0.002); end
  def test_control_q37; assert_in_epsilon(4.0, worksheet.control_q37, 0.002); end
  def test_control_q38; assert_in_epsilon(4.0, worksheet.control_q38, 0.002); end
  def test_control_q39; assert_in_epsilon(4.0, worksheet.control_q39, 0.002); end
  def test_control_q41; assert_in_epsilon(4.0, worksheet.control_q41, 0.002); end
  def test_control_q42; assert_in_epsilon(4.0, worksheet.control_q42, 0.002); end
  def test_control_q43; assert_in_epsilon(4.0, worksheet.control_q43, 0.002); end
  def test_control_q44; assert_in_epsilon(4.0, worksheet.control_q44, 0.002); end
  def test_control_q46; assert_in_epsilon(4.0, worksheet.control_q46, 0.002); end
  def test_control_q47; assert_in_epsilon(4.0, worksheet.control_q47, 0.002); end
  def test_control_q49; assert_in_epsilon(4.0, worksheet.control_q49, 0.002); end
  def test_control_q50; assert_in_epsilon(4.0, worksheet.control_q50, 0.002); end
  def test_control_q51; assert_in_epsilon(4.0, worksheet.control_q51, 0.002); end
  def test_control_q53; assert_in_epsilon(4.0, worksheet.control_q53, 0.002); end
  def test_control_r4; assert_equal("Minimum Emissions Pathway", worksheet.control_r4); end
  def test_control_r5; assert_in_delta(1.0, worksheet.control_r5, 0.002); end
  def test_control_r7; assert_in_delta(1.0, worksheet.control_r7, 0.002); end
  def test_control_r8; assert_in_epsilon(4.0, worksheet.control_r8, 0.002); end
  def test_control_r10; assert_in_epsilon(2.0, worksheet.control_r10, 0.002); end
  def test_control_r11; assert_in_epsilon(4.0, worksheet.control_r11, 0.002); end
  def test_control_r12; assert_in_epsilon(3.0, worksheet.control_r12, 0.002); end
  def test_control_r13; assert_in_epsilon(3.0, worksheet.control_r13, 0.002); end
  def test_control_r14; assert_in_epsilon(4.0, worksheet.control_r14, 0.002); end
  def test_control_r15; assert_in_epsilon(3.0, worksheet.control_r15, 0.002); end
  def test_control_r16; assert_in_epsilon(4.0, worksheet.control_r16, 0.002); end
  def test_control_r17; assert_in_epsilon(3.0, worksheet.control_r17, 0.002); end
  def test_control_r18; assert_in_epsilon(3.0, worksheet.control_r18, 0.002); end
  def test_control_r19; assert_in_delta(1.0, worksheet.control_r19, 0.002); end
  def test_control_r21; assert_in_epsilon(4.0, worksheet.control_r21, 0.002); end
  def test_control_r22; assert_in_epsilon(4.0, worksheet.control_r22, 0.002); end
  def test_control_r23; assert_in_epsilon(4.0, worksheet.control_r23, 0.002); end
  def test_control_r24; assert_in_epsilon(4.0, worksheet.control_r24, 0.002); end
  def test_control_r25; assert_in_epsilon(4.0, worksheet.control_r25, 0.002); end
  def test_control_r27; assert_in_epsilon(4.0, worksheet.control_r27, 0.002); end
  def test_control_r28; assert_in_epsilon(4.0, worksheet.control_r28, 0.002); end
  def test_control_r29; assert_in_epsilon(4.0, worksheet.control_r29, 0.002); end
  def test_control_r32; assert_in_epsilon(4.0, worksheet.control_r32, 0.002); end
  def test_control_r33; assert_in_epsilon(4.0, worksheet.control_r33, 0.002); end
  def test_control_r34; assert_in_epsilon(4.0, worksheet.control_r34, 0.002); end
  def test_control_r35; assert_in_epsilon(4.0, worksheet.control_r35, 0.002); end
  def test_control_r37; assert_in_epsilon(4.0, worksheet.control_r37, 0.002); end
  def test_control_r38; assert_in_epsilon(4.0, worksheet.control_r38, 0.002); end
  def test_control_r39; assert_in_epsilon(4.0, worksheet.control_r39, 0.002); end
  def test_control_r41; assert_in_epsilon(4.0, worksheet.control_r41, 0.002); end
  def test_control_r42; assert_in_epsilon(4.0, worksheet.control_r42, 0.002); end
  def test_control_r43; assert_in_epsilon(4.0, worksheet.control_r43, 0.002); end
  def test_control_r44; assert_in_epsilon(4.0, worksheet.control_r44, 0.002); end
  def test_control_r46; assert_in_epsilon(4.0, worksheet.control_r46, 0.002); end
  def test_control_r47; assert_in_epsilon(4.0, worksheet.control_r47, 0.002); end
  def test_control_r49; assert_in_epsilon(4.0, worksheet.control_r49, 0.002); end
  def test_control_r50; assert_in_epsilon(4.0, worksheet.control_r50, 0.002); end
  def test_control_r51; assert_in_epsilon(4.0, worksheet.control_r51, 0.002); end
  def test_control_r53; assert_in_epsilon(4.0, worksheet.control_r53, 0.002); end
  def test_control_s4; assert_equal("Max Energy Security (Determined Effort in Demand Sectors)", worksheet.control_s4); end
  def test_control_s5; assert_in_epsilon(2.0, worksheet.control_s5, 0.002); end
  def test_control_s7; assert_in_epsilon(2.0, worksheet.control_s7, 0.002); end
  def test_control_s8; assert_in_epsilon(4.0, worksheet.control_s8, 0.002); end
  def test_control_s10; assert_in_delta(1.0, worksheet.control_s10, 0.002); end
  def test_control_s11; assert_in_epsilon(4.0, worksheet.control_s11, 0.002); end
  def test_control_s12; assert_in_epsilon(2.0, worksheet.control_s12, 0.002); end
  def test_control_s13; assert_in_epsilon(2.0, worksheet.control_s13, 0.002); end
  def test_control_s14; assert_in_epsilon(4.0, worksheet.control_s14, 0.002); end
  def test_control_s15; assert_in_epsilon(3.0, worksheet.control_s15, 0.002); end
  def test_control_s16; assert_in_epsilon(3.0, worksheet.control_s16, 0.002); end
  def test_control_s17; assert_in_epsilon(3.0, worksheet.control_s17, 0.002); end
  def test_control_s18; assert_in_epsilon(3.0, worksheet.control_s18, 0.002); end
  def test_control_s19; assert_in_delta(1.0, worksheet.control_s19, 0.002); end
  def test_control_s21; assert_in_epsilon(4.0, worksheet.control_s21, 0.002); end
  def test_control_s22; assert_in_epsilon(4.0, worksheet.control_s22, 0.002); end
  def test_control_s23; assert_in_epsilon(4.0, worksheet.control_s23, 0.002); end
  def test_control_s24; assert_in_epsilon(4.0, worksheet.control_s24, 0.002); end
  def test_control_s25; assert_in_epsilon(4.0, worksheet.control_s25, 0.002); end
  def test_control_s27; assert_in_epsilon(4.0, worksheet.control_s27, 0.002); end
  def test_control_s28; assert_in_epsilon(4.0, worksheet.control_s28, 0.002); end
  def test_control_s29; assert_in_epsilon(4.0, worksheet.control_s29, 0.002); end
  def test_control_s32; assert_in_epsilon(2.0, worksheet.control_s32, 0.002); end
  def test_control_s33; assert_in_epsilon(2.0, worksheet.control_s33, 0.002); end
  def test_control_s34; assert_in_epsilon(2.0, worksheet.control_s34, 0.002); end
  def test_control_s35; assert_in_epsilon(2.0, worksheet.control_s35, 0.002); end
  def test_control_s37; assert_in_epsilon(2.0, worksheet.control_s37, 0.002); end
  def test_control_s38; assert_in_epsilon(2.0, worksheet.control_s38, 0.002); end
  def test_control_s39; assert_in_epsilon(2.0, worksheet.control_s39, 0.002); end
  def test_control_s41; assert_in_epsilon(2.0, worksheet.control_s41, 0.002); end
  def test_control_s42; assert_in_epsilon(2.0, worksheet.control_s42, 0.002); end
  def test_control_s43; assert_in_epsilon(2.0, worksheet.control_s43, 0.002); end
  def test_control_s44; assert_in_epsilon(2.0, worksheet.control_s44, 0.002); end
  def test_control_s46; assert_in_epsilon(2.0, worksheet.control_s46, 0.002); end
  def test_control_s47; assert_in_epsilon(2.0, worksheet.control_s47, 0.002); end
  def test_control_s49; assert_in_epsilon(2.0, worksheet.control_s49, 0.002); end
  def test_control_s50; assert_in_epsilon(2.0, worksheet.control_s50, 0.002); end
  def test_control_s51; assert_in_epsilon(2.0, worksheet.control_s51, 0.002); end
  def test_control_s53; assert_in_epsilon(4.0, worksheet.control_s53, 0.002); end
  def test_charts_b2; assert_equal("Energy source / use charts", worksheet.charts_b2); end
  def test_charts_h3; assert_equal("Historic data:", worksheet.charts_h3); end
  def test_charts_ay3; assert_equal("2052 Calculator calculations", worksheet.charts_ay3); end
  def test_charts_d4; assert_equal("TWh / year", worksheet.charts_d4); end
  def test_charts_f4; assert_equal("2007 (Consistent)", worksheet.charts_f4); end
  def test_charts_h4; assert_in_epsilon(1970.0, worksheet.charts_h4, 0.002); end
  def test_charts_i4; assert_in_epsilon(1971.0, worksheet.charts_i4, 0.002); end
  def test_charts_j4; assert_in_epsilon(1972.0, worksheet.charts_j4, 0.002); end
  def test_charts_k4; assert_in_epsilon(1973.0, worksheet.charts_k4, 0.002); end
  def test_charts_l4; assert_in_epsilon(1974.0, worksheet.charts_l4, 0.002); end
  def test_charts_m4; assert_in_epsilon(1975.0, worksheet.charts_m4, 0.002); end
  def test_charts_n4; assert_in_epsilon(1976.0, worksheet.charts_n4, 0.002); end
  def test_charts_o4; assert_in_epsilon(1977.0, worksheet.charts_o4, 0.002); end
  def test_charts_p4; assert_in_epsilon(1978.0, worksheet.charts_p4, 0.002); end
  def test_charts_q4; assert_in_epsilon(1979.0, worksheet.charts_q4, 0.002); end
  def test_charts_r4; assert_in_epsilon(1980.0, worksheet.charts_r4, 0.002); end
  def test_charts_s4; assert_in_epsilon(1981.0, worksheet.charts_s4, 0.002); end
  def test_charts_t4; assert_in_epsilon(1982.0, worksheet.charts_t4, 0.002); end
  def test_charts_u4; assert_in_epsilon(1983.0, worksheet.charts_u4, 0.002); end
  def test_charts_v4; assert_in_epsilon(1984.0, worksheet.charts_v4, 0.002); end
  def test_charts_w4; assert_in_epsilon(1985.0, worksheet.charts_w4, 0.002); end
  def test_charts_x4; assert_in_epsilon(1986.0, worksheet.charts_x4, 0.002); end
  def test_charts_y4; assert_in_epsilon(1987.0, worksheet.charts_y4, 0.002); end
  def test_charts_z4; assert_in_epsilon(1988.0, worksheet.charts_z4, 0.002); end
  def test_charts_aa4; assert_in_epsilon(1989.0, worksheet.charts_aa4, 0.002); end
  def test_charts_ab4; assert_in_epsilon(1990.0, worksheet.charts_ab4, 0.002); end
  def test_charts_ac4; assert_in_epsilon(1991.0, worksheet.charts_ac4, 0.002); end
  def test_charts_ad4; assert_in_epsilon(1992.0, worksheet.charts_ad4, 0.002); end
  def test_charts_ae4; assert_in_epsilon(1993.0, worksheet.charts_ae4, 0.002); end
  def test_charts_af4; assert_in_epsilon(1994.0, worksheet.charts_af4, 0.002); end
  def test_charts_ag4; assert_in_epsilon(1995.0, worksheet.charts_ag4, 0.002); end
  def test_charts_ah4; assert_in_epsilon(1996.0, worksheet.charts_ah4, 0.002); end
  def test_charts_ai4; assert_in_epsilon(1997.0, worksheet.charts_ai4, 0.002); end
  def test_charts_aj4; assert_in_epsilon(1998.0, worksheet.charts_aj4, 0.002); end
  def test_charts_ak4; assert_in_epsilon(1999.0, worksheet.charts_ak4, 0.002); end
  def test_charts_al4; assert_in_epsilon(2000.0, worksheet.charts_al4, 0.002); end
  def test_charts_am4; assert_in_epsilon(2001.0, worksheet.charts_am4, 0.002); end
  def test_charts_an4; assert_in_epsilon(2002.0, worksheet.charts_an4, 0.002); end
  def test_charts_ao4; assert_in_epsilon(2003.0, worksheet.charts_ao4, 0.002); end
  def test_charts_ap4; assert_in_epsilon(2004.0, worksheet.charts_ap4, 0.002); end
  def test_charts_aq4; assert_in_epsilon(2005.0, worksheet.charts_aq4, 0.002); end
  def test_charts_ar4; assert_in_epsilon(2006.0, worksheet.charts_ar4, 0.002); end
  def test_charts_as4; assert_in_epsilon(2007.0, worksheet.charts_as4, 0.002); end
  def test_charts_at4; assert_in_epsilon(2008.0, worksheet.charts_at4, 0.002); end
  def test_charts_au4; assert_in_epsilon(2009.0, worksheet.charts_au4, 0.002); end
  def test_charts_av4; assert_in_epsilon(2010.0, worksheet.charts_av4, 0.002); end
  def test_charts_aw4; assert_equal("Source:", worksheet.charts_aw4); end
  def test_charts_ay4; assert_in_epsilon(2007.0, worksheet.charts_ay4, 0.002); end
  def test_charts_ba4; assert_in_epsilon(2012.0, worksheet.charts_ba4, 0.002); end
  def test_charts_bb4; assert_in_epsilon(2017.0, worksheet.charts_bb4, 0.002); end
  def test_charts_bc4; assert_in_epsilon(2022.0, worksheet.charts_bc4, 0.002); end
  def test_charts_bd4; assert_in_epsilon(2027.0, worksheet.charts_bd4, 0.002); end
  def test_charts_be4; assert_in_epsilon(2032.0, worksheet.charts_be4, 0.002); end
  def test_charts_bf4; assert_in_epsilon(2037.0, worksheet.charts_bf4, 0.002); end
  def test_charts_bg4; assert_in_epsilon(2042.0, worksheet.charts_bg4, 0.002); end
  def test_charts_bh4; assert_in_epsilon(2047.0, worksheet.charts_bh4, 0.002); end
  def test_charts_bi4; assert_in_epsilon(2052.0, worksheet.charts_bi4, 0.002); end
  def test_charts_c6; assert_equal("Use", worksheet.charts_c6); end
  def test_charts_c7; assert_equal("L.01", worksheet.charts_c7); end
  def test_charts_d7; assert_equal("Domestic Lighting & appliances", worksheet.charts_d7); end
  def test_charts_h7; assert_in_epsilon(249.0, worksheet.charts_h7, 0.002); end
  def test_charts_i7; assert_in_epsilon(260.7, worksheet.charts_i7, 0.002); end
  def test_charts_j7; assert_in_epsilon(273.7, worksheet.charts_j7, 0.002); end
  def test_charts_k7; assert_in_epsilon(292.2, worksheet.charts_k7, 0.002); end
  def test_charts_l7; assert_in_epsilon(284.5, worksheet.charts_l7, 0.002); end
  def test_charts_m7; assert_in_epsilon(278.5, worksheet.charts_m7, 0.002); end
  def test_charts_n7; assert_in_epsilon(290.7, worksheet.charts_n7, 0.002); end
  def test_charts_o7; assert_in_epsilon(298.1, worksheet.charts_o7, 0.002); end
  def test_charts_p7; assert_in_epsilon(313.4, worksheet.charts_p7, 0.002); end
  def test_charts_q7; assert_in_epsilon(320.1, worksheet.charts_q7, 0.002); end
  def test_charts_r7; assert_in_epsilon(323.5, worksheet.charts_r7, 0.002); end
  def test_charts_s7; assert_in_epsilon(314.1, worksheet.charts_s7, 0.002); end
  def test_charts_t7; assert_in_epsilon(323.3, worksheet.charts_t7, 0.002); end
  def test_charts_u7; assert_in_epsilon(333.2, worksheet.charts_u7, 0.002); end
  def test_charts_v7; assert_in_epsilon(349.0, worksheet.charts_v7, 0.002); end
  def test_charts_w7; assert_in_epsilon(355.7, worksheet.charts_w7, 0.002); end
  def test_charts_x7; assert_in_epsilon(379.2, worksheet.charts_x7, 0.002); end
  def test_charts_y7; assert_in_epsilon(396.1, worksheet.charts_y7, 0.002); end
  def test_charts_z7; assert_in_epsilon(421.4, worksheet.charts_z7, 0.002); end
  def test_charts_aa7; assert_in_epsilon(439.6, worksheet.charts_aa7, 0.002); end
  def test_charts_ab7; assert_in_epsilon(451.4, worksheet.charts_ab7, 0.002); end
  def test_charts_ac7; assert_in_epsilon(448.2, worksheet.charts_ac7, 0.002); end
  def test_charts_ad7; assert_in_epsilon(457.8, worksheet.charts_ad7, 0.002); end
  def test_charts_ae7; assert_in_epsilon(459.4, worksheet.charts_ae7, 0.002); end
  def test_charts_af7; assert_in_epsilon(461.6, worksheet.charts_af7, 0.002); end
  def test_charts_ag7; assert_in_epsilon(456.7, worksheet.charts_ag7, 0.002); end
  def test_charts_ah7; assert_in_epsilon(474.2, worksheet.charts_ah7, 0.002); end
  def test_charts_ai7; assert_in_epsilon(479.8, worksheet.charts_ai7, 0.002); end
  def test_charts_aj7; assert_in_epsilon(477.1, worksheet.charts_aj7, 0.002); end
  def test_charts_ak7; assert_in_epsilon(481.5, worksheet.charts_ak7, 0.002); end
  def test_charts_al7; assert_in_epsilon(477.7, worksheet.charts_al7, 0.002); end
  def test_charts_am7; assert_in_epsilon(478.0, worksheet.charts_am7, 0.002); end
  def test_charts_an7; assert_in_epsilon(487.7, worksheet.charts_an7, 0.002); end
  def test_charts_ao7; assert_in_epsilon(486.4, worksheet.charts_ao7, 0.002); end
  def test_charts_ap7; assert_in_epsilon(491.0, worksheet.charts_ap7, 0.002); end
  def test_charts_aq7; assert_in_epsilon(494.4, worksheet.charts_aq7, 0.002); end
  def test_charts_ar7; assert_in_epsilon(497.1, worksheet.charts_ar7, 0.002); end
  def test_charts_as7; assert_in_epsilon(503.0, worksheet.charts_as7, 0.002); end
  def test_charts_at7; assert_in_epsilon(491.0, worksheet.charts_at7, 0.002); end
  def test_charts_au7; assert_in_epsilon(474.3, worksheet.charts_au7, 0.002); end
  def test_charts_av7; assert_in_epsilon(476.3, worksheet.charts_av7, 0.002); end
  def test_charts_aw7; assert_equal("Energy consumption in the United Kingdom, Transport Tables (http://www.decc.gov.uk/en/content/cms/statistics/publications/ecuk/ecuk.aspx). Ktoe are converted into TWh ", worksheet.charts_aw7); end
  def test_charts_ay7; assert_in_epsilon(125.22829189364668, worksheet.charts_ay7, 0.002); end
  def test_charts_ba7; assert_in_epsilon(169.69505456493178, worksheet.charts_ba7, 0.002); end
  def test_charts_bb7; assert_in_epsilon(300.04431466291476, worksheet.charts_bb7, 0.002); end
  def test_charts_bc7; assert_in_epsilon(492.814427536887, worksheet.charts_bc7, 0.002); end
  def test_charts_bd7; assert_in_epsilon(765.5110630105391, worksheet.charts_bd7, 0.002); end
  def test_charts_be7; assert_in_epsilon(1159.8318853695678, worksheet.charts_be7, 0.002); end
  def test_charts_bf7; assert_in_epsilon(1453.7842020047071, worksheet.charts_bf7, 0.002); end
  def test_charts_bg7; assert_in_epsilon(1804.4491932933804, worksheet.charts_bg7, 0.002); end
  def test_charts_bh7; assert_in_epsilon(2204.4681998125216, worksheet.charts_bh7, 0.002); end
  def test_charts_bi7; assert_in_epsilon(2671.845508898626, worksheet.charts_bi7, 0.002); end
  def test_charts_c8; assert_equal("L.02", worksheet.charts_c8); end
  def test_charts_d8; assert_equal("Commercial Lighting & Appliances", worksheet.charts_d8); end
  def test_charts_h8; assert_in_epsilon(13.3, worksheet.charts_h8, 0.002); end
  def test_charts_i8; assert_in_epsilon(12.4, worksheet.charts_i8, 0.002); end
  def test_charts_j8; assert_in_epsilon(11.6, worksheet.charts_j8, 0.002); end
  def test_charts_k8; assert_in_epsilon(11.6, worksheet.charts_k8, 0.002); end
  def test_charts_l8; assert_in_epsilon(11.0, worksheet.charts_l8, 0.002); end
  def test_charts_m8; assert_in_epsilon(10.7, worksheet.charts_m8, 0.002); end
  def test_charts_n8; assert_in_epsilon(10.2, worksheet.charts_n8, 0.002); end
  def test_charts_o8; assert_in_epsilon(10.3, worksheet.charts_o8, 0.002); end
  def test_charts_p8; assert_in_epsilon(10.5, worksheet.charts_p8, 0.002); end
  def test_charts_q8; assert_in_epsilon(10.3, worksheet.charts_q8, 0.002); end
  def test_charts_r8; assert_in_epsilon(10.1, worksheet.charts_r8, 0.002); end
  def test_charts_s8; assert_in_epsilon(9.7, worksheet.charts_s8, 0.002); end
  def test_charts_t8; assert_in_epsilon(8.7, worksheet.charts_t8, 0.002); end
  def test_charts_u8; assert_in_epsilon(9.2, worksheet.charts_u8, 0.002); end
  def test_charts_v8; assert_in_epsilon(8.8, worksheet.charts_v8, 0.002); end
  def test_charts_w8; assert_in_epsilon(8.9, worksheet.charts_w8, 0.002); end
  def test_charts_x8; assert_in_epsilon(8.9, worksheet.charts_x8, 0.002); end
  def test_charts_y8; assert_in_epsilon(8.5, worksheet.charts_y8, 0.002); end
  def test_charts_z8; assert_in_epsilon(8.7, worksheet.charts_z8, 0.002); end
  def test_charts_aa8; assert_in_epsilon(8.1, worksheet.charts_aa8, 0.002); end
  def test_charts_ab8; assert_in_epsilon(9.3, worksheet.charts_ab8, 0.002); end
  def test_charts_ac8; assert_in_epsilon(9.4, worksheet.charts_ac8, 0.002); end
  def test_charts_ad8; assert_in_epsilon(9.7, worksheet.charts_ad8, 0.002); end
  def test_charts_ae8; assert_in_epsilon(10.8, worksheet.charts_ae8, 0.002); end
  def test_charts_af8; assert_in_epsilon(10.3, worksheet.charts_af8, 0.002); end
  def test_charts_ag8; assert_in_epsilon(10.7, worksheet.charts_ag8, 0.002); end
  def test_charts_ah8; assert_in_epsilon(11.1, worksheet.charts_ah8, 0.002); end
  def test_charts_ai8; assert_in_epsilon(10.3, worksheet.charts_ai8, 0.002); end
  def test_charts_aj8; assert_in_epsilon(11.1, worksheet.charts_aj8, 0.002); end
  def test_charts_ak8; assert_in_epsilon(11.3, worksheet.charts_ak8, 0.002); end
  def test_charts_al8; assert_in_epsilon(11.4, worksheet.charts_al8, 0.002); end
  def test_charts_am8; assert_in_epsilon(11.8, worksheet.charts_am8, 0.002); end
  def test_charts_an8; assert_in_epsilon(11.5, worksheet.charts_an8, 0.002); end
  def test_charts_ao8; assert_in_epsilon(11.4, worksheet.charts_ao8, 0.002); end
  def test_charts_ap8; assert_in_epsilon(12.2, worksheet.charts_ap8, 0.002); end
  def test_charts_aq8; assert_in_epsilon(11.9, worksheet.charts_aq8, 0.002); end
  def test_charts_ar8; assert_in_epsilon(11.4, worksheet.charts_ar8, 0.002); end
  def test_charts_as8; assert_in_epsilon(11.5, worksheet.charts_as8, 0.002); end
  def test_charts_at8; assert_in_epsilon(11.5, worksheet.charts_at8, 0.002); end
  def test_charts_au8; assert_in_epsilon(11.5, worksheet.charts_au8, 0.002); end
  def test_charts_av8; assert_in_epsilon(11.5, worksheet.charts_av8, 0.002); end
  def test_charts_aw8; assert_equal("Energy consumption in the United Kingdom, Transport Tables (http://www.decc.gov.uk/en/content/cms/statistics/publications/ecuk/ecuk.aspx). Ktoe are converted into TWh. Data in the Transport Tables pre-2004 includes energy used in platforms and has been deflated to broadly reflect only the energy used in trains. ", worksheet.charts_aw8); end
  def test_charts_ay8; assert_in_epsilon(69.8373540220934, worksheet.charts_ay8, 0.002); end
  def test_charts_ba8; assert_in_epsilon(69.8373540220934, worksheet.charts_ba8, 0.002); end
  def test_charts_bb8; assert_in_epsilon(115.42859864757057, worksheet.charts_bb8, 0.002); end
  def test_charts_bc8; assert_in_epsilon(190.8011495057212, worksheet.charts_bc8, 0.002); end
  def test_charts_bd8; assert_in_epsilon(315.42107081978503, worksheet.charts_bd8, 0.002); end
  def test_charts_be8; assert_in_epsilon(521.4861715117739, worksheet.charts_be8, 0.002); end
  def test_charts_bf8; assert_in_epsilon(689.6753068284789, worksheet.charts_bf8, 0.002); end
  def test_charts_bg8; assert_in_epsilon(912.1086134845236, worksheet.charts_bg8, 0.002); end
  def test_charts_bh8; assert_in_epsilon(970.5584977769698, worksheet.charts_bh8, 0.002); end
  def test_charts_bi8; assert_in_epsilon(1032.7539765340366, worksheet.charts_bi8, 0.002); end
  def test_charts_c9; assert_equal("L.00", worksheet.charts_c9); end
  def test_charts_d9; assert_equal("Lighting & Appliances", worksheet.charts_d9); end
  def test_charts_ay9; assert_in_epsilon(195.04686356435622, worksheet.charts_ay9, 0.002); end
  def test_charts_ba9; assert_in_epsilon(239.51357277241706, worksheet.charts_ba9, 0.002); end
  def test_charts_bb9; assert_in_epsilon(415.43937846394886, worksheet.charts_bb9, 0.002); end
  def test_charts_bc9; assert_in_epsilon(683.5547821491623, worksheet.charts_bc9, 0.002); end
  def test_charts_bd9; assert_in_epsilon(1080.8218906568982, worksheet.charts_bd9, 0.002); end
  def test_charts_be9; assert_in_epsilon(1681.1144958506338, worksheet.charts_be9, 0.002); end
  def test_charts_bf9; assert_in_epsilon(2143.1893083636123, worksheet.charts_bf9, 0.002); end
  def test_charts_bg9; assert_in_epsilon(2716.199095849808, worksheet.charts_bg9, 0.002); end
  def test_charts_bh9; assert_in_epsilon(3174.6434844524338, worksheet.charts_bh9, 0.002); end
  def test_charts_bi9; assert_in_epsilon(3704.190039735324, worksheet.charts_bi9, 0.002); end
  def test_charts_c10; assert_equal("I.01", worksheet.charts_c10); end
  def test_charts_d10; assert_equal("Industry", worksheet.charts_d10); end
  def test_charts_h10; assert_in_epsilon(2.7, worksheet.charts_h10, 0.002); end
  def test_charts_i10; assert_in_epsilon(3.0, worksheet.charts_i10, 0.002); end
  def test_charts_j10; assert_in_epsilon(3.1, worksheet.charts_j10, 0.002); end
  def test_charts_k10; assert_in_epsilon(3.4, worksheet.charts_k10, 0.002); end
  def test_charts_l10; assert_in_epsilon(2.9, worksheet.charts_l10, 0.002); end
  def test_charts_m10; assert_in_epsilon(3.0, worksheet.charts_m10, 0.002); end
  def test_charts_n10; assert_in_epsilon(3.1, worksheet.charts_n10, 0.002); end
  def test_charts_o10; assert_in_epsilon(3.3, worksheet.charts_o10, 0.002); end
  def test_charts_p10; assert_in_epsilon(3.5, worksheet.charts_p10, 0.002); end
  def test_charts_q10; assert_in_epsilon(3.6, worksheet.charts_q10, 0.002); end
  def test_charts_r10; assert_in_epsilon(3.7, worksheet.charts_r10, 0.002); end
  def test_charts_s10; assert_in_epsilon(3.5, worksheet.charts_s10, 0.002); end
  def test_charts_t10; assert_in_epsilon(3.5, worksheet.charts_t10, 0.002); end
  def test_charts_u10; assert_in_epsilon(3.6, worksheet.charts_u10, 0.002); end
  def test_charts_v10; assert_in_epsilon(3.8, worksheet.charts_v10, 0.002); end
  def test_charts_w10; assert_in_epsilon(3.9, worksheet.charts_w10, 0.002); end
  def test_charts_x10; assert_in_epsilon(4.3, worksheet.charts_x10, 0.002); end
  def test_charts_y10; assert_in_epsilon(4.5, worksheet.charts_y10, 0.002); end
  def test_charts_z10; assert_in_epsilon(4.8, worksheet.charts_z10, 0.002); end
  def test_charts_aa10; assert_in_epsilon(5.1, worksheet.charts_aa10, 0.002); end
  def test_charts_ab10; assert_in_epsilon(5.1, worksheet.charts_ab10, 0.002); end
  def test_charts_ac10; assert_in_epsilon(4.8, worksheet.charts_ac10, 0.002); end
  def test_charts_ad10; assert_in_epsilon(5.2, worksheet.charts_ad10, 0.002); end
  def test_charts_ae10; assert_in_epsilon(5.5, worksheet.charts_ae10, 0.002); end
  def test_charts_af10; assert_in_epsilon(5.6, worksheet.charts_af10, 0.002); end
  def test_charts_ag10; assert_in_epsilon(5.9, worksheet.charts_ag10, 0.002); end
  def test_charts_ah10; assert_in_epsilon(6.2, worksheet.charts_ah10, 0.002); end
  def test_charts_ai10; assert_in_epsilon(6.5, worksheet.charts_ai10, 0.002); end
  def test_charts_aj10; assert_in_epsilon(7.1, worksheet.charts_aj10, 0.002); end
  def test_charts_ak10; assert_in_epsilon(7.7, worksheet.charts_ak10, 0.002); end
  def test_charts_al10; assert_in_epsilon(8.4, worksheet.charts_al10, 0.002); end
  def test_charts_am10; assert_in_epsilon(8.2, worksheet.charts_am10, 0.002); end
  def test_charts_an10; assert_in_epsilon(8.1, worksheet.charts_an10, 0.002); end
  def test_charts_ao10; assert_in_epsilon(8.3, worksheet.charts_ao10, 0.002); end
  def test_charts_ap10; assert_in_epsilon(9.0, worksheet.charts_ap10, 0.002); end
  def test_charts_aq10; assert_in_epsilon(9.7, worksheet.charts_aq10, 0.002); end
  def test_charts_ar10; assert_in_epsilon(9.8, worksheet.charts_ar10, 0.002); end
  def test_charts_as10; assert_in_epsilon(9.7, worksheet.charts_as10, 0.002); end
  def test_charts_at10; assert_in_epsilon(9.4, worksheet.charts_at10, 0.002); end
  def test_charts_au10; assert_in_epsilon(8.9, worksheet.charts_au10, 0.002); end
  def test_charts_av10; assert_in_epsilon(8.6, worksheet.charts_av10, 0.002); end
  def test_charts_aw10; assert_equal("Energy consumption in the United Kingdom, Transport Tables (http://www.decc.gov.uk/en/content/cms/statistics/publications/ecuk/ecuk.aspx). Ktoe are converted into TWh ", worksheet.charts_aw10); end
  def test_charts_ay10; assert_in_epsilon(1615.7381002510185, worksheet.charts_ay10, 0.002); end
  def test_charts_ba10; assert_in_epsilon(2278.799158074687, worksheet.charts_ba10, 0.002); end
  def test_charts_bb10; assert_in_epsilon(3188.0989682873605, worksheet.charts_bb10, 0.002); end
  def test_charts_bc10; assert_in_epsilon(4295.46144772437, worksheet.charts_bc10, 0.002); end
  def test_charts_bd10; assert_in_epsilon(5520.882023743753, worksheet.charts_bd10, 0.002); end
  def test_charts_be10; assert_in_epsilon(6883.469231943255, worksheet.charts_be10, 0.002); end
  def test_charts_bf10; assert_in_epsilon(8404.590855504402, worksheet.charts_bf10, 0.002); end
  def test_charts_bg10; assert_in_epsilon(9897.385275988245, worksheet.charts_bg10, 0.002); end
  def test_charts_bh10; assert_in_epsilon(11326.434333202775, worksheet.charts_bh10, 0.002); end
  def test_charts_bi10; assert_in_epsilon(12793.271831310853, worksheet.charts_bi10, 0.002); end
  def test_charts_c11; assert_equal("T.01", worksheet.charts_c11); end
  def test_charts_d11; assert_equal("Road transport", worksheet.charts_d11); end
  def test_charts_h11; assert_in_epsilon(15.0, worksheet.charts_h11, 0.002); end
  def test_charts_i11; assert_in_epsilon(13.3, worksheet.charts_i11, 0.002); end
  def test_charts_j11; assert_in_epsilon(11.5, worksheet.charts_j11, 0.002); end
  def test_charts_k11; assert_in_epsilon(12.8, worksheet.charts_k11, 0.002); end
  def test_charts_l11; assert_in_epsilon(14.5, worksheet.charts_l11, 0.002); end
  def test_charts_m11; assert_in_epsilon(15.2, worksheet.charts_m11, 0.002); end
  def test_charts_n11; assert_in_epsilon(15.4, worksheet.charts_n11, 0.002); end
  def test_charts_o11; assert_in_epsilon(15.4, worksheet.charts_o11, 0.002); end
  def test_charts_p11; assert_in_epsilon(15.2, worksheet.charts_p11, 0.002); end
  def test_charts_q11; assert_in_epsilon(15.9, worksheet.charts_q11, 0.002); end
  def test_charts_r11; assert_in_epsilon(14.7, worksheet.charts_r11, 0.002); end
  def test_charts_s11; assert_in_epsilon(12.8, worksheet.charts_s11, 0.002); end
  def test_charts_t11; assert_in_epsilon(13.8, worksheet.charts_t11, 0.002); end
  def test_charts_u11; assert_in_epsilon(14.1, worksheet.charts_u11, 0.002); end
  def test_charts_v11; assert_in_epsilon(15.4, worksheet.charts_v11, 0.002); end
  def test_charts_w11; assert_in_epsilon(14.6, worksheet.charts_w11, 0.002); end
  def test_charts_x11; assert_in_epsilon(13.4, worksheet.charts_x11, 0.002); end
  def test_charts_y11; assert_in_epsilon(12.8, worksheet.charts_y11, 0.002); end
  def test_charts_z11; assert_in_epsilon(13.5, worksheet.charts_z11, 0.002); end
  def test_charts_aa11; assert_in_epsilon(15.8, worksheet.charts_aa11, 0.002); end
  def test_charts_ab11; assert_in_epsilon(15.9, worksheet.charts_ab11, 0.002); end
  def test_charts_ac11; assert_in_epsilon(16.6, worksheet.charts_ac11, 0.002); end
  def test_charts_ad11; assert_in_epsilon(16.0, worksheet.charts_ad11, 0.002); end
  def test_charts_ae11; assert_in_epsilon(15.6, worksheet.charts_ae11, 0.002); end
  def test_charts_af11; assert_in_epsilon(14.4, worksheet.charts_af11, 0.002); end
  def test_charts_ag11; assert_in_epsilon(13.9, worksheet.charts_ag11, 0.002); end
  def test_charts_ah11; assert_in_epsilon(15.1, worksheet.charts_ah11, 0.002); end
  def test_charts_ai11; assert_in_epsilon(14.6, worksheet.charts_ai11, 0.002); end
  def test_charts_aj11; assert_in_epsilon(13.7, worksheet.charts_aj11, 0.002); end
  def test_charts_ak11; assert_in_epsilon(12.4, worksheet.charts_ak11, 0.002); end
  def test_charts_al11; assert_in_epsilon(12.0, worksheet.charts_al11, 0.002); end
  def test_charts_am11; assert_in_epsilon(9.8, worksheet.charts_am11, 0.002); end
  def test_charts_an11; assert_in_epsilon(8.2, worksheet.charts_an11, 0.002); end
  def test_charts_ao11; assert_in_epsilon(14.4, worksheet.charts_ao11, 0.002); end
  def test_charts_ap11; assert_in_epsilon(13.9, worksheet.charts_ap11, 0.002); end
  def test_charts_aq11; assert_in_epsilon(15.9, worksheet.charts_aq11, 0.002); end
  def test_charts_ar11; assert_in_epsilon(21.0, worksheet.charts_ar11, 0.002); end
  def test_charts_as11; assert_in_epsilon(18.7, worksheet.charts_as11, 0.002); end
  def test_charts_at11; assert_in_epsilon(20.4, worksheet.charts_at11, 0.002); end
  def test_charts_au11; assert_in_epsilon(18.9, worksheet.charts_au11, 0.002); end
  def test_charts_av11; assert_in_epsilon(17.1, worksheet.charts_av11, 0.002); end
  def test_charts_aw11; assert_equal("Energy consumption in the United Kingdom, Transport Tables (http://www.decc.gov.uk/en/content/cms/statistics/publications/ecuk/ecuk.aspx). Ktoe are converted into TWh ", worksheet.charts_aw11); end
  def test_charts_ay11; assert_in_epsilon(787.0615564662562, worksheet.charts_ay11, 0.002); end
  def test_charts_ba11; assert_in_epsilon(787.0615564662562, worksheet.charts_ba11, 0.002); end
  def test_charts_bb11; assert_in_epsilon(1183.500350591845, worksheet.charts_bb11, 0.002); end
  def test_charts_bc11; assert_in_epsilon(1717.793821639037, worksheet.charts_bc11, 0.002); end
  def test_charts_bd11; assert_in_epsilon(2376.528180609568, worksheet.charts_bd11, 0.002); end
  def test_charts_be11; assert_in_epsilon(3187.97529291315, worksheet.charts_be11, 0.002); end
  def test_charts_bf11; assert_in_epsilon(4145.418452527569, worksheet.charts_bf11, 0.002); end
  def test_charts_bg11; assert_in_epsilon(5054.437916655155, worksheet.charts_bg11, 0.002); end
  def test_charts_bh11; assert_in_epsilon(6055.4105178031705, worksheet.charts_bh11, 0.002); end
  def test_charts_bi11; assert_in_epsilon(7174.158194519209, worksheet.charts_bi11, 0.002); end
  def test_charts_c12; assert_equal("T.02", worksheet.charts_c12); end
  def test_charts_d12; assert_equal("Rail transport", worksheet.charts_d12); end
  def test_charts_h12; assert_in_epsilon(42.3, worksheet.charts_h12, 0.002); end
  def test_charts_i12; assert_in_epsilon(46.4, worksheet.charts_i12, 0.002); end
  def test_charts_j12; assert_in_epsilon(49.3, worksheet.charts_j12, 0.002); end
  def test_charts_k12; assert_in_epsilon(52.5, worksheet.charts_k12, 0.002); end
  def test_charts_l12; assert_in_epsilon(46.1, worksheet.charts_l12, 0.002); end
  def test_charts_m12; assert_in_epsilon(47.4, worksheet.charts_m12, 0.002); end
  def test_charts_n12; assert_in_epsilon(48.9, worksheet.charts_n12, 0.002); end
  def test_charts_o12; assert_in_epsilon(51.1, worksheet.charts_o12, 0.002); end
  def test_charts_p12; assert_in_epsilon(55.2, worksheet.charts_p12, 0.002); end
  def test_charts_q12; assert_in_epsilon(57.1, worksheet.charts_q12, 0.002); end
  def test_charts_r12; assert_in_epsilon(57.3, worksheet.charts_r12, 0.002); end
  def test_charts_s12; assert_in_epsilon(54.9, worksheet.charts_s12, 0.002); end
  def test_charts_t12; assert_in_epsilon(54.6, worksheet.charts_t12, 0.002); end
  def test_charts_u12; assert_in_epsilon(55.7, worksheet.charts_u12, 0.002); end
  def test_charts_v12; assert_in_epsilon(58.8, worksheet.charts_v12, 0.002); end
  def test_charts_w12; assert_in_epsilon(61.0, worksheet.charts_w12, 0.002); end
  def test_charts_x12; assert_in_epsilon(67.0, worksheet.charts_x12, 0.002); end
  def test_charts_y12; assert_in_epsilon(70.8, worksheet.charts_y12, 0.002); end
  def test_charts_z12; assert_in_epsilon(75.5, worksheet.charts_z12, 0.002); end
  def test_charts_aa12; assert_in_epsilon(79.9, worksheet.charts_aa12, 0.002); end
  def test_charts_ab12; assert_in_epsilon(80.2, worksheet.charts_ab12, 0.002); end
  def test_charts_ac12; assert_in_epsilon(75.1, worksheet.charts_ac12, 0.002); end
  def test_charts_ad12; assert_in_epsilon(81.3, worksheet.charts_ad12, 0.002); end
  def test_charts_ae12; assert_in_epsilon(86.0, worksheet.charts_ae12, 0.002); end
  def test_charts_af12; assert_in_epsilon(88.2, worksheet.charts_af12, 0.002); end
  def test_charts_ag12; assert_in_epsilon(92.8, worksheet.charts_ag12, 0.002); end
  def test_charts_ah12; assert_in_epsilon(97.5, worksheet.charts_ah12, 0.002); end
  def test_charts_ai12; assert_in_epsilon(101.9, worksheet.charts_ai12, 0.002); end
  def test_charts_aj12; assert_in_epsilon(111.9, worksheet.charts_aj12, 0.002); end
  def test_charts_ak12; assert_in_epsilon(120.4, worksheet.charts_ak12, 0.002); end
  def test_charts_al12; assert_in_epsilon(130.9, worksheet.charts_al12, 0.002); end
  def test_charts_am12; assert_in_epsilon(128.7, worksheet.charts_am12, 0.002); end
  def test_charts_an12; assert_in_epsilon(127.4, worksheet.charts_an12, 0.002); end
  def test_charts_ao12; assert_in_epsilon(130.5, worksheet.charts_ao12, 0.002); end
  def test_charts_ap12; assert_in_epsilon(141.1, worksheet.charts_ap12, 0.002); end
  def test_charts_aq12; assert_in_epsilon(151.5, worksheet.charts_aq12, 0.002); end
  def test_charts_ar12; assert_in_epsilon(153.0, worksheet.charts_ar12, 0.002); end
  def test_charts_as12; assert_in_epsilon(152.0, worksheet.charts_as12, 0.002); end
  def test_charts_at12; assert_in_epsilon(147.7, worksheet.charts_at12, 0.002); end
  def test_charts_au12; assert_in_epsilon(139.4, worksheet.charts_au12, 0.002); end
  def test_charts_av12; assert_in_epsilon(134.3, worksheet.charts_av12, 0.002); end
  def test_charts_aw12; assert_equal("Energy consumption in the United Kingdom, Transport Tables (http://www.decc.gov.uk/en/content/cms/statistics/publications/ecuk/ecuk.aspx). Ktoe are converted into TWh ", worksheet.charts_aw12); end
  def test_charts_ay12; assert_in_epsilon(40.53243900000001, worksheet.charts_ay12, 0.002); end
  def test_charts_ba12; assert_in_epsilon(40.53243900000001, worksheet.charts_ba12, 0.002); end
  def test_charts_bb12; assert_in_epsilon(51.88964051493581, worksheet.charts_bb12, 0.002); end
  def test_charts_bc12; assert_in_epsilon(64.64605506410759, worksheet.charts_bc12, 0.002); end
  def test_charts_bd12; assert_in_epsilon(78.30303774005515, worksheet.charts_bd12, 0.002); end
  def test_charts_be12; assert_in_epsilon(93.68497787331091, worksheet.charts_be12, 0.002); end
  def test_charts_bf12; assert_in_epsilon(110.98195843630529, worksheet.charts_bf12, 0.002); end
  def test_charts_bg12; assert_in_epsilon(119.53006725946128, worksheet.charts_bg12, 0.002); end
  def test_charts_bh12; assert_in_epsilon(128.80789870764113, worksheet.charts_bh12, 0.002); end
  def test_charts_bi12; assert_in_epsilon(137.98743134823923, worksheet.charts_bi12, 0.002); end
  def test_charts_c13; assert_equal("T.03", worksheet.charts_c13); end
  def test_charts_d13; assert_equal("Domestic aviation", worksheet.charts_d13); end
  def test_charts_ab13; assert_in_epsilon(40.1, worksheet.charts_ab13, 0.002); end
  def test_charts_ac13; assert_in_epsilon(40.6, worksheet.charts_ac13, 0.002); end
  def test_charts_ad13; assert_in_epsilon(40.0, worksheet.charts_ad13, 0.002); end
  def test_charts_ae13; assert_in_epsilon(40.5, worksheet.charts_ae13, 0.002); end
  def test_charts_af13; assert_in_epsilon(40.7, worksheet.charts_af13, 0.002); end
  def test_charts_ag13; assert_in_epsilon(39.1, worksheet.charts_ag13, 0.002); end
  def test_charts_ah13; assert_in_epsilon(39.4, worksheet.charts_ah13, 0.002); end
  def test_charts_ai13; assert_in_epsilon(41.9, worksheet.charts_ai13, 0.002); end
  def test_charts_aj13; assert_in_epsilon(41.5, worksheet.charts_aj13, 0.002); end
  def test_charts_ak13; assert_in_epsilon(39.9, worksheet.charts_ak13, 0.002); end
  def test_charts_al13; assert_in_epsilon(43.4, worksheet.charts_al13, 0.002); end
  def test_charts_am13; assert_in_epsilon(45.2, worksheet.charts_am13, 0.002); end
  def test_charts_an13; assert_in_epsilon(40.7, worksheet.charts_an13, 0.002); end
  def test_charts_ao13; assert_in_epsilon(43.9, worksheet.charts_ao13, 0.002); end
  def test_charts_ap13; assert_in_epsilon(47.4, worksheet.charts_ap13, 0.002); end
  def test_charts_aq13; assert_in_epsilon(48.3, worksheet.charts_aq13, 0.002); end
  def test_charts_ar13; assert_in_epsilon(47.0, worksheet.charts_ar13, 0.002); end
  def test_charts_aw13; assert_equal("Committee on Climate Change historic emissions estimates (http://downloads.theccc.org.uk.s3.amazonaws.com/Shipping%20Review/Shipping%20Review%20Web%20Exhibits.xls, Figure B5), converted into TWh using factors in the 2050 Calculator.", worksheet.charts_aw13); end
  def test_charts_ay13; assert_in_epsilon(20.27846236417185, worksheet.charts_ay13, 0.002); end
  def test_charts_ba13; assert_in_epsilon(20.27846236417185, worksheet.charts_ba13, 0.002); end
  def test_charts_bb13; assert_in_epsilon(36.12439727059617, worksheet.charts_bb13, 0.002); end
  def test_charts_bc13; assert_in_epsilon(59.13722696428688, worksheet.charts_bc13, 0.002); end
  def test_charts_bd13; assert_in_epsilon(88.31718655798512, worksheet.charts_bd13, 0.002); end
  def test_charts_be13; assert_in_epsilon(124.7495741974252, worksheet.charts_be13, 0.002); end
  def test_charts_bf13; assert_in_epsilon(167.86358992348687, worksheet.charts_bf13, 0.002); end
  def test_charts_bg13; assert_in_epsilon(213.5112081062995, worksheet.charts_bg13, 0.002); end
  def test_charts_bh13; assert_in_epsilon(264.9470788803346, worksheet.charts_bh13, 0.002); end
  def test_charts_bi13; assert_in_epsilon(324.82761580889445, worksheet.charts_bi13, 0.002); end
  def test_charts_c14; assert_equal("T.00", worksheet.charts_c14); end
  def test_charts_d14; assert_equal("Transport", worksheet.charts_d14); end
  def test_charts_ay14; assert_in_epsilon(847.8724578304282, worksheet.charts_ay14, 0.002); end
  def test_charts_ba14; assert_in_epsilon(847.8724578304282, worksheet.charts_ba14, 0.002); end
  def test_charts_bb14; assert_in_epsilon(1271.514388377377, worksheet.charts_bb14, 0.002); end
  def test_charts_bc14; assert_in_epsilon(1841.5771036674314, worksheet.charts_bc14, 0.002); end
  def test_charts_bd14; assert_in_epsilon(2543.1484049076084, worksheet.charts_bd14, 0.002); end
  def test_charts_be14; assert_in_epsilon(3406.409844983886, worksheet.charts_be14, 0.002); end
  def test_charts_bf14; assert_in_epsilon(4424.26400088736, worksheet.charts_bf14, 0.002); end
  def test_charts_bg14; assert_in_epsilon(5387.479192020916, worksheet.charts_bg14, 0.002); end
  def test_charts_bh14; assert_in_epsilon(6449.165495391147, worksheet.charts_bh14, 0.002); end
  def test_charts_bi14; assert_in_epsilon(7636.973241676344, worksheet.charts_bi14, 0.002); end
  def test_charts_c15; assert_equal("S.01", worksheet.charts_c15); end
  def test_charts_d15; assert_equal("Green Building Design & Envelope Savings", worksheet.charts_d15); end
  def test_charts_h15; assert_in_epsilon(365.6, worksheet.charts_h15, 0.002); end
  def test_charts_i15; assert_in_epsilon(378.7, worksheet.charts_i15, 0.002); end
  def test_charts_j15; assert_in_epsilon(391.9, worksheet.charts_j15, 0.002); end
  def test_charts_k15; assert_in_epsilon(415.1, worksheet.charts_k15, 0.002); end
  def test_charts_l15; assert_in_epsilon(401.5, worksheet.charts_l15, 0.002); end
  def test_charts_m15; assert_in_epsilon(397.1, worksheet.charts_m15, 0.002); end
  def test_charts_n15; assert_in_epsilon(410.4, worksheet.charts_n15, 0.002); end
  def test_charts_o15; assert_in_epsilon(420.2, worksheet.charts_o15, 0.002); end
  def test_charts_p15; assert_in_epsilon(439.9, worksheet.charts_p15, 0.002); end
  def test_charts_q15; assert_in_epsilon(449.1, worksheet.charts_q15, 0.002); end
  def test_charts_r15; assert_in_epsilon(451.2, worksheet.charts_r15, 0.002); end
  def test_charts_s15; assert_in_epsilon(436.8, worksheet.charts_s15, 0.002); end
  def test_charts_t15; assert_in_epsilon(445.4, worksheet.charts_t15, 0.002); end
  def test_charts_u15; assert_in_epsilon(457.3, worksheet.charts_u15, 0.002); end
  def test_charts_v15; assert_in_epsilon(477.3, worksheet.charts_v15, 0.002); end
  def test_charts_w15; assert_in_epsilon(485.6, worksheet.charts_w15, 0.002); end
  def test_charts_x15; assert_in_epsilon(514.2, worksheet.charts_x15, 0.002); end
  def test_charts_y15; assert_in_epsilon(534.2, worksheet.charts_y15, 0.002); end
  def test_charts_z15; assert_in_epsilon(565.2, worksheet.charts_z15, 0.002); end
  def test_charts_aa15; assert_in_epsilon(589.6, worksheet.charts_aa15, 0.002); end
  def test_charts_ab15; assert_in_epsilon(603.5, worksheet.charts_ab15, 0.002); end
  def test_charts_ac15; assert_in_epsilon(595.8, worksheet.charts_ac15, 0.002); end
  def test_charts_ad15; assert_in_epsilon(611.8, worksheet.charts_ad15, 0.002); end
  def test_charts_ae15; assert_in_epsilon(619.6, worksheet.charts_ae15, 0.002); end
  def test_charts_af15; assert_in_epsilon(622.3, worksheet.charts_af15, 0.002); end
  def test_charts_ag15; assert_in_epsilon(622.1, worksheet.charts_ag15, 0.002); end
  def test_charts_ah15; assert_in_epsilon(646.4, worksheet.charts_ah15, 0.002); end
  def test_charts_ai15; assert_in_epsilon(655.2, worksheet.charts_ai15, 0.002); end
  def test_charts_aj15; assert_in_epsilon(663.3, worksheet.charts_aj15, 0.002); end
  def test_charts_ak15; assert_in_epsilon(666.7, worksheet.charts_ak15, 0.002); end
  def test_charts_al15; assert_in_epsilon(670.7, worksheet.charts_al15, 0.002); end
  def test_charts_am15; assert_in_epsilon(669.5, worksheet.charts_am15, 0.002); end
  def test_charts_an15; assert_in_epsilon(671.4, worksheet.charts_an15, 0.002); end
  def test_charts_ao15; assert_in_epsilon(677.4, worksheet.charts_ao15, 0.002); end
  def test_charts_ap15; assert_in_epsilon(693.1, worksheet.charts_ap15, 0.002); end
  def test_charts_aq15; assert_in_epsilon(708.6, worksheet.charts_aq15, 0.002); end
  def test_charts_ar15; assert_in_epsilon(721.2, worksheet.charts_ar15, 0.002); end
  def test_charts_as15; assert_in_epsilon(724.2, worksheet.charts_as15, 0.002); end
  def test_charts_at15; assert_in_epsilon(711.8, worksheet.charts_at15, 0.002); end
  def test_charts_au15; assert_in_epsilon(683.4, worksheet.charts_au15, 0.002); end
  def test_charts_av15; assert_in_epsilon(674.0, worksheet.charts_av15, 0.002); end
  def test_charts_aw15; assert_equal("Calculation (sum of subcategories)", worksheet.charts_aw15); end
  def test_charts_ay15; assert_in_delta(-0.01878235138385134, worksheet.charts_ay15, 0.002); end
  def test_charts_ba15; assert_in_delta(-0.018835814608099886, worksheet.charts_ba15, 0.002); end
  def test_charts_bb15; assert_in_delta(-0.033534846536453375, worksheet.charts_bb15, 0.002); end
  def test_charts_bc15; assert_in_delta(-0.060794893445987486, worksheet.charts_bc15, 0.002); end
  def test_charts_bd15; assert_in_delta(-0.11024317342605544, worksheet.charts_bd15, 0.002); end
  def test_charts_be15; assert_in_delta(-0.20356103070805628, worksheet.charts_be15, 0.002); end
  def test_charts_bf15; assert_in_delta(-0.2702004695738901, worksheet.charts_bf15, 0.002); end
  def test_charts_bg15; assert_in_delta(-0.35871092809590743, worksheet.charts_bg15, 0.002); end
  def test_charts_bh15; assert_in_delta(-0.38321313705787546, worksheet.charts_bh15, 0.002); end
  def test_charts_bi15; assert_in_delta(-0.4094456973387999, worksheet.charts_bi15, 0.002); end
  def test_charts_c16; assert_equal("D.01", worksheet.charts_c16); end
  def test_charts_d16; assert_equal("Agriculture", worksheet.charts_d16); end
  def test_charts_ak16; assert_in_epsilon(482.5, worksheet.charts_ak16, 0.002); end
  def test_charts_al16; assert_in_epsilon(521.7, worksheet.charts_al16, 0.002); end
  def test_charts_am16; assert_in_epsilon(508.2, worksheet.charts_am16, 0.002); end
  def test_charts_an16; assert_in_epsilon(481.5, worksheet.charts_an16, 0.002); end
  def test_charts_ao16; assert_in_epsilon(487.8, worksheet.charts_ao16, 0.002); end
  def test_charts_ap16; assert_in_epsilon(469.8, worksheet.charts_ap16, 0.002); end
  def test_charts_aq16; assert_in_epsilon(468.3, worksheet.charts_aq16, 0.002); end
  def test_charts_ar16; assert_in_epsilon(460.1, worksheet.charts_ar16, 0.002); end
  def test_charts_as16; assert_in_epsilon(449.7, worksheet.charts_as16, 0.002); end
  def test_charts_at16; assert_in_epsilon(444.7, worksheet.charts_at16, 0.002); end
  def test_charts_au16; assert_in_epsilon(388.9, worksheet.charts_au16, 0.002); end
  def test_charts_av16; assert_in_epsilon(400.8, worksheet.charts_av16, 0.002); end
  def test_charts_aw16; assert_equal("Digest of UK Energy Statistics (DUKES) data, numerous tables (separate note is available)", worksheet.charts_aw16); end
  def test_charts_ay16; assert_in_epsilon(177.82856075231598, worksheet.charts_ay16, 0.002); end
  def test_charts_ba16; assert_in_epsilon(237.20689383625, worksheet.charts_ba16, 0.002); end
  def test_charts_bb16; assert_in_epsilon(328.2852405896393, worksheet.charts_bb16, 0.002); end
  def test_charts_bc16; assert_in_epsilon(453.517720920971, worksheet.charts_bc16, 0.002); end
  def test_charts_bd16; assert_in_epsilon(591.3849918091486, worksheet.charts_bd16, 0.002); end
  def test_charts_be16; assert_in_epsilon(750.1024018576557, worksheet.charts_be16, 0.002); end
  def test_charts_bf16; assert_in_epsilon(850.2884275248466, worksheet.charts_bf16, 0.002); end
  def test_charts_bg16; assert_in_epsilon(969.308783186821, worksheet.charts_bg16, 0.002); end
  def test_charts_bh16; assert_in_epsilon(1047.8059052018175, worksheet.charts_bh16, 0.002); end
  def test_charts_bi16; assert_in_epsilon(1134.4954568667354, worksheet.charts_bi16, 0.002); end
  def test_charts_c17; assert_equal("G.01", worksheet.charts_c17); end
  def test_charts_d17; assert_equal("Telecom", worksheet.charts_d17); end
  def test_charts_al17; assert_in_epsilon(616.2, worksheet.charts_al17, 0.002); end
  def test_charts_am17; assert_in_epsilon(629.3, worksheet.charts_am17, 0.002); end
  def test_charts_an17; assert_in_epsilon(592.7, worksheet.charts_an17, 0.002); end
  def test_charts_ao17; assert_in_epsilon(601.2, worksheet.charts_ao17, 0.002); end
  def test_charts_ap17; assert_in_epsilon(614.1, worksheet.charts_ap17, 0.002); end
  def test_charts_aq17; assert_in_epsilon(590.6, worksheet.charts_aq17, 0.002); end
  def test_charts_ar17; assert_in_epsilon(568.9, worksheet.charts_ar17, 0.002); end
  def test_charts_as17; assert_in_epsilon(546.0, worksheet.charts_as17, 0.002); end
  def test_charts_at17; assert_in_epsilon(548.9, worksheet.charts_at17, 0.002); end
  def test_charts_aw17; assert_equal("Energy consumption in the UK statistics (Domestic energy consumption by end use 1970 to 2009) and DUKES (Detailed service sector energy consumption by subsector and end use by fuel,  2001)", worksheet.charts_aw17); end
  def test_charts_ay17; assert_in_epsilon(13.886920800000002, worksheet.charts_ay17, 0.002); end
  def test_charts_ba17; assert_in_epsilon(46.289736000000005, worksheet.charts_ba17, 0.002); end
  def test_charts_bb17; assert_in_epsilon(56.32828546867533, worksheet.charts_bb17, 0.002); end
  def test_charts_bc17; assert_in_epsilon(69.88742920482616, worksheet.charts_bc17, 0.002); end
  def test_charts_bd17; assert_in_epsilon(91.82174403114745, worksheet.charts_bd17, 0.002); end
  def test_charts_be17; assert_in_epsilon(113.34304438852058, worksheet.charts_be17, 0.002); end
  def test_charts_bf17; assert_in_epsilon(132.65855225480934, worksheet.charts_bf17, 0.002); end
  def test_charts_bg17; assert_in_epsilon(161.3497827672023, worksheet.charts_bg17, 0.002); end
  def test_charts_bh17; assert_in_epsilon(209.69496501458093, worksheet.charts_bh17, 0.002); end
  def test_charts_bi17; assert_in_epsilon(297.4563156170363, worksheet.charts_bi17, 0.002); end
  def test_charts_c18; assert_equal("M.01", worksheet.charts_c18); end
  def test_charts_d18; assert_equal("Household Cooking", worksheet.charts_d18); end
  def test_charts_al18; assert_in_epsilon(173.0, worksheet.charts_al18, 0.002); end
  def test_charts_am18; assert_in_epsilon(172.0, worksheet.charts_am18, 0.002); end
  def test_charts_an18; assert_in_epsilon(177.3, worksheet.charts_an18, 0.002); end
  def test_charts_ao18; assert_in_epsilon(178.4, worksheet.charts_ao18, 0.002); end
  def test_charts_ap18; assert_in_epsilon(177.9, worksheet.charts_ap18, 0.002); end
  def test_charts_aq18; assert_in_epsilon(184.1, worksheet.charts_aq18, 0.002); end
  def test_charts_ar18; assert_in_epsilon(185.9, worksheet.charts_ar18, 0.002); end
  def test_charts_as18; assert_in_epsilon(185.5, worksheet.charts_as18, 0.002); end
  def test_charts_at18; assert_in_epsilon(180.4, worksheet.charts_at18, 0.002); end
  def test_charts_aw18; assert_equal("Energy consumption in the UK statistics (Domestic energy consumption by end use 1970 to 2009) and DUKES (Detailed service sector energy consumption by subsector and end use by fuel,  2001)", worksheet.charts_aw18); end
  def test_charts_ay18; assert_in_epsilon(1045.8611113960574, worksheet.charts_ay18, 0.002); end
  def test_charts_ba18; assert_in_epsilon(1153.7282449630281, worksheet.charts_ba18, 0.002); end
  def test_charts_bb18; assert_in_epsilon(1148.4989388784084, worksheet.charts_bb18, 0.002); end
  def test_charts_bc18; assert_in_epsilon(1155.9568110410034, worksheet.charts_bc18, 0.002); end
  def test_charts_bd18; assert_in_epsilon(1156.4277437769356, worksheet.charts_bd18, 0.002); end
  def test_charts_be18; assert_in_epsilon(1145.5431763602155, worksheet.charts_be18, 0.002); end
  def test_charts_bf18; assert_in_epsilon(1128.6766748639811, worksheet.charts_bf18, 0.002); end
  def test_charts_bg18; assert_in_epsilon(1099.7850738372154, worksheet.charts_bg18, 0.002); end
  def test_charts_bh18; assert_in_epsilon(1069.2095057928398, worksheet.charts_bh18, 0.002); end
  def test_charts_bi18; assert_in_epsilon(1079.9753438946816, worksheet.charts_bi18, 0.002); end
  def test_charts_c19; assert_equal("M.02", worksheet.charts_c19); end
  def test_charts_d19; assert_equal("Commercial Cooking", worksheet.charts_d19); end
  def test_charts_ay19; assert_in_epsilon(42.63668783708186, worksheet.charts_ay19, 0.002); end
  def test_charts_ba19; assert_in_epsilon(64.76722458582496, worksheet.charts_ba19, 0.002); end
  def test_charts_bb19; assert_in_epsilon(96.64390987736526, worksheet.charts_bb19, 0.002); end
  def test_charts_bc19; assert_in_epsilon(143.41278923679616, worksheet.charts_bc19, 0.002); end
  def test_charts_bd19; assert_in_epsilon(210.74579320156334, worksheet.charts_bd19, 0.002); end
  def test_charts_be19; assert_in_epsilon(308.34342741085425, worksheet.charts_be19, 0.002); end
  def test_charts_bf19; assert_in_epsilon(412.6330612460542, worksheet.charts_bf19, 0.002); end
  def test_charts_bg19; assert_in_epsilon(552.1961167228573, worksheet.charts_bg19, 0.002); end
  def test_charts_bh19; assert_in_epsilon(738.9629672499229, worksheet.charts_bh19, 0.002); end
  def test_charts_bi19; assert_in_epsilon(988.8991436730385, worksheet.charts_bi19, 0.002); end
  def test_charts_c20; assert_equal("M.00", worksheet.charts_c20); end
  def test_charts_d20; assert_equal("Cooking", worksheet.charts_d20); end
  def test_charts_ay20; assert_in_epsilon(1088.4977992331392, worksheet.charts_ay20, 0.002); end
  def test_charts_ba20; assert_in_epsilon(1218.4954695488532, worksheet.charts_ba20, 0.002); end
  def test_charts_bb20; assert_in_epsilon(1245.1428487557737, worksheet.charts_bb20, 0.002); end
  def test_charts_bc20; assert_in_epsilon(1299.3696002777997, worksheet.charts_bc20, 0.002); end
  def test_charts_bd20; assert_in_epsilon(1367.173536978499, worksheet.charts_bd20, 0.002); end
  def test_charts_be20; assert_in_epsilon(1453.8866037710698, worksheet.charts_be20, 0.002); end
  def test_charts_bf20; assert_in_epsilon(1541.3097361100354, worksheet.charts_bf20, 0.002); end
  def test_charts_bg20; assert_in_epsilon(1651.9811905600727, worksheet.charts_bg20, 0.002); end
  def test_charts_bh20; assert_in_epsilon(1808.1724730427627, worksheet.charts_bh20, 0.002); end
  def test_charts_bi20; assert_in_epsilon(2068.8744875677203, worksheet.charts_bi20, 0.002); end
  def test_charts_d21; assert_equal("Total Use", worksheet.charts_d21); end
  def test_charts_al21; assert_in_epsilon(1981.6000000000001, worksheet.charts_al21, 0.002); end
  def test_charts_am21; assert_in_epsilon(1979.0, worksheet.charts_am21, 0.002); end
  def test_charts_an21; assert_in_epsilon(1922.9, worksheet.charts_an21, 0.002); end
  def test_charts_ao21; assert_in_epsilon(1944.8000000000002, worksheet.charts_ao21, 0.002); end
  def test_charts_ap21; assert_in_epsilon(1954.9, worksheet.charts_ap21, 0.002); end
  def test_charts_aq21; assert_in_epsilon(1951.6, worksheet.charts_aq21, 0.002); end
  def test_charts_ar21; assert_in_epsilon(1936.1000000000004, worksheet.charts_ar21, 0.002); end
  def test_charts_ay21; assert_in_epsilon(3938.870702431258, worksheet.charts_ay21, 0.002); end
  def test_charts_az21; assert_in_delta(0.0, (worksheet.charts_az21||0), 0.002); end
  def test_charts_ba21; assert_in_epsilon(4868.177288062636, worksheet.charts_ba21, 0.002); end
  def test_charts_bb21; assert_in_epsilon(6504.809109942775, worksheet.charts_bb21, 0.002); end
  def test_charts_bc21; assert_in_epsilon(8643.36808394456, worksheet.charts_bc21, 0.002); end
  def test_charts_bd21; assert_in_epsilon(11195.232592127055, worksheet.charts_bd21, 0.002); end
  def test_charts_be21; assert_in_epsilon(14288.32562279502, worksheet.charts_be21, 0.002); end
  def test_charts_bf21; assert_in_epsilon(17496.300880645067, worksheet.charts_bf21, 0.002); end
  def test_charts_bg21; assert_in_epsilon(20783.703320373068, worksheet.charts_bg21, 0.002); end
  def test_charts_bh21; assert_in_epsilon(24015.916656305515, worksheet.charts_bh21, 0.002); end
  def test_charts_bi21; assert_in_epsilon(27635.26137277401, worksheet.charts_bi21, 0.002); end
  def test_charts_d24; assert_equal("% share", worksheet.charts_d24); end
  def test_charts_ay24; assert_in_epsilon(2007.0, worksheet.charts_ay24, 0.002); end
  def test_charts_ba24; assert_in_epsilon(2012.0, worksheet.charts_ba24, 0.002); end
  def test_charts_bb24; assert_in_epsilon(2017.0, worksheet.charts_bb24, 0.002); end
  def test_charts_bc24; assert_in_epsilon(2022.0, worksheet.charts_bc24, 0.002); end
  def test_charts_bd24; assert_in_epsilon(2027.0, worksheet.charts_bd24, 0.002); end
  def test_charts_be24; assert_in_epsilon(2032.0, worksheet.charts_be24, 0.002); end
  def test_charts_bf24; assert_in_epsilon(2037.0, worksheet.charts_bf24, 0.002); end
  def test_charts_bg24; assert_in_epsilon(2042.0, worksheet.charts_bg24, 0.002); end
  def test_charts_bh24; assert_in_epsilon(2047.0, worksheet.charts_bh24, 0.002); end
  def test_charts_bi24; assert_in_epsilon(2052.0, worksheet.charts_bi24, 0.002); end
  def test_charts_d25; assert_equal("Lighting & Appliances", worksheet.charts_d25); end
  def test_charts_ay25; assert_in_delta(0.04951847326289843, worksheet.charts_ay25, 0.002); end
  def test_charts_ba25; assert_in_delta(0.04919984597926077, worksheet.charts_ba25, 0.002); end
  def test_charts_bb25; assert_in_delta(0.06386649806970333, worksheet.charts_bb25, 0.002); end
  def test_charts_bc25; assert_in_delta(0.07908430781964447, worksheet.charts_bc25, 0.002); end
  def test_charts_bd25; assert_in_delta(0.0965430491740722, worksheet.charts_bd25, 0.002); end
  def test_charts_be25; assert_in_delta(0.11765650785342205, worksheet.charts_be25, 0.002); end
  def test_charts_bf25; assert_in_delta(0.12249385301406611, worksheet.charts_bf25, 0.002); end
  def test_charts_bg25; assert_in_delta(0.13068888898097744, worksheet.charts_bg25, 0.002); end
  def test_charts_bh25; assert_in_delta(0.13218914480280364, worksheet.charts_bh25, 0.002); end
  def test_charts_bi25; assert_in_delta(0.13403853829240986, worksheet.charts_bi25, 0.002); end
  def test_charts_d26; assert_equal("Industry", worksheet.charts_d26); end
  def test_charts_ay26; assert_in_delta(0.4102033862786377, worksheet.charts_ay26, 0.002); end
  def test_charts_ba26; assert_in_delta(0.46810110298624097, worksheet.charts_ba26, 0.002); end
  def test_charts_bb26; assert_in_delta(0.490114146995377, worksheet.charts_bb26, 0.002); end
  def test_charts_bc26; assert_in_delta(0.4969661601827857, worksheet.charts_bc26, 0.002); end
  def test_charts_bd26; assert_in_delta(0.49314580812070513, worksheet.charts_bd26, 0.002); end
  def test_charts_be26; assert_in_delta(0.48175478454673826, worksheet.charts_be26, 0.002); end
  def test_charts_bf26; assert_in_delta(0.48036387307455447, worksheet.charts_bf26, 0.002); end
  def test_charts_bg26; assert_in_delta(0.4762089375230067, worksheet.charts_bg26, 0.002); end
  def test_charts_bh26; assert_in_delta(0.47162198700539526, worksheet.charts_bh26, 0.002); end
  def test_charts_bi26; assert_in_delta(0.4629329051294828, worksheet.charts_bi26, 0.002); end
  def test_charts_d27; assert_equal("Transport", worksheet.charts_d27); end
  def test_charts_ay27; assert_in_delta(0.21525775327102792, worksheet.charts_ay27, 0.002); end
  def test_charts_ba27; assert_in_delta(0.17416630653725673, worksheet.charts_ba27, 0.002); end
  def test_charts_bb27; assert_in_delta(0.19547297497690336, worksheet.charts_bb27, 0.002); end
  def test_charts_bc27; assert_in_delta(0.21306244114354478, worksheet.charts_bc27, 0.002); end
  def test_charts_bd27; assert_in_delta(0.2271635166111738, worksheet.charts_bd27, 0.002); end
  def test_charts_be27; assert_in_delta(0.23840511022155295, worksheet.charts_be27, 0.002); end
  def test_charts_bf27; assert_in_delta(0.25286853667346415, worksheet.charts_bf27, 0.002); end
  def test_charts_bg27; assert_in_delta(0.2592165173345157, worksheet.charts_bg27, 0.002); end
  def test_charts_bh27; assert_in_delta(0.2685371367533407, worksheet.charts_bh27, 0.002); end
  def test_charts_bi27; assert_in_delta(0.2763488696075882, worksheet.charts_bi27, 0.002); end
  def test_charts_d28; assert_equal("Agriculture", worksheet.charts_d28); end
  def test_charts_ay28; assert_in_delta(0.04514709270414785, worksheet.charts_ay28, 0.002); end
  def test_charts_ba28; assert_in_delta(0.04872601793240156, worksheet.charts_ba28, 0.002); end
  def test_charts_bb28; assert_in_delta(0.05046808215906697, worksheet.charts_bb28, 0.002); end
  def test_charts_bc28; assert_in_delta(0.05247002285641407, worksheet.charts_bc28, 0.002); end
  def test_charts_bd28; assert_in_delta(0.052824716855372406, worksheet.charts_bd28, 0.002); end
  def test_charts_be28; assert_in_delta(0.05249757191010348, worksheet.charts_be28, 0.002); end
  def test_charts_bf28; assert_in_delta(0.048598182743042624, worksheet.charts_bf28, 0.002); end
  def test_charts_bg28; assert_in_delta(0.04663792435088618, worksheet.charts_bg28, 0.002); end
  def test_charts_bh28; assert_in_delta(0.043629644464422725, worksheet.charts_bh28, 0.002); end
  def test_charts_bi28; assert_in_delta(0.041052459810799156, worksheet.charts_bi28, 0.002); end
  def test_charts_d29; assert_equal("Telecom", worksheet.charts_d29); end
  def test_charts_ay29; assert_in_delta(0.0035256097112881454, worksheet.charts_ay29, 0.002); end
  def test_charts_ba29; assert_in_delta(0.009508638092024315, worksheet.charts_ba29, 0.002); end
  def test_charts_bb29; assert_in_delta(0.008659483240265428, worksheet.charts_bb29, 0.002); end
  def test_charts_bc29; assert_in_delta(0.008085670831795901, worksheet.charts_bc29, 0.002); end
  def test_charts_bd29; assert_in_delta(0.008201861218651255, worksheet.charts_bd29, 0.002); end
  def test_charts_be29; assert_in_delta(0.007932563085467316, worksheet.charts_be29, 0.002); end
  def test_charts_bf29; assert_in_delta(0.007582091389475372, worksheet.charts_bf29, 0.002); end
  def test_charts_bg29; assert_in_delta(0.007763283582336378, worksheet.charts_bg29, 0.002); end
  def test_charts_bh29; assert_in_delta(0.00873149953072994, worksheet.charts_bh29, 0.002); end
  def test_charts_bi29; assert_in_delta(0.010763651249924032, worksheet.charts_bi29, 0.002); end
  def test_charts_d30; assert_equal("Cooking", worksheet.charts_d30); end
  def test_charts_ay30; assert_in_delta(0.2763476847719999, worksheet.charts_ay30, 0.002); end
  def test_charts_ba30; assert_in_delta(0.2502980884728156, worksheet.charts_ba30, 0.002); end
  def test_charts_bb30; assert_in_delta(0.1914188145586839, worksheet.charts_bb30, 0.002); end
  def test_charts_bc30; assert_in_delta(0.15033139716581506, worksheet.charts_bc30, 0.002); end
  def test_charts_bd30; assert_in_delta(0.12212104802002517, worksheet.charts_bd30, 0.002); end
  def test_charts_be30; assert_in_delta(0.10175346238271596, worksheet.charts_be30, 0.002); end
  def test_charts_bf30; assert_in_delta(0.08809346310539723, worksheet.charts_bf30, 0.002); end
  def test_charts_bg30; assert_in_delta(0.07948444822827752, worksheet.charts_bg30, 0.002); end
  def test_charts_bh30; assert_in_delta(0.0752905874433078, worksheet.charts_bh30, 0.002); end
  def test_charts_bi30; assert_in_delta(0.074863575909796, worksheet.charts_bi30, 0.002); end
  def test_charts_c33; assert_equal("Source", worksheet.charts_c33); end
  def test_charts_c34; assert_equal("N.01", worksheet.charts_c34); end
  def test_charts_d34; assert_equal("Nuclear fission", worksheet.charts_d34); end
  def test_charts_ah34; assert_in_epsilon(258.0, worksheet.charts_ah34, 0.002); end
  def test_charts_ai34; assert_in_epsilon(267.4, worksheet.charts_ai34, 0.002); end
  def test_charts_aj34; assert_in_epsilon(272.6, worksheet.charts_aj34, 0.002); end
  def test_charts_ak34; assert_in_epsilon(258.4, worksheet.charts_ak34, 0.002); end
  def test_charts_al34; assert_in_epsilon(228.4, worksheet.charts_al34, 0.002); end
  def test_charts_am34; assert_in_epsilon(241.5, worksheet.charts_am34, 0.002); end
  def test_charts_an34; assert_in_epsilon(233.8, worksheet.charts_an34, 0.002); end
  def test_charts_ao34; assert_in_epsilon(233.1, worksheet.charts_ao34, 0.002); end
  def test_charts_ap34; assert_in_epsilon(211.2, worksheet.charts_ap34, 0.002); end
  def test_charts_aq34; assert_in_epsilon(213.7, worksheet.charts_aq34, 0.002); end
  def test_charts_ar34; assert_in_epsilon(199.2, worksheet.charts_ar34, 0.002); end
  def test_charts_as34; assert_in_epsilon(163.2, worksheet.charts_as34, 0.002); end
  def test_charts_at34; assert_in_epsilon(138.5, worksheet.charts_at34, 0.002); end
  def test_charts_au34; assert_in_epsilon(177.1, worksheet.charts_au34, 0.002); end
  def test_charts_av34; assert_in_epsilon(162.2, worksheet.charts_av34, 0.002); end
  def test_charts_aw34; assert_equal("Dukes 5.6  Electricity fuel use, generation and supply, Major power producers, Fuel used, Nuclear", worksheet.charts_aw34); end
  def test_charts_ay34; assert_in_epsilon(80.94774857142859, worksheet.charts_ay34, 0.002); end
  def test_charts_az34; assert_in_delta(0.0, (worksheet.charts_az34||0), 0.002); end
  def test_charts_ba34; assert_in_epsilon(93.77115428571429, worksheet.charts_ba34, 0.002); end
  def test_charts_bb34; assert_in_epsilon(199.9649828571429, worksheet.charts_bb34, 0.002); end
  def test_charts_bc34; assert_in_epsilon(193.55328000000003, worksheet.charts_bc34, 0.002); end
  def test_charts_bd34; assert_in_epsilon(193.55328000000003, worksheet.charts_bd34, 0.002); end
  def test_charts_be34; assert_in_epsilon(189.54596571428576, worksheet.charts_be34, 0.002); end
  def test_charts_bf34; assert_in_epsilon(180.72987428571432, worksheet.charts_bf34, 0.002); end
  def test_charts_bg34; assert_in_epsilon(176.3218285714286, worksheet.charts_bg34, 0.002); end
  def test_charts_bh34; assert_in_epsilon(167.50573714285716, worksheet.charts_bh34, 0.002); end
  def test_charts_bi34; assert_in_epsilon(167.50573714285716, worksheet.charts_bi34, 0.002); end
  def test_charts_c35; assert_equal("R.01", worksheet.charts_c35); end
  def test_charts_d35; assert_equal("Solar", worksheet.charts_d35); end
  def test_charts_aj35; assert_in_delta(0.0, (worksheet.charts_aj35||0), 0.002); end
  def test_charts_ak35; assert_in_delta(0.0, (worksheet.charts_ak35||0), 0.002); end
  def test_charts_al35; assert_in_delta(0.1, worksheet.charts_al35, 0.002); end
  def test_charts_am35; assert_in_delta(0.2, worksheet.charts_am35, 0.002); end
  def test_charts_an35; assert_in_delta(0.2, worksheet.charts_an35, 0.002); end
  def test_charts_ao35; assert_in_delta(0.2, worksheet.charts_ao35, 0.002); end
  def test_charts_ap35; assert_in_delta(0.3, worksheet.charts_ap35, 0.002); end
  def test_charts_aq35; assert_in_delta(0.3, worksheet.charts_aq35, 0.002); end
  def test_charts_ar35; assert_in_delta(0.4, worksheet.charts_ar35, 0.002); end
  def test_charts_as35; assert_in_delta(0.5, worksheet.charts_as35, 0.002); end
  def test_charts_at35; assert_in_delta(0.7, worksheet.charts_at35, 0.002); end
  def test_charts_au35; assert_in_delta(0.8, worksheet.charts_au35, 0.002); end
  def test_charts_av35; assert_in_delta(1.0, worksheet.charts_av35, 0.002); end
  def test_charts_aw35; assert_equal("Dukes 7.1  Commodity balances Geothermal and active solar heat, Autogenerators & Domestic", worksheet.charts_aw35); end
  def test_charts_ay35; assert_in_delta(0.0, (worksheet.charts_ay35||0), 0.002); end
  def test_charts_az35; assert_in_delta(0.0, (worksheet.charts_az35||0), 0.002); end
  def test_charts_ba35; assert_in_epsilon(1.56727314, worksheet.charts_ba35, 0.002); end
  def test_charts_bb35; assert_in_epsilon(10.911534564022219, worksheet.charts_bb35, 0.002); end
  def test_charts_bc35; assert_in_epsilon(27.26546309941403, worksheet.charts_bc35, 0.002); end
  def test_charts_bd35; assert_in_epsilon(48.89299422565567, worksheet.charts_bd35, 0.002); end
  def test_charts_be35; assert_in_epsilon(74.07697845643895, worksheet.charts_be35, 0.002); end
  def test_charts_bf35; assert_in_epsilon(96.03124385430904, worksheet.charts_bf35, 0.002); end
  def test_charts_bg35; assert_in_epsilon(108.31259745899473, worksheet.charts_bg35, 0.002); end
  def test_charts_bh35; assert_in_epsilon(106.27845543771349, worksheet.charts_bh35, 0.002); end
  def test_charts_bi35; assert_in_epsilon(92.93002046477042, worksheet.charts_bi35, 0.002); end
  def test_charts_c36; assert_equal("R.02", worksheet.charts_c36); end
  def test_charts_d36; assert_equal("Wind", worksheet.charts_d36); end
  def test_charts_ah36; assert_in_delta(0.0, (worksheet.charts_ah36||0), 0.002); end
  def test_charts_ai36; assert_in_delta(0.0, (worksheet.charts_ai36||0), 0.002); end
  def test_charts_aj36; assert_in_delta(0.9, worksheet.charts_aj36, 0.002); end
  def test_charts_ak36; assert_in_delta(0.9, worksheet.charts_ak36, 0.002); end
  def test_charts_al36; assert_in_delta(0.9, worksheet.charts_al36, 0.002); end
  def test_charts_am36; assert_in_delta(1.0, worksheet.charts_am36, 0.002); end
  def test_charts_an36; assert_in_epsilon(1.3, worksheet.charts_an36, 0.002); end
  def test_charts_ao36; assert_in_epsilon(1.3, worksheet.charts_ao36, 0.002); end
  def test_charts_ap36; assert_in_epsilon(1.9, worksheet.charts_ap36, 0.002); end
  def test_charts_aq36; assert_in_epsilon(2.9, worksheet.charts_aq36, 0.002); end
  def test_charts_ar36; assert_in_epsilon(4.2, worksheet.charts_ar36, 0.002); end
  def test_charts_as36; assert_in_epsilon(5.3, worksheet.charts_as36, 0.002); end
  def test_charts_at36; assert_in_epsilon(7.1, worksheet.charts_at36, 0.002); end
  def test_charts_au36; assert_in_epsilon(9.3, worksheet.charts_au36, 0.002); end
  def test_charts_av36; assert_in_epsilon(10.2, worksheet.charts_av36, 0.002); end
  def test_charts_aw36; assert_equal("Dukes 5.6 Non-thermal sources, Other + 7.1 Wind, Autogenerators", worksheet.charts_aw36); end
  def test_charts_ay36; assert_in_epsilon(12.437183268, worksheet.charts_ay36, 0.002); end
  def test_charts_az36; assert_in_delta(0.0, (worksheet.charts_az36||0), 0.002); end
  def test_charts_ba36; assert_in_epsilon(18.7222492332, worksheet.charts_ba36, 0.002); end
  def test_charts_bb36; assert_in_epsilon(36.6048892332, worksheet.charts_bb36, 0.002); end
  def test_charts_bc36; assert_in_epsilon(59.9662792332, worksheet.charts_bc36, 0.002); end
  def test_charts_bd36; assert_in_epsilon(84.3357592332, worksheet.charts_bd36, 0.002); end
  def test_charts_be36; assert_in_epsilon(115.49888923319999, worksheet.charts_be36, 0.002); end
  def test_charts_bf36; assert_in_epsilon(136.9861259652, worksheet.charts_bf36, 0.002); end
  def test_charts_bg36; assert_in_epsilon(151.03817999999998, worksheet.charts_bg36, 0.002); end
  def test_charts_bh36; assert_in_epsilon(161.16290999999998, worksheet.charts_bh36, 0.002); end
  def test_charts_bi36; assert_in_epsilon(161.95184999999998, worksheet.charts_bi36, 0.002); end
  def test_charts_c37; assert_equal("R.03", worksheet.charts_c37); end
  def test_charts_d37; assert_equal("Tidal", worksheet.charts_d37); end
  def test_charts_h37; assert_in_delta(0.0, (worksheet.charts_h37||0), 0.002); end
  def test_charts_i37; assert_in_delta(0.0, (worksheet.charts_i37||0), 0.002); end
  def test_charts_j37; assert_in_delta(0.0, (worksheet.charts_j37||0), 0.002); end
  def test_charts_k37; assert_in_delta(0.0, (worksheet.charts_k37||0), 0.002); end
  def test_charts_l37; assert_in_delta(0.0, (worksheet.charts_l37||0), 0.002); end
  def test_charts_m37; assert_in_delta(0.0, (worksheet.charts_m37||0), 0.002); end
  def test_charts_n37; assert_in_delta(0.0, (worksheet.charts_n37||0), 0.002); end
  def test_charts_o37; assert_in_delta(0.0, (worksheet.charts_o37||0), 0.002); end
  def test_charts_p37; assert_in_delta(0.0, (worksheet.charts_p37||0), 0.002); end
  def test_charts_q37; assert_in_delta(0.0, (worksheet.charts_q37||0), 0.002); end
  def test_charts_r37; assert_in_delta(0.0, (worksheet.charts_r37||0), 0.002); end
  def test_charts_s37; assert_in_delta(0.0, (worksheet.charts_s37||0), 0.002); end
  def test_charts_t37; assert_in_delta(0.0, (worksheet.charts_t37||0), 0.002); end
  def test_charts_u37; assert_in_delta(0.0, (worksheet.charts_u37||0), 0.002); end
  def test_charts_v37; assert_in_delta(0.0, (worksheet.charts_v37||0), 0.002); end
  def test_charts_w37; assert_in_delta(0.0, (worksheet.charts_w37||0), 0.002); end
  def test_charts_x37; assert_in_delta(0.0, (worksheet.charts_x37||0), 0.002); end
  def test_charts_y37; assert_in_delta(0.0, (worksheet.charts_y37||0), 0.002); end
  def test_charts_z37; assert_in_delta(0.0, (worksheet.charts_z37||0), 0.002); end
  def test_charts_aa37; assert_in_delta(0.0, (worksheet.charts_aa37||0), 0.002); end
  def test_charts_ab37; assert_in_delta(0.0, (worksheet.charts_ab37||0), 0.002); end
  def test_charts_ac37; assert_in_delta(0.0, (worksheet.charts_ac37||0), 0.002); end
  def test_charts_ad37; assert_in_delta(0.0, (worksheet.charts_ad37||0), 0.002); end
  def test_charts_ae37; assert_in_delta(0.0, (worksheet.charts_ae37||0), 0.002); end
  def test_charts_af37; assert_in_delta(0.0, (worksheet.charts_af37||0), 0.002); end
  def test_charts_ag37; assert_in_delta(0.0, (worksheet.charts_ag37||0), 0.002); end
  def test_charts_ah37; assert_in_delta(0.0, (worksheet.charts_ah37||0), 0.002); end
  def test_charts_ai37; assert_in_delta(0.0, (worksheet.charts_ai37||0), 0.002); end
  def test_charts_aj37; assert_in_delta(0.0, (worksheet.charts_aj37||0), 0.002); end
  def test_charts_ak37; assert_in_delta(0.0, (worksheet.charts_ak37||0), 0.002); end
  def test_charts_al37; assert_in_delta(0.0, (worksheet.charts_al37||0), 0.002); end
  def test_charts_am37; assert_in_delta(0.0, (worksheet.charts_am37||0), 0.002); end
  def test_charts_an37; assert_in_delta(0.0, (worksheet.charts_an37||0), 0.002); end
  def test_charts_ao37; assert_in_delta(0.0, (worksheet.charts_ao37||0), 0.002); end
  def test_charts_ap37; assert_in_delta(0.0, (worksheet.charts_ap37||0), 0.002); end
  def test_charts_aq37; assert_in_delta(0.0, (worksheet.charts_aq37||0), 0.002); end
  def test_charts_ar37; assert_in_delta(0.0, (worksheet.charts_ar37||0), 0.002); end
  def test_charts_as37; assert_in_delta(0.0, (worksheet.charts_as37||0), 0.002); end
  def test_charts_at37; assert_in_delta(0.0, (worksheet.charts_at37||0), 0.002); end
  def test_charts_au37; assert_in_delta(0.0, (worksheet.charts_au37||0), 0.002); end
  def test_charts_av37; assert_in_delta(0.0, (worksheet.charts_av37||0), 0.002); end
  def test_charts_aw37; assert_equal("New technology", worksheet.charts_aw37); end
  def test_charts_ay37; assert_in_delta(0.0, (worksheet.charts_ay37||0), 0.002); end
  def test_charts_az37; assert_in_delta(0.0, (worksheet.charts_az37||0), 0.002); end
  def test_charts_ba37; assert_in_delta(0.0, (worksheet.charts_ba37||0), 0.002); end
  def test_charts_bb37; assert_in_delta(0.0, (worksheet.charts_bb37||0), 0.002); end
  def test_charts_bc37; assert_in_delta(0.0, (worksheet.charts_bc37||0), 0.002); end
  def test_charts_bd37; assert_in_delta(0.0, (worksheet.charts_bd37||0), 0.002); end
  def test_charts_be37; assert_in_delta(0.0, (worksheet.charts_be37||0), 0.002); end
  def test_charts_bf37; assert_in_delta(0.0, (worksheet.charts_bf37||0), 0.002); end
  def test_charts_bg37; assert_in_delta(0.0, (worksheet.charts_bg37||0), 0.002); end
  def test_charts_bh37; assert_in_delta(0.0, (worksheet.charts_bh37||0), 0.002); end
  def test_charts_bi37; assert_in_delta(0.0, (worksheet.charts_bi37||0), 0.002); end
  def test_charts_c38; assert_equal("R.04", worksheet.charts_c38); end
  def test_charts_d38; assert_equal("Wave", worksheet.charts_d38); end
  def test_charts_h38; assert_in_delta(0.0, (worksheet.charts_h38||0), 0.002); end
  def test_charts_i38; assert_in_delta(0.0, (worksheet.charts_i38||0), 0.002); end
  def test_charts_j38; assert_in_delta(0.0, (worksheet.charts_j38||0), 0.002); end
  def test_charts_k38; assert_in_delta(0.0, (worksheet.charts_k38||0), 0.002); end
  def test_charts_l38; assert_in_delta(0.0, (worksheet.charts_l38||0), 0.002); end
  def test_charts_m38; assert_in_delta(0.0, (worksheet.charts_m38||0), 0.002); end
  def test_charts_n38; assert_in_delta(0.0, (worksheet.charts_n38||0), 0.002); end
  def test_charts_o38; assert_in_delta(0.0, (worksheet.charts_o38||0), 0.002); end
  def test_charts_p38; assert_in_delta(0.0, (worksheet.charts_p38||0), 0.002); end
  def test_charts_q38; assert_in_delta(0.0, (worksheet.charts_q38||0), 0.002); end
  def test_charts_r38; assert_in_delta(0.0, (worksheet.charts_r38||0), 0.002); end
  def test_charts_s38; assert_in_delta(0.0, (worksheet.charts_s38||0), 0.002); end
  def test_charts_t38; assert_in_delta(0.0, (worksheet.charts_t38||0), 0.002); end
  def test_charts_u38; assert_in_delta(0.0, (worksheet.charts_u38||0), 0.002); end
  def test_charts_v38; assert_in_delta(0.0, (worksheet.charts_v38||0), 0.002); end
  def test_charts_w38; assert_in_delta(0.0, (worksheet.charts_w38||0), 0.002); end
  def test_charts_x38; assert_in_delta(0.0, (worksheet.charts_x38||0), 0.002); end
  def test_charts_y38; assert_in_delta(0.0, (worksheet.charts_y38||0), 0.002); end
  def test_charts_z38; assert_in_delta(0.0, (worksheet.charts_z38||0), 0.002); end
  def test_charts_aa38; assert_in_delta(0.0, (worksheet.charts_aa38||0), 0.002); end
  def test_charts_ab38; assert_in_delta(0.0, (worksheet.charts_ab38||0), 0.002); end
  def test_charts_ac38; assert_in_delta(0.0, (worksheet.charts_ac38||0), 0.002); end
  def test_charts_ad38; assert_in_delta(0.0, (worksheet.charts_ad38||0), 0.002); end
  def test_charts_ae38; assert_in_delta(0.0, (worksheet.charts_ae38||0), 0.002); end
  def test_charts_af38; assert_in_delta(0.0, (worksheet.charts_af38||0), 0.002); end
  def test_charts_ag38; assert_in_delta(0.0, (worksheet.charts_ag38||0), 0.002); end
  def test_charts_ah38; assert_in_delta(0.0, (worksheet.charts_ah38||0), 0.002); end
  def test_charts_ai38; assert_in_delta(0.0, (worksheet.charts_ai38||0), 0.002); end
  def test_charts_aj38; assert_in_delta(0.0, (worksheet.charts_aj38||0), 0.002); end
  def test_charts_ak38; assert_in_delta(0.0, (worksheet.charts_ak38||0), 0.002); end
  def test_charts_al38; assert_in_delta(0.0, (worksheet.charts_al38||0), 0.002); end
  def test_charts_am38; assert_in_delta(0.0, (worksheet.charts_am38||0), 0.002); end
  def test_charts_an38; assert_in_delta(0.0, (worksheet.charts_an38||0), 0.002); end
  def test_charts_ao38; assert_in_delta(0.0, (worksheet.charts_ao38||0), 0.002); end
  def test_charts_ap38; assert_in_delta(0.0, (worksheet.charts_ap38||0), 0.002); end
  def test_charts_aq38; assert_in_delta(0.0, (worksheet.charts_aq38||0), 0.002); end
  def test_charts_ar38; assert_in_delta(0.0, (worksheet.charts_ar38||0), 0.002); end
  def test_charts_as38; assert_in_delta(0.0, (worksheet.charts_as38||0), 0.002); end
  def test_charts_at38; assert_in_delta(0.0, (worksheet.charts_at38||0), 0.002); end
  def test_charts_au38; assert_in_delta(0.0, (worksheet.charts_au38||0), 0.002); end
  def test_charts_av38; assert_in_delta(0.0, (worksheet.charts_av38||0), 0.002); end
  def test_charts_aw38; assert_equal("New technology", worksheet.charts_aw38); end
  def test_charts_ay38; assert_in_delta(0.0, (worksheet.charts_ay38||0), 0.002); end
  def test_charts_az38; assert_in_delta(0.0, (worksheet.charts_az38||0), 0.002); end
  def test_charts_ba38; assert_in_delta(0.0, (worksheet.charts_ba38||0), 0.002); end
  def test_charts_bb38; assert_in_delta(0.0, (worksheet.charts_bb38||0), 0.002); end
  def test_charts_bc38; assert_in_delta(0.0, (worksheet.charts_bc38||0), 0.002); end
  def test_charts_bd38; assert_in_delta(0.0, (worksheet.charts_bd38||0), 0.002); end
  def test_charts_be38; assert_in_delta(0.0, (worksheet.charts_be38||0), 0.002); end
  def test_charts_bf38; assert_in_delta(0.0, (worksheet.charts_bf38||0), 0.002); end
  def test_charts_bg38; assert_in_delta(0.0, (worksheet.charts_bg38||0), 0.002); end
  def test_charts_bh38; assert_in_delta(0.0, (worksheet.charts_bh38||0), 0.002); end
  def test_charts_bi38; assert_in_delta(0.0, (worksheet.charts_bi38||0), 0.002); end
  def test_charts_c39; assert_equal("R.05", worksheet.charts_c39); end
  def test_charts_d39; assert_equal("Geothermal", worksheet.charts_d39); end
  def test_charts_h39; assert_in_delta(0.0, (worksheet.charts_h39||0), 0.002); end
  def test_charts_i39; assert_in_delta(0.0, (worksheet.charts_i39||0), 0.002); end
  def test_charts_j39; assert_in_delta(0.0, (worksheet.charts_j39||0), 0.002); end
  def test_charts_k39; assert_in_delta(0.0, (worksheet.charts_k39||0), 0.002); end
  def test_charts_l39; assert_in_delta(0.0, (worksheet.charts_l39||0), 0.002); end
  def test_charts_m39; assert_in_delta(0.0, (worksheet.charts_m39||0), 0.002); end
  def test_charts_n39; assert_in_delta(0.0, (worksheet.charts_n39||0), 0.002); end
  def test_charts_o39; assert_in_delta(0.0, (worksheet.charts_o39||0), 0.002); end
  def test_charts_p39; assert_in_delta(0.0, (worksheet.charts_p39||0), 0.002); end
  def test_charts_q39; assert_in_delta(0.0, (worksheet.charts_q39||0), 0.002); end
  def test_charts_r39; assert_in_delta(0.0, (worksheet.charts_r39||0), 0.002); end
  def test_charts_s39; assert_in_delta(0.0, (worksheet.charts_s39||0), 0.002); end
  def test_charts_t39; assert_in_delta(0.0, (worksheet.charts_t39||0), 0.002); end
  def test_charts_u39; assert_in_delta(0.0, (worksheet.charts_u39||0), 0.002); end
  def test_charts_v39; assert_in_delta(0.0, (worksheet.charts_v39||0), 0.002); end
  def test_charts_w39; assert_in_delta(0.0, (worksheet.charts_w39||0), 0.002); end
  def test_charts_x39; assert_in_delta(0.0, (worksheet.charts_x39||0), 0.002); end
  def test_charts_y39; assert_in_delta(0.0, (worksheet.charts_y39||0), 0.002); end
  def test_charts_z39; assert_in_delta(0.0, (worksheet.charts_z39||0), 0.002); end
  def test_charts_aa39; assert_in_delta(0.0, (worksheet.charts_aa39||0), 0.002); end
  def test_charts_ab39; assert_in_delta(0.0, (worksheet.charts_ab39||0), 0.002); end
  def test_charts_ac39; assert_in_delta(0.0, (worksheet.charts_ac39||0), 0.002); end
  def test_charts_ad39; assert_in_delta(0.0, (worksheet.charts_ad39||0), 0.002); end
  def test_charts_ae39; assert_in_delta(0.0, (worksheet.charts_ae39||0), 0.002); end
  def test_charts_af39; assert_in_delta(0.0, (worksheet.charts_af39||0), 0.002); end
  def test_charts_ag39; assert_in_delta(0.0, (worksheet.charts_ag39||0), 0.002); end
  def test_charts_ah39; assert_in_delta(0.0, (worksheet.charts_ah39||0), 0.002); end
  def test_charts_ai39; assert_in_delta(0.0, (worksheet.charts_ai39||0), 0.002); end
  def test_charts_aj39; assert_in_delta(0.0, (worksheet.charts_aj39||0), 0.002); end
  def test_charts_ak39; assert_in_delta(0.0, (worksheet.charts_ak39||0), 0.002); end
  def test_charts_al39; assert_in_delta(0.0, (worksheet.charts_al39||0), 0.002); end
  def test_charts_am39; assert_in_delta(0.0, (worksheet.charts_am39||0), 0.002); end
  def test_charts_an39; assert_in_delta(0.0, (worksheet.charts_an39||0), 0.002); end
  def test_charts_ao39; assert_in_delta(0.0, (worksheet.charts_ao39||0), 0.002); end
  def test_charts_ap39; assert_in_delta(0.0, (worksheet.charts_ap39||0), 0.002); end
  def test_charts_aq39; assert_in_delta(0.0, (worksheet.charts_aq39||0), 0.002); end
  def test_charts_ar39; assert_in_delta(0.0, (worksheet.charts_ar39||0), 0.002); end
  def test_charts_as39; assert_in_delta(0.0, (worksheet.charts_as39||0), 0.002); end
  def test_charts_at39; assert_in_delta(0.0, (worksheet.charts_at39||0), 0.002); end
  def test_charts_au39; assert_in_delta(0.0, (worksheet.charts_au39||0), 0.002); end
  def test_charts_av39; assert_in_delta(0.0, (worksheet.charts_av39||0), 0.002); end
  def test_charts_aw39; assert_equal("New technology", worksheet.charts_aw39); end
  def test_charts_ay39; assert_in_delta(0.0, (worksheet.charts_ay39||0), 0.002); end
  def test_charts_az39; assert_in_delta(0.0, (worksheet.charts_az39||0), 0.002); end
  def test_charts_ba39; assert_in_delta(0.0, (worksheet.charts_ba39||0), 0.002); end
  def test_charts_bb39; assert_in_delta(0.0, (worksheet.charts_bb39||0), 0.002); end
  def test_charts_bc39; assert_in_delta(0.0, (worksheet.charts_bc39||0), 0.002); end
  def test_charts_bd39; assert_in_delta(0.0, (worksheet.charts_bd39||0), 0.002); end
  def test_charts_be39; assert_in_delta(0.0, (worksheet.charts_be39||0), 0.002); end
  def test_charts_bf39; assert_in_delta(0.0, (worksheet.charts_bf39||0), 0.002); end
  def test_charts_bg39; assert_in_delta(0.0, (worksheet.charts_bg39||0), 0.002); end
  def test_charts_bh39; assert_in_delta(0.0, (worksheet.charts_bh39||0), 0.002); end
  def test_charts_bi39; assert_in_delta(0.0, (worksheet.charts_bi39||0), 0.002); end
  def test_charts_c40; assert_equal("R.06", worksheet.charts_c40); end
  def test_charts_d40; assert_equal("Hydro", worksheet.charts_d40); end
  def test_charts_ah40; assert_in_epsilon(2.8, worksheet.charts_ah40, 0.002); end
  def test_charts_ai40; assert_in_epsilon(3.3, worksheet.charts_ai40, 0.002); end
  def test_charts_aj40; assert_in_epsilon(5.1, worksheet.charts_aj40, 0.002); end
  def test_charts_ak40; assert_in_epsilon(5.3, worksheet.charts_ak40, 0.002); end
  def test_charts_al40; assert_in_epsilon(5.1, worksheet.charts_al40, 0.002); end
  def test_charts_am40; assert_in_epsilon(4.1, worksheet.charts_am40, 0.002); end
  def test_charts_an40; assert_in_epsilon(4.8, worksheet.charts_an40, 0.002); end
  def test_charts_ao40; assert_in_epsilon(3.2, worksheet.charts_ao40, 0.002); end
  def test_charts_ap40; assert_in_epsilon(4.8, worksheet.charts_ap40, 0.002); end
  def test_charts_aq40; assert_in_epsilon(4.9, worksheet.charts_aq40, 0.002); end
  def test_charts_ar40; assert_in_epsilon(4.6, worksheet.charts_ar40, 0.002); end
  def test_charts_as40; assert_in_epsilon(5.1, worksheet.charts_as40, 0.002); end
  def test_charts_at40; assert_in_epsilon(5.2, worksheet.charts_at40, 0.002); end
  def test_charts_au40; assert_in_epsilon(5.3, worksheet.charts_au40, 0.002); end
  def test_charts_av40; assert_in_epsilon(3.6, worksheet.charts_av40, 0.002); end
  def test_charts_aw40; assert_equal("Dukes 5.6 Hydro-natural flow, Fuel used + Dules 7.1 Hydro, Autogenerators", worksheet.charts_aw40); end
  def test_charts_ay40; assert_in_epsilon(128.510594388, worksheet.charts_ay40, 0.002); end
  def test_charts_az40; assert_in_delta(0.0, (worksheet.charts_az40||0), 0.002); end
  def test_charts_ba40; assert_in_epsilon(155.84385898800002, worksheet.charts_ba40, 0.002); end
  def test_charts_bb40; assert_in_epsilon(189.41763898800005, worksheet.charts_bb40, 0.002); end
  def test_charts_bc40; assert_in_epsilon(195.75107398800003, worksheet.charts_bc40, 0.002); end
  def test_charts_bd40; assert_in_epsilon(199.56428398800003, worksheet.charts_bd40, 0.002); end
  def test_charts_be40; assert_in_epsilon(203.46515398800005, worksheet.charts_be40, 0.002); end
  def test_charts_bf40; assert_in_epsilon(205.43750398800003, worksheet.charts_bf40, 0.002); end
  def test_charts_bg40; assert_in_epsilon(205.71585955200004, worksheet.charts_bg40, 0.002); end
  def test_charts_bh40; assert_in_epsilon(206.60431118400004, worksheet.charts_bh40, 0.002); end
  def test_charts_bi40; assert_in_epsilon(207.19601618400003, worksheet.charts_bi40, 0.002); end
  def test_charts_c41; assert_equal("Y.02", worksheet.charts_c41); end
  def test_charts_d41; assert_equal("Electricity oversupply (imports)", worksheet.charts_d41); end
  def test_charts_h41; assert_in_delta(0.6, worksheet.charts_h41, 0.002); end
  def test_charts_i41; assert_in_delta(0.1, worksheet.charts_i41, 0.002); end
  def test_charts_j41; assert_in_delta(0.5, worksheet.charts_j41, 0.002); end
  def test_charts_k41; assert_in_delta(0.1, worksheet.charts_k41, 0.002); end
  def test_charts_l41; assert_in_delta(0.1, worksheet.charts_l41, 0.002); end
  def test_charts_m41; assert_in_delta(0.1, worksheet.charts_m41, 0.002); end
  def test_charts_n41; assert_in_delta(-0.1, worksheet.charts_n41, 0.002); end
  def test_charts_o41; assert_in_delta(0.0, (worksheet.charts_o41||0), 0.002); end
  def test_charts_p41; assert_in_delta(0.1, worksheet.charts_p41, 0.002); end
  def test_charts_q41; assert_in_delta(0.0, (worksheet.charts_q41||0), 0.002); end
  def test_charts_r41; assert_in_delta(0.0, (worksheet.charts_r41||0), 0.002); end
  def test_charts_s41; assert_in_delta(0.0, (worksheet.charts_s41||0), 0.002); end
  def test_charts_t41; assert_in_delta(0.0, (worksheet.charts_t41||0), 0.002); end
  def test_charts_u41; assert_in_delta(0.0, (worksheet.charts_u41||0), 0.002); end
  def test_charts_v41; assert_in_delta(0.0, (worksheet.charts_v41||0), 0.002); end
  def test_charts_w41; assert_in_delta(0.0, (worksheet.charts_w41||0), 0.002); end
  def test_charts_x41; assert_in_epsilon(4.3, worksheet.charts_x41, 0.002); end
  def test_charts_y41; assert_in_epsilon(11.6, worksheet.charts_y41, 0.002); end
  def test_charts_z41; assert_in_epsilon(12.1, worksheet.charts_z41, 0.002); end
  def test_charts_aa41; assert_in_epsilon(12.6, worksheet.charts_aa41, 0.002); end
  def test_charts_ab41; assert_in_epsilon(11.9, worksheet.charts_ab41, 0.002); end
  def test_charts_ac41; assert_in_epsilon(16.4, worksheet.charts_ac41, 0.002); end
  def test_charts_ad41; assert_in_epsilon(16.7, worksheet.charts_ad41, 0.002); end
  def test_charts_ae41; assert_in_epsilon(16.7, worksheet.charts_ae41, 0.002); end
  def test_charts_af41; assert_in_epsilon(16.9, worksheet.charts_af41, 0.002); end
  def test_charts_ag41; assert_in_epsilon(16.6, worksheet.charts_ag41, 0.002); end
  def test_charts_ah41; assert_in_epsilon(16.8, worksheet.charts_ah41, 0.002); end
  def test_charts_ai41; assert_in_epsilon(16.6, worksheet.charts_ai41, 0.002); end
  def test_charts_aj41; assert_in_epsilon(12.5, worksheet.charts_aj41, 0.002); end
  def test_charts_ak41; assert_in_epsilon(14.2, worksheet.charts_ak41, 0.002); end
  def test_charts_al41; assert_in_epsilon(14.2, worksheet.charts_al41, 0.002); end
  def test_charts_am41; assert_in_epsilon(10.4, worksheet.charts_am41, 0.002); end
  def test_charts_an41; assert_in_epsilon(8.4, worksheet.charts_an41, 0.002); end
  def test_charts_ao41; assert_in_epsilon(2.2, worksheet.charts_ao41, 0.002); end
  def test_charts_ap41; assert_in_epsilon(7.5, worksheet.charts_ap41, 0.002); end
  def test_charts_aq41; assert_in_epsilon(8.3, worksheet.charts_aq41, 0.002); end
  def test_charts_ar41; assert_in_epsilon(7.5, worksheet.charts_ar41, 0.002); end
  def test_charts_as41; assert_in_epsilon(5.2, worksheet.charts_as41, 0.002); end
  def test_charts_at41; assert_in_epsilon(11.0, worksheet.charts_at41, 0.002); end
  def test_charts_au41; assert_in_epsilon(2.9, worksheet.charts_au41, 0.002); end
  def test_charts_av41; assert_in_epsilon(2.7, worksheet.charts_av41, 0.002); end
  def test_charts_aw41; assert_equal("DUKES long-term trends  5.1.2, Net imports", worksheet.charts_aw41); end
  def test_charts_ay41; assert_in_delta(1.0, worksheet.charts_ay41, 0.002); end
  def test_charts_az41; assert_in_delta(0.0, (worksheet.charts_az41||0), 0.002); end
  def test_charts_ba41; assert_in_epsilon(-1.4639708854524542, worksheet.charts_ba41, 0.002); end
  def test_charts_bb41; assert_in_epsilon(14.000000000000455, worksheet.charts_bb41, 0.002); end
  def test_charts_bc41; assert_in_epsilon(21.000000000000227, worksheet.charts_bc41, 0.002); end
  def test_charts_bd41; assert_in_epsilon(30.999999999999545, worksheet.charts_bd41, 0.002); end
  def test_charts_be41; assert_in_epsilon(39.999999999999545, worksheet.charts_be41, 0.002); end
  def test_charts_bf41; assert_in_epsilon(49.0, worksheet.charts_bf41, 0.002); end
  def test_charts_bg41; assert_in_epsilon(55.00000000000091, worksheet.charts_bg41, 0.002); end
  def test_charts_bh41; assert_in_epsilon(55.00000000000091, worksheet.charts_bh41, 0.002); end
  def test_charts_bi41; assert_in_epsilon(55.00000000000091, worksheet.charts_bi41, 0.002); end
  def test_charts_d42; assert_equal("Primary electricity, solar, marine, and net imports", worksheet.charts_d42); end
  def test_charts_aj42; assert_in_epsilon(291.1, worksheet.charts_aj42, 0.002); end
  def test_charts_ak42; assert_in_epsilon(278.8, worksheet.charts_ak42, 0.002); end
  def test_charts_al42; assert_in_epsilon(248.7, worksheet.charts_al42, 0.002); end
  def test_charts_am42; assert_in_epsilon(257.1, worksheet.charts_am42, 0.002); end
  def test_charts_an42; assert_in_epsilon(248.4, worksheet.charts_an42, 0.002); end
  def test_charts_ao42; assert_in_epsilon(240.0, worksheet.charts_ao42, 0.002); end
  def test_charts_ap42; assert_in_epsilon(225.8, worksheet.charts_ap42, 0.002); end
  def test_charts_aq42; assert_in_epsilon(230.2, worksheet.charts_aq42, 0.002); end
  def test_charts_ar42; assert_in_epsilon(216.0, worksheet.charts_ar42, 0.002); end
  def test_charts_as42; assert_in_epsilon(179.4, worksheet.charts_as42, 0.002); end
  def test_charts_at42; assert_in_epsilon(162.5, worksheet.charts_at42, 0.002); end
  def test_charts_au42; assert_in_epsilon(195.4, worksheet.charts_au42, 0.002); end
  def test_charts_av42; assert_in_epsilon(179.7, worksheet.charts_av42, 0.002); end
  def test_charts_ay42; assert_in_epsilon(221.89552622742858, worksheet.charts_ay42, 0.002); end
  def test_charts_az42; assert_in_delta(0.0, (worksheet.charts_az42||0), 0.002); end
  def test_charts_ba42; assert_in_epsilon(269.9045356469143, worksheet.charts_ba42, 0.002); end
  def test_charts_bb42; assert_in_epsilon(436.8990456423652, worksheet.charts_bb42, 0.002); end
  def test_charts_bc42; assert_in_epsilon(476.5360963206141, worksheet.charts_bc42, 0.002); end
  def test_charts_bd42; assert_in_epsilon(526.3463174468558, worksheet.charts_bd42, 0.002); end
  def test_charts_be42; assert_in_epsilon(582.5869873919248, worksheet.charts_be42, 0.002); end
  def test_charts_bf42; assert_in_epsilon(619.1847480932233, worksheet.charts_bf42, 0.002); end
  def test_charts_bg42; assert_in_epsilon(641.3884655824234, worksheet.charts_bg42, 0.002); end
  def test_charts_bh42; assert_in_epsilon(641.5514137645707, worksheet.charts_bh42, 0.002); end
  def test_charts_bi42; assert_in_epsilon(629.5836237916276, worksheet.charts_bi42, 0.002); end
  def test_charts_c43; assert_equal("R.07", worksheet.charts_c43); end
  def test_charts_d43; assert_equal("Environmental heat", worksheet.charts_d43); end
  def test_charts_h43; assert_in_delta(0.0, (worksheet.charts_h43||0), 0.002); end
  def test_charts_i43; assert_in_delta(0.0, (worksheet.charts_i43||0), 0.002); end
  def test_charts_j43; assert_in_delta(0.0, (worksheet.charts_j43||0), 0.002); end
  def test_charts_k43; assert_in_delta(0.0, (worksheet.charts_k43||0), 0.002); end
  def test_charts_l43; assert_in_delta(0.0, (worksheet.charts_l43||0), 0.002); end
  def test_charts_m43; assert_in_delta(0.0, (worksheet.charts_m43||0), 0.002); end
  def test_charts_n43; assert_in_delta(0.0, (worksheet.charts_n43||0), 0.002); end
  def test_charts_o43; assert_in_delta(0.0, (worksheet.charts_o43||0), 0.002); end
  def test_charts_p43; assert_in_delta(0.0, (worksheet.charts_p43||0), 0.002); end
  def test_charts_q43; assert_in_delta(0.0, (worksheet.charts_q43||0), 0.002); end
  def test_charts_r43; assert_in_delta(0.0, (worksheet.charts_r43||0), 0.002); end
  def test_charts_s43; assert_in_delta(0.0, (worksheet.charts_s43||0), 0.002); end
  def test_charts_t43; assert_in_delta(0.0, (worksheet.charts_t43||0), 0.002); end
  def test_charts_u43; assert_in_delta(0.0, (worksheet.charts_u43||0), 0.002); end
  def test_charts_v43; assert_in_delta(0.0, (worksheet.charts_v43||0), 0.002); end
  def test_charts_w43; assert_in_delta(0.0, (worksheet.charts_w43||0), 0.002); end
  def test_charts_x43; assert_in_delta(0.0, (worksheet.charts_x43||0), 0.002); end
  def test_charts_y43; assert_in_delta(0.0, (worksheet.charts_y43||0), 0.002); end
  def test_charts_z43; assert_in_delta(0.0, (worksheet.charts_z43||0), 0.002); end
  def test_charts_aa43; assert_in_delta(0.0, (worksheet.charts_aa43||0), 0.002); end
  def test_charts_ab43; assert_in_delta(0.0, (worksheet.charts_ab43||0), 0.002); end
  def test_charts_ac43; assert_in_delta(0.0, (worksheet.charts_ac43||0), 0.002); end
  def test_charts_ad43; assert_in_delta(0.0, (worksheet.charts_ad43||0), 0.002); end
  def test_charts_ae43; assert_in_delta(0.0, (worksheet.charts_ae43||0), 0.002); end
  def test_charts_af43; assert_in_delta(0.0, (worksheet.charts_af43||0), 0.002); end
  def test_charts_ag43; assert_in_delta(0.0, (worksheet.charts_ag43||0), 0.002); end
  def test_charts_ah43; assert_in_delta(0.0, (worksheet.charts_ah43||0), 0.002); end
  def test_charts_ai43; assert_in_delta(0.0, (worksheet.charts_ai43||0), 0.002); end
  def test_charts_aj43; assert_in_delta(0.0, (worksheet.charts_aj43||0), 0.002); end
  def test_charts_ak43; assert_in_delta(0.0, (worksheet.charts_ak43||0), 0.002); end
  def test_charts_al43; assert_in_delta(0.0, (worksheet.charts_al43||0), 0.002); end
  def test_charts_am43; assert_in_delta(0.0, (worksheet.charts_am43||0), 0.002); end
  def test_charts_an43; assert_in_delta(0.0, (worksheet.charts_an43||0), 0.002); end
  def test_charts_ao43; assert_in_delta(0.0, (worksheet.charts_ao43||0), 0.002); end
  def test_charts_ap43; assert_in_delta(0.0, (worksheet.charts_ap43||0), 0.002); end
  def test_charts_aq43; assert_in_delta(0.0, (worksheet.charts_aq43||0), 0.002); end
  def test_charts_ar43; assert_in_delta(0.0, (worksheet.charts_ar43||0), 0.002); end
  def test_charts_as43; assert_in_delta(0.0, (worksheet.charts_as43||0), 0.002); end
  def test_charts_at43; assert_in_delta(0.0, (worksheet.charts_at43||0), 0.002); end
  def test_charts_au43; assert_in_delta(0.0, (worksheet.charts_au43||0), 0.002); end
  def test_charts_av43; assert_in_delta(0.0, (worksheet.charts_av43||0), 0.002); end
  def test_charts_aw43; assert_equal("New technology", worksheet.charts_aw43); end
  def test_charts_ay43; assert_in_epsilon(222.89552622742858, worksheet.charts_ay43, 0.002); end
  def test_charts_az43; assert_in_delta(0.0, (worksheet.charts_az43||0), 0.002); end
  def test_charts_ba43; assert_in_epsilon(268.44056476146187, worksheet.charts_ba43, 0.002); end
  def test_charts_bb43; assert_in_epsilon(450.89904564236565, worksheet.charts_bb43, 0.002); end
  def test_charts_bc43; assert_in_epsilon(497.5360963206143, worksheet.charts_bc43, 0.002); end
  def test_charts_bd43; assert_in_epsilon(557.3463174468553, worksheet.charts_bd43, 0.002); end
  def test_charts_be43; assert_in_epsilon(622.5869873919244, worksheet.charts_be43, 0.002); end
  def test_charts_bf43; assert_in_epsilon(668.1847480932233, worksheet.charts_bf43, 0.002); end
  def test_charts_bg43; assert_in_epsilon(696.3884655824243, worksheet.charts_bg43, 0.002); end
  def test_charts_bh43; assert_in_epsilon(696.5514137645716, worksheet.charts_bh43, 0.002); end
  def test_charts_bi43; assert_in_epsilon(684.5836237916285, worksheet.charts_bi43, 0.002); end
  def test_charts_c44; assert_equal("W.01", worksheet.charts_c44); end
  def test_charts_d44; assert_equal("Waste", worksheet.charts_d44); end
  def test_charts_aj44; assert_in_epsilon(8.1, worksheet.charts_aj44, 0.002); end
  def test_charts_ak44; assert_in_epsilon(8.7, worksheet.charts_ak44, 0.002); end
  def test_charts_al44; assert_in_epsilon(10.4, worksheet.charts_al44, 0.002); end
  def test_charts_am44; assert_in_epsilon(12.1, worksheet.charts_am44, 0.002); end
  def test_charts_an44; assert_in_epsilon(13.9, worksheet.charts_an44, 0.002); end
  def test_charts_ao44; assert_in_epsilon(16.0, worksheet.charts_ao44, 0.002); end
  def test_charts_ap44; assert_in_epsilon(11.9, worksheet.charts_ap44, 0.002); end
  def test_charts_aq44; assert_in_epsilon(11.9, worksheet.charts_aq44, 0.002); end
  def test_charts_ar44; assert_in_epsilon(12.7, worksheet.charts_ar44, 0.002); end
  def test_charts_as44; assert_in_epsilon(14.2, worksheet.charts_as44, 0.002); end
  def test_charts_at44; assert_in_epsilon(15.1, worksheet.charts_at44, 0.002); end
  def test_charts_au44; assert_in_epsilon(16.7, worksheet.charts_au44, 0.002); end
  def test_charts_av44; assert_in_epsilon(17.5, worksheet.charts_av44, 0.002); end
  def test_charts_aw44; assert_equal("Poultry litter, meat  and bone,  and farm waste:    Major power producers Autogenerators Industry-Unclassified + Waste(4) and tyres: Major power producers Autogenerators, Industry-Unclassified, Other-Domestic, Public administration & Commercial", worksheet.charts_aw44); end
  def test_charts_ay44; assert_in_delta(0.0, (worksheet.charts_ay44||0), 0.002); end
  def test_charts_az44; assert_in_delta(0.0, (worksheet.charts_az44||0), 0.002); end
  def test_charts_ba44; assert_in_delta(0.0, (worksheet.charts_ba44||0), 0.002); end
  def test_charts_bb44; assert_in_delta(0.0, (worksheet.charts_bb44||0), 0.002); end
  def test_charts_bc44; assert_in_delta(0.0, (worksheet.charts_bc44||0), 0.002); end
  def test_charts_bd44; assert_in_delta(0.0, (worksheet.charts_bd44||0), 0.002); end
  def test_charts_be44; assert_in_delta(0.0, (worksheet.charts_be44||0), 0.002); end
  def test_charts_bf44; assert_in_delta(0.0, (worksheet.charts_bf44||0), 0.002); end
  def test_charts_bg44; assert_in_delta(0.0, (worksheet.charts_bg44||0), 0.002); end
  def test_charts_bh44; assert_in_delta(0.0, (worksheet.charts_bh44||0), 0.002); end
  def test_charts_bi44; assert_in_delta(0.0, (worksheet.charts_bi44||0), 0.002); end
  def test_charts_c45; assert_equal("A.01", worksheet.charts_c45); end
  def test_charts_d45; assert_equal("Agriculture", worksheet.charts_d45); end
  def test_charts_aj45; assert_in_epsilon(42.4, worksheet.charts_aj45, 0.002); end
  def test_charts_ak45; assert_in_epsilon(43.5, worksheet.charts_ak45, 0.002); end
  def test_charts_al45; assert_in_epsilon(44.0, worksheet.charts_al45, 0.002); end
  def test_charts_am45; assert_in_epsilon(45.2, worksheet.charts_am45, 0.002); end
  def test_charts_an45; assert_in_epsilon(46.4, worksheet.charts_an45, 0.002); end
  def test_charts_ao45; assert_in_epsilon(43.3, worksheet.charts_ao45, 0.002); end
  def test_charts_ap45; assert_in_epsilon(47.7, worksheet.charts_ap45, 0.002); end
  def test_charts_aq45; assert_in_epsilon(54.9, worksheet.charts_aq45, 0.002); end
  def test_charts_ar45; assert_in_epsilon(58.1, worksheet.charts_ar45, 0.002); end
  def test_charts_as45; assert_in_epsilon(58.7, worksheet.charts_as45, 0.002); end
  def test_charts_at45; assert_in_epsilon(58.4, worksheet.charts_at45, 0.002); end
  def test_charts_au45; assert_in_epsilon(61.0, worksheet.charts_au45, 0.002); end
  def test_charts_av45; assert_in_epsilon(66.2, worksheet.charts_av45, 0.002); end
  def test_charts_aw45; assert_equal("7.2 wood, production + Straw, SRC, and other plant-based biomass, Total supply + Liquid biofuels + (population * average daily calories * 365.5 * 0.6 / 0.9)", worksheet.charts_aw45); end
  def test_charts_ay45; assert_in_epsilon(946.4113333333333, worksheet.charts_ay45, 0.002); end
  def test_charts_az45; assert_in_delta(0.0, (worksheet.charts_az45||0), 0.002); end
  def test_charts_ba45; assert_in_epsilon(958.7155777777778, worksheet.charts_ba45, 0.002); end
  def test_charts_bb45; assert_in_epsilon(961.6526955832342, worksheet.charts_bb45, 0.002); end
  def test_charts_bc45; assert_in_epsilon(965.3605542966875, worksheet.charts_bc45, 0.002); end
  def test_charts_bd45; assert_in_epsilon(969.9978337885142, worksheet.charts_bd45, 0.002); end
  def test_charts_be45; assert_in_epsilon(975.8397409255858, worksheet.charts_be45, 0.002); end
  def test_charts_bf45; assert_in_epsilon(982.3016210975981, worksheet.charts_bf45, 0.002); end
  def test_charts_bg45; assert_in_epsilon(986.6705282141768, worksheet.charts_bg45, 0.002); end
  def test_charts_bh45; assert_in_epsilon(992.2289379145778, worksheet.charts_bh45, 0.002); end
  def test_charts_bi45; assert_in_epsilon(999.8502492075899, worksheet.charts_bi45, 0.002); end
  def test_charts_c46; assert_equal("Y.01", worksheet.charts_c46); end
  def test_charts_d46; assert_equal("Biomass oversupply (imports)", worksheet.charts_d46); end
  def test_charts_aj46; assert_in_epsilon(25.6, worksheet.charts_aj46, 0.002); end
  def test_charts_ak46; assert_in_epsilon(25.6, worksheet.charts_ak46, 0.002); end
  def test_charts_al46; assert_in_epsilon(25.7, worksheet.charts_al46, 0.002); end
  def test_charts_am46; assert_in_epsilon(25.8, worksheet.charts_am46, 0.002); end
  def test_charts_an46; assert_in_epsilon(25.9, worksheet.charts_an46, 0.002); end
  def test_charts_ao46; assert_in_epsilon(26.0, worksheet.charts_ao46, 0.002); end
  def test_charts_ap46; assert_in_epsilon(26.1, worksheet.charts_ap46, 0.002); end
  def test_charts_aq46; assert_in_epsilon(26.3, worksheet.charts_aq46, 0.002); end
  def test_charts_ar46; assert_in_epsilon(26.4, worksheet.charts_ar46, 0.002); end
  def test_charts_as46; assert_in_epsilon(26.6, worksheet.charts_as46, 0.002); end
  def test_charts_at46; assert_in_epsilon(26.8, worksheet.charts_at46, 0.002); end
  def test_charts_au46; assert_in_epsilon(27.0, worksheet.charts_au46, 0.002); end
  def test_charts_av46; assert_in_epsilon(27.1, worksheet.charts_av46, 0.002); end
  def test_charts_aw46; assert_equal("(population * average daily calories * 365.5 * 0.4 / 0.9)", worksheet.charts_aw46); end
  def test_charts_ay46; assert_in_delta(0.0, (worksheet.charts_ay46||0), 0.002); end
  def test_charts_az46; assert_in_delta(0.0, (worksheet.charts_az46||0), 0.002); end
  def test_charts_ba46; assert_in_delta(0.13142242804166665, worksheet.charts_ba46, 0.002); end
  def test_charts_bb46; assert_in_delta(0.21232334500000016, worksheet.charts_bb46, 0.002); end
  def test_charts_bc46; assert_in_delta(0.3059177875, worksheet.charts_bc46, 0.002); end
  def test_charts_bd46; assert_in_delta(0.41826750874999996, worksheet.charts_bd46, 0.002); end
  def test_charts_be46; assert_in_delta(0.5158911875, worksheet.charts_be46, 0.002); end
  def test_charts_bf46; assert_in_delta(0.6305569291666666, worksheet.charts_bf46, 0.002); end
  def test_charts_bg46; assert_in_delta(0.7922778229166667, worksheet.charts_bg46, 0.002); end
  def test_charts_bh46; assert_in_delta(0.9055961145833333, worksheet.charts_bh46, 0.002); end
  def test_charts_bi46; assert_in_epsilon(1.01891440625, worksheet.charts_bi46, 0.002); end
  def test_charts_d47; assert_equal("Agriculture/waste", worksheet.charts_d47); end
  def test_charts_aj47; assert_in_epsilon(76.1, worksheet.charts_aj47, 0.002); end
  def test_charts_ak47; assert_in_epsilon(77.8, worksheet.charts_ak47, 0.002); end
  def test_charts_al47; assert_in_epsilon(80.2, worksheet.charts_al47, 0.002); end
  def test_charts_am47; assert_in_epsilon(83.2, worksheet.charts_am47, 0.002); end
  def test_charts_an47; assert_in_epsilon(86.2, worksheet.charts_an47, 0.002); end
  def test_charts_ao47; assert_in_epsilon(85.3, worksheet.charts_ao47, 0.002); end
  def test_charts_ap47; assert_in_epsilon(85.7, worksheet.charts_ap47, 0.002); end
  def test_charts_aq47; assert_in_epsilon(93.0, worksheet.charts_aq47, 0.002); end
  def test_charts_ar47; assert_in_epsilon(97.2, worksheet.charts_ar47, 0.002); end
  def test_charts_as47; assert_in_epsilon(99.5, worksheet.charts_as47, 0.002); end
  def test_charts_at47; assert_in_epsilon(100.3, worksheet.charts_at47, 0.002); end
  def test_charts_au47; assert_in_epsilon(104.6, worksheet.charts_au47, 0.002); end
  def test_charts_av47; assert_in_epsilon(110.8, worksheet.charts_av47, 0.002); end
  def test_charts_ay47; assert_in_delta(0.0, (worksheet.charts_ay47||0), 0.002); end
  def test_charts_az47; assert_in_delta(0.0, (worksheet.charts_az47||0), 0.002); end
  def test_charts_ba47; assert_in_delta(0.0, (worksheet.charts_ba47||0), 0.002); end
  def test_charts_bb47; assert_in_delta(0.0, (worksheet.charts_bb47||0), 0.002); end
  def test_charts_bc47; assert_in_delta(0.0, (worksheet.charts_bc47||0), 0.002); end
  def test_charts_bd47; assert_in_delta(0.0, (worksheet.charts_bd47||0), 0.002); end
  def test_charts_be47; assert_in_delta(0.0, (worksheet.charts_be47||0), 0.002); end
  def test_charts_bf47; assert_in_delta(0.0, (worksheet.charts_bf47||0), 0.002); end
  def test_charts_bg47; assert_in_delta(0.0, (worksheet.charts_bg47||0), 0.002); end
  def test_charts_bh47; assert_in_delta(0.0, (worksheet.charts_bh47||0), 0.002); end
  def test_charts_bi47; assert_in_delta(0.0, (worksheet.charts_bi47||0), 0.002); end
  def test_charts_c48; assert_equal("Y.04", worksheet.charts_c48); end
  def test_charts_d48; assert_equal("Coal oversupply (imports)", worksheet.charts_d48); end
  def test_charts_h48; assert_in_epsilon(-29.52857, worksheet.charts_h48, 0.002); end
  def test_charts_i48; assert_in_epsilon(9.75757, worksheet.charts_i48, 0.002); end
  def test_charts_j48; assert_in_epsilon(22.96925, worksheet.charts_j48, 0.002); end
  def test_charts_k48; assert_in_epsilon(-10.66471, worksheet.charts_k48, 0.002); end
  def test_charts_l48; assert_in_epsilon(1.95384, worksheet.charts_l48, 0.002); end
  def test_charts_m48; assert_in_epsilon(14.35142, worksheet.charts_m48, 0.002); end
  def test_charts_n48; assert_in_epsilon(5.86152, worksheet.charts_n48, 0.002); end
  def test_charts_o48; assert_in_delta(0.09304, worksheet.charts_o48, 0.002); end
  def test_charts_p48; assert_in_epsilon(-4.97764, worksheet.charts_p48, 0.002); end
  def test_charts_q48; assert_in_epsilon(13.30472, worksheet.charts_q48, 0.002); end
  def test_charts_r48; assert_in_epsilon(19.8873, worksheet.charts_r48, 0.002); end
  def test_charts_s48; assert_in_epsilon(-42.93796, worksheet.charts_s48, 0.002); end
  def test_charts_t48; assert_in_epsilon(-27.13279, worksheet.charts_t48, 0.002); end
  def test_charts_u48; assert_in_epsilon(-13.15353, worksheet.charts_u48, 0.002); end
  def test_charts_v48; assert_in_epsilon(73.40856, worksheet.charts_v48, 0.002); end
  def test_charts_w48; assert_in_epsilon(81.88683, worksheet.charts_w48, 0.002); end
  def test_charts_x48; assert_in_epsilon(60.23177, worksheet.charts_x48, 0.002); end
  def test_charts_y48; assert_in_epsilon(63.86033, worksheet.charts_y48, 0.002); end
  def test_charts_z48; assert_in_epsilon(89.26025, worksheet.charts_z48, 0.002); end
  def test_charts_aa48; assert_in_epsilon(82.59626, worksheet.charts_aa48, 0.002); end
  def test_charts_ab48; assert_in_epsilon(97.58733, worksheet.charts_ab48, 0.002); end
  def test_charts_ac48; assert_in_epsilon(139.17621, worksheet.charts_ac48, 0.002); end
  def test_charts_ad48; assert_in_epsilon(152.36463, worksheet.charts_ad48, 0.002); end
  def test_charts_ae48; assert_in_epsilon(141.29287, worksheet.charts_ae48, 0.002); end
  def test_charts_af48; assert_in_epsilon(113.29946, worksheet.charts_af48, 0.002); end
  def test_charts_ag48; assert_in_epsilon(124.74338, worksheet.charts_ag48, 0.002); end
  def test_charts_ah48; assert_in_epsilon(142.419426770673, worksheet.charts_ah48, 0.002); end
  def test_charts_ai48; assert_in_epsilon(155.127946717844, worksheet.charts_ai48, 0.002); end
  def test_charts_aj48; assert_in_epsilon(167.939798014946, worksheet.charts_aj48, 0.002); end
  def test_charts_ak48; assert_in_epsilon(154.269390475848, worksheet.charts_ak48, 0.002); end
  def test_charts_al48; assert_in_epsilon(177.54271957614, worksheet.charts_al48, 0.002); end
  def test_charts_am48; assert_in_epsilon(266.164196212801, worksheet.charts_am48, 0.002); end
  def test_charts_an48; assert_in_epsilon(213.157281152347, worksheet.charts_an48, 0.002); end
  def test_charts_ao48; assert_in_epsilon(242.680946975591, worksheet.charts_ao48, 0.002); end
  def test_charts_ap48; assert_in_epsilon(274.594113303141, worksheet.charts_ap48, 0.002); end
  def test_charts_aq48; assert_in_epsilon(333.178454490771, worksheet.charts_aq48, 0.002); end
  def test_charts_ar48; assert_in_epsilon(382.634191991217, worksheet.charts_ar48, 0.002); end
  def test_charts_as48; assert_in_epsilon(329.578033333439, worksheet.charts_as48, 0.002); end
  def test_charts_at48; assert_in_epsilon(329.254958699124, worksheet.charts_at48, 0.002); end
  def test_charts_au48; assert_in_epsilon(281.378070222345, worksheet.charts_au48, 0.002); end
  def test_charts_av48; assert_in_epsilon(192.811684484113, worksheet.charts_av48, 0.002); end
  def test_charts_aw48; assert_equal("Dukes long-term trends 1.1.2 coal imports - coal exports", worksheet.charts_aw48); end
  def test_charts_ay48; assert_in_epsilon(946.4113333333333, worksheet.charts_ay48, 0.002); end
  def test_charts_az48; assert_in_delta(0.0, (worksheet.charts_az48||0), 0.002); end
  def test_charts_ba48; assert_in_epsilon(958.8470002058194, worksheet.charts_ba48, 0.002); end
  def test_charts_bb48; assert_in_epsilon(961.8650189282341, worksheet.charts_bb48, 0.002); end
  def test_charts_bc48; assert_in_epsilon(965.6664720841875, worksheet.charts_bc48, 0.002); end
  def test_charts_bd48; assert_in_epsilon(970.4161012972642, worksheet.charts_bd48, 0.002); end
  def test_charts_be48; assert_in_epsilon(976.3556321130858, worksheet.charts_be48, 0.002); end
  def test_charts_bf48; assert_in_epsilon(982.9321780267647, worksheet.charts_bf48, 0.002); end
  def test_charts_bg48; assert_in_epsilon(987.4628060370934, worksheet.charts_bg48, 0.002); end
  def test_charts_bh48; assert_in_epsilon(993.1345340291612, worksheet.charts_bh48, 0.002); end
  def test_charts_bi48; assert_in_epsilon(1000.8691636138399, worksheet.charts_bi48, 0.002); end
  def test_charts_c49; assert_equal("Q.01", worksheet.charts_c49); end
  def test_charts_d49; assert_equal("Coal reserves", worksheet.charts_d49); end
  def test_charts_h49; assert_in_epsilon(1178.5, worksheet.charts_h49, 0.002); end
  def test_charts_i49; assert_in_epsilon(1013.3, worksheet.charts_i49, 0.002); end
  def test_charts_j49; assert_in_epsilon(873.6, worksheet.charts_j49, 0.002); end
  def test_charts_k49; assert_in_epsilon(978.0, worksheet.charts_k49, 0.002); end
  def test_charts_l49; assert_in_epsilon(854.4, worksheet.charts_l49, 0.002); end
  def test_charts_m49; assert_in_epsilon(845.3, worksheet.charts_m49, 0.002); end
  def test_charts_n49; assert_in_epsilon(865.2, worksheet.charts_n49, 0.002); end
  def test_charts_o49; assert_in_epsilon(876.5, worksheet.charts_o49, 0.002); end
  def test_charts_p49; assert_in_epsilon(861.9, worksheet.charts_p49, 0.002); end
  def test_charts_q49; assert_in_epsilon(902.8, worksheet.charts_q49, 0.002); end
  def test_charts_r49; assert_in_epsilon(834.0, worksheet.charts_r49, 0.002); end
  def test_charts_s49; assert_in_epsilon(883.8, worksheet.charts_s49, 0.002); end
  def test_charts_t49; assert_in_epsilon(818.9, worksheet.charts_t49, 0.002); end
  def test_charts_u49; assert_in_epsilon(808.1, worksheet.charts_u49, 0.002); end
  def test_charts_v49; assert_in_epsilon(495.0, worksheet.charts_v49, 0.002); end
  def test_charts_w49; assert_in_epsilon(674.9, worksheet.charts_w49, 0.002); end
  def test_charts_x49; assert_in_epsilon(740.9, worksheet.charts_x49, 0.002); end
  def test_charts_y49; assert_in_epsilon(774.4, worksheet.charts_y49, 0.002); end
  def test_charts_z49; assert_in_epsilon(718.2, worksheet.charts_z49, 0.002); end
  def test_charts_aa49; assert_in_epsilon(687.3, worksheet.charts_aa49, 0.002); end
  def test_charts_ab49; assert_in_epsilon(666.8, worksheet.charts_ab49, 0.002); end
  def test_charts_ac49; assert_in_epsilon(629.8, worksheet.charts_ac49, 0.002); end
  def test_charts_ad49; assert_in_epsilon(570.7, worksheet.charts_ad49, 0.002); end
  def test_charts_ae49; assert_in_epsilon(492.6, worksheet.charts_ae49, 0.002); end
  def test_charts_af49; assert_in_epsilon(474.0, worksheet.charts_af49, 0.002); end
  def test_charts_ag49; assert_in_epsilon(440.1, worksheet.charts_ag49, 0.002); end
  def test_charts_ah49; assert_in_epsilon(391.4, worksheet.charts_ah49, 0.002); end
  def test_charts_ai49; assert_in_epsilon(324.7, worksheet.charts_ai49, 0.002); end
  def test_charts_aj49; assert_in_epsilon(308.5, worksheet.charts_aj49, 0.002); end
  def test_charts_ak49; assert_in_epsilon(264.3, worksheet.charts_ak49, 0.002); end
  def test_charts_al49; assert_in_epsilon(270.7, worksheet.charts_al49, 0.002); end
  def test_charts_am49; assert_in_epsilon(208.1, worksheet.charts_am49, 0.002); end
  def test_charts_an49; assert_in_epsilon(225.3, worksheet.charts_an49, 0.002); end
  def test_charts_ao49; assert_in_epsilon(228.1, worksheet.charts_ao49, 0.002); end
  def test_charts_ap49; assert_in_epsilon(179.7, worksheet.charts_ap49, 0.002); end
  def test_charts_aq49; assert_in_epsilon(130.4, worksheet.charts_aq49, 0.002); end
  def test_charts_ar49; assert_in_epsilon(121.6, worksheet.charts_ar49, 0.002); end
  def test_charts_as49; assert_in_epsilon(146.8, worksheet.charts_as49, 0.002); end
  def test_charts_at49; assert_in_epsilon(110.4, worksheet.charts_at49, 0.002); end
  def test_charts_au49; assert_in_epsilon(79.3, worksheet.charts_au49, 0.002); end
  def test_charts_av49; assert_in_epsilon(185.3, worksheet.charts_av49, 0.002); end
  def test_charts_aw49; assert_equal("Dukes long-term trends 1.1.2 coal production - stock changes", worksheet.charts_aw49); end
  def test_charts_ay49; assert_in_epsilon(312.87744559290513, worksheet.charts_ay49, 0.002); end
  def test_charts_az49; assert_in_delta(0.0, (worksheet.charts_az49||0), 0.002); end
  def test_charts_ba49; assert_in_epsilon(526.8956907848014, worksheet.charts_ba49, 0.002); end
  def test_charts_bb49; assert_in_epsilon(1319.3124738576794, worksheet.charts_bb49, 0.002); end
  def test_charts_bc49; assert_in_epsilon(3014.730522878498, worksheet.charts_bc49, 0.002); end
  def test_charts_bd49; assert_in_epsilon(5379.582453613374, worksheet.charts_bd49, 0.002); end
  def test_charts_be49; assert_in_epsilon(8802.568575656194, worksheet.charts_be49, 0.002); end
  def test_charts_bf49; assert_in_epsilon(11942.655541869855, worksheet.charts_bf49, 0.002); end
  def test_charts_bg49; assert_in_epsilon(16105.085873409915, worksheet.charts_bg49, 0.002); end
  def test_charts_bh49; assert_in_epsilon(19783.852472013532, worksheet.charts_bh49, 0.002); end
  def test_charts_bi49; assert_in_epsilon(23759.648675014454, worksheet.charts_bi49, 0.002); end
  def test_charts_d50; assert_equal("Coal", worksheet.charts_d50); end
  def test_charts_h50; assert_in_epsilon(1149.0, worksheet.charts_h50, 0.002); end
  def test_charts_i50; assert_in_epsilon(1023.1, worksheet.charts_i50, 0.002); end
  def test_charts_j50; assert_in_epsilon(896.5, worksheet.charts_j50, 0.002); end
  def test_charts_k50; assert_in_epsilon(967.3, worksheet.charts_k50, 0.002); end
  def test_charts_l50; assert_in_epsilon(856.4, worksheet.charts_l50, 0.002); end
  def test_charts_m50; assert_in_epsilon(859.7, worksheet.charts_m50, 0.002); end
  def test_charts_n50; assert_in_epsilon(871.0, worksheet.charts_n50, 0.002); end
  def test_charts_o50; assert_in_epsilon(876.6, worksheet.charts_o50, 0.002); end
  def test_charts_p50; assert_in_epsilon(856.9, worksheet.charts_p50, 0.002); end
  def test_charts_q50; assert_in_epsilon(916.1, worksheet.charts_q50, 0.002); end
  def test_charts_r50; assert_in_epsilon(853.9, worksheet.charts_r50, 0.002); end
  def test_charts_s50; assert_in_epsilon(840.9, worksheet.charts_s50, 0.002); end
  def test_charts_t50; assert_in_epsilon(791.7, worksheet.charts_t50, 0.002); end
  def test_charts_u50; assert_in_epsilon(795.0, worksheet.charts_u50, 0.002); end
  def test_charts_v50; assert_in_epsilon(568.4, worksheet.charts_v50, 0.002); end
  def test_charts_w50; assert_in_epsilon(756.8, worksheet.charts_w50, 0.002); end
  def test_charts_x50; assert_in_epsilon(801.1, worksheet.charts_x50, 0.002); end
  def test_charts_y50; assert_in_epsilon(838.2, worksheet.charts_y50, 0.002); end
  def test_charts_z50; assert_in_epsilon(807.5, worksheet.charts_z50, 0.002); end
  def test_charts_aa50; assert_in_epsilon(769.9, worksheet.charts_aa50, 0.002); end
  def test_charts_ab50; assert_in_epsilon(764.4, worksheet.charts_ab50, 0.002); end
  def test_charts_ac50; assert_in_epsilon(769.0, worksheet.charts_ac50, 0.002); end
  def test_charts_ad50; assert_in_epsilon(723.1, worksheet.charts_ad50, 0.002); end
  def test_charts_ae50; assert_in_epsilon(633.9, worksheet.charts_ae50, 0.002); end
  def test_charts_af50; assert_in_epsilon(587.3, worksheet.charts_af50, 0.002); end
  def test_charts_ag50; assert_in_epsilon(564.8, worksheet.charts_ag50, 0.002); end
  def test_charts_ah50; assert_in_epsilon(533.8, worksheet.charts_ah50, 0.002); end
  def test_charts_ai50; assert_in_epsilon(479.8, worksheet.charts_ai50, 0.002); end
  def test_charts_aj50; assert_in_epsilon(476.5, worksheet.charts_aj50, 0.002); end
  def test_charts_ak50; assert_in_epsilon(418.6, worksheet.charts_ak50, 0.002); end
  def test_charts_al50; assert_in_epsilon(448.2, worksheet.charts_al50, 0.002); end
  def test_charts_am50; assert_in_epsilon(474.2, worksheet.charts_am50, 0.002); end
  def test_charts_an50; assert_in_epsilon(438.4, worksheet.charts_an50, 0.002); end
  def test_charts_ao50; assert_in_epsilon(470.8, worksheet.charts_ao50, 0.002); end
  def test_charts_ap50; assert_in_epsilon(454.3, worksheet.charts_ap50, 0.002); end
  def test_charts_aq50; assert_in_epsilon(463.6, worksheet.charts_aq50, 0.002); end
  def test_charts_ar50; assert_in_epsilon(504.2, worksheet.charts_ar50, 0.002); end
  def test_charts_as50; assert_in_epsilon(476.4, worksheet.charts_as50, 0.002); end
  def test_charts_at50; assert_in_epsilon(439.7, worksheet.charts_at50, 0.002); end
  def test_charts_au50; assert_in_epsilon(360.7, worksheet.charts_au50, 0.002); end
  def test_charts_av50; assert_in_epsilon(378.1, worksheet.charts_av50, 0.002); end
  def test_charts_ay50; assert_in_epsilon(2003.3688000000002, worksheet.charts_ay50, 0.002); end
  def test_charts_az50; assert_in_delta(0.0, (worksheet.charts_az50||0), 0.002); end
  def test_charts_ba50; assert_in_epsilon(2704.3935, worksheet.charts_ba50, 0.002); end
  def test_charts_bb50; assert_in_epsilon(3143.1914134327285, worksheet.charts_bb50, 0.002); end
  def test_charts_bc50; assert_in_epsilon(3584.150763898312, worksheet.charts_bc50, 0.002); end
  def test_charts_bd50; assert_in_epsilon(3874.5049279836685, worksheet.charts_bd50, 0.002); end
  def test_charts_be50; assert_in_epsilon(3958.482454759453, worksheet.charts_be50, 0.002); end
  def test_charts_bf50; assert_in_epsilon(4025.571481185473, worksheet.charts_bf50, 0.002); end
  def test_charts_bg50; assert_in_epsilon(3406.602207191723, worksheet.charts_bg50, 0.002); end
  def test_charts_bh50; assert_in_epsilon(2878.2636796999973, worksheet.charts_bh50, 0.002); end
  def test_charts_bi50; assert_in_epsilon(2435.1118288080042, worksheet.charts_bi50, 0.002); end
  def test_charts_c51; assert_equal("Q.02", worksheet.charts_c51); end
  def test_charts_d51; assert_equal("Oil reserves", worksheet.charts_d51); end
  def test_charts_aj51; assert_in_epsilon(1544.6, worksheet.charts_aj51, 0.002); end
  def test_charts_ak51; assert_in_epsilon(1613.5, worksheet.charts_ak51, 0.002); end
  def test_charts_al51; assert_in_epsilon(1489.1, worksheet.charts_al51, 0.002); end
  def test_charts_am51; assert_in_epsilon(1357.7, worksheet.charts_am51, 0.002); end
  def test_charts_an51; assert_in_epsilon(1371.6, worksheet.charts_an51, 0.002); end
  def test_charts_ao51; assert_in_epsilon(1221.6, worksheet.charts_ao51, 0.002); end
  def test_charts_ap51; assert_in_epsilon(1075.8, worksheet.charts_ap51, 0.002); end
  def test_charts_aq51; assert_in_epsilon(955.5, worksheet.charts_aq51, 0.002); end
  def test_charts_ar51; assert_in_epsilon(836.4, worksheet.charts_ar51, 0.002); end
  def test_charts_as51; assert_in_epsilon(896.7, worksheet.charts_as51, 0.002); end
  def test_charts_at51; assert_in_epsilon(817.1, worksheet.charts_at51, 0.002); end
  def test_charts_au51; assert_in_epsilon(785.0, worksheet.charts_au51, 0.002); end
  def test_charts_av51; assert_in_epsilon(712.9, worksheet.charts_av51, 0.002); end
  def test_charts_aw51; assert_equal("Dukes 1.1 Primary oils indigenous production + Stock change of Primary oils and Petroleum products minus non-energy use of petroleum products", worksheet.charts_aw51); end
  def test_charts_ay51; assert_in_epsilon(2316.2462455929053, worksheet.charts_ay51, 0.002); end
  def test_charts_az51; assert_in_delta(0.0, (worksheet.charts_az51||0), 0.002); end
  def test_charts_ba51; assert_in_epsilon(3231.2891907848016, worksheet.charts_ba51, 0.002); end
  def test_charts_bb51; assert_in_epsilon(4462.503887290408, worksheet.charts_bb51, 0.002); end
  def test_charts_bc51; assert_in_epsilon(6598.88128677681, worksheet.charts_bc51, 0.002); end
  def test_charts_bd51; assert_in_epsilon(9254.087381597043, worksheet.charts_bd51, 0.002); end
  def test_charts_be51; assert_in_epsilon(12761.051030415647, worksheet.charts_be51, 0.002); end
  def test_charts_bf51; assert_in_epsilon(15968.22702305533, worksheet.charts_bf51, 0.002); end
  def test_charts_bg51; assert_in_epsilon(19511.688080601638, worksheet.charts_bg51, 0.002); end
  def test_charts_bh51; assert_in_epsilon(22662.11615171353, worksheet.charts_bh51, 0.002); end
  def test_charts_bi51; assert_in_epsilon(26194.760503822457, worksheet.charts_bi51, 0.002); end
  def test_charts_c52; assert_equal("Y.05", worksheet.charts_c52); end
  def test_charts_d52; assert_equal("Oil and petroleum products oversupply (imports)", worksheet.charts_d52); end
  def test_charts_aj52; assert_in_epsilon(-467.10732, worksheet.charts_aj52, 0.002); end
  def test_charts_ak52; assert_in_epsilon(-598.15416, worksheet.charts_ak52, 0.002); end
  def test_charts_al52; assert_in_epsilon(-491.289015345148, worksheet.charts_al52, 0.002); end
  def test_charts_am52; assert_in_epsilon(-425.923816553362, worksheet.charts_am52, 0.002); end
  def test_charts_an52; assert_in_epsilon(-385.362040231585, worksheet.charts_an52, 0.002); end
  def test_charts_ao52; assert_in_epsilon(-265.313047678547, worksheet.charts_ao52, 0.002); end
  def test_charts_ap52; assert_in_epsilon(-26.7418072519548, worksheet.charts_ap52, 0.002); end
  def test_charts_aq52; assert_in_epsilon(59.0560078145415, worksheet.charts_aq52, 0.002); end
  def test_charts_ar52; assert_in_epsilon(116.268946233383, worksheet.charts_ar52, 0.002); end
  def test_charts_as52; assert_in_epsilon(79.7439769052016, worksheet.charts_as52, 0.002); end
  def test_charts_at52; assert_in_epsilon(146.439372991402, worksheet.charts_at52, 0.002); end
  def test_charts_au52; assert_in_epsilon(115.647880946813, worksheet.charts_au52, 0.002); end
  def test_charts_av52; assert_in_epsilon(156.542161812907, worksheet.charts_av52, 0.002); end
  def test_charts_aw52; assert_equal("Dukes 1.1 Primary oils imports - exports", worksheet.charts_aw52); end
  def test_charts_ay52; assert_in_epsilon(395.28044, worksheet.charts_ay52, 0.002); end
  def test_charts_az52; assert_in_delta(0.0, (worksheet.charts_az52||0), 0.002); end
  def test_charts_ba52; assert_in_epsilon(442.9866999999999, worksheet.charts_ba52, 0.002); end
  def test_charts_bb52; assert_in_epsilon(480.4207945988, worksheet.charts_bb52, 0.002); end
  def test_charts_bc52; assert_in_epsilon(406.8218875356273, worksheet.charts_bc52, 0.002); end
  def test_charts_bd52; assert_in_epsilon(404.6927124317743, worksheet.charts_bd52, 0.002); end
  def test_charts_be52; assert_in_epsilon(402.83638767071136, worksheet.charts_be52, 0.002); end
  def test_charts_bf52; assert_in_epsilon(401.68501767071086, worksheet.charts_bf52, 0.002); end
  def test_charts_bg52; assert_in_epsilon(401.1302468506092, worksheet.charts_bg52, 0.002); end
  def test_charts_bh52; assert_in_epsilon(401.18988105870324, worksheet.charts_bh52, 0.002); end
  def test_charts_bi52; assert_in_epsilon(401.88812295573837, worksheet.charts_bi52, 0.002); end
  def test_charts_d53; assert_equal("Oil and petroleum products", worksheet.charts_d53); end
  def test_charts_aj53; assert_in_epsilon(914.3, worksheet.charts_aj53, 0.002); end
  def test_charts_ak53; assert_in_epsilon(917.6, worksheet.charts_ak53, 0.002); end
  def test_charts_al53; assert_in_epsilon(917.9, worksheet.charts_al53, 0.002); end
  def test_charts_am53; assert_in_epsilon(910.6, worksheet.charts_am53, 0.002); end
  def test_charts_an53; assert_in_epsilon(878.3, worksheet.charts_an53, 0.002); end
  def test_charts_ao53; assert_in_epsilon(871.0, worksheet.charts_ao53, 0.002); end
  def test_charts_ap53; assert_in_epsilon(898.7, worksheet.charts_ap53, 0.002); end
  def test_charts_aq53; assert_in_epsilon(924.8, worksheet.charts_aq53, 0.002); end
  def test_charts_ar53; assert_in_epsilon(928.3, worksheet.charts_ar53, 0.002); end
  def test_charts_as53; assert_in_epsilon(916.3, worksheet.charts_as53, 0.002); end
  def test_charts_at53; assert_in_epsilon(906.5, worksheet.charts_at53, 0.002); end
  def test_charts_au53; assert_in_epsilon(859.3, worksheet.charts_au53, 0.002); end
  def test_charts_av53; assert_in_epsilon(846.5, worksheet.charts_av53, 0.002); end
  def test_charts_aw53; assert_equal("Sum of above", worksheet.charts_aw53); end
  def test_charts_ay53; assert_in_epsilon(1235.4943240445418, worksheet.charts_ay53, 0.002); end
  def test_charts_az53; assert_in_delta(0.0, (worksheet.charts_az53||0), 0.002); end
  def test_charts_ba53; assert_in_epsilon(1459.1773716311466, worksheet.charts_ba53, 0.002); end
  def test_charts_bb53; assert_in_epsilon(2094.1308465841576, worksheet.charts_bb53, 0.002); end
  def test_charts_bc53; assert_in_epsilon(3065.9673559076937, worksheet.charts_bc53, 0.002); end
  def test_charts_bd53; assert_in_epsilon(4157.631767599084, worksheet.charts_bd53, 0.002); end
  def test_charts_be53; assert_in_epsilon(5448.054666446535, worksheet.charts_be53, 0.002); end
  def test_charts_bf53; assert_in_epsilon(6933.9942488753495, worksheet.charts_bf53, 0.002); end
  def test_charts_bg53; assert_in_epsilon(8427.225528478948, worksheet.charts_bg53, 0.002); end
  def test_charts_bh53; assert_in_epsilon(10106.26043154715, worksheet.charts_bh53, 0.002); end
  def test_charts_bi53; assert_in_epsilon(12020.741898724571, worksheet.charts_bi53, 0.002); end
  def test_charts_c54; assert_equal("Y.06", worksheet.charts_c54); end
  def test_charts_d54; assert_equal("Gas oversupply (imports)", worksheet.charts_d54); end
  def test_charts_h54; assert_in_epsilon(9.759, worksheet.charts_h54, 0.002); end
  def test_charts_i54; assert_in_epsilon(9.73, worksheet.charts_i54, 0.002); end
  def test_charts_j54; assert_in_epsilon(8.968, worksheet.charts_j54, 0.002); end
  def test_charts_k54; assert_in_epsilon(8.587, worksheet.charts_k54, 0.002); end
  def test_charts_l54; assert_in_epsilon(7.122, worksheet.charts_l54, 0.002); end
  def test_charts_m54; assert_in_epsilon(9.818, worksheet.charts_m54, 0.002); end
  def test_charts_n54; assert_in_epsilon(11.254, worksheet.charts_n54, 0.002); end
  def test_charts_o54; assert_in_epsilon(19.548, worksheet.charts_o54, 0.002); end
  def test_charts_p54; assert_in_epsilon(55.361, worksheet.charts_p54, 0.002); end
  def test_charts_q54; assert_in_epsilon(95.424, worksheet.charts_q54, 0.002); end
  def test_charts_r54; assert_in_epsilon(116.291, worksheet.charts_r54, 0.002); end
  def test_charts_s54; assert_in_epsilon(124.262, worksheet.charts_s54, 0.002); end
  def test_charts_t54; assert_in_epsilon(115.001, worksheet.charts_t54, 0.002); end
  def test_charts_u54; assert_in_epsilon(124.497, worksheet.charts_u54, 0.002); end
  def test_charts_v54; assert_in_epsilon(147.415, worksheet.charts_v54, 0.002); end
  def test_charts_w54; assert_in_epsilon(147.122, worksheet.charts_w54, 0.002); end
  def test_charts_x54; assert_in_epsilon(137.099, worksheet.charts_x54, 0.002); end
  def test_charts_y54; assert_in_epsilon(128.893, worksheet.charts_y54, 0.002); end
  def test_charts_z54; assert_in_epsilon(115.441, worksheet.charts_z54, 0.002); end
  def test_charts_aa54; assert_in_epsilon(113.77, worksheet.charts_aa54, 0.002); end
  def test_charts_ab54; assert_in_epsilon(79.833, worksheet.charts_ab54, 0.002); end
  def test_charts_ac54; assert_in_epsilon(72.007, worksheet.charts_ac54, 0.002); end
  def test_charts_ad54; assert_in_epsilon(60.635, worksheet.charts_ad54, 0.002); end
  def test_charts_ae54; assert_in_epsilon(41.704, worksheet.charts_ae54, 0.002); end
  def test_charts_af54; assert_in_epsilon(23.496, worksheet.charts_af54, 0.002); end
  def test_charts_ag54; assert_in_epsilon(8.225, worksheet.charts_ag54, 0.002); end
  def test_charts_ah54; assert_in_epsilon(4.601, worksheet.charts_ah54, 0.002); end
  def test_charts_ai54; assert_in_epsilon(-7.604, worksheet.charts_ai54, 0.002); end
  def test_charts_aj54; assert_in_epsilon(-21.022, worksheet.charts_aj54, 0.002); end
  def test_charts_ak54; assert_in_epsilon(-71.571, worksheet.charts_ak54, 0.002); end
  def test_charts_al54; assert_in_epsilon(-120.31, worksheet.charts_al54, 0.002); end
  def test_charts_am54; assert_in_epsilon(-107.866, worksheet.charts_am54, 0.002); end
  def test_charts_an54; assert_in_epsilon(-90.238, worksheet.charts_an54, 0.002); end
  def test_charts_ao54; assert_in_epsilon(-90.741, worksheet.charts_ao54, 0.002); end
  def test_charts_ap54; assert_in_epsilon(18.9210152317339, worksheet.charts_ap54, 0.002); end
  def test_charts_aq54; assert_in_epsilon(77.1469066294905, worksheet.charts_aq54, 0.002); end
  def test_charts_ar54; assert_in_epsilon(123.438611928566, worksheet.charts_ar54, 0.002); end
  def test_charts_as54; assert_in_epsilon(214.868653082757, worksheet.charts_as54, 0.002); end
  def test_charts_at54; assert_in_epsilon(284.384233699597, worksheet.charts_at54, 0.002); end
  def test_charts_au54; assert_in_epsilon(318.688961523769, worksheet.charts_au54, 0.002); end
  def test_charts_av54; assert_in_epsilon(413.098109925268, worksheet.charts_av54, 0.002); end
  def test_charts_aw54; assert_equal("Dukes long-term trends 4.1.1 Methane imports - exports", worksheet.charts_aw54); end
  def test_charts_ay54; assert_in_epsilon(134.32821625762193, worksheet.charts_ay54, 0.002); end
  def test_charts_az54; assert_in_delta(0.0, (worksheet.charts_az54||0), 0.002); end
  def test_charts_ba54; assert_in_epsilon(1902.1640716311465, worksheet.charts_ba54, 0.002); end
  def test_charts_bb54; assert_in_epsilon(2574.5516411829576, worksheet.charts_bb54, 0.002); end
  def test_charts_bc54; assert_in_epsilon(3472.789243443321, worksheet.charts_bc54, 0.002); end
  def test_charts_bd54; assert_in_epsilon(4562.3244800308585, worksheet.charts_bd54, 0.002); end
  def test_charts_be54; assert_in_epsilon(5850.891054117246, worksheet.charts_be54, 0.002); end
  def test_charts_bf54; assert_in_epsilon(7335.679266546061, worksheet.charts_bf54, 0.002); end
  def test_charts_bg54; assert_in_epsilon(8828.355775329557, worksheet.charts_bg54, 0.002); end
  def test_charts_bh54; assert_in_epsilon(10507.450312605853, worksheet.charts_bh54, 0.002); end
  def test_charts_bi54; assert_in_epsilon(12422.63002168031, worksheet.charts_bi54, 0.002); end
  def test_charts_c55; assert_equal("Q.03", worksheet.charts_c55); end
  def test_charts_d55; assert_equal("Gas reserves", worksheet.charts_d55); end
  def test_charts_aj55; assert_in_epsilon(1036.5, worksheet.charts_aj55, 0.002); end
  def test_charts_ak55; assert_in_epsilon(1147.5, worksheet.charts_ak55, 0.002); end
  def test_charts_al55; assert_in_epsilon(1235.3, worksheet.charts_al55, 0.002); end
  def test_charts_am55; assert_in_epsilon(1219.2, worksheet.charts_am55, 0.002); end
  def test_charts_an55; assert_in_epsilon(1187.3, worksheet.charts_an55, 0.002); end
  def test_charts_ao55; assert_in_epsilon(1191.4, worksheet.charts_ao55, 0.002); end
  def test_charts_ap55; assert_in_epsilon(1105.0, worksheet.charts_ap55, 0.002); end
  def test_charts_aq55; assert_in_epsilon(1019.4, worksheet.charts_aq55, 0.002); end
  def test_charts_ar55; assert_in_epsilon(916.2, worksheet.charts_ar55, 0.002); end
  def test_charts_as55; assert_in_epsilon(834.1, worksheet.charts_as55, 0.002); end
  def test_charts_at55; assert_in_epsilon(797.7, worksheet.charts_at55, 0.002); end
  def test_charts_au55; assert_in_epsilon(681.9, worksheet.charts_au55, 0.002); end
  def test_charts_av55; assert_in_epsilon(671.9, worksheet.charts_av55, 0.002); end
  def test_charts_aw55; assert_equal("Dukes 1.1 Natural gas indigenous production + Stock change of natural gas minus non-energy use of natural gas", worksheet.charts_aw55); end
  def test_charts_ay55; assert_in_epsilon(134.32821625762193, worksheet.charts_ay55, 0.002); end
  def test_charts_az55; assert_in_delta(0.0, (worksheet.charts_az55||0), 0.002); end
  def test_charts_ba55; assert_in_epsilon(132.0559696218025, worksheet.charts_ba55, 0.002); end
  def test_charts_bb55; assert_in_epsilon(414.231003015371, worksheet.charts_bb55, 0.002); end
  def test_charts_bc55; assert_in_epsilon(540.7635700654292, worksheet.charts_bc55, 0.002); end
  def test_charts_bd55; assert_in_epsilon(673.6005422237332, worksheet.charts_bd55, 0.002); end
  def test_charts_be55; assert_in_epsilon(830.478053007228, worksheet.charts_be55, 0.002); end
  def test_charts_bf55; assert_in_epsilon(1027.9601614841856, worksheet.charts_bf55, 0.002); end
  def test_charts_bg55; assert_in_epsilon(1246.6262326346414, worksheet.charts_bg55, 0.002); end
  def test_charts_bh55; assert_in_epsilon(1483.7758959320668, worksheet.charts_bh55, 0.002); end
  def test_charts_bi55; assert_in_epsilon(1774.0609355299016, worksheet.charts_bi55, 0.002); end
  def test_charts_d56; assert_equal("Natural gas", worksheet.charts_d56); end
  def test_charts_aj56; assert_in_epsilon(1015.5, worksheet.charts_aj56, 0.002); end
  def test_charts_ak56; assert_in_epsilon(1075.9, worksheet.charts_ak56, 0.002); end
  def test_charts_al56; assert_in_epsilon(1114.9, worksheet.charts_al56, 0.002); end
  def test_charts_am56; assert_in_epsilon(1111.4, worksheet.charts_am56, 0.002); end
  def test_charts_an56; assert_in_epsilon(1097.0, worksheet.charts_an56, 0.002); end
  def test_charts_ao56; assert_in_epsilon(1100.6, worksheet.charts_ao56, 0.002); end
  def test_charts_ap56; assert_in_epsilon(1123.9, worksheet.charts_ap56, 0.002); end
  def test_charts_aq56; assert_in_epsilon(1096.5, worksheet.charts_aq56, 0.002); end
  def test_charts_ar56; assert_in_epsilon(1039.6, worksheet.charts_ar56, 0.002); end
  def test_charts_as56; assert_in_epsilon(1048.9, worksheet.charts_as56, 0.002); end
  def test_charts_at56; assert_in_epsilon(1082.1, worksheet.charts_at56, 0.002); end
  def test_charts_au56; assert_in_epsilon(1000.6, worksheet.charts_au56, 0.002); end
  def test_charts_av56; assert_in_epsilon(1085.0, worksheet.charts_av56, 0.002); end
  def test_charts_aw56; assert_equal("Sum of above", worksheet.charts_aw56); end
  def test_charts_ay56; assert_in_epsilon(296.5420125, worksheet.charts_ay56, 0.002); end
  def test_charts_az56; assert_in_delta(0.0, (worksheet.charts_az56||0), 0.002); end
  def test_charts_ba56; assert_in_epsilon(449.1920925, worksheet.charts_ba56, 0.002); end
  def test_charts_bb56; assert_in_epsilon(507.092611005, worksheet.charts_bb56, 0.002); end
  def test_charts_bc56; assert_in_epsilon(548.56099701, worksheet.charts_bc56, 0.002); end
  def test_charts_bd56; assert_in_epsilon(586.573218056151, worksheet.charts_bd56, 0.002); end
  def test_charts_be56; assert_in_epsilon(641.5415598915608, worksheet.charts_be56, 0.002); end
  def test_charts_bf56; assert_in_epsilon(680.5418754437976, worksheet.charts_bf56, 0.002); end
  def test_charts_bg56; assert_in_epsilon(722.9297284085899, worksheet.charts_bg56, 0.002); end
  def test_charts_bh56; assert_in_epsilon(769.0713331120461, worksheet.charts_bh56, 0.002); end
  def test_charts_bi56; assert_in_epsilon(803.223, worksheet.charts_bi56, 0.002); end
  def test_charts_d57; assert_equal("Total Primary Supply", worksheet.charts_d57); end
  def test_charts_aj57; assert_in_epsilon(2773.5, worksheet.charts_aj57, 0.002); end
  def test_charts_ak57; assert_in_epsilon(2768.8, worksheet.charts_ak57, 0.002); end
  def test_charts_al57; assert_in_epsilon(2810.0, worksheet.charts_al57, 0.002); end
  def test_charts_am57; assert_in_epsilon(2836.5, worksheet.charts_am57, 0.002); end
  def test_charts_an57; assert_in_epsilon(2748.5, worksheet.charts_an57, 0.002); end
  def test_charts_ao57; assert_in_epsilon(2767.7, worksheet.charts_ao57, 0.002); end
  def test_charts_ap57; assert_in_epsilon(2788.5, worksheet.charts_ap57, 0.002); end
  def test_charts_aq57; assert_in_epsilon(2808.1, worksheet.charts_aq57, 0.002); end
  def test_charts_ar57; assert_in_epsilon(2785.4, worksheet.charts_ar57, 0.002); end
  def test_charts_as57; assert_in_epsilon(2720.5, worksheet.charts_as57, 0.002); end
  def test_charts_at57; assert_in_epsilon(2691.0, worksheet.charts_at57, 0.002); end
  def test_charts_au57; assert_in_epsilon(2520.5, worksheet.charts_au57, 0.002); end
  def test_charts_av57; assert_in_epsilon(2600.1, worksheet.charts_av57, 0.002); end
  def test_charts_aw57; assert_equal("Sum of above", worksheet.charts_aw57); end
  def test_charts_ay57; assert_in_epsilon(430.87022875762193, worksheet.charts_ay57, 0.002); end
  def test_charts_az57; assert_in_delta(0.0, (worksheet.charts_az57||0), 0.002); end
  def test_charts_ba57; assert_in_epsilon(581.2480621218025, worksheet.charts_ba57, 0.002); end
  def test_charts_bb57; assert_in_epsilon(921.323614020371, worksheet.charts_bb57, 0.002); end
  def test_charts_bc57; assert_in_epsilon(1089.3245670754293, worksheet.charts_bc57, 0.002); end
  def test_charts_bd57; assert_in_epsilon(1260.1737602798842, worksheet.charts_bd57, 0.002); end
  def test_charts_be57; assert_in_epsilon(1472.0196128987889, worksheet.charts_be57, 0.002); end
  def test_charts_bf57; assert_in_epsilon(1708.5020369279832, worksheet.charts_bf57, 0.002); end
  def test_charts_bg57; assert_in_epsilon(1969.5559610432313, worksheet.charts_bg57, 0.002); end
  def test_charts_bh57; assert_in_epsilon(2252.8472290441127, worksheet.charts_bh57, 0.002); end
  def test_charts_bi57; assert_in_epsilon(2577.2839355299016, worksheet.charts_bi57, 0.002); end
  def test_charts_d59; assert_equal("Dummy for charting supply", worksheet.charts_d59); end
  def test_charts_ay59; assert_in_epsilon(3508.000473673636, worksheet.charts_ay59, 0.002); end
  def test_charts_ba59; assert_in_epsilon(4286.929225940833, worksheet.charts_ba59, 0.002); end
  def test_charts_bb59; assert_in_epsilon(5583.485495922404, worksheet.charts_bb59, 0.002); end
  def test_charts_bc59; assert_in_epsilon(7554.043516869131, worksheet.charts_bc59, 0.002); end
  def test_charts_bd59; assert_in_epsilon(9935.058831847171, worksheet.charts_bd59, 0.002); end
  def test_charts_be59; assert_in_epsilon(12816.306009896232, worksheet.charts_be59, 0.002); end
  def test_charts_bf59; assert_in_epsilon(15787.798843717084, worksheet.charts_bf59, 0.002); end
  def test_charts_bg59; assert_in_epsilon(18814.147359329836, worksheet.charts_bg59, 0.002); end
  def test_charts_bh59; assert_in_epsilon(21763.069427261402, worksheet.charts_bh59, 0.002); end
  def test_charts_bi59; assert_in_epsilon(25057.97743724411, worksheet.charts_bi59, 0.002); end
  def test_charts_c61; assert_equal("Conversion losses, distribution, and own use", worksheet.charts_c61); end
  def test_charts_c62; assert_equal("X.01", worksheet.charts_c62); end
  def test_charts_d62; assert_equal("Conversion losses", worksheet.charts_d62); end
  def test_charts_ay62; assert_in_epsilon(-595.686815164825, worksheet.charts_ay62, 0.002); end
  def test_charts_az62; assert_in_delta(0.0, (worksheet.charts_az62||0), 0.002); end
  def test_charts_ba62; assert_in_epsilon(-792.1907494136481, worksheet.charts_ba62, 0.002); end
  def test_charts_bb62; assert_in_epsilon(-1134.1254680412508, worksheet.charts_bb62, 0.002); end
  def test_charts_bc62; assert_in_epsilon(-1624.4019219355403, worksheet.charts_bc62, 0.002); end
  def test_charts_bd62; assert_in_epsilon(-2266.021197555912, worksheet.charts_bd62, 0.002); end
  def test_charts_be62; assert_in_epsilon(-3156.496453551856, worksheet.charts_be62, 0.002); end
  def test_charts_bf62; assert_in_epsilon(-3956.5805691904575, worksheet.charts_bf62, 0.002); end
  def test_charts_bg62; assert_in_epsilon(-4911.764530672162, worksheet.charts_bg62, 0.002); end
  def test_charts_bh62; assert_in_epsilon(-5751.895286061222, worksheet.charts_bh62, 0.002); end
  def test_charts_bi62; assert_in_epsilon(-6698.568659252276, worksheet.charts_bi62, 0.002); end
  def test_charts_c63; assert_equal("X.02", worksheet.charts_c63); end
  def test_charts_d63; assert_equal("Distribution losses and own use", worksheet.charts_d63); end
  def test_charts_ay63; assert_in_epsilon(595.686815164825, worksheet.charts_ay63, 0.002); end
  def test_charts_az63; assert_in_delta(0.0, (worksheet.charts_az63||0), 0.002); end
  def test_charts_ba63; assert_in_epsilon(792.1907494136481, worksheet.charts_ba63, 0.002); end
  def test_charts_bb63; assert_in_epsilon(1134.1254680412508, worksheet.charts_bb63, 0.002); end
  def test_charts_bc63; assert_in_epsilon(1624.4019219355403, worksheet.charts_bc63, 0.002); end
  def test_charts_bd63; assert_in_epsilon(2266.021197555912, worksheet.charts_bd63, 0.002); end
  def test_charts_be63; assert_in_epsilon(3156.496453551856, worksheet.charts_be63, 0.002); end
  def test_charts_bf63; assert_in_epsilon(3956.5805691904575, worksheet.charts_bf63, 0.002); end
  def test_charts_bg63; assert_in_epsilon(4911.764530672162, worksheet.charts_bg63, 0.002); end
  def test_charts_bh63; assert_in_epsilon(5751.895286061222, worksheet.charts_bh63, 0.002); end
  def test_charts_bi63; assert_in_epsilon(6698.568659252276, worksheet.charts_bi63, 0.002); end
  def test_charts_d64; assert_equal("Supply net of losses", worksheet.charts_d64); end
  def test_charts_ay64; assert_in_delta(0.0, (worksheet.charts_ay64||0), 0.002); end
  def test_charts_az64; assert_in_delta(0.0, (worksheet.charts_az64||0), 0.002); end
  def test_charts_ba64; assert_in_delta(0.0, (worksheet.charts_ba64||0), 0.002); end
  def test_charts_bb64; assert_in_delta(0.0, (worksheet.charts_bb64||0), 0.002); end
  def test_charts_bc64; assert_in_delta(0.0, (worksheet.charts_bc64||0), 0.002); end
  def test_charts_bd64; assert_in_delta(0.0, (worksheet.charts_bd64||0), 0.002); end
  def test_charts_be64; assert_in_delta(0.0, (worksheet.charts_be64||0), 0.002); end
  def test_charts_bf64; assert_in_delta(0.0, (worksheet.charts_bf64||0), 0.002); end
  def test_charts_bg64; assert_in_delta(0.0, (worksheet.charts_bg64||0), 0.002); end
  def test_charts_bh64; assert_in_delta(0.0, (worksheet.charts_bh64||0), 0.002); end
  def test_charts_bi64; assert_in_delta(0.0, (worksheet.charts_bi64||0), 0.002); end
  def test_charts_c66; assert_equal("Net Consumption of Hydrocarbons excluding bio energy", worksheet.charts_c66); end
  def test_charts_c67; assert_equal("V.03", worksheet.charts_c67); end
  def test_charts_d67; assert_equal("Solid hydrocarbons", worksheet.charts_d67); end
  def test_charts_ay67; assert_in_epsilon(3253.479801148461, worksheet.charts_ay67, 0.002); end
  def test_charts_ba67; assert_in_epsilon(4179.698990784802, worksheet.charts_ba67, 0.002); end
  def test_charts_bb67; assert_in_epsilon(5410.008801938036, worksheet.charts_bb67, 0.002); end
  def test_charts_bc67; assert_in_epsilon(7545.521153499874, worksheet.charts_bc67, 0.002); end
  def test_charts_bd67; assert_in_epsilon(10199.902437794315, worksheet.charts_bd67, 0.002); end
  def test_charts_be67; assert_in_epsilon(13706.081917472606, worksheet.charts_be67, 0.002); end
  def test_charts_bf67; assert_in_epsilon(16912.514790400215, worksheet.charts_bf67, 0.002); end
  def test_charts_bg67; assert_in_epsilon(20451.66153060164, worksheet.charts_bg67, 0.002); end
  def test_charts_bh67; assert_in_epsilon(23597.21687671353, worksheet.charts_bh67, 0.002); end
  def test_charts_bi67; assert_in_epsilon(27124.988503822457, worksheet.charts_bi67, 0.002); end
  def test_charts_c68; assert_equal("V.04", worksheet.charts_c68); end
  def test_charts_d68; assert_equal("Liquid hydrocarbons", worksheet.charts_d68); end
  def test_charts_ay68; assert_in_epsilon(1524.0885645276092, worksheet.charts_ay68, 0.002); end
  def test_charts_ba68; assert_in_epsilon(1777.8548538590196, worksheet.charts_ba68, 0.002); end
  def test_charts_bb68; assert_in_epsilon(2409.13711675689, worksheet.charts_bb68, 0.002); end
  def test_charts_bc68; assert_in_epsilon(3252.237773584372, worksheet.charts_bc68, 0.002); end
  def test_charts_bd68; assert_in_epsilon(4275.029204889995, worksheet.charts_bd68, 0.002); end
  def test_charts_be68; assert_in_epsilon(5484.980492206201, worksheet.charts_be68, 0.002); end
  def test_charts_bf68; assert_in_epsilon(6879.587389666815, worksheet.charts_bf68, 0.002); end
  def test_charts_bg68; assert_in_epsilon(8283.082582078518, worksheet.charts_bg68, 0.002); end
  def test_charts_bh68; assert_in_epsilon(9862.490281373503, worksheet.charts_bh68, 0.002); end
  def test_charts_bi68; assert_in_epsilon(11664.591533638724, worksheet.charts_bi68, 0.002); end
  def test_charts_c69; assert_equal("V.05", worksheet.charts_c69); end
  def test_charts_d69; assert_equal("Gaseous hydrocarbons", worksheet.charts_d69); end
  def test_charts_ay69; assert_in_epsilon(383.84754191484035, worksheet.charts_ay69, 0.002); end
  def test_charts_ba69; assert_in_epsilon(515.7388752749973, worksheet.charts_ba69, 0.002); end
  def test_charts_bb69; assert_in_epsilon(812.4969853800327, worksheet.charts_bb69, 0.002); end
  def test_charts_bc69; assert_in_epsilon(959.6250095341898, worksheet.charts_bc69, 0.002); end
  def test_charts_bd69; assert_in_epsilon(1109.2297642530393, worksheet.charts_bd69, 0.002); end
  def test_charts_be69; assert_in_epsilon(1294.4837880279324, worksheet.charts_be69, 0.002); end
  def test_charts_bf69; assert_in_epsilon(1500.4859816334385, worksheet.charts_bf69, 0.002); end
  def test_charts_bg69; assert_in_epsilon(1727.8639214150958, worksheet.charts_bg69, 0.002); end
  def test_charts_bh69; assert_in_epsilon(1974.588139255765, worksheet.charts_bh69, 0.002); end
  def test_charts_bi69; assert_in_epsilon(2257.100695354515, worksheet.charts_bi69, 0.002); end
  def test_charts_c71; assert_equal("Energy Security Tables", worksheet.charts_c71); end
  def test_charts_ay71; assert_in_epsilon(2007.0, worksheet.charts_ay71, 0.002); end
  def test_charts_ba71; assert_in_epsilon(2012.0, worksheet.charts_ba71, 0.002); end
  def test_charts_bb71; assert_in_epsilon(2017.0, worksheet.charts_bb71, 0.002); end
  def test_charts_bc71; assert_in_epsilon(2022.0, worksheet.charts_bc71, 0.002); end
  def test_charts_bd71; assert_in_epsilon(2027.0, worksheet.charts_bd71, 0.002); end
  def test_charts_be71; assert_in_epsilon(2032.0, worksheet.charts_be71, 0.002); end
  def test_charts_bf71; assert_in_epsilon(2037.0, worksheet.charts_bf71, 0.002); end
  def test_charts_bg71; assert_in_epsilon(2042.0, worksheet.charts_bg71, 0.002); end
  def test_charts_bh71; assert_in_epsilon(2047.0, worksheet.charts_bh71, 0.002); end
  def test_charts_bi71; assert_in_epsilon(2052.0, worksheet.charts_bi71, 0.002); end
  def test_charts_d72; assert_equal("Coal Imports", worksheet.charts_d72); end
  def test_charts_ay72; assert_in_delta(0.13507952627584974, worksheet.charts_ay72, 0.002); end
  def test_charts_ba72; assert_in_delta(0.16306051847276204, worksheet.charts_ba72, 0.002); end
  def test_charts_bb72; assert_in_delta(0.29564399430893357, worksheet.charts_bb72, 0.002); end
  def test_charts_bc72; assert_in_delta(0.4568547897534656, worksheet.charts_bc72, 0.002); end
  def test_charts_bd72; assert_in_delta(0.5813196084912029, worksheet.charts_bd72, 0.002); end
  def test_charts_be72; assert_in_delta(0.6897996532319706, worksheet.charts_be72, 0.002); end
  def test_charts_bf72; assert_in_delta(0.7479011617649691, worksheet.charts_bf72, 0.002); end
  def test_charts_bg72; assert_in_delta(0.8254070999331657, worksheet.charts_bg72, 0.002); end
  def test_charts_bh72; assert_in_delta(0.8729922810195125, worksheet.charts_bh72, 0.002); end
  def test_charts_bi72; assert_in_delta(0.9070382098567895, worksheet.charts_bi72, 0.002); end
  def test_charts_d73; assert_equal("Oil Imports", worksheet.charts_d73); end
  def test_charts_ay73; assert_in_delta(0.7576118733775037, worksheet.charts_ay73, 0.002); end
  def test_charts_ba73; assert_in_delta(0.7671143585315806, worksheet.charts_ba73, 0.002); end
  def test_charts_bb73; assert_in_delta(0.8133963262131126, worksheet.charts_bb73, 0.002); end
  def test_charts_bc73; assert_in_delta(0.8828544265092639, worksheet.charts_bc73, 0.002); end
  def test_charts_bd73; assert_in_delta(0.9112968149891353, worksheet.charts_bd73, 0.002); end
  def test_charts_be73; assert_in_delta(0.9311495661182688, worksheet.charts_be73, 0.002); end
  def test_charts_bf73; assert_in_delta(0.9452422873090196, worksheet.charts_bf73, 0.002); end
  def test_charts_bg73; assert_in_delta(0.9545634252788555, worksheet.charts_bg73, 0.002); end
  def test_charts_bh73; assert_in_delta(0.961818531696753, worksheet.charts_bh73, 0.002); end
  def test_charts_bi73; assert_in_delta(0.9676487086668158, worksheet.charts_bi73, 0.002); end
  def test_charts_bk73; assert_in_delta(0.27419354838709675, worksheet.charts_bk73, 0.002); end
  def test_charts_d74; assert_equal("Gas Imports", worksheet.charts_d74); end
  def test_charts_ay74; assert_in_delta(0.34995200330714565, worksheet.charts_ay74, 0.002); end
  def test_charts_ba74; assert_in_delta(0.22719382347657568, worksheet.charts_ba74, 0.002); end
  def test_charts_bb74; assert_in_delta(0.4496042397174595, worksheet.charts_bb74, 0.002); end
  def test_charts_bc74; assert_in_delta(0.49642098086270786, worksheet.charts_bc74, 0.002); end
  def test_charts_bd74; assert_in_delta(0.5345298906034409, worksheet.charts_bd74, 0.002); end
  def test_charts_be74; assert_in_delta(0.5641759428543218, worksheet.charts_be74, 0.002); end
  def test_charts_bf74; assert_in_delta(0.6016733602100565, worksheet.charts_bf74, 0.002); end
  def test_charts_bg74; assert_in_delta(0.632947860986052, worksheet.charts_bg74, 0.002); end
  def test_charts_bh74; assert_in_delta(0.6586225096859478, worksheet.charts_bh74, 0.002); end
  def test_charts_bi74; assert_in_delta(0.6883451648741784, worksheet.charts_bi74, 0.002); end
  def test_charts_d75; assert_equal("Overall", worksheet.charts_d75); end
  def test_charts_ay75; assert_in_delta(0.3063088138104771, worksheet.charts_ay75, 0.002); end
  def test_charts_ba75; assert_in_delta(0.3051184704775254, worksheet.charts_ba75, 0.002); end
  def test_charts_bb75; assert_in_delta(0.40845329527903873, worksheet.charts_bb75, 0.002); end
  def test_charts_bc75; assert_in_delta(0.5245055269406919, worksheet.charts_bc75, 0.002); end
  def test_charts_bd75; assert_in_delta(0.6149482496053067, worksheet.charts_bd75, 0.002); end
  def test_charts_be75; assert_in_delta(0.695529578264568, worksheet.charts_be75, 0.002); end
  def test_charts_bf75; assert_in_delta(0.746510814441223, worksheet.charts_bf75, 0.002); end
  def test_charts_bg75; assert_in_delta(0.8057567019931153, worksheet.charts_bg75, 0.002); end
  def test_charts_bh75; assert_in_delta(0.8453816707449013, worksheet.charts_bh75, 0.002); end
  def test_charts_bi75; assert_in_delta(0.8758008410676253, worksheet.charts_bi75, 0.002); end
  def test_charts_c78; assert_equal("Supply / demand not accounted for", worksheet.charts_c78); end
  def test_charts_c80; assert_equal("C.01", worksheet.charts_c80); end
  def test_charts_d80; assert_equal("Coal indigenous production", worksheet.charts_d80); end
  def test_charts_ay80; assert_in_delta(0.0, (worksheet.charts_ay80||0), 0.002); end
  def test_charts_az80; assert_in_delta(0.0, (worksheet.charts_az80||0), 0.002); end
  def test_charts_ba80; assert_in_delta(0.0, (worksheet.charts_ba80||0), 0.002); end
  def test_charts_bb80; assert_in_delta(0.0, (worksheet.charts_bb80||0), 0.002); end
  def test_charts_bc80; assert_in_delta(0.0, (worksheet.charts_bc80||0), 0.002); end
  def test_charts_bd80; assert_in_delta(0.0, (worksheet.charts_bd80||0), 0.002); end
  def test_charts_be80; assert_in_delta(0.0, (worksheet.charts_be80||0), 0.002); end
  def test_charts_bf80; assert_in_delta(0.0, (worksheet.charts_bf80||0), 0.002); end
  def test_charts_bg80; assert_in_delta(0.0, (worksheet.charts_bg80||0), 0.002); end
  def test_charts_bh80; assert_in_delta(0.0, (worksheet.charts_bh80||0), 0.002); end
  def test_charts_bi80; assert_in_delta(0.0, (worksheet.charts_bi80||0), 0.002); end
  def test_charts_c81; assert_equal("C.02", worksheet.charts_c81); end
  def test_charts_d81; assert_equal("Oil and petroleum products", worksheet.charts_d81); end
  def test_charts_ay81; assert_in_delta(0.0, (worksheet.charts_ay81||0), 0.002); end
  def test_charts_az81; assert_in_delta(0.0, (worksheet.charts_az81||0), 0.002); end
  def test_charts_ba81; assert_in_delta(0.0, (worksheet.charts_ba81||0), 0.002); end
  def test_charts_bb81; assert_in_delta(0.0, (worksheet.charts_bb81||0), 0.002); end
  def test_charts_bc81; assert_in_delta(0.0, (worksheet.charts_bc81||0), 0.002); end
  def test_charts_bd81; assert_in_delta(0.0, (worksheet.charts_bd81||0), 0.002); end
  def test_charts_be81; assert_in_delta(0.0, (worksheet.charts_be81||0), 0.002); end
  def test_charts_bf81; assert_in_delta(0.0, (worksheet.charts_bf81||0), 0.002); end
  def test_charts_bg81; assert_in_delta(0.0, (worksheet.charts_bg81||0), 0.002); end
  def test_charts_bh81; assert_in_delta(5.684341886080801e-13, worksheet.charts_bh81, 0.002); end
  def test_charts_bi81; assert_in_delta(-7.958078640513122e-13, worksheet.charts_bi81, 0.002); end
  def test_charts_c82; assert_equal("C.03", worksheet.charts_c82); end
  def test_charts_d82; assert_equal("Natural gas", worksheet.charts_d82); end
  def test_charts_ay82; assert_in_delta(0.0, (worksheet.charts_ay82||0), 0.002); end
  def test_charts_az82; assert_in_delta(0.0, (worksheet.charts_az82||0), 0.002); end
  def test_charts_ba82; assert_in_delta(0.0, (worksheet.charts_ba82||0), 0.002); end
  def test_charts_bb82; assert_in_delta(0.0, (worksheet.charts_bb82||0), 0.002); end
  def test_charts_bc82; assert_in_delta(0.0, (worksheet.charts_bc82||0), 0.002); end
  def test_charts_bd82; assert_in_delta(0.0, (worksheet.charts_bd82||0), 0.002); end
  def test_charts_be82; assert_in_delta(0.0, (worksheet.charts_be82||0), 0.002); end
  def test_charts_bf82; assert_in_delta(0.0, (worksheet.charts_bf82||0), 0.002); end
  def test_charts_bg82; assert_in_delta(0.0, (worksheet.charts_bg82||0), 0.002); end
  def test_charts_bh82; assert_in_delta(0.0, (worksheet.charts_bh82||0), 0.002); end
  def test_charts_bi82; assert_in_delta(0.0, (worksheet.charts_bi82||0), 0.002); end
  def test_charts_c83; assert_equal("V.03", worksheet.charts_c83); end
  def test_charts_d83; assert_equal("Solid hydrocarbons", worksheet.charts_d83); end
  def test_charts_ay83; assert_in_delta(0.0, (worksheet.charts_ay83||0), 0.002); end
  def test_charts_az83; assert_in_delta(0.0, (worksheet.charts_az83||0), 0.002); end
  def test_charts_ba83; assert_in_delta(0.0, (worksheet.charts_ba83||0), 0.002); end
  def test_charts_bb83; assert_in_delta(0.0, (worksheet.charts_bb83||0), 0.002); end
  def test_charts_bc83; assert_in_delta(0.0, (worksheet.charts_bc83||0), 0.002); end
  def test_charts_bd83; assert_in_delta(0.0, (worksheet.charts_bd83||0), 0.002); end
  def test_charts_be83; assert_in_delta(0.0, (worksheet.charts_be83||0), 0.002); end
  def test_charts_bf83; assert_in_delta(0.0, (worksheet.charts_bf83||0), 0.002); end
  def test_charts_bg83; assert_in_delta(0.0, (worksheet.charts_bg83||0), 0.002); end
  def test_charts_bh83; assert_in_delta(0.0, (worksheet.charts_bh83||0), 0.002); end
  def test_charts_bi83; assert_in_delta(0.0, (worksheet.charts_bi83||0), 0.002); end
  def test_charts_c84; assert_equal("V.04", worksheet.charts_c84); end
  def test_charts_d84; assert_equal("Liquid hydrocarbons", worksheet.charts_d84); end
  def test_charts_ay84; assert_in_delta(0.0, (worksheet.charts_ay84||0), 0.002); end
  def test_charts_az84; assert_in_delta(0.0, (worksheet.charts_az84||0), 0.002); end
  def test_charts_ba84; assert_in_delta(0.0, (worksheet.charts_ba84||0), 0.002); end
  def test_charts_bb84; assert_in_delta(0.0, (worksheet.charts_bb84||0), 0.002); end
  def test_charts_bc84; assert_in_delta(0.0, (worksheet.charts_bc84||0), 0.002); end
  def test_charts_bd84; assert_in_delta(0.0, (worksheet.charts_bd84||0), 0.002); end
  def test_charts_be84; assert_in_delta(0.0, (worksheet.charts_be84||0), 0.002); end
  def test_charts_bf84; assert_in_delta(0.0, (worksheet.charts_bf84||0), 0.002); end
  def test_charts_bg84; assert_in_delta(0.0, (worksheet.charts_bg84||0), 0.002); end
  def test_charts_bh84; assert_in_delta(0.0, (worksheet.charts_bh84||0), 0.002); end
  def test_charts_bi84; assert_in_delta(0.0, (worksheet.charts_bi84||0), 0.002); end
  def test_charts_c85; assert_equal("V.05", worksheet.charts_c85); end
  def test_charts_d85; assert_equal("Gaseous hydrocarbons", worksheet.charts_d85); end
  def test_charts_ay85; assert_in_delta(0.0, (worksheet.charts_ay85||0), 0.002); end
  def test_charts_az85; assert_in_delta(0.0, (worksheet.charts_az85||0), 0.002); end
  def test_charts_ba85; assert_in_delta(0.0, (worksheet.charts_ba85||0), 0.002); end
  def test_charts_bb85; assert_in_delta(0.0, (worksheet.charts_bb85||0), 0.002); end
  def test_charts_bc85; assert_in_delta(0.0, (worksheet.charts_bc85||0), 0.002); end
  def test_charts_bd85; assert_in_delta(0.0, (worksheet.charts_bd85||0), 0.002); end
  def test_charts_be85; assert_in_delta(0.0, (worksheet.charts_be85||0), 0.002); end
  def test_charts_bf85; assert_in_delta(0.0, (worksheet.charts_bf85||0), 0.002); end
  def test_charts_bg85; assert_in_delta(0.0, (worksheet.charts_bg85||0), 0.002); end
  def test_charts_bh85; assert_in_delta(0.0, (worksheet.charts_bh85||0), 0.002); end
  def test_charts_bi85; assert_in_delta(0.0, (worksheet.charts_bi85||0), 0.002); end
  def test_charts_c86; assert_equal("V.06", worksheet.charts_c86); end
  def test_charts_d86; assert_equal("Solid Biomass Hydrocarbons", worksheet.charts_d86); end
  def test_charts_ay86; assert_in_delta(0.0, (worksheet.charts_ay86||0), 0.002); end
  def test_charts_az86; assert_in_delta(0.0, (worksheet.charts_az86||0), 0.002); end
  def test_charts_ba86; assert_in_delta(0.0, (worksheet.charts_ba86||0), 0.002); end
  def test_charts_bb86; assert_in_delta(0.0, (worksheet.charts_bb86||0), 0.002); end
  def test_charts_bc86; assert_in_delta(0.0, (worksheet.charts_bc86||0), 0.002); end
  def test_charts_bd86; assert_in_delta(0.0, (worksheet.charts_bd86||0), 0.002); end
  def test_charts_be86; assert_in_delta(0.0, (worksheet.charts_be86||0), 0.002); end
  def test_charts_bf86; assert_in_delta(0.0, (worksheet.charts_bf86||0), 0.002); end
  def test_charts_bg86; assert_in_delta(0.0, (worksheet.charts_bg86||0), 0.002); end
  def test_charts_bh86; assert_in_delta(0.0, (worksheet.charts_bh86||0), 0.002); end
  def test_charts_bi86; assert_in_delta(0.0, (worksheet.charts_bi86||0), 0.002); end
  def test_charts_c87; assert_equal("V.08", worksheet.charts_c87); end
  def test_charts_d87; assert_equal("Edible biomass", worksheet.charts_d87); end
  def test_charts_ay87; assert_in_delta(0.0, (worksheet.charts_ay87||0), 0.002); end
  def test_charts_az87; assert_in_delta(0.0, (worksheet.charts_az87||0), 0.002); end
  def test_charts_ba87; assert_in_delta(0.0, (worksheet.charts_ba87||0), 0.002); end
  def test_charts_bb87; assert_in_delta(0.0, (worksheet.charts_bb87||0), 0.002); end
  def test_charts_bc87; assert_in_delta(0.0, (worksheet.charts_bc87||0), 0.002); end
  def test_charts_bd87; assert_in_delta(0.0, (worksheet.charts_bd87||0), 0.002); end
  def test_charts_be87; assert_in_delta(0.0, (worksheet.charts_be87||0), 0.002); end
  def test_charts_bf87; assert_in_delta(0.0, (worksheet.charts_bf87||0), 0.002); end
  def test_charts_bg87; assert_in_delta(0.0, (worksheet.charts_bg87||0), 0.002); end
  def test_charts_bh87; assert_in_delta(0.0, (worksheet.charts_bh87||0), 0.002); end
  def test_charts_bi87; assert_in_delta(0.0, (worksheet.charts_bi87||0), 0.002); end
  def test_charts_c88; assert_equal("V.07", worksheet.charts_c88); end
  def test_charts_d88; assert_equal(" Gaseous Biomass Hydrocarbons", worksheet.charts_d88); end
  def test_charts_ay88; assert_in_delta(0.0, (worksheet.charts_ay88||0), 0.002); end
  def test_charts_az88; assert_in_delta(0.0, (worksheet.charts_az88||0), 0.002); end
  def test_charts_ba88; assert_in_delta(0.0, (worksheet.charts_ba88||0), 0.002); end
  def test_charts_bb88; assert_in_delta(0.0, (worksheet.charts_bb88||0), 0.002); end
  def test_charts_bc88; assert_in_delta(0.0, (worksheet.charts_bc88||0), 0.002); end
  def test_charts_bd88; assert_in_delta(0.0, (worksheet.charts_bd88||0), 0.002); end
  def test_charts_be88; assert_in_delta(0.0, (worksheet.charts_be88||0), 0.002); end
  def test_charts_bf88; assert_in_delta(0.0, (worksheet.charts_bf88||0), 0.002); end
  def test_charts_bg88; assert_in_delta(0.0, (worksheet.charts_bg88||0), 0.002); end
  def test_charts_bh88; assert_in_delta(0.0, (worksheet.charts_bh88||0), 0.002); end
  def test_charts_bi88; assert_in_delta(0.0, (worksheet.charts_bi88||0), 0.002); end
  def test_charts_c89; assert_equal("V.09", worksheet.charts_c89); end
  def test_charts_d89; assert_equal("Dry biomass and waste", worksheet.charts_d89); end
  def test_charts_ay89; assert_in_delta(0.0, (worksheet.charts_ay89||0), 0.002); end
  def test_charts_az89; assert_in_delta(0.0, (worksheet.charts_az89||0), 0.002); end
  def test_charts_ba89; assert_in_delta(0.0, (worksheet.charts_ba89||0), 0.002); end
  def test_charts_bb89; assert_in_delta(0.0, (worksheet.charts_bb89||0), 0.002); end
  def test_charts_bc89; assert_in_delta(0.0, (worksheet.charts_bc89||0), 0.002); end
  def test_charts_bd89; assert_in_delta(0.0, (worksheet.charts_bd89||0), 0.002); end
  def test_charts_be89; assert_in_delta(0.0, (worksheet.charts_be89||0), 0.002); end
  def test_charts_bf89; assert_in_delta(0.0, (worksheet.charts_bf89||0), 0.002); end
  def test_charts_bg89; assert_in_delta(0.0, (worksheet.charts_bg89||0), 0.002); end
  def test_charts_bh89; assert_in_delta(0.0, (worksheet.charts_bh89||0), 0.002); end
  def test_charts_bi89; assert_in_delta(0.0, (worksheet.charts_bi89||0), 0.002); end
  def test_charts_c90; assert_equal("V.10", worksheet.charts_c90); end
  def test_charts_d90; assert_equal("Wet biomass and waste", worksheet.charts_d90); end
  def test_charts_ay90; assert_in_delta(0.0, (worksheet.charts_ay90||0), 0.002); end
  def test_charts_az90; assert_in_delta(0.0, (worksheet.charts_az90||0), 0.002); end
  def test_charts_ba90; assert_in_delta(0.0, (worksheet.charts_ba90||0), 0.002); end
  def test_charts_bb90; assert_in_delta(0.0, (worksheet.charts_bb90||0), 0.002); end
  def test_charts_bc90; assert_in_delta(0.0, (worksheet.charts_bc90||0), 0.002); end
  def test_charts_bd90; assert_in_delta(0.0, (worksheet.charts_bd90||0), 0.002); end
  def test_charts_be90; assert_in_delta(0.0, (worksheet.charts_be90||0), 0.002); end
  def test_charts_bf90; assert_in_delta(0.0, (worksheet.charts_bf90||0), 0.002); end
  def test_charts_bg90; assert_in_delta(0.0, (worksheet.charts_bg90||0), 0.002); end
  def test_charts_bh90; assert_in_delta(0.0, (worksheet.charts_bh90||0), 0.002); end
  def test_charts_bi90; assert_in_delta(1.7763568394002505e-15, worksheet.charts_bi90, 0.002); end
  def test_charts_c91; assert_equal("V.11", worksheet.charts_c91); end
  def test_charts_d91; assert_equal("Off Grid Renewables", worksheet.charts_d91); end
  def test_charts_ay91; assert_in_delta(0.0, (worksheet.charts_ay91||0), 0.002); end
  def test_charts_az91; assert_in_delta(0.0, (worksheet.charts_az91||0), 0.002); end
  def test_charts_ba91; assert_in_delta(0.0, (worksheet.charts_ba91||0), 0.002); end
  def test_charts_bb91; assert_in_delta(0.0, (worksheet.charts_bb91||0), 0.002); end
  def test_charts_bc91; assert_in_delta(0.0, (worksheet.charts_bc91||0), 0.002); end
  def test_charts_bd91; assert_in_delta(0.0, (worksheet.charts_bd91||0), 0.002); end
  def test_charts_be91; assert_in_delta(0.0, (worksheet.charts_be91||0), 0.002); end
  def test_charts_bf91; assert_in_delta(0.0, (worksheet.charts_bf91||0), 0.002); end
  def test_charts_bg91; assert_in_delta(0.0, (worksheet.charts_bg91||0), 0.002); end
  def test_charts_bh91; assert_in_delta(0.0, (worksheet.charts_bh91||0), 0.002); end
  def test_charts_bi91; assert_in_delta(0.0, (worksheet.charts_bi91||0), 0.002); end
  def test_charts_c92; assert_equal("V.12", worksheet.charts_c92); end
  def test_charts_d92; assert_equal("H2", worksheet.charts_d92); end
  def test_charts_ay92; assert_in_delta(0.0, (worksheet.charts_ay92||0), 0.002); end
  def test_charts_az92; assert_in_delta(0.0, (worksheet.charts_az92||0), 0.002); end
  def test_charts_ba92; assert_in_delta(0.0, (worksheet.charts_ba92||0), 0.002); end
  def test_charts_bb92; assert_in_delta(0.0, (worksheet.charts_bb92||0), 0.002); end
  def test_charts_bc92; assert_in_delta(0.0, (worksheet.charts_bc92||0), 0.002); end
  def test_charts_bd92; assert_in_delta(0.0, (worksheet.charts_bd92||0), 0.002); end
  def test_charts_be92; assert_in_delta(0.0, (worksheet.charts_be92||0), 0.002); end
  def test_charts_bf92; assert_in_delta(0.0, (worksheet.charts_bf92||0), 0.002); end
  def test_charts_bg92; assert_in_delta(0.0, (worksheet.charts_bg92||0), 0.002); end
  def test_charts_bh92; assert_in_delta(0.0, (worksheet.charts_bh92||0), 0.002); end
  def test_charts_bi92; assert_in_delta(0.0, (worksheet.charts_bi92||0), 0.002); end
  def test_charts_c93; assert_equal("V.13", worksheet.charts_c93); end
  def test_charts_d93; assert_equal("Energy crops (second generation)", worksheet.charts_d93); end
  def test_charts_ay93; assert_in_delta(0.0, (worksheet.charts_ay93||0), 0.002); end
  def test_charts_az93; assert_in_delta(0.0, (worksheet.charts_az93||0), 0.002); end
  def test_charts_ba93; assert_in_delta(0.0, (worksheet.charts_ba93||0), 0.002); end
  def test_charts_bb93; assert_in_delta(0.0, (worksheet.charts_bb93||0), 0.002); end
  def test_charts_bc93; assert_in_delta(0.0, (worksheet.charts_bc93||0), 0.002); end
  def test_charts_bd93; assert_in_delta(0.0, (worksheet.charts_bd93||0), 0.002); end
  def test_charts_be93; assert_in_delta(0.0, (worksheet.charts_be93||0), 0.002); end
  def test_charts_bf93; assert_in_delta(0.0, (worksheet.charts_bf93||0), 0.002); end
  def test_charts_bg93; assert_in_delta(0.0, (worksheet.charts_bg93||0), 0.002); end
  def test_charts_bh93; assert_in_delta(0.0, (worksheet.charts_bh93||0), 0.002); end
  def test_charts_bi93; assert_in_delta(0.0, (worksheet.charts_bi93||0), 0.002); end
  def test_charts_d94; assert_equal("Total unnaccounted supply / demand", worksheet.charts_d94); end
  def test_charts_ay94; assert_in_delta(0.0, (worksheet.charts_ay94||0), 0.002); end
  def test_charts_az94; assert_in_delta(0.0, (worksheet.charts_az94||0), 0.002); end
  def test_charts_ba94; assert_in_delta(0.0, (worksheet.charts_ba94||0), 0.002); end
  def test_charts_bb94; assert_in_delta(0.0, (worksheet.charts_bb94||0), 0.002); end
  def test_charts_bc94; assert_in_delta(0.0, (worksheet.charts_bc94||0), 0.002); end
  def test_charts_bd94; assert_in_delta(0.0, (worksheet.charts_bd94||0), 0.002); end
  def test_charts_be94; assert_in_delta(0.0, (worksheet.charts_be94||0), 0.002); end
  def test_charts_bf94; assert_in_delta(0.0, (worksheet.charts_bf94||0), 0.002); end
  def test_charts_bg94; assert_in_delta(0.0, (worksheet.charts_bg94||0), 0.002); end
  def test_charts_bh94; assert_in_delta(5.684341886080801e-13, worksheet.charts_bh94, 0.002); end
  def test_charts_bi94; assert_in_delta(-7.94031507211912e-13, worksheet.charts_bi94, 0.002); end
  def test_charts_ay95; assert_in_delta(0.0, (worksheet.charts_ay95||0), 0.002); end
  def test_charts_az95; assert_in_delta(0.0, (worksheet.charts_az95||0), 0.002); end
  def test_charts_ba95; assert_in_delta(0.0, (worksheet.charts_ba95||0), 0.002); end
  def test_charts_bb95; assert_in_delta(0.0, (worksheet.charts_bb95||0), 0.002); end
  def test_charts_bc95; assert_in_delta(0.0, (worksheet.charts_bc95||0), 0.002); end
  def test_charts_bd95; assert_in_delta(0.0, (worksheet.charts_bd95||0), 0.002); end
  def test_charts_be95; assert_in_delta(0.0, (worksheet.charts_be95||0), 0.002); end
  def test_charts_bf95; assert_in_delta(0.0, (worksheet.charts_bf95||0), 0.002); end
  def test_charts_bg95; assert_in_delta(0.0, (worksheet.charts_bg95||0), 0.002); end
  def test_charts_bh95; assert_in_delta(0.0, (worksheet.charts_bh95||0), 0.002); end
  def test_charts_bi95; assert_in_delta(0.0, (worksheet.charts_bi95||0), 0.002); end
  def test_charts_d96; assert_equal("Supply, Demand, and Unaccounted supply", worksheet.charts_d96); end
  def test_charts_ay96; assert_in_delta(9.094947017729282e-13, worksheet.charts_ay96, 0.002); end
  def test_charts_az96; assert_in_delta(0.0, (worksheet.charts_az96||0), 0.002); end
  def test_charts_ba96; assert_in_delta(0.0, (worksheet.charts_ba96||0), 0.002); end
  def test_charts_bb96; assert_in_delta(0.0, (worksheet.charts_bb96||0), 0.002); end
  def test_charts_bc96; assert_in_delta(-1.8189894035458565e-12, worksheet.charts_bc96, 0.002); end
  def test_charts_bd96; assert_in_delta(1.8189894035458565e-12, worksheet.charts_bd96, 0.002); end
  def test_charts_be96; assert_in_delta(-1.8189894035458565e-12, worksheet.charts_be96, 0.002); end
  def test_charts_bf96; assert_in_delta(0.0, (worksheet.charts_bf96||0), 0.002); end
  def test_charts_bg96; assert_in_delta(0.0, (worksheet.charts_bg96||0), 0.002); end
  def test_charts_bh96; assert_in_delta(4.206412995699793e-12, worksheet.charts_bh96, 0.002); end
  def test_charts_bi96; assert_in_delta(-7.94031507211912e-13, worksheet.charts_bi96, 0.002); end
  def test_charts_b100; assert_equal("Electricity grid (net of distribution losses)", worksheet.charts_b100); end
  def test_charts_c102; assert_equal("V.01", worksheet.charts_c102); end
  def test_charts_d102; assert_equal("Electricity (delivered to end user)", worksheet.charts_d102); end
  def test_charts_ay102; assert_in_epsilon(-595.686815164825, worksheet.charts_ay102, 0.002); end
  def test_charts_az102; assert_in_delta(0.0, (worksheet.charts_az102||0), 0.002); end
  def test_charts_ba102; assert_in_epsilon(-792.1907494136481, worksheet.charts_ba102, 0.002); end
  def test_charts_bb102; assert_in_epsilon(-1134.1254680412508, worksheet.charts_bb102, 0.002); end
  def test_charts_bc102; assert_in_epsilon(-1624.4019219355403, worksheet.charts_bc102, 0.002); end
  def test_charts_bd102; assert_in_epsilon(-2266.021197555912, worksheet.charts_bd102, 0.002); end
  def test_charts_be102; assert_in_epsilon(-3156.496453551856, worksheet.charts_be102, 0.002); end
  def test_charts_bf102; assert_in_epsilon(-3956.5805691904575, worksheet.charts_bf102, 0.002); end
  def test_charts_bg102; assert_in_epsilon(-4911.764530672162, worksheet.charts_bg102, 0.002); end
  def test_charts_bh102; assert_in_epsilon(-5751.895286061222, worksheet.charts_bh102, 0.002); end
  def test_charts_bi102; assert_in_epsilon(-6698.568659252276, worksheet.charts_bi102, 0.002); end
  def test_charts_bj102; assert_equal("REFERENCED", worksheet.charts_bj102); end
  def test_charts_c103; assert_equal("V.02", worksheet.charts_c103); end
  def test_charts_d103; assert_equal("Electricity (supplied to grid)", worksheet.charts_d103); end
  def test_charts_ay103; assert_in_epsilon(595.686815164825, worksheet.charts_ay103, 0.002); end
  def test_charts_az103; assert_in_delta(0.0, (worksheet.charts_az103||0), 0.002); end
  def test_charts_ba103; assert_in_epsilon(792.1907494136481, worksheet.charts_ba103, 0.002); end
  def test_charts_bb103; assert_in_epsilon(1134.1254680412508, worksheet.charts_bb103, 0.002); end
  def test_charts_bc103; assert_in_epsilon(1624.4019219355403, worksheet.charts_bc103, 0.002); end
  def test_charts_bd103; assert_in_epsilon(2266.021197555912, worksheet.charts_bd103, 0.002); end
  def test_charts_be103; assert_in_epsilon(3156.496453551856, worksheet.charts_be103, 0.002); end
  def test_charts_bf103; assert_in_epsilon(3956.5805691904575, worksheet.charts_bf103, 0.002); end
  def test_charts_bg103; assert_in_epsilon(4911.764530672162, worksheet.charts_bg103, 0.002); end
  def test_charts_bh103; assert_in_epsilon(5751.895286061222, worksheet.charts_bh103, 0.002); end
  def test_charts_bi103; assert_in_epsilon(6698.568659252276, worksheet.charts_bi103, 0.002); end
  def test_charts_d104; assert_equal("Total electricity grid", worksheet.charts_d104); end
  def test_charts_ay104; assert_in_delta(0.0, (worksheet.charts_ay104||0), 0.002); end
  def test_charts_az104; assert_in_delta(0.0, (worksheet.charts_az104||0), 0.002); end
  def test_charts_ba104; assert_in_delta(0.0, (worksheet.charts_ba104||0), 0.002); end
  def test_charts_bb104; assert_in_delta(0.0, (worksheet.charts_bb104||0), 0.002); end
  def test_charts_bc104; assert_in_delta(0.0, (worksheet.charts_bc104||0), 0.002); end
  def test_charts_bd104; assert_in_delta(0.0, (worksheet.charts_bd104||0), 0.002); end
  def test_charts_be104; assert_in_delta(0.0, (worksheet.charts_be104||0), 0.002); end
  def test_charts_bf104; assert_in_delta(0.0, (worksheet.charts_bf104||0), 0.002); end
  def test_charts_bg104; assert_in_delta(0.0, (worksheet.charts_bg104||0), 0.002); end
  def test_charts_bh104; assert_in_delta(0.0, (worksheet.charts_bh104||0), 0.002); end
  def test_charts_bi104; assert_in_delta(0.0, (worksheet.charts_bi104||0), 0.002); end
  def test_charts_ay105; assert_in_delta(0.0, (worksheet.charts_ay105||0), 0.002); end
  def test_charts_az105; assert_in_delta(0.0, (worksheet.charts_az105||0), 0.002); end
  def test_charts_ba105; assert_in_delta(0.0, (worksheet.charts_ba105||0), 0.002); end
  def test_charts_bb105; assert_in_delta(0.0, (worksheet.charts_bb105||0), 0.002); end
  def test_charts_bc105; assert_in_delta(0.0, (worksheet.charts_bc105||0), 0.002); end
  def test_charts_bd105; assert_in_delta(0.0, (worksheet.charts_bd105||0), 0.002); end
  def test_charts_be105; assert_in_delta(0.0, (worksheet.charts_be105||0), 0.002); end
  def test_charts_bf105; assert_in_delta(0.0, (worksheet.charts_bf105||0), 0.002); end
  def test_charts_bg105; assert_in_delta(0.0, (worksheet.charts_bg105||0), 0.002); end
  def test_charts_bh105; assert_in_delta(0.0, (worksheet.charts_bh105||0), 0.002); end
  def test_charts_bi105; assert_in_delta(0.0, (worksheet.charts_bi105||0), 0.002); end
  def test_charts_c106; assert_equal("V.02", worksheet.charts_c106); end
  def test_charts_d106; assert_equal("Losses", worksheet.charts_d106); end
  def test_charts_ay106; assert_in_epsilon(-195.082885040704, worksheet.charts_ay106, 0.002); end
  def test_charts_az106; assert_in_delta(0.0, (worksheet.charts_az106||0), 0.002); end
  def test_charts_ba106; assert_in_epsilon(-232.5030151881474, worksheet.charts_ba106, 0.002); end
  def test_charts_bb106; assert_in_epsilon(-310.6571608680854, worksheet.charts_bb106, 0.002); end
  def test_charts_bc106; assert_in_epsilon(-419.89951518444514, worksheet.charts_bc106, 0.002); end
  def test_charts_bd106; assert_in_epsilon(-551.7121990567612, worksheet.charts_bd106, 0.002); end
  def test_charts_be106; assert_in_epsilon(-726.4150919284571, worksheet.charts_be106, 0.002); end
  def test_charts_bf106; assert_in_epsilon(-862.8753960093786, worksheet.charts_bf106, 0.002); end
  def test_charts_bg106; assert_in_epsilon(-978.3476298652677, worksheet.charts_bg106, 0.002); end
  def test_charts_bh106; assert_in_epsilon(-1091.0371471514245, worksheet.charts_bh106, 0.002); end
  def test_charts_bi106; assert_in_epsilon(-1230.420544663678, worksheet.charts_bi106, 0.002); end
  def test_charts_d107; assert_equal("Demand (for charting)", worksheet.charts_d107); end
  def test_charts_ay107; assert_in_epsilon(790.769700205529, worksheet.charts_ay107, 0.002); end
  def test_charts_az107; assert_in_delta(0.0, (worksheet.charts_az107||0), 0.002); end
  def test_charts_ba107; assert_in_epsilon(1024.6937646017955, worksheet.charts_ba107, 0.002); end
  def test_charts_bb107; assert_in_epsilon(1444.7826289093362, worksheet.charts_bb107, 0.002); end
  def test_charts_bc107; assert_in_epsilon(2044.3014371199854, worksheet.charts_bc107, 0.002); end
  def test_charts_bd107; assert_in_epsilon(2817.733396612673, worksheet.charts_bd107, 0.002); end
  def test_charts_be107; assert_in_epsilon(3882.911545480313, worksheet.charts_be107, 0.002); end
  def test_charts_bf107; assert_in_epsilon(4819.455965199836, worksheet.charts_bf107, 0.002); end
  def test_charts_bg107; assert_in_epsilon(5890.11216053743, worksheet.charts_bg107, 0.002); end
  def test_charts_bh107; assert_in_epsilon(6842.932433212646, worksheet.charts_bh107, 0.002); end
  def test_charts_bi107; assert_in_epsilon(7928.989203915954, worksheet.charts_bi107, 0.002); end
  def test_charts_d108; assert_equal("Dummy for charting", worksheet.charts_d108); end
  def test_charts_ay108; assert_in_epsilon(790.769700205529, worksheet.charts_ay108, 0.002); end
  def test_charts_az108; assert_in_delta(0.0, (worksheet.charts_az108||0), 0.002); end
  def test_charts_ba108; assert_in_epsilon(1030.1577354872481, worksheet.charts_ba108, 0.002); end
  def test_charts_bb108; assert_in_epsilon(1444.782628909336, worksheet.charts_bb108, 0.002); end
  def test_charts_bc108; assert_in_epsilon(2044.3014371199852, worksheet.charts_bc108, 0.002); end
  def test_charts_bd108; assert_in_epsilon(2817.7333966126735, worksheet.charts_bd108, 0.002); end
  def test_charts_be108; assert_in_epsilon(3882.9115454803136, worksheet.charts_be108, 0.002); end
  def test_charts_bf108; assert_in_epsilon(4819.455965199836, worksheet.charts_bf108, 0.002); end
  def test_charts_bg108; assert_in_epsilon(5890.112160537429, worksheet.charts_bg108, 0.002); end
  def test_charts_bh108; assert_in_epsilon(6842.932433212645, worksheet.charts_bh108, 0.002); end
  def test_charts_bi108; assert_in_epsilon(7928.989203915953, worksheet.charts_bi108, 0.002); end
  def test_charts_ay109; assert_in_delta(0.0, (worksheet.charts_ay109||0), 0.002); end
  def test_charts_az109; assert_in_delta(0.0, (worksheet.charts_az109||0), 0.002); end
  def test_charts_ba109; assert_in_delta(0.0, (worksheet.charts_ba109||0), 0.002); end
  def test_charts_bb109; assert_in_delta(0.0, (worksheet.charts_bb109||0), 0.002); end
  def test_charts_bc109; assert_in_delta(0.0, (worksheet.charts_bc109||0), 0.002); end
  def test_charts_bd109; assert_in_delta(0.0, (worksheet.charts_bd109||0), 0.002); end
  def test_charts_be109; assert_in_delta(0.0, (worksheet.charts_be109||0), 0.002); end
  def test_charts_bf109; assert_in_delta(0.0, (worksheet.charts_bf109||0), 0.002); end
  def test_charts_bg109; assert_in_delta(0.0, (worksheet.charts_bg109||0), 0.002); end
  def test_charts_bh109; assert_in_delta(0.0, (worksheet.charts_bh109||0), 0.002); end
  def test_charts_bi109; assert_in_delta(0.0, (worksheet.charts_bi109||0), 0.002); end
  def test_charts_ay110; assert_in_delta(0.0, (worksheet.charts_ay110||0), 0.002); end
  def test_charts_az110; assert_in_delta(0.0, (worksheet.charts_az110||0), 0.002); end
  def test_charts_ba110; assert_in_delta(0.0, (worksheet.charts_ba110||0), 0.002); end
  def test_charts_bb110; assert_in_delta(0.0, (worksheet.charts_bb110||0), 0.002); end
  def test_charts_bc110; assert_in_delta(0.0, (worksheet.charts_bc110||0), 0.002); end
  def test_charts_bd110; assert_in_delta(0.0, (worksheet.charts_bd110||0), 0.002); end
  def test_charts_be110; assert_in_delta(0.0, (worksheet.charts_be110||0), 0.002); end
  def test_charts_bf110; assert_in_delta(0.0, (worksheet.charts_bf110||0), 0.002); end
  def test_charts_bg110; assert_in_delta(0.0, (worksheet.charts_bg110||0), 0.002); end
  def test_charts_bh110; assert_in_delta(0.0, (worksheet.charts_bh110||0), 0.002); end
  def test_charts_bi110; assert_in_delta(0.0, (worksheet.charts_bi110||0), 0.002); end
  def test_charts_c111; assert_equal("Z.01", worksheet.charts_c111); end
  def test_charts_d111; assert_equal("Unallocated", worksheet.charts_d111); end
  def test_charts_ay111; assert_in_delta(0.0, (worksheet.charts_ay111||0), 0.002); end
  def test_charts_az111; assert_in_delta(0.0, (worksheet.charts_az111||0), 0.002); end
  def test_charts_ba111; assert_in_delta(0.0, (worksheet.charts_ba111||0), 0.002); end
  def test_charts_bb111; assert_in_delta(0.0, (worksheet.charts_bb111||0), 0.002); end
  def test_charts_bc111; assert_in_delta(0.0, (worksheet.charts_bc111||0), 0.002); end
  def test_charts_bd111; assert_in_delta(0.0, (worksheet.charts_bd111||0), 0.002); end
  def test_charts_be111; assert_in_delta(0.0, (worksheet.charts_be111||0), 0.002); end
  def test_charts_bf111; assert_in_delta(0.0, (worksheet.charts_bf111||0), 0.002); end
  def test_charts_bg111; assert_in_delta(0.0, (worksheet.charts_bg111||0), 0.002); end
  def test_charts_bh111; assert_in_delta(0.0, (worksheet.charts_bh111||0), 0.002); end
  def test_charts_bi111; assert_in_delta(0.0, (worksheet.charts_bi111||0), 0.002); end
  def test_charts_ay112; assert_in_delta(0.0, (worksheet.charts_ay112||0), 0.002); end
  def test_charts_az112; assert_in_delta(0.0, (worksheet.charts_az112||0), 0.002); end
  def test_charts_ba112; assert_in_delta(0.0, (worksheet.charts_ba112||0), 0.002); end
  def test_charts_bb112; assert_in_delta(0.0, (worksheet.charts_bb112||0), 0.002); end
  def test_charts_bc112; assert_in_delta(0.0, (worksheet.charts_bc112||0), 0.002); end
  def test_charts_bd112; assert_in_delta(0.0, (worksheet.charts_bd112||0), 0.002); end
  def test_charts_be112; assert_in_delta(0.0, (worksheet.charts_be112||0), 0.002); end
  def test_charts_bf112; assert_in_delta(0.0, (worksheet.charts_bf112||0), 0.002); end
  def test_charts_bg112; assert_in_delta(0.0, (worksheet.charts_bg112||0), 0.002); end
  def test_charts_bh112; assert_in_delta(0.0, (worksheet.charts_bh112||0), 0.002); end
  def test_charts_bi112; assert_in_delta(0.0, (worksheet.charts_bi112||0), 0.002); end
  def test_charts_d113; assert_equal("Net balance (should be zero!)", worksheet.charts_d113); end
  def test_charts_ay113; assert_in_delta(9.094947017729282e-13, worksheet.charts_ay113, 0.002); end
  def test_charts_az113; assert_in_delta(0.0, (worksheet.charts_az113||0), 0.002); end
  def test_charts_ba113; assert_in_delta(0.0, (worksheet.charts_ba113||0), 0.002); end
  def test_charts_bb113; assert_in_delta(0.0, (worksheet.charts_bb113||0), 0.002); end
  def test_charts_bc113; assert_in_delta(-1.8189894035458565e-12, worksheet.charts_bc113, 0.002); end
  def test_charts_bd113; assert_in_delta(1.8189894035458565e-12, worksheet.charts_bd113, 0.002); end
  def test_charts_be113; assert_in_delta(-1.8189894035458565e-12, worksheet.charts_be113, 0.002); end
  def test_charts_bf113; assert_in_delta(0.0, (worksheet.charts_bf113||0), 0.002); end
  def test_charts_bg113; assert_in_delta(0.0, (worksheet.charts_bg113||0), 0.002); end
  def test_charts_bh113; assert_in_delta(4.206412995699793e-12, worksheet.charts_bh113, 0.002); end
  def test_charts_bi113; assert_in_delta(-7.94031507211912e-13, worksheet.charts_bi113, 0.002); end
  def test_charts_b115; assert_equal("Electricity Generation", worksheet.charts_b115); end
  def test_charts_c117; assert_equal("V.02", worksheet.charts_c117); end
  def test_charts_d117; assert_equal("TWh/year", worksheet.charts_d117); end
  def test_charts_ay117; assert_in_epsilon(2007.0, worksheet.charts_ay117, 0.002); end
  def test_charts_ba117; assert_in_epsilon(2012.0, worksheet.charts_ba117, 0.002); end
  def test_charts_bb117; assert_in_epsilon(2017.0, worksheet.charts_bb117, 0.002); end
  def test_charts_bc117; assert_in_epsilon(2022.0, worksheet.charts_bc117, 0.002); end
  def test_charts_bd117; assert_in_epsilon(2027.0, worksheet.charts_bd117, 0.002); end
  def test_charts_be117; assert_in_epsilon(2032.0, worksheet.charts_be117, 0.002); end
  def test_charts_bf117; assert_in_epsilon(2037.0, worksheet.charts_bf117, 0.002); end
  def test_charts_bg117; assert_in_epsilon(2042.0, worksheet.charts_bg117, 0.002); end
  def test_charts_bh117; assert_in_epsilon(2047.0, worksheet.charts_bh117, 0.002); end
  def test_charts_bi117; assert_in_epsilon(2052.0, worksheet.charts_bi117, 0.002); end
  def test_charts_c118; assert_equal("I.a", worksheet.charts_c118); end
  def test_charts_d118; assert_equal("Gas Power Stations", worksheet.charts_d118); end
  def test_charts_ah118; assert_in_epsilon(221.2, worksheet.charts_ah118, 0.002); end
  def test_charts_ai118; assert_in_epsilon(214.6, worksheet.charts_ai118, 0.002); end
  def test_charts_aj118; assert_in_epsilon(221.2, worksheet.charts_aj118, 0.002); end
  def test_charts_ak118; assert_in_epsilon(226.3, worksheet.charts_ak118, 0.002); end
  def test_charts_al118; assert_in_epsilon(241.6, worksheet.charts_al118, 0.002); end
  def test_charts_am118; assert_in_epsilon(248.5, worksheet.charts_am118, 0.002); end
  def test_charts_an118; assert_in_epsilon(250.7, worksheet.charts_an118, 0.002); end
  def test_charts_ao118; assert_in_epsilon(258.7, worksheet.charts_ao118, 0.002); end
  def test_charts_ap118; assert_in_epsilon(262.6, worksheet.charts_ap118, 0.002); end
  def test_charts_aq118; assert_in_epsilon(264.2, worksheet.charts_aq118, 0.002); end
  def test_charts_ar118; assert_in_epsilon(267.6, worksheet.charts_ar118, 0.002); end
  def test_charts_as118; assert_in_epsilon(276.5, worksheet.charts_as118, 0.002); end
  def test_charts_at118; assert_in_epsilon(279.3, worksheet.charts_at118, 0.002); end
  def test_charts_au118; assert_in_epsilon(250.1, worksheet.charts_au118, 0.002); end
  def test_charts_av118; assert_in_epsilon(263.1, worksheet.charts_av118, 0.002); end
  def test_charts_aw118; assert_equal("Dukes 5.6 sum of generation - used on works for coal, oil gas and renewables", worksheet.charts_aw118); end
  def test_charts_ay118; assert_in_epsilon(64.0088375976, worksheet.charts_ay118, 0.002); end
  def test_charts_az118; assert_in_delta(0.0, (worksheet.charts_az118||0), 0.002); end
  def test_charts_ba118; assert_in_epsilon(96.596143677, worksheet.charts_ba118, 0.002); end
  def test_charts_bb118; assert_in_epsilon(109.8605340414, worksheet.charts_bb118, 0.002); end
  def test_charts_bc118; assert_in_epsilon(109.8605340414, worksheet.charts_bc118, 0.002); end
  def test_charts_bd118; assert_in_epsilon(109.8605340414, worksheet.charts_bd118, 0.002); end
  def test_charts_be118; assert_in_epsilon(109.8605340414, worksheet.charts_be118, 0.002); end
  def test_charts_bf118; assert_in_epsilon(109.8605340414, worksheet.charts_bf118, 0.002); end
  def test_charts_bg118; assert_in_epsilon(109.8605340414, worksheet.charts_bg118, 0.002); end
  def test_charts_bh118; assert_in_epsilon(109.8605340414, worksheet.charts_bh118, 0.002); end
  def test_charts_bi118; assert_in_epsilon(109.8605340414, worksheet.charts_bi118, 0.002); end
  def test_charts_c119; assert_equal("I.b", worksheet.charts_c119); end
  def test_charts_d119; assert_equal("Coal power stations", worksheet.charts_d119); end
  def test_charts_ay119; assert_in_epsilon(489.68979840000003, worksheet.charts_ay119, 0.002); end
  def test_charts_az119; assert_in_delta(0.0, (worksheet.charts_az119||0), 0.002); end
  def test_charts_ba119; assert_in_epsilon(710.8628564490481, worksheet.charts_ba119, 0.002); end
  def test_charts_bb119; assert_in_epsilon(987.4332245612816, worksheet.charts_bb119, 0.002); end
  def test_charts_bc119; assert_in_epsilon(936.0569741896016, worksheet.charts_bc119, 0.002); end
  def test_charts_bd119; assert_in_epsilon(857.5049884456017, worksheet.charts_bd119, 0.002); end
  def test_charts_be119; assert_in_epsilon(774.0835247656017, worksheet.charts_be119, 0.002); end
  def test_charts_bf119; assert_in_epsilon(711.6980002492061, worksheet.charts_bf119, 0.002); end
  def test_charts_bg119; assert_in_epsilon(631.661702789206, worksheet.charts_bg119, 0.002); end
  def test_charts_bh119; assert_in_epsilon(563.1204539812059, worksheet.charts_bh119, 0.002); end
  def test_charts_bi119; assert_in_epsilon(336.94328475400596, worksheet.charts_bi119, 0.002); end
  def test_charts_c120; assert_equal("I.c", worksheet.charts_c120); end
  def test_charts_d120; assert_equal("Carbon Capture Storage (CCS)", worksheet.charts_d120); end
  def test_charts_ay120; assert_in_delta(0.0, (worksheet.charts_ay120||0), 0.002); end
  def test_charts_az120; assert_in_delta(0.0, (worksheet.charts_az120||0), 0.002); end
  def test_charts_ba120; assert_in_delta(0.0, (worksheet.charts_ba120||0), 0.002); end
  def test_charts_bb120; assert_in_delta(0.0, (worksheet.charts_bb120||0), 0.002); end
  def test_charts_bc120; assert_in_delta(0.0, (worksheet.charts_bc120||0), 0.002); end
  def test_charts_bd120; assert_in_delta(0.0, (worksheet.charts_bd120||0), 0.002); end
  def test_charts_be120; assert_in_epsilon(2.577204, worksheet.charts_be120, 0.002); end
  def test_charts_bf120; assert_in_epsilon(6.1362000000000005, worksheet.charts_bf120, 0.002); end
  def test_charts_bg120; assert_in_epsilon(14.358708, worksheet.charts_bg120, 0.002); end
  def test_charts_bh120; assert_in_epsilon(19.513116000000004, worksheet.charts_bh120, 0.002); end
  def test_charts_bi120; assert_in_epsilon(27.244728000000002, worksheet.charts_bi120, 0.002); end
  def test_charts_c121; assert_equal("I.d", worksheet.charts_c121); end
  def test_charts_d121; assert_equal("Electricity Balancing Requirement", worksheet.charts_d121); end
  def test_charts_ah121; assert_in_epsilon(221.2, worksheet.charts_ah121, 0.002); end
  def test_charts_ai121; assert_in_epsilon(214.6, worksheet.charts_ai121, 0.002); end
  def test_charts_aj121; assert_in_epsilon(221.2, worksheet.charts_aj121, 0.002); end
  def test_charts_ak121; assert_in_epsilon(226.3, worksheet.charts_ak121, 0.002); end
  def test_charts_al121; assert_in_epsilon(241.6, worksheet.charts_al121, 0.002); end
  def test_charts_am121; assert_in_epsilon(248.5, worksheet.charts_am121, 0.002); end
  def test_charts_an121; assert_in_epsilon(250.7, worksheet.charts_an121, 0.002); end
  def test_charts_ao121; assert_in_epsilon(258.7, worksheet.charts_ao121, 0.002); end
  def test_charts_ap121; assert_in_epsilon(262.6, worksheet.charts_ap121, 0.002); end
  def test_charts_aq121; assert_in_epsilon(264.2, worksheet.charts_aq121, 0.002); end
  def test_charts_ar121; assert_in_epsilon(267.6, worksheet.charts_ar121, 0.002); end
  def test_charts_as121; assert_in_epsilon(276.5, worksheet.charts_as121, 0.002); end
  def test_charts_at121; assert_in_epsilon(279.3, worksheet.charts_at121, 0.002); end
  def test_charts_au121; assert_in_epsilon(250.1, worksheet.charts_au121, 0.002); end
  def test_charts_av121; assert_in_epsilon(263.1, worksheet.charts_av121, 0.002); end
  def test_charts_aw121; assert_equal("Sum of above", worksheet.charts_aw121); end
  def test_charts_ax121; assert_in_delta(0.0, (worksheet.charts_ax121||0), 0.002); end
  def test_charts_ay121; assert_in_epsilon(57.253185663040085, worksheet.charts_ay121, 0.002); end
  def test_charts_az121; assert_in_delta(0.0, (worksheet.charts_az121||0), 0.002); end
  def test_charts_ba121; assert_in_delta(0.0, (worksheet.charts_ba121||0), 0.002); end
  def test_charts_bb121; assert_in_epsilon(15.562100389454372, worksheet.charts_bb121, 0.002); end
  def test_charts_bc121; assert_in_epsilon(614.2985882067835, worksheet.charts_bc121, 0.002); end
  def test_charts_bd121; assert_in_epsilon(1405.4268384694712, worksheet.charts_bd121, 0.002); end
  def test_charts_be121; assert_in_epsilon(2482.302109237112, worksheet.charts_be121, 0.002); end
  def test_charts_bf121; assert_in_epsilon(3425.69106697603, worksheet.charts_bf121, 0.002); end
  def test_charts_bg121; assert_in_epsilon(4535.840489654824, worksheet.charts_bg121, 0.002); end
  def test_charts_bh121; assert_in_epsilon(5546.27905775604, worksheet.charts_bh121, 0.002); end
  def test_charts_bi121; assert_in_epsilon(6862.578606936548, worksheet.charts_bi121, 0.002); end
  def test_charts_d122; assert_equal("Fossil Fuel Based Electricity", worksheet.charts_d122); end
  def test_charts_ay122; assert_in_epsilon(610.9518216606401, worksheet.charts_ay122, 0.002); end
  def test_charts_az122; assert_in_delta(0.0, (worksheet.charts_az122||0), 0.002); end
  def test_charts_ba122; assert_in_epsilon(807.4590001260481, worksheet.charts_ba122, 0.002); end
  def test_charts_bb122; assert_in_epsilon(1112.8558589921358, worksheet.charts_bb122, 0.002); end
  def test_charts_bc122; assert_in_epsilon(1660.2160964377852, worksheet.charts_bc122, 0.002); end
  def test_charts_bd122; assert_in_epsilon(2372.792360956473, worksheet.charts_bd122, 0.002); end
  def test_charts_be122; assert_in_epsilon(3368.8233720441135, worksheet.charts_be122, 0.002); end
  def test_charts_bf122; assert_in_epsilon(4253.385801266636, worksheet.charts_bf122, 0.002); end
  def test_charts_bg122; assert_in_epsilon(5291.721434485429, worksheet.charts_bg122, 0.002); end
  def test_charts_bh122; assert_in_epsilon(6238.773161778646, worksheet.charts_bh122, 0.002); end
  def test_charts_bi122; assert_in_epsilon(7336.6271537319535, worksheet.charts_bi122, 0.002); end
  def test_charts_c123; assert_equal("II", worksheet.charts_c123); end
  def test_charts_d123; assert_equal("Nuclear power", worksheet.charts_d123); end
  def test_charts_ay123; assert_in_epsilon(28.331712000000003, worksheet.charts_ay123, 0.002); end
  def test_charts_az123; assert_in_delta(0.0, (worksheet.charts_az123||0), 0.002); end
  def test_charts_ba123; assert_in_epsilon(32.819904, worksheet.charts_ba123, 0.002); end
  def test_charts_bb123; assert_in_epsilon(69.987744, worksheet.charts_bb123, 0.002); end
  def test_charts_bc123; assert_in_epsilon(67.74364800000001, worksheet.charts_bc123, 0.002); end
  def test_charts_bd123; assert_in_epsilon(67.74364800000001, worksheet.charts_bd123, 0.002); end
  def test_charts_be123; assert_in_epsilon(66.34108800000001, worksheet.charts_be123, 0.002); end
  def test_charts_bf123; assert_in_epsilon(63.255456, worksheet.charts_bf123, 0.002); end
  def test_charts_bg123; assert_in_epsilon(61.71264000000001, worksheet.charts_bg123, 0.002); end
  def test_charts_bh123; assert_in_epsilon(58.627008, worksheet.charts_bh123, 0.002); end
  def test_charts_bi123; assert_in_epsilon(58.627008, worksheet.charts_bi123, 0.002); end
  def test_charts_c124; assert_equal("III", worksheet.charts_c124); end
  def test_charts_d124; assert_equal("Hydro Power Generation", worksheet.charts_d124); end
  def test_charts_ah124; assert_in_epsilon(85.8, worksheet.charts_ah124, 0.002); end
  def test_charts_ai124; assert_in_epsilon(89.3, worksheet.charts_ai124, 0.002); end
  def test_charts_aj124; assert_in_epsilon(90.6, worksheet.charts_aj124, 0.002); end
  def test_charts_ak124; assert_in_epsilon(87.7, worksheet.charts_ak124, 0.002); end
  def test_charts_al124; assert_in_epsilon(78.3, worksheet.charts_al124, 0.002); end
  def test_charts_am124; assert_in_epsilon(83.0, worksheet.charts_am124, 0.002); end
  def test_charts_an124; assert_in_epsilon(81.1, worksheet.charts_an124, 0.002); end
  def test_charts_ao124; assert_in_epsilon(81.9, worksheet.charts_ao124, 0.002); end
  def test_charts_ap124; assert_in_epsilon(73.7, worksheet.charts_ap124, 0.002); end
  def test_charts_aq124; assert_in_epsilon(75.2, worksheet.charts_aq124, 0.002); end
  def test_charts_ar124; assert_in_epsilon(69.2, worksheet.charts_ar124, 0.002); end
  def test_charts_as124; assert_in_epsilon(57.2, worksheet.charts_as124, 0.002); end
  def test_charts_at124; assert_in_epsilon(47.7, worksheet.charts_at124, 0.002); end
  def test_charts_au124; assert_in_epsilon(62.8, worksheet.charts_au124, 0.002); end
  def test_charts_av124; assert_in_epsilon(56.5, worksheet.charts_av124, 0.002); end
  def test_charts_aw124; assert_equal("Dukes 5.6 Nuclear generation - used on works", worksheet.charts_aw124); end
  def test_charts_ay124; assert_in_epsilon(121.49676, worksheet.charts_ay124, 0.002); end
  def test_charts_az124; assert_in_delta(0.0, (worksheet.charts_az124||0), 0.002); end
  def test_charts_ba124; assert_in_epsilon(143.7624, worksheet.charts_ba124, 0.002); end
  def test_charts_bb124; assert_in_epsilon(171.81360000000004, worksheet.charts_bb124, 0.002); end
  def test_charts_bc124; assert_in_epsilon(171.81360000000004, worksheet.charts_bc124, 0.002); end
  def test_charts_bd124; assert_in_epsilon(171.81360000000004, worksheet.charts_bd124, 0.002); end
  def test_charts_be124; assert_in_epsilon(171.81360000000004, worksheet.charts_be124, 0.002); end
  def test_charts_bf124; assert_in_epsilon(171.81360000000004, worksheet.charts_bf124, 0.002); end
  def test_charts_bg124; assert_in_epsilon(171.81360000000004, worksheet.charts_bg124, 0.002); end
  def test_charts_bh124; assert_in_epsilon(171.81360000000004, worksheet.charts_bh124, 0.002); end
  def test_charts_bi124; assert_in_epsilon(171.81360000000004, worksheet.charts_bi124, 0.002); end
  def test_charts_d125; assert_equal("Hydro and Nuclear", worksheet.charts_d125); end
  def test_charts_ay125; assert_in_epsilon(149.828472, worksheet.charts_ay125, 0.002); end
  def test_charts_az125; assert_in_delta(0.0, (worksheet.charts_az125||0), 0.002); end
  def test_charts_ba125; assert_in_epsilon(176.58230400000002, worksheet.charts_ba125, 0.002); end
  def test_charts_bb125; assert_in_epsilon(241.80134400000003, worksheet.charts_bb125, 0.002); end
  def test_charts_bc125; assert_in_epsilon(239.55724800000004, worksheet.charts_bc125, 0.002); end
  def test_charts_bd125; assert_in_epsilon(239.55724800000004, worksheet.charts_bd125, 0.002); end
  def test_charts_be125; assert_in_epsilon(238.15468800000005, worksheet.charts_be125, 0.002); end
  def test_charts_bf125; assert_in_epsilon(235.06905600000005, worksheet.charts_bf125, 0.002); end
  def test_charts_bg125; assert_in_epsilon(233.52624000000003, worksheet.charts_bg125, 0.002); end
  def test_charts_bh125; assert_in_epsilon(230.44060800000003, worksheet.charts_bh125, 0.002); end
  def test_charts_bi125; assert_in_epsilon(230.44060800000003, worksheet.charts_bi125, 0.002); end
  def test_charts_c126; assert_equal("IV.a", worksheet.charts_c126); end
  def test_charts_d126; assert_equal("Solar PV", worksheet.charts_d126); end
  def test_charts_ar126; assert_in_epsilon(3.6, worksheet.charts_ar126, 0.002); end
  def test_charts_as126; assert_in_epsilon(4.5, worksheet.charts_as126, 0.002); end
  def test_charts_at126; assert_in_epsilon(5.8, worksheet.charts_at126, 0.002); end
  def test_charts_au126; assert_in_epsilon(7.6, worksheet.charts_au126, 0.002); end
  def test_charts_av126; assert_in_epsilon(7.1, worksheet.charts_av126, 0.002); end
  def test_charts_aw126; assert_equal("Dukes 7.4 Generation Onshore wind", worksheet.charts_aw126); end
  def test_charts_ay126; assert_in_delta(0.0, (worksheet.charts_ay126||0), 0.002); end
  def test_charts_az126; assert_in_delta(0.0, (worksheet.charts_az126||0), 0.002); end
  def test_charts_ba126; assert_in_epsilon(1.56727314, worksheet.charts_ba126, 0.002); end
  def test_charts_bb126; assert_in_epsilon(8.272745946, worksheet.charts_bb126, 0.002); end
  def test_charts_bc126; assert_in_epsilon(18.558353960999998, worksheet.charts_bc126, 0.002); end
  def test_charts_bd126; assert_in_epsilon(32.792269185, worksheet.charts_bd126, 0.002); end
  def test_charts_be126; assert_in_epsilon(47.823373215000004, worksheet.charts_be126, 0.002); end
  def test_charts_bf126; assert_in_epsilon(60.99299523, worksheet.charts_bf126, 0.002); end
  def test_charts_bg126; assert_in_epsilon(69.11991, worksheet.charts_bg126, 0.002); end
  def test_charts_bh126; assert_in_epsilon(68.11182, worksheet.charts_bh126, 0.002); end
  def test_charts_bi126; assert_in_epsilon(59.6088, worksheet.charts_bi126, 0.002); end
  def test_charts_c127; assert_equal("IV.b", worksheet.charts_c127); end
  def test_charts_d127; assert_equal("Solar CSP", worksheet.charts_d127); end
  def test_charts_ar127; assert_in_delta(0.7, worksheet.charts_ar127, 0.002); end
  def test_charts_as127; assert_in_delta(0.8, worksheet.charts_as127, 0.002); end
  def test_charts_at127; assert_in_epsilon(1.3, worksheet.charts_at127, 0.002); end
  def test_charts_au127; assert_in_epsilon(1.7, worksheet.charts_au127, 0.002); end
  def test_charts_av127; assert_in_epsilon(3.0, worksheet.charts_av127, 0.002); end
  def test_charts_aw127; assert_equal("Dukes 7.4 Generation Offshore wind", worksheet.charts_aw127); end
  def test_charts_ay127; assert_in_delta(0.0, (worksheet.charts_ay127||0), 0.002); end
  def test_charts_az127; assert_in_delta(0.0, (worksheet.charts_az127||0), 0.002); end
  def test_charts_ba127; assert_in_delta(0.0, (worksheet.charts_ba127||0), 0.002); end
  def test_charts_bb127; assert_in_epsilon(2.5246079999999997, worksheet.charts_bb127, 0.002); end
  def test_charts_bc127; assert_in_epsilon(8.573148, worksheet.charts_bc127, 0.002); end
  def test_charts_bd127; assert_in_epsilon(15.638544, worksheet.charts_bd127, 0.002); end
  def test_charts_be127; assert_in_epsilon(25.719444000000003, worksheet.charts_be127, 0.002); end
  def test_charts_bf127; assert_in_epsilon(33.784164, worksheet.charts_bf127, 0.002); end
  def test_charts_bg127; assert_in_epsilon(37.81652400000001, worksheet.charts_bg127, 0.002); end
  def test_charts_bh127; assert_in_epsilon(35.291916, worksheet.charts_bh127, 0.002); end
  def test_charts_bi127; assert_in_epsilon(29.243376, worksheet.charts_bi127, 0.002); end
  def test_charts_c128; assert_equal("IV.c.1", worksheet.charts_c128); end
  def test_charts_d128; assert_equal("Onshore Wind", worksheet.charts_d128); end
  def test_charts_ah128; assert_in_epsilon(2.8, worksheet.charts_ah128, 0.002); end
  def test_charts_ai128; assert_in_epsilon(3.3, worksheet.charts_ai128, 0.002); end
  def test_charts_aj128; assert_in_epsilon(4.2, worksheet.charts_aj128, 0.002); end
  def test_charts_ak128; assert_in_epsilon(4.4, worksheet.charts_ak128, 0.002); end
  def test_charts_al128; assert_in_epsilon(4.3, worksheet.charts_al128, 0.002); end
  def test_charts_am128; assert_in_epsilon(3.2, worksheet.charts_am128, 0.002); end
  def test_charts_an128; assert_in_epsilon(3.9, worksheet.charts_an128, 0.002); end
  def test_charts_ao128; assert_in_epsilon(2.6, worksheet.charts_ao128, 0.002); end
  def test_charts_ap128; assert_in_epsilon(3.9, worksheet.charts_ap128, 0.002); end
  def test_charts_aq128; assert_in_epsilon(3.8, worksheet.charts_aq128, 0.002); end
  def test_charts_ar128; assert_in_epsilon(3.7, worksheet.charts_ar128, 0.002); end
  def test_charts_as128; assert_in_epsilon(4.1, worksheet.charts_as128, 0.002); end
  def test_charts_at128; assert_in_epsilon(4.2, worksheet.charts_at128, 0.002); end
  def test_charts_au128; assert_in_epsilon(4.3, worksheet.charts_au128, 0.002); end
  def test_charts_av128; assert_in_epsilon(2.7, worksheet.charts_av128, 0.002); end
  def test_charts_aw128; assert_equal("Dukes 5.6 Hydro - natural flow generation - used on works", worksheet.charts_aw128); end
  def test_charts_ay128; assert_in_epsilon(12.437183268, worksheet.charts_ay128, 0.002); end
  def test_charts_az128; assert_in_delta(0.0, (worksheet.charts_az128||0), 0.002); end
  def test_charts_ba128; assert_in_epsilon(18.7222492332, worksheet.charts_ba128, 0.002); end
  def test_charts_bb128; assert_in_epsilon(36.6048892332, worksheet.charts_bb128, 0.002); end
  def test_charts_bc128; assert_in_epsilon(58.5198892332, worksheet.charts_bc128, 0.002); end
  def test_charts_bd128; assert_in_epsilon(81.31148923319999, worksheet.charts_bd128, 0.002); end
  def test_charts_be128; assert_in_epsilon(110.8967392332, worksheet.charts_be128, 0.002); end
  def test_charts_bf128; assert_in_epsilon(129.14055596519998, worksheet.charts_bf128, 0.002); end
  def test_charts_bg128; assert_in_epsilon(139.86153, worksheet.charts_bg128, 0.002); end
  def test_charts_bh128; assert_in_epsilon(148.27688999999998, worksheet.charts_bh128, 0.002); end
  def test_charts_bi128; assert_in_epsilon(148.80284999999998, worksheet.charts_bi128, 0.002); end
  def test_charts_c129; assert_equal("IV.c.2", worksheet.charts_c129); end
  def test_charts_d129; assert_equal("Offshore Wind", worksheet.charts_d129); end
  def test_charts_ay129; assert_in_delta(0.0, (worksheet.charts_ay129||0), 0.002); end
  def test_charts_az129; assert_in_delta(0.0, (worksheet.charts_az129||0), 0.002); end
  def test_charts_ba129; assert_in_delta(0.0, (worksheet.charts_ba129||0), 0.002); end
  def test_charts_bb129; assert_in_delta(0.0, (worksheet.charts_bb129||0), 0.002); end
  def test_charts_bc129; assert_in_epsilon(1.4463900000000003, worksheet.charts_bc129, 0.002); end
  def test_charts_bd129; assert_in_epsilon(3.02427, worksheet.charts_bd129, 0.002); end
  def test_charts_be129; assert_in_epsilon(4.602149999999999, worksheet.charts_be129, 0.002); end
  def test_charts_bf129; assert_in_epsilon(7.84557, worksheet.charts_bf129, 0.002); end
  def test_charts_bg129; assert_in_epsilon(11.176649999999999, worksheet.charts_bg129, 0.002); end
  def test_charts_bh129; assert_in_epsilon(12.88602, worksheet.charts_bh129, 0.002); end
  def test_charts_bi129; assert_in_epsilon(13.149, worksheet.charts_bi129, 0.002); end
  def test_charts_c130; assert_equal("IV.d", worksheet.charts_c130); end
  def test_charts_d130; assert_equal("Small Hydro", worksheet.charts_d130); end
  def test_charts_ay130; assert_in_epsilon(7.013834388000001, worksheet.charts_ay130, 0.002); end
  def test_charts_az130; assert_in_delta(0.0, (worksheet.charts_az130||0), 0.002); end
  def test_charts_ba130; assert_in_epsilon(12.081458988000001, worksheet.charts_ba130, 0.002); end
  def test_charts_bb130; assert_in_epsilon(17.604038988000003, worksheet.charts_bb130, 0.002); end
  def test_charts_bc130; assert_in_epsilon(23.937473988000004, worksheet.charts_bc130, 0.002); end
  def test_charts_bd130; assert_in_epsilon(27.750683988000002, worksheet.charts_bd130, 0.002); end
  def test_charts_be130; assert_in_epsilon(31.651553988000003, worksheet.charts_be130, 0.002); end
  def test_charts_bf130; assert_in_epsilon(33.623903988, worksheet.charts_bf130, 0.002); end
  def test_charts_bg130; assert_in_epsilon(33.902259552000004, worksheet.charts_bg130, 0.002); end
  def test_charts_bh130; assert_in_epsilon(34.790711183999996, worksheet.charts_bh130, 0.002); end
  def test_charts_bi130; assert_in_epsilon(35.38241618399999, worksheet.charts_bi130, 0.002); end
  def test_charts_c131; assert_equal("V.a", worksheet.charts_c131); end
  def test_charts_d131; assert_equal("Biomass Based Electricity& Biogas", worksheet.charts_d131); end
  def test_charts_ay131; assert_in_epsilon(9.538388888888889, worksheet.charts_ay131, 0.002); end
  def test_charts_az131; assert_in_delta(0.0, (worksheet.charts_az131||0), 0.002); end
  def test_charts_ba131; assert_in_epsilon(9.74545, worksheet.charts_ba131, 0.002); end
  def test_charts_bb131; assert_in_epsilon(11.119143750000001, worksheet.charts_bb131, 0.002); end
  def test_charts_bc131; assert_in_epsilon(12.4928375, worksheet.charts_bc131, 0.002); end
  def test_charts_bd131; assert_in_epsilon(13.866531250000003, worksheet.charts_bd131, 0.002); end
  def test_charts_be131; assert_in_epsilon(15.240225000000006, worksheet.charts_be131, 0.002); end
  def test_charts_bf131; assert_in_epsilon(16.613918750000003, worksheet.charts_bf131, 0.002); end
  def test_charts_bg131; assert_in_epsilon(17.987612500000004, worksheet.charts_bg131, 0.002); end
  def test_charts_bh131; assert_in_epsilon(19.361306250000005, worksheet.charts_bh131, 0.002); end
  def test_charts_bi131; assert_in_epsilon(20.735000000000003, worksheet.charts_bi131, 0.002); end
  def test_charts_c132; assert_equal("VI.a", worksheet.charts_c132); end
  def test_charts_d132; assert_equal("Waste to Electricity", worksheet.charts_d132); end
  def test_charts_ay132; assert_in_delta(0.0, (worksheet.charts_ay132||0), 0.002); end
  def test_charts_az132; assert_in_delta(0.0, (worksheet.charts_az132||0), 0.002); end
  def test_charts_ba132; assert_in_delta(0.0, (worksheet.charts_ba132||0), 0.002); end
  def test_charts_bb132; assert_in_delta(0.0, (worksheet.charts_bb132||0), 0.002); end
  def test_charts_bc132; assert_in_delta(0.0, (worksheet.charts_bc132||0), 0.002); end
  def test_charts_bd132; assert_in_delta(0.0, (worksheet.charts_bd132||0), 0.002); end
  def test_charts_be132; assert_in_delta(0.0, (worksheet.charts_be132||0), 0.002); end
  def test_charts_bf132; assert_in_delta(0.0, (worksheet.charts_bf132||0), 0.002); end
  def test_charts_bg132; assert_in_delta(0.0, (worksheet.charts_bg132||0), 0.002); end
  def test_charts_bh132; assert_in_delta(0.0, (worksheet.charts_bh132||0), 0.002); end
  def test_charts_bi132; assert_in_delta(0.0, (worksheet.charts_bi132||0), 0.002); end
  def test_charts_d133; assert_equal("Renewable Based Electricity", worksheet.charts_d133); end
  def test_charts_ay133; assert_in_epsilon(28.98940654488889, worksheet.charts_ay133, 0.002); end
  def test_charts_az133; assert_in_delta(0.0, (worksheet.charts_az133||0), 0.002); end
  def test_charts_ba133; assert_in_epsilon(42.1164313612, worksheet.charts_ba133, 0.002); end
  def test_charts_bb133; assert_in_epsilon(76.1254259172, worksheet.charts_bb133, 0.002); end
  def test_charts_bc133; assert_in_epsilon(123.5280926822, worksheet.charts_bc133, 0.002); end
  def test_charts_bd133; assert_in_epsilon(174.38378765619998, worksheet.charts_bd133, 0.002); end
  def test_charts_be133; assert_in_epsilon(235.9334854362, worksheet.charts_be133, 0.002); end
  def test_charts_bf133; assert_in_epsilon(282.0011079332, worksheet.charts_bf133, 0.002); end
  def test_charts_bg133; assert_in_epsilon(309.864486052, worksheet.charts_bg133, 0.002); end
  def test_charts_bh133; assert_in_epsilon(318.7186634339999, worksheet.charts_bh133, 0.002); end
  def test_charts_bi133; assert_in_epsilon(306.92144218399994, worksheet.charts_bi133, 0.002); end
  def test_charts_c134; assert_equal("VII.a", worksheet.charts_c134); end
  def test_charts_d134; assert_equal("Electricity imports", worksheet.charts_d134); end
  def test_charts_ar134; assert_in_epsilon(7.9, worksheet.charts_ar134, 0.002); end
  def test_charts_as134; assert_in_epsilon(9.4, worksheet.charts_as134, 0.002); end
  def test_charts_at134; assert_in_epsilon(11.3, worksheet.charts_at134, 0.002); end
  def test_charts_au134; assert_in_epsilon(13.6, worksheet.charts_au134, 0.002); end
  def test_charts_av134; assert_in_epsilon(12.9, worksheet.charts_av134, 0.002); end
  def test_charts_aw134; assert_equal("Sum of above", worksheet.charts_aw134); end
  def test_charts_ay134; assert_in_delta(1.0, worksheet.charts_ay134, 0.002); end
  def test_charts_az134; assert_in_delta(0.0, (worksheet.charts_az134||0), 0.002); end
  def test_charts_ba134; assert_in_epsilon(4.0, worksheet.charts_ba134, 0.002); end
  def test_charts_bb134; assert_in_epsilon(14.0, worksheet.charts_bb134, 0.002); end
  def test_charts_bc134; assert_in_epsilon(21.0, worksheet.charts_bc134, 0.002); end
  def test_charts_bd134; assert_in_epsilon(31.0, worksheet.charts_bd134, 0.002); end
  def test_charts_be134; assert_in_epsilon(40.0, worksheet.charts_be134, 0.002); end
  def test_charts_bf134; assert_in_epsilon(49.0, worksheet.charts_bf134, 0.002); end
  def test_charts_bg134; assert_in_epsilon(55.0, worksheet.charts_bg134, 0.002); end
  def test_charts_bh134; assert_in_epsilon(55.0, worksheet.charts_bh134, 0.002); end
  def test_charts_bi134; assert_in_epsilon(55.0, worksheet.charts_bi134, 0.002); end
  def test_charts_ay135; assert_in_delta(0.0, (worksheet.charts_ay135||0), 0.002); end
  def test_charts_az135; assert_in_delta(0.0, (worksheet.charts_az135||0), 0.002); end
  def test_charts_ba135; assert_in_delta(0.0, (worksheet.charts_ba135||0), 0.002); end
  def test_charts_bb135; assert_in_delta(0.0, (worksheet.charts_bb135||0), 0.002); end
  def test_charts_bc135; assert_in_delta(0.0, (worksheet.charts_bc135||0), 0.002); end
  def test_charts_bd135; assert_in_delta(0.0, (worksheet.charts_bd135||0), 0.002); end
  def test_charts_be135; assert_in_delta(0.0, (worksheet.charts_be135||0), 0.002); end
  def test_charts_bf135; assert_in_delta(0.0, (worksheet.charts_bf135||0), 0.002); end
  def test_charts_bg135; assert_in_delta(0.0, (worksheet.charts_bg135||0), 0.002); end
  def test_charts_bh135; assert_in_delta(0.0, (worksheet.charts_bh135||0), 0.002); end
  def test_charts_bi135; assert_in_delta(0.0, (worksheet.charts_bi135||0), 0.002); end
  def test_charts_d136; assert_equal("Total generation supplied to grid", worksheet.charts_d136); end
  def test_charts_ar136; assert_in_epsilon(352.2, worksheet.charts_ar136, 0.002); end
  def test_charts_as136; assert_in_epsilon(348.4, worksheet.charts_as136, 0.002); end
  def test_charts_at136; assert_in_epsilon(349.3, worksheet.charts_at136, 0.002); end
  def test_charts_au136; assert_in_epsilon(329.3, worksheet.charts_au136, 0.002); end
  def test_charts_av136; assert_in_epsilon(335.1, worksheet.charts_av136, 0.002); end
  def test_charts_aw136; assert_equal("Sum of above", worksheet.charts_aw136); end
  def test_charts_ay136; assert_in_epsilon(790.769700205529, worksheet.charts_ay136, 0.002); end
  def test_charts_az136; assert_in_delta(0.0, (worksheet.charts_az136||0), 0.002); end
  def test_charts_ba136; assert_in_epsilon(1030.1577354872481, worksheet.charts_ba136, 0.002); end
  def test_charts_bb136; assert_in_epsilon(1444.782628909336, worksheet.charts_bb136, 0.002); end
  def test_charts_bc136; assert_in_epsilon(2044.3014371199852, worksheet.charts_bc136, 0.002); end
  def test_charts_bd136; assert_in_epsilon(2817.7333966126735, worksheet.charts_bd136, 0.002); end
  def test_charts_be136; assert_in_epsilon(3882.9115454803136, worksheet.charts_be136, 0.002); end
  def test_charts_bf136; assert_in_epsilon(4819.455965199836, worksheet.charts_bf136, 0.002); end
  def test_charts_bg136; assert_in_epsilon(5890.112160537429, worksheet.charts_bg136, 0.002); end
  def test_charts_bh136; assert_in_epsilon(6842.932433212645, worksheet.charts_bh136, 0.002); end
  def test_charts_bi136; assert_in_epsilon(7928.989203915953, worksheet.charts_bi136, 0.002); end
  def test_charts_bk136; assert_in_epsilon(9159.40974857963, worksheet.charts_bk136, 0.002); end
  def test_charts_d137; assert_equal("Share of Renewables", worksheet.charts_d137); end
  def test_charts_ay137; assert_in_delta(0.03665973359545042, worksheet.charts_ay137, 0.002); end
  def test_charts_az137; assert_in_delta(0.0, (worksheet.charts_az137||0), 0.002); end
  def test_charts_ba137; assert_in_delta(0.040883478238679244, worksheet.charts_ba137, 0.002); end
  def test_charts_bb137; assert_in_delta(0.0526898817815016, worksheet.charts_bb137, 0.002); end
  def test_charts_bc137; assert_in_delta(0.06042557640434209, worksheet.charts_bc137, 0.002); end
  def test_charts_bd137; assert_in_delta(0.061887965648501284, worksheet.charts_bd137, 0.002); end
  def test_charts_be137; assert_in_delta(0.060762003633800306, worksheet.charts_be137, 0.002); end
  def test_charts_bf137; assert_in_delta(0.058513058313939166, worksheet.charts_bf137, 0.002); end
  def test_charts_bg137; assert_in_delta(0.05260756970436488, worksheet.charts_bg137, 0.002); end
  def test_charts_bh137; assert_in_delta(0.046576327699375905, worksheet.charts_bh137, 0.002); end
  def test_charts_bi137; assert_in_delta(0.038708772870117945, worksheet.charts_bi137, 0.002); end
  def test_charts_d138; assert_equal("Electricity exports", worksheet.charts_d138); end
  def test_charts_ax138; assert_in_delta(0.0, (worksheet.charts_ax138||0), 0.002); end
  def test_charts_ay138; assert_in_delta(0.0, (worksheet.charts_ay138||0), 0.002); end
  def test_charts_az138; assert_in_delta(0.0, (worksheet.charts_az138||0), 0.002); end
  def test_charts_ba138; assert_in_epsilon(-5.463970885452454, worksheet.charts_ba138, 0.002); end
  def test_charts_bb138; assert_in_delta(4.547473508864641e-13, worksheet.charts_bb138, 0.002); end
  def test_charts_bc138; assert_in_delta(2.2737367544323206e-13, worksheet.charts_bc138, 0.002); end
  def test_charts_bd138; assert_in_delta(-4.547473508864641e-13, worksheet.charts_bd138, 0.002); end
  def test_charts_be138; assert_in_delta(-4.547473508864641e-13, worksheet.charts_be138, 0.002); end
  def test_charts_bf138; assert_in_delta(0.0, (worksheet.charts_bf138||0), 0.002); end
  def test_charts_bg138; assert_in_delta(9.094947017729282e-13, worksheet.charts_bg138, 0.002); end
  def test_charts_bh138; assert_in_delta(9.094947017729282e-13, worksheet.charts_bh138, 0.002); end
  def test_charts_bi138; assert_in_delta(9.094947017729282e-13, worksheet.charts_bi138, 0.002); end
  def test_charts_bj138; assert_equal("REFERENCED", worksheet.charts_bj138); end
  def test_charts_d139; assert_equal("Electricity used in India, before losses", worksheet.charts_d139); end
  def test_charts_ax139; assert_in_delta(0.0, (worksheet.charts_ax139||0), 0.002); end
  def test_charts_ay139; assert_in_epsilon(790.769700205529, worksheet.charts_ay139, 0.002); end
  def test_charts_az139; assert_in_delta(0.0, (worksheet.charts_az139||0), 0.002); end
  def test_charts_ba139; assert_in_epsilon(1024.6937646017957, worksheet.charts_ba139, 0.002); end
  def test_charts_bb139; assert_in_epsilon(1444.782628909336, worksheet.charts_bb139, 0.002); end
  def test_charts_bc139; assert_in_epsilon(2044.3014371199852, worksheet.charts_bc139, 0.002); end
  def test_charts_bd139; assert_in_epsilon(2817.733396612673, worksheet.charts_bd139, 0.002); end
  def test_charts_be139; assert_in_epsilon(3882.911545480313, worksheet.charts_be139, 0.002); end
  def test_charts_bf139; assert_in_epsilon(4819.455965199836, worksheet.charts_bf139, 0.002); end
  def test_charts_bg139; assert_in_epsilon(5890.112160537429, worksheet.charts_bg139, 0.002); end
  def test_charts_bh139; assert_in_epsilon(6842.932433212645, worksheet.charts_bh139, 0.002); end
  def test_charts_bi139; assert_in_epsilon(7928.989203915953, worksheet.charts_bi139, 0.002); end
  def test_charts_ay140; assert_in_delta(0.0, (worksheet.charts_ay140||0), 0.002); end
  def test_charts_az140; assert_in_delta(0.0, (worksheet.charts_az140||0), 0.002); end
  def test_charts_ba140; assert_in_delta(0.0, (worksheet.charts_ba140||0), 0.002); end
  def test_charts_bb140; assert_in_delta(0.0, (worksheet.charts_bb140||0), 0.002); end
  def test_charts_bc140; assert_in_delta(0.0, (worksheet.charts_bc140||0), 0.002); end
  def test_charts_bd140; assert_in_delta(0.0, (worksheet.charts_bd140||0), 0.002); end
  def test_charts_be140; assert_in_delta(0.0, (worksheet.charts_be140||0), 0.002); end
  def test_charts_bf140; assert_in_delta(0.0, (worksheet.charts_bf140||0), 0.002); end
  def test_charts_bg140; assert_in_delta(0.0, (worksheet.charts_bg140||0), 0.002); end
  def test_charts_bh140; assert_in_delta(0.0, (worksheet.charts_bh140||0), 0.002); end
  def test_charts_bi140; assert_in_delta(0.0, (worksheet.charts_bi140||0), 0.002); end
  def test_charts_d141; assert_equal("GW installed capacity", worksheet.charts_d141); end
  def test_charts_ay141; assert_in_epsilon(2007.0, worksheet.charts_ay141, 0.002); end
  def test_charts_ba141; assert_in_epsilon(2012.0, worksheet.charts_ba141, 0.002); end
  def test_charts_bb141; assert_in_epsilon(2017.0, worksheet.charts_bb141, 0.002); end
  def test_charts_bc141; assert_in_epsilon(2022.0, worksheet.charts_bc141, 0.002); end
  def test_charts_bd141; assert_in_epsilon(2027.0, worksheet.charts_bd141, 0.002); end
  def test_charts_be141; assert_in_epsilon(2032.0, worksheet.charts_be141, 0.002); end
  def test_charts_bf141; assert_in_epsilon(2037.0, worksheet.charts_bf141, 0.002); end
  def test_charts_bg141; assert_in_epsilon(2042.0, worksheet.charts_bg141, 0.002); end
  def test_charts_bh141; assert_in_epsilon(2047.0, worksheet.charts_bh141, 0.002); end
  def test_charts_bi141; assert_in_epsilon(2052.0, worksheet.charts_bi141, 0.002); end
  def test_charts_c142; assert_equal("I.a", worksheet.charts_c142); end
  def test_charts_d142; assert_equal("Gas Power Stations", worksheet.charts_d142); end
  def test_charts_ar142; assert_in_epsilon(63.6, worksheet.charts_ar142, 0.002); end
  def test_charts_as142; assert_in_epsilon(63.6, worksheet.charts_as142, 0.002); end
  def test_charts_at142; assert_in_epsilon(63.7, worksheet.charts_at142, 0.002); end
  def test_charts_au142; assert_in_epsilon(64.5, worksheet.charts_au142, 0.002); end
  def test_charts_av142; assert_in_epsilon(69.3, worksheet.charts_av142, 0.002); end
  def test_charts_aw142; assert_equal("Dukes 5.7 Conventional steam stations + Combined cycle gas turbine stations", worksheet.charts_aw142); end
  def test_charts_ay142; assert_in_delta(0.0, (worksheet.charts_ay142||0), 0.002); end
  def test_charts_az142; assert_in_delta(0.0, (worksheet.charts_az142||0), 0.002); end
  def test_charts_ba142; assert_in_epsilon(18.381, worksheet.charts_ba142, 0.002); end
  def test_charts_bb142; assert_in_epsilon(20.919, worksheet.charts_bb142, 0.002); end
  def test_charts_bc142; assert_in_epsilon(20.919, worksheet.charts_bc142, 0.002); end
  def test_charts_bd142; assert_in_epsilon(20.919, worksheet.charts_bd142, 0.002); end
  def test_charts_be142; assert_in_epsilon(20.919, worksheet.charts_be142, 0.002); end
  def test_charts_bf142; assert_in_epsilon(20.919, worksheet.charts_bf142, 0.002); end
  def test_charts_bg142; assert_in_epsilon(20.919, worksheet.charts_bg142, 0.002); end
  def test_charts_bh142; assert_in_epsilon(20.919, worksheet.charts_bh142, 0.002); end
  def test_charts_bi142; assert_in_epsilon(20.919, worksheet.charts_bi142, 0.002); end
  def test_charts_c143; assert_equal("I.b", worksheet.charts_c143); end
  def test_charts_d143; assert_equal("Coal power stations", worksheet.charts_d143); end
  def test_charts_aw143; assert_equal("no bio in Dukes", worksheet.charts_aw143); end
  def test_charts_ay143; assert_in_epsilon(82.0, worksheet.charts_ay143, 0.002); end
  def test_charts_az143; assert_in_delta(0.0, (worksheet.charts_az143||0), 0.002); end
  def test_charts_ba143; assert_in_epsilon(125.0233, worksheet.charts_ba143, 0.002); end
  def test_charts_bb143; assert_in_epsilon(175.2914387382277, worksheet.charts_bb143, 0.002); end
  def test_charts_bc143; assert_in_epsilon(165.9236387382277, worksheet.charts_bc143, 0.002); end
  def test_charts_bd143; assert_in_epsilon(152.38363873822772, worksheet.charts_bd143, 0.002); end
  def test_charts_be143; assert_in_epsilon(137.6836387382277, worksheet.charts_be143, 0.002); end
  def test_charts_bf143; assert_in_epsilon(124.9261387382277, worksheet.charts_bf143, 0.002); end
  def test_charts_bg143; assert_in_epsilon(109.53513873822772, worksheet.charts_bg143, 0.002); end
  def test_charts_bh143; assert_in_epsilon(98.05013873822772, worksheet.charts_bh143, 0.002); end
  def test_charts_bi143; assert_in_epsilon(60.15113873822772, worksheet.charts_bi143, 0.002); end
  def test_charts_c144; assert_equal("I.c", worksheet.charts_c144); end
  def test_charts_d144; assert_equal("Carbon Capture Storage (CCS)", worksheet.charts_d144); end
  def test_charts_ay144; assert_in_delta(0.0, (worksheet.charts_ay144||0), 0.002); end
  def test_charts_az144; assert_in_delta(0.0, (worksheet.charts_az144||0), 0.002); end
  def test_charts_ba144; assert_in_delta(0.0, (worksheet.charts_ba144||0), 0.002); end
  def test_charts_bb144; assert_in_delta(0.0, (worksheet.charts_bb144||0), 0.002); end
  def test_charts_bc144; assert_in_delta(0.0, (worksheet.charts_bc144||0), 0.002); end
  def test_charts_bd144; assert_in_delta(0.0, (worksheet.charts_bd144||0), 0.002); end
  def test_charts_be144; assert_in_delta(1.0, worksheet.charts_be144, 0.002); end
  def test_charts_bf144; assert_in_epsilon(2.0, worksheet.charts_bf144, 0.002); end
  def test_charts_bg144; assert_in_epsilon(5.0, worksheet.charts_bg144, 0.002); end
  def test_charts_bh144; assert_in_epsilon(7.0, worksheet.charts_bh144, 0.002); end
  def test_charts_bi144; assert_in_epsilon(10.0, worksheet.charts_bi144, 0.002); end
  def test_charts_c145; assert_equal("I.d", worksheet.charts_c145); end
  def test_charts_d145; assert_equal("Electricity Balancing Requirement", worksheet.charts_d145); end
  def test_charts_ay145; assert_in_epsilon(11.506446686594195, worksheet.charts_ay145, 0.002); end
  def test_charts_az145; assert_in_delta(0.0, (worksheet.charts_az145||0), 0.002); end
  def test_charts_ba145; assert_in_delta(0.0, (worksheet.charts_ba145||0), 0.002); end
  def test_charts_bb145; assert_in_epsilon(2.6629193000435274, worksheet.charts_bb145, 0.002); end
  def test_charts_bc145; assert_in_epsilon(91.9766024436919, worksheet.charts_bc145, 0.002); end
  def test_charts_bd145; assert_in_epsilon(210.42924087282464, worksheet.charts_bd145, 0.002); end
  def test_charts_be145; assert_in_epsilon(371.66569910719926, worksheet.charts_be145, 0.002); end
  def test_charts_bf145; assert_in_epsilon(512.9157569479853, worksheet.charts_bf145, 0.002); end
  def test_charts_bg145; assert_in_epsilon(679.1342280027327, worksheet.charts_bg145, 0.002); end
  def test_charts_bh145; assert_in_epsilon(830.4233702150126, worksheet.charts_bh145, 0.002); end
  def test_charts_bi145; assert_in_epsilon(1027.5079194164064, worksheet.charts_bi145, 0.002); end
  def test_charts_c146; assert_equal("II", worksheet.charts_c146); end
  def test_charts_d146; assert_equal("Nuclear power", worksheet.charts_d146); end
  def test_charts_ay146; assert_in_epsilon(4.04, worksheet.charts_ay146, 0.002); end
  def test_charts_az146; assert_in_delta(0.0, (worksheet.charts_az146||0), 0.002); end
  def test_charts_ba146; assert_in_epsilon(4.68, worksheet.charts_ba146, 0.002); end
  def test_charts_bb146; assert_in_epsilon(9.98, worksheet.charts_bb146, 0.002); end
  def test_charts_bc146; assert_in_epsilon(9.66, worksheet.charts_bc146, 0.002); end
  def test_charts_bd146; assert_in_epsilon(9.66, worksheet.charts_bd146, 0.002); end
  def test_charts_be146; assert_in_epsilon(9.46, worksheet.charts_be146, 0.002); end
  def test_charts_bf146; assert_in_epsilon(9.02, worksheet.charts_bf146, 0.002); end
  def test_charts_bg146; assert_in_epsilon(8.8, worksheet.charts_bg146, 0.002); end
  def test_charts_bh146; assert_in_epsilon(8.36, worksheet.charts_bh146, 0.002); end
  def test_charts_bi146; assert_in_epsilon(8.36, worksheet.charts_bi146, 0.002); end
  def test_charts_c147; assert_equal("III", worksheet.charts_c147); end
  def test_charts_d147; assert_equal("Hydro Power Generation", worksheet.charts_d147); end
  def test_charts_ar147; assert_in_epsilon(11.0, worksheet.charts_ar147, 0.002); end
  def test_charts_as147; assert_in_epsilon(11.0, worksheet.charts_as147, 0.002); end
  def test_charts_at147; assert_in_epsilon(11.0, worksheet.charts_at147, 0.002); end
  def test_charts_au147; assert_in_epsilon(10.9, worksheet.charts_au147, 0.002); end
  def test_charts_av147; assert_in_epsilon(10.9, worksheet.charts_av147, 0.002); end
  def test_charts_aw147; assert_equal("Dukes  5.7 Nuclear stations", worksheet.charts_aw147); end
  def test_charts_ay147; assert_in_epsilon(34.65, worksheet.charts_ay147, 0.002); end
  def test_charts_az147; assert_in_delta(0.0, (worksheet.charts_az147||0), 0.002); end
  def test_charts_ba147; assert_in_epsilon(41.0, worksheet.charts_ba147, 0.002); end
  def test_charts_bb147; assert_in_epsilon(49.0, worksheet.charts_bb147, 0.002); end
  def test_charts_bc147; assert_in_epsilon(49.0, worksheet.charts_bc147, 0.002); end
  def test_charts_bd147; assert_in_epsilon(49.0, worksheet.charts_bd147, 0.002); end
  def test_charts_be147; assert_in_epsilon(49.0, worksheet.charts_be147, 0.002); end
  def test_charts_bf147; assert_in_epsilon(49.0, worksheet.charts_bf147, 0.002); end
  def test_charts_bg147; assert_in_epsilon(49.0, worksheet.charts_bg147, 0.002); end
  def test_charts_bh147; assert_in_epsilon(49.0, worksheet.charts_bh147, 0.002); end
  def test_charts_bi147; assert_in_epsilon(49.0, worksheet.charts_bi147, 0.002); end
  def test_charts_c148; assert_equal("IV.a", worksheet.charts_c148); end
  def test_charts_d148; assert_equal("Solar PV", worksheet.charts_d148); end
  def test_charts_aw148; assert_equal("Wind not split in Dukes", worksheet.charts_aw148); end
  def test_charts_ay148; assert_in_delta(0.0, (worksheet.charts_ay148||0), 0.002); end
  def test_charts_az148; assert_in_delta(0.0, (worksheet.charts_az148||0), 0.002); end
  def test_charts_ba148; assert_in_delta(0.9410000000000001, worksheet.charts_ba148, 0.002); end
  def test_charts_bb148; assert_in_epsilon(4.941, worksheet.charts_bb148, 0.002); end
  def test_charts_bc148; assert_in_epsilon(10.940999999999999, worksheet.charts_bc148, 0.002); end
  def test_charts_bd148; assert_in_epsilon(18.941, worksheet.charts_bd148, 0.002); end
  def test_charts_be148; assert_in_epsilon(26.941, worksheet.charts_be148, 0.002); end
  def test_charts_bf148; assert_in_epsilon(33.941, worksheet.charts_bf148, 0.002); end
  def test_charts_bg148; assert_in_epsilon(38.0, worksheet.charts_bg148, 0.002); end
  def test_charts_bh148; assert_in_epsilon(37.0, worksheet.charts_bh148, 0.002); end
  def test_charts_bi148; assert_in_epsilon(32.0, worksheet.charts_bi148, 0.002); end
  def test_charts_c149; assert_equal("IV.b", worksheet.charts_c149); end
  def test_charts_d149; assert_equal("Solar CSP", worksheet.charts_d149); end
  def test_charts_ay149; assert_in_delta(0.0, (worksheet.charts_ay149||0), 0.002); end
  def test_charts_az149; assert_in_delta(0.0, (worksheet.charts_az149||0), 0.002); end
  def test_charts_ba149; assert_in_delta(0.0, (worksheet.charts_ba149||0), 0.002); end
  def test_charts_bb149; assert_in_delta(1.0, worksheet.charts_bb149, 0.002); end
  def test_charts_bc149; assert_in_epsilon(3.0, worksheet.charts_bc149, 0.002); end
  def test_charts_bd149; assert_in_epsilon(5.0, worksheet.charts_bd149, 0.002); end
  def test_charts_be149; assert_in_epsilon(7.5, worksheet.charts_be149, 0.002); end
  def test_charts_bf149; assert_in_epsilon(9.5, worksheet.charts_bf149, 0.002); end
  def test_charts_bg149; assert_in_epsilon(10.5, worksheet.charts_bg149, 0.002); end
  def test_charts_bh149; assert_in_epsilon(9.5, worksheet.charts_bh149, 0.002); end
  def test_charts_bi149; assert_in_epsilon(7.5, worksheet.charts_bi149, 0.002); end
  def test_charts_c150; assert_equal("IV.c.1", worksheet.charts_c150); end
  def test_charts_d150; assert_equal("Onshore Wind", worksheet.charts_d150); end
  def test_charts_ar150; assert_in_epsilon(1.4, worksheet.charts_ar150, 0.002); end
  def test_charts_as150; assert_in_epsilon(1.4, worksheet.charts_as150, 0.002); end
  def test_charts_at150; assert_in_epsilon(1.5, worksheet.charts_at150, 0.002); end
  def test_charts_au150; assert_in_epsilon(1.5, worksheet.charts_au150, 0.002); end
  def test_charts_av150; assert_in_epsilon(1.5, worksheet.charts_av150, 0.002); end
  def test_charts_aw150; assert_equal("Dukes  5.7 Hydro-electric stations: Natural flow", worksheet.charts_aw150); end
  def test_charts_ay150; assert_in_epsilon(7.09399, worksheet.charts_ay150, 0.002); end
  def test_charts_az150; assert_in_delta(0.0, (worksheet.charts_az150||0), 0.002); end
  def test_charts_ba150; assert_in_epsilon(10.353, worksheet.charts_ba150, 0.002); end
  def test_charts_bb150; assert_in_epsilon(18.853, worksheet.charts_bb150, 0.002); end
  def test_charts_bc150; assert_in_epsilon(28.853, worksheet.charts_bc150, 0.002); end
  def test_charts_bd150; assert_in_epsilon(38.853, worksheet.charts_bd150, 0.002); end
  def test_charts_be150; assert_in_epsilon(51.353, worksheet.charts_be150, 0.002); end
  def test_charts_bf150; assert_in_epsilon(56.75901, worksheet.charts_bf150, 0.002); end
  def test_charts_bg150; assert_in_epsilon(58.5, worksheet.charts_bg150, 0.002); end
  def test_charts_bh150; assert_in_epsilon(60.0, worksheet.charts_bh150, 0.002); end
  def test_charts_bi150; assert_in_epsilon(58.0, worksheet.charts_bi150, 0.002); end
  def test_charts_c151; assert_equal("IV.c.2", worksheet.charts_c151); end
  def test_charts_d151; assert_equal("Offshore Wind", worksheet.charts_d151); end
  def test_charts_ay151; assert_in_delta(0.0, (worksheet.charts_ay151||0), 0.002); end
  def test_charts_az151; assert_in_delta(0.0, (worksheet.charts_az151||0), 0.002); end
  def test_charts_ba151; assert_in_delta(0.0, (worksheet.charts_ba151||0), 0.002); end
  def test_charts_bb151; assert_in_delta(0.0, (worksheet.charts_bb151||0), 0.002); end
  def test_charts_bc151; assert_in_delta(0.5, worksheet.charts_bc151, 0.002); end
  def test_charts_bd151; assert_in_delta(1.0, worksheet.charts_bd151, 0.002); end
  def test_charts_be151; assert_in_epsilon(1.5, worksheet.charts_be151, 0.002); end
  def test_charts_bf151; assert_in_epsilon(2.5, worksheet.charts_bf151, 0.002); end
  def test_charts_bg151; assert_in_epsilon(3.5, worksheet.charts_bg151, 0.002); end
  def test_charts_bh151; assert_in_epsilon(4.0, worksheet.charts_bh151, 0.002); end
  def test_charts_bi151; assert_in_epsilon(4.0, worksheet.charts_bi151, 0.002); end
  def test_charts_c152; assert_equal("IV.d", worksheet.charts_c152); end
  def test_charts_d152; assert_equal("Small Hydro", worksheet.charts_d152); end
  def test_charts_ay152; assert_in_epsilon(1.9756, worksheet.charts_ay152, 0.002); end
  def test_charts_az152; assert_in_delta(0.0, (worksheet.charts_az152||0), 0.002); end
  def test_charts_ba152; assert_in_epsilon(3.3856, worksheet.charts_ba152, 0.002); end
  def test_charts_bb152; assert_in_epsilon(4.8856, worksheet.charts_bb152, 0.002); end
  def test_charts_bc152; assert_in_epsilon(6.5856, worksheet.charts_bc152, 0.002); end
  def test_charts_bd152; assert_in_epsilon(7.5856, worksheet.charts_bd152, 0.002); end
  def test_charts_be152; assert_in_epsilon(8.5856, worksheet.charts_be152, 0.002); end
  def test_charts_bf152; assert_in_epsilon(9.0856, worksheet.charts_bf152, 0.002); end
  def test_charts_bg152; assert_in_epsilon(8.959999999999999, worksheet.charts_bg152, 0.002); end
  def test_charts_bh152; assert_in_epsilon(9.0406, worksheet.charts_bh152, 0.002); end
  def test_charts_bi152; assert_in_epsilon(9.0406, worksheet.charts_bi152, 0.002); end
  def test_charts_c153; assert_equal("V.a", worksheet.charts_c153); end
  def test_charts_d153; assert_equal("Biomass", worksheet.charts_d153); end
  def test_charts_ay153; assert_in_epsilon(1.0101398712196108, worksheet.charts_ay153, 0.002); end
  def test_charts_az153; assert_in_delta(0.0, (worksheet.charts_az153||0), 0.002); end
  def test_charts_ba153; assert_in_epsilon(1.3896660392425277, worksheet.charts_ba153, 0.002); end
  def test_charts_bb153; assert_in_epsilon(1.5855498160506503, worksheet.charts_bb153, 0.002); end
  def test_charts_bc153; assert_in_epsilon(1.7814335928587721, worksheet.charts_bc153, 0.002); end
  def test_charts_bd153; assert_in_epsilon(1.977317369666895, worksheet.charts_bd153, 0.002); end
  def test_charts_be153; assert_in_epsilon(2.1732011464750176, worksheet.charts_be153, 0.002); end
  def test_charts_bf153; assert_in_epsilon(2.3690849232831392, worksheet.charts_bf153, 0.002); end
  def test_charts_bg153; assert_in_epsilon(2.564968700091262, worksheet.charts_bg153, 0.002); end
  def test_charts_bh153; assert_in_epsilon(2.7608524768993843, worksheet.charts_bh153, 0.002); end
  def test_charts_bi153; assert_in_epsilon(2.9567362537075064, worksheet.charts_bi153, 0.002); end
  def test_charts_c154; assert_equal("VI.a", worksheet.charts_c154); end
  def test_charts_d154; assert_equal("Waste to Electricity", worksheet.charts_d154); end
  def test_charts_aw154; assert_equal("Other renewables not split in Dukes", worksheet.charts_aw154); end
  def test_charts_ay154; assert_in_delta(0.0, (worksheet.charts_ay154||0), 0.002); end
  def test_charts_az154; assert_in_delta(0.0, (worksheet.charts_az154||0), 0.002); end
  def test_charts_ba154; assert_in_delta(0.0, (worksheet.charts_ba154||0), 0.002); end
  def test_charts_bb154; assert_in_delta(0.0, (worksheet.charts_bb154||0), 0.002); end
  def test_charts_bc154; assert_in_delta(0.0, (worksheet.charts_bc154||0), 0.002); end
  def test_charts_bd154; assert_in_delta(0.0, (worksheet.charts_bd154||0), 0.002); end
  def test_charts_be154; assert_in_delta(0.0, (worksheet.charts_be154||0), 0.002); end
  def test_charts_bf154; assert_in_delta(0.0, (worksheet.charts_bf154||0), 0.002); end
  def test_charts_bg154; assert_in_delta(0.0, (worksheet.charts_bg154||0), 0.002); end
  def test_charts_bh154; assert_in_delta(0.0, (worksheet.charts_bh154||0), 0.002); end
  def test_charts_bi154; assert_in_delta(0.0, (worksheet.charts_bi154||0), 0.002); end
  def test_charts_ay155; assert_in_delta(0.0, (worksheet.charts_ay155||0), 0.002); end
  def test_charts_az155; assert_in_delta(0.0, (worksheet.charts_az155||0), 0.002); end
  def test_charts_ba155; assert_in_delta(0.0, (worksheet.charts_ba155||0), 0.002); end
  def test_charts_bb155; assert_in_delta(0.0, (worksheet.charts_bb155||0), 0.002); end
  def test_charts_bc155; assert_in_delta(0.0, (worksheet.charts_bc155||0), 0.002); end
  def test_charts_bd155; assert_in_delta(0.0, (worksheet.charts_bd155||0), 0.002); end
  def test_charts_be155; assert_in_delta(0.0, (worksheet.charts_be155||0), 0.002); end
  def test_charts_bf155; assert_in_delta(0.0, (worksheet.charts_bf155||0), 0.002); end
  def test_charts_bg155; assert_in_delta(0.0, (worksheet.charts_bg155||0), 0.002); end
  def test_charts_bh155; assert_in_delta(0.0, (worksheet.charts_bh155||0), 0.002); end
  def test_charts_bi155; assert_in_delta(0.0, (worksheet.charts_bi155||0), 0.002); end
  def test_charts_c156; assert_equal("VII.c", worksheet.charts_c156); end
  def test_charts_d156; assert_equal("Standby / peaking gas", worksheet.charts_d156); end
  def test_charts_ay156; assert_in_delta(0.0, (worksheet.charts_ay156||0), 0.002); end
  def test_charts_az156; assert_in_delta(0.0, (worksheet.charts_az156||0), 0.002); end
  def test_charts_ba156; assert_in_delta(0.0, (worksheet.charts_ba156||0), 0.002); end
  def test_charts_bb156; assert_in_delta(0.0, (worksheet.charts_bb156||0), 0.002); end
  def test_charts_bc156; assert_in_delta(0.0, (worksheet.charts_bc156||0), 0.002); end
  def test_charts_bd156; assert_in_delta(0.0, (worksheet.charts_bd156||0), 0.002); end
  def test_charts_be156; assert_in_delta(0.0, (worksheet.charts_be156||0), 0.002); end
  def test_charts_bf156; assert_in_delta(0.0, (worksheet.charts_bf156||0), 0.002); end
  def test_charts_bg156; assert_in_delta(0.0, (worksheet.charts_bg156||0), 0.002); end
  def test_charts_bh156; assert_in_delta(0.0, (worksheet.charts_bh156||0), 0.002); end
  def test_charts_bi156; assert_in_delta(0.0, (worksheet.charts_bi156||0), 0.002); end
  def test_charts_d157; assert_equal("Total generation", worksheet.charts_d157); end
  def test_charts_ar157; assert_in_epsilon(74.996, worksheet.charts_ar157, 0.002); end
  def test_charts_as157; assert_in_epsilon(75.97856007, worksheet.charts_as157, 0.002); end
  def test_charts_at157; assert_in_epsilon(76.78237735, worksheet.charts_at157, 0.002); end
  def test_charts_au157; assert_in_epsilon(77.67526559, worksheet.charts_au157, 0.002); end
  def test_charts_av157; assert_in_epsilon(83.19678575, worksheet.charts_av157, 0.002); end
  def test_charts_ay157; assert_in_epsilon(142.2761765578138, worksheet.charts_ay157, 0.002); end
  def test_charts_az157; assert_in_delta(0.0, (worksheet.charts_az157||0), 0.002); end
  def test_charts_ba157; assert_in_epsilon(186.77256603924258, worksheet.charts_ba157, 0.002); end
  def test_charts_bb157; assert_in_epsilon(268.1995078543219, worksheet.charts_bb157, 0.002); end
  def test_charts_bc157; assert_in_epsilon(368.2212747747784, worksheet.charts_bc157, 0.002); end
  def test_charts_bd157; assert_in_epsilon(494.82979698071927, worksheet.charts_bd157, 0.002); end
  def test_charts_be157; assert_in_epsilon(666.8621389919019, worksheet.charts_be157, 0.002); end
  def test_charts_bf157; assert_in_epsilon(812.0165906094961, worksheet.charts_bf157, 0.002); end
  def test_charts_bg157; assert_in_epsilon(973.4943354410517, worksheet.charts_bg157, 0.002); end
  def test_charts_bh157; assert_in_epsilon(1115.1349614301396, worksheet.charts_bh157, 0.002); end
  def test_charts_bi157; assert_in_epsilon(1268.5163944083415, worksheet.charts_bi157, 0.002); end
  def test_charts_b160; assert_equal("Emissions", worksheet.charts_b160); end
  def test_charts_c162; assert_equal("Emissions as % of base year, adjusted so that 2007 matches actuals", worksheet.charts_c162); end
  def test_charts_ay163; assert_equal("Base Emissions", worksheet.charts_ay163); end
  def test_charts_ba163; assert_equal("Least Effort Scenario", worksheet.charts_ba163); end
  def test_charts_bb163; assert_equal("Your Pathway", worksheet.charts_bb163); end
  def test_charts_bc163; assert_equal("Least Effort", worksheet.charts_bc163); end
  def test_charts_bd163; assert_equal("Your Pathway", worksheet.charts_bd163); end
  def test_charts_d164; assert_equal("Generation", worksheet.charts_d164); end
  def test_charts_ay164; assert_in_epsilon(784.1692596552164, worksheet.charts_ay164, 0.002); end
  def test_charts_ba164; assert_in_epsilon(5854.081712294084, worksheet.charts_ba164, 0.002); end
  def test_charts_bb164; assert_in_epsilon(5854.081712294084, worksheet.charts_bb164, 0.002); end
  def test_charts_bc164; assert_in_epsilon(7.4653292515802105, worksheet.charts_bc164, 0.002); end
  def test_charts_bd164; assert_in_epsilon(7.4653292515802105, worksheet.charts_bd164, 0.002); end
  def test_charts_d165; assert_equal("Lighting & Appliances", worksheet.charts_d165); end
  def test_charts_ay165; assert_in_epsilon(1.8329576632390179, worksheet.charts_ay165, 0.002); end
  def test_charts_ba165; assert_in_delta(0.1532084355621471, worksheet.charts_ba165, 0.002); end
  def test_charts_bb165; assert_in_delta(0.1532084355621472, worksheet.charts_bb165, 0.002); end
  def test_charts_bc165; assert_in_delta(0.08358536513680988, worksheet.charts_bc165, 0.002); end
  def test_charts_bd165; assert_in_delta(0.08358536513680992, worksheet.charts_bd165, 0.002); end
  def test_charts_d166; assert_equal("Industry", worksheet.charts_d166); end
  def test_charts_ay166; assert_in_epsilon(982.2829495753456, worksheet.charts_ay166, 0.002); end
  def test_charts_ba166; assert_in_epsilon(5532.528044278746, worksheet.charts_ba166, 0.002); end
  def test_charts_bb166; assert_in_epsilon(5532.528044278746, worksheet.charts_bb166, 0.002); end
  def test_charts_bc166; assert_in_epsilon(5.632316072136378, worksheet.charts_bc166, 0.002); end
  def test_charts_bd166; assert_in_epsilon(5.632316072136378, worksheet.charts_bd166, 0.002); end
  def test_charts_d167; assert_equal("Transport", worksheet.charts_d167); end
  def test_charts_ay167; assert_in_epsilon(221.7059705239126, worksheet.charts_ay167, 0.002); end
  def test_charts_ba167; assert_in_epsilon(1690.8391897791685, worksheet.charts_ba167, 0.002); end
  def test_charts_bb167; assert_in_epsilon(1690.8391897791685, worksheet.charts_bb167, 0.002); end
  def test_charts_bc167; assert_in_epsilon(7.626493710492109, worksheet.charts_bc167, 0.002); end
  def test_charts_bd167; assert_in_epsilon(7.626493710492109, worksheet.charts_bd167, 0.002); end
  def test_charts_d168; assert_equal("Cooking", worksheet.charts_d168); end
  def test_charts_ay168; assert_in_epsilon(16.26088882133183, worksheet.charts_ay168, 0.002); end
  def test_charts_ba168; assert_in_epsilon(184.23361666422136, worksheet.charts_ba168, 0.002); end
  def test_charts_bb168; assert_in_epsilon(184.23361666422136, worksheet.charts_bb168, 0.002); end
  def test_charts_bc168; assert_in_epsilon(11.329861404779713, worksheet.charts_bc168, 0.002); end
  def test_charts_bd168; assert_in_epsilon(11.329861404779713, worksheet.charts_bd168, 0.002); end
  def test_charts_d169; assert_equal("Agriculture", worksheet.charts_d169); end
  def test_charts_ay169; assert_in_epsilon(27.03601947205911, worksheet.charts_ay169, 0.002); end
  def test_charts_ba169; assert_in_epsilon(103.819221533879, worksheet.charts_ba169, 0.002); end
  def test_charts_bb169; assert_in_epsilon(103.819221533879, worksheet.charts_bb169, 0.002); end
  def test_charts_bc169; assert_in_epsilon(3.8400335390042515, worksheet.charts_bc169, 0.002); end
  def test_charts_bd169; assert_in_epsilon(3.8400335390042515, worksheet.charts_bd169, 0.002); end
  def test_charts_d170; assert_equal("Telecom", worksheet.charts_d170); end
  def test_charts_ay170; assert_in_epsilon(10.242290823043852, worksheet.charts_ay170, 0.002); end
  def test_charts_ba170; assert_in_epsilon(33.35927916427278, worksheet.charts_ba170, 0.002); end
  def test_charts_bb170; assert_in_epsilon(33.35927916427278, worksheet.charts_bb170, 0.002); end
  def test_charts_bc170; assert_in_epsilon(3.257013469019903, worksheet.charts_bc170, 0.002); end
  def test_charts_bd170; assert_in_epsilon(3.257013469019903, worksheet.charts_bd170, 0.002); end
  def test_charts_d171; assert_equal("Bio Energy", worksheet.charts_d171); end
  def test_charts_ay171; assert_in_epsilon(-317.7448860440523, worksheet.charts_ay171, 0.002); end
  def test_charts_ba171; assert_in_epsilon(-312.1117917799598, worksheet.charts_ba171, 0.002); end
  def test_charts_bb171; assert_in_epsilon(-312.1117917799598, worksheet.charts_bb171, 0.002); end
  def test_charts_bc171; assert_in_delta(-0.9822716446070149, worksheet.charts_bc171, 0.002); end
  def test_charts_bd171; assert_in_delta(-0.9822716446070149, worksheet.charts_bd171, 0.002); end
  def test_charts_d172; assert_equal("Total", worksheet.charts_d172); end
  def test_charts_ay172; assert_in_epsilon(1725.785450490096, worksheet.charts_ay172, 0.002); end
  def test_charts_ba172; assert_in_epsilon(13532.361821300998, worksheet.charts_ba172, 0.002); end
  def test_charts_bb172; assert_in_epsilon(13086.902480369974, worksheet.charts_bb172, 0.002); end
  def test_charts_bc172; assert_in_epsilon(7.8412770356002355, worksheet.charts_bc172, 0.002); end
  def test_charts_bd172; assert_in_epsilon(7.583157267117705, worksheet.charts_bd172, 0.002); end
  def test_charts_c179; assert_equal("Excluding international bunkers", worksheet.charts_c179); end
  def test_charts_e181; assert_equal("Adjustment factor:", worksheet.charts_e181); end
  def test_charts_c183; assert_equal("Emissions by sector", worksheet.charts_c183); end
  def test_charts_f183; assert_equal("Sector", worksheet.charts_f183); end
  def test_charts_ay183; assert_in_epsilon(2007.0, worksheet.charts_ay183, 0.002); end
  def test_charts_ba183; assert_in_epsilon(2012.0, worksheet.charts_ba183, 0.002); end
  def test_charts_bb183; assert_in_epsilon(2017.0, worksheet.charts_bb183, 0.002); end
  def test_charts_bc183; assert_in_epsilon(2022.0, worksheet.charts_bc183, 0.002); end
  def test_charts_bd183; assert_in_epsilon(2027.0, worksheet.charts_bd183, 0.002); end
  def test_charts_be183; assert_in_epsilon(2032.0, worksheet.charts_be183, 0.002); end
  def test_charts_bf183; assert_in_epsilon(2037.0, worksheet.charts_bf183, 0.002); end
  def test_charts_bg183; assert_in_epsilon(2042.0, worksheet.charts_bg183, 0.002); end
  def test_charts_bh183; assert_in_epsilon(2047.0, worksheet.charts_bh183, 0.002); end
  def test_charts_bi183; assert_in_epsilon(2052.0, worksheet.charts_bi183, 0.002); end
  def test_charts_c184; assert_equal("I", worksheet.charts_c184); end
  def test_charts_f184; assert_equal("Hydrocarbon fuel power generation", worksheet.charts_f184); end
  def test_charts_ay184; assert_in_epsilon(595.066185196456, worksheet.charts_ay184, 0.002); end
  def test_charts_ba184; assert_in_epsilon(784.1692596552164, worksheet.charts_ba184, 0.002); end
  def test_charts_bb184; assert_in_epsilon(1077.349471293409, worksheet.charts_bb184, 0.002); end
  def test_charts_bc184; assert_in_epsilon(1588.270202042137, worksheet.charts_bc184, 0.002); end
  def test_charts_bd184; assert_in_epsilon(2251.699064797336, worksheet.charts_bd184, 0.002); end
  def test_charts_be184; assert_in_epsilon(3180.5599379801783, worksheet.charts_be184, 0.002); end
  def test_charts_bf184; assert_in_epsilon(4005.6498956084715, worksheet.charts_bf184, 0.002); end
  def test_charts_bg184; assert_in_epsilon(4971.713715104918, worksheet.charts_bg184, 0.002); end
  def test_charts_bh184; assert_in_epsilon(5854.081712294084, worksheet.charts_bh184, 0.002); end
  def test_charts_bi184; assert_in_epsilon(6857.239724694424, worksheet.charts_bi184, 0.002); end
  def test_charts_c185; assert_equal("II", worksheet.charts_c185); end
  def test_charts_f185; assert_equal("Nuclear power generation", worksheet.charts_f185); end
  def test_charts_ay185; assert_in_delta(0.0, (worksheet.charts_ay185||0), 0.002); end
  def test_charts_ba185; assert_in_delta(0.0, (worksheet.charts_ba185||0), 0.002); end
  def test_charts_bb185; assert_in_delta(0.0, (worksheet.charts_bb185||0), 0.002); end
  def test_charts_bc185; assert_in_delta(0.0, (worksheet.charts_bc185||0), 0.002); end
  def test_charts_bd185; assert_in_delta(0.0, (worksheet.charts_bd185||0), 0.002); end
  def test_charts_be185; assert_in_delta(0.0, (worksheet.charts_be185||0), 0.002); end
  def test_charts_bf185; assert_in_delta(0.0, (worksheet.charts_bf185||0), 0.002); end
  def test_charts_bg185; assert_in_delta(0.0, (worksheet.charts_bg185||0), 0.002); end
  def test_charts_bh185; assert_in_delta(0.0, (worksheet.charts_bh185||0), 0.002); end
  def test_charts_bi185; assert_in_delta(0.0, (worksheet.charts_bi185||0), 0.002); end
  def test_charts_c186; assert_equal("III", worksheet.charts_c186); end
  def test_charts_f186; assert_equal("Hydro Electric Power Generation", worksheet.charts_f186); end
  def test_charts_ay186; assert_in_delta(0.0, (worksheet.charts_ay186||0), 0.002); end
  def test_charts_ba186; assert_in_delta(0.0, (worksheet.charts_ba186||0), 0.002); end
  def test_charts_bb186; assert_in_delta(0.0, (worksheet.charts_bb186||0), 0.002); end
  def test_charts_bc186; assert_in_delta(0.0, (worksheet.charts_bc186||0), 0.002); end
  def test_charts_bd186; assert_in_delta(0.0, (worksheet.charts_bd186||0), 0.002); end
  def test_charts_be186; assert_in_delta(0.0, (worksheet.charts_be186||0), 0.002); end
  def test_charts_bf186; assert_in_delta(0.0, (worksheet.charts_bf186||0), 0.002); end
  def test_charts_bg186; assert_in_delta(0.0, (worksheet.charts_bg186||0), 0.002); end
  def test_charts_bh186; assert_in_delta(0.0, (worksheet.charts_bh186||0), 0.002); end
  def test_charts_bi186; assert_in_delta(0.0, (worksheet.charts_bi186||0), 0.002); end
  def test_charts_c187; assert_equal("IV", worksheet.charts_c187); end
  def test_charts_f187; assert_equal("National  renewable power generation", worksheet.charts_f187); end
  def test_charts_ay187; assert_in_delta(0.0, (worksheet.charts_ay187||0), 0.002); end
  def test_charts_ba187; assert_in_delta(0.0, (worksheet.charts_ba187||0), 0.002); end
  def test_charts_bb187; assert_in_delta(0.0, (worksheet.charts_bb187||0), 0.002); end
  def test_charts_bc187; assert_in_delta(0.0, (worksheet.charts_bc187||0), 0.002); end
  def test_charts_bd187; assert_in_delta(0.0, (worksheet.charts_bd187||0), 0.002); end
  def test_charts_be187; assert_in_delta(0.0, (worksheet.charts_be187||0), 0.002); end
  def test_charts_bf187; assert_in_delta(0.0, (worksheet.charts_bf187||0), 0.002); end
  def test_charts_bg187; assert_in_delta(0.0, (worksheet.charts_bg187||0), 0.002); end
  def test_charts_bh187; assert_in_delta(0.0, (worksheet.charts_bh187||0), 0.002); end
  def test_charts_bi187; assert_in_delta(0.0, (worksheet.charts_bi187||0), 0.002); end
  def test_charts_c188; assert_equal("V", worksheet.charts_c188); end
  def test_charts_f188; assert_equal("Bioenergy", worksheet.charts_f188); end
  def test_charts_ay188; assert_in_epsilon(-313.89366247877757, worksheet.charts_ay188, 0.002); end
  def test_charts_ba188; assert_in_epsilon(-317.7448860440523, worksheet.charts_ba188, 0.002); end
  def test_charts_bb188; assert_in_epsilon(-316.49941332858305, worksheet.charts_bb188, 0.002); end
  def test_charts_bc188; assert_in_epsilon(-315.466103215882, worksheet.charts_bc188, 0.002); end
  def test_charts_bd188; assert_in_epsilon(-314.6889283958385, worksheet.charts_bd188, 0.002); end
  def test_charts_be188; assert_in_epsilon(-314.23239533992523, worksheet.charts_be188, 0.002); end
  def test_charts_bf188; assert_in_epsilon(-313.9948136135167, worksheet.charts_bf188, 0.002); end
  def test_charts_bg188; assert_in_epsilon(-312.9238842074715, worksheet.charts_bg188, 0.002); end
  def test_charts_bh188; assert_in_epsilon(-312.1117917799598, worksheet.charts_bh188, 0.002); end
  def test_charts_bi188; assert_in_epsilon(-311.8492675268365, worksheet.charts_bi188, 0.002); end
  def test_charts_c189; assert_equal("VI", worksheet.charts_c189); end
  def test_charts_f189; assert_equal("Waste", worksheet.charts_f189); end
  def test_charts_ay189; assert_in_delta(0.0, (worksheet.charts_ay189||0), 0.002); end
  def test_charts_ba189; assert_in_delta(0.0, (worksheet.charts_ba189||0), 0.002); end
  def test_charts_bb189; assert_in_delta(0.0, (worksheet.charts_bb189||0), 0.002); end
  def test_charts_bc189; assert_in_delta(0.0, (worksheet.charts_bc189||0), 0.002); end
  def test_charts_bd189; assert_in_delta(0.0, (worksheet.charts_bd189||0), 0.002); end
  def test_charts_be189; assert_in_delta(0.0, (worksheet.charts_be189||0), 0.002); end
  def test_charts_bf189; assert_in_delta(0.0, (worksheet.charts_bf189||0), 0.002); end
  def test_charts_bg189; assert_in_delta(0.0, (worksheet.charts_bg189||0), 0.002); end
  def test_charts_bh189; assert_in_delta(0.0, (worksheet.charts_bh189||0), 0.002); end
  def test_charts_bi189; assert_in_delta(0.0, (worksheet.charts_bi189||0), 0.002); end
  def test_charts_c190; assert_equal("VII", worksheet.charts_c190); end
  def test_charts_f190; assert_equal("Electricity distribution, storage, and balancing", worksheet.charts_f190); end
  def test_charts_ay190; assert_in_delta(0.0, (worksheet.charts_ay190||0), 0.002); end
  def test_charts_ba190; assert_in_delta(0.0, (worksheet.charts_ba190||0), 0.002); end
  def test_charts_bb190; assert_in_delta(0.0, (worksheet.charts_bb190||0), 0.002); end
  def test_charts_bc190; assert_in_delta(0.0, (worksheet.charts_bc190||0), 0.002); end
  def test_charts_bd190; assert_in_delta(0.0, (worksheet.charts_bd190||0), 0.002); end
  def test_charts_be190; assert_in_delta(0.0, (worksheet.charts_be190||0), 0.002); end
  def test_charts_bf190; assert_in_delta(0.0, (worksheet.charts_bf190||0), 0.002); end
  def test_charts_bg190; assert_in_delta(0.0, (worksheet.charts_bg190||0), 0.002); end
  def test_charts_bh190; assert_in_delta(0.0, (worksheet.charts_bh190||0), 0.002); end
  def test_charts_bi190; assert_in_delta(0.0, (worksheet.charts_bi190||0), 0.002); end
  def test_charts_ay191; assert_in_delta(0.0, (worksheet.charts_ay191||0), 0.002); end
  def test_charts_ba191; assert_in_delta(0.0, (worksheet.charts_ba191||0), 0.002); end
  def test_charts_bb191; assert_in_delta(0.0, (worksheet.charts_bb191||0), 0.002); end
  def test_charts_bc191; assert_in_delta(0.0, (worksheet.charts_bc191||0), 0.002); end
  def test_charts_bd191; assert_in_delta(0.0, (worksheet.charts_bd191||0), 0.002); end
  def test_charts_be191; assert_in_delta(0.0, (worksheet.charts_be191||0), 0.002); end
  def test_charts_bf191; assert_in_delta(0.0, (worksheet.charts_bf191||0), 0.002); end
  def test_charts_bg191; assert_in_delta(0.0, (worksheet.charts_bg191||0), 0.002); end
  def test_charts_bh191; assert_in_delta(0.0, (worksheet.charts_bh191||0), 0.002); end
  def test_charts_bi191; assert_in_delta(0.0, (worksheet.charts_bi191||0), 0.002); end
  def test_charts_c192; assert_equal("IX", worksheet.charts_c192); end
  def test_charts_f192; assert_equal("Buildings", worksheet.charts_f192); end
  def test_charts_ay192; assert_in_delta(0.0, (worksheet.charts_ay192||0), 0.002); end
  def test_charts_ba192; assert_in_delta(0.0, (worksheet.charts_ba192||0), 0.002); end
  def test_charts_bb192; assert_in_delta(0.0, (worksheet.charts_bb192||0), 0.002); end
  def test_charts_bc192; assert_in_delta(0.0, (worksheet.charts_bc192||0), 0.002); end
  def test_charts_bd192; assert_in_delta(0.0, (worksheet.charts_bd192||0), 0.002); end
  def test_charts_be192; assert_in_delta(0.0, (worksheet.charts_be192||0), 0.002); end
  def test_charts_bf192; assert_in_delta(0.0, (worksheet.charts_bf192||0), 0.002); end
  def test_charts_bg192; assert_in_delta(0.0, (worksheet.charts_bg192||0), 0.002); end
  def test_charts_bh192; assert_in_delta(0.0, (worksheet.charts_bh192||0), 0.002); end
  def test_charts_bi192; assert_in_delta(0.0, (worksheet.charts_bi192||0), 0.002); end
  def test_charts_c193; assert_equal("X", worksheet.charts_c193); end
  def test_charts_f193; assert_equal("Lighting and appliances", worksheet.charts_f193); end
  def test_charts_ay193; assert_in_epsilon(1.9940071140643392, worksheet.charts_ay193, 0.002); end
  def test_charts_ba193; assert_in_epsilon(1.8329576632390179, worksheet.charts_ba193, 0.002); end
  def test_charts_bb193; assert_in_epsilon(1.5593969490007227, worksheet.charts_bb193, 0.002); end
  def test_charts_bc193; assert_in_epsilon(1.2520757241189449, worksheet.charts_bc193, 0.002); end
  def test_charts_bd193; assert_in_delta(0.8996038731343545, worksheet.charts_bd193, 0.002); end
  def test_charts_be193; assert_in_delta(0.5120681719392735, worksheet.charts_be193, 0.002); end
  def test_charts_bf193; assert_in_delta(0.4107672861857, worksheet.charts_bf193, 0.002); end
  def test_charts_bg193; assert_in_delta(0.28960362076092644, worksheet.charts_bg193, 0.002); end
  def test_charts_bh193; assert_in_delta(0.1532084355621472, worksheet.charts_bh193, 0.002); end
  def test_charts_bi193; assert_in_delta(0.0, (worksheet.charts_bi193||0), 0.002); end
  def test_charts_c194; assert_equal("XI", worksheet.charts_c194); end
  def test_charts_f194; assert_equal("Industry", worksheet.charts_f194); end
  def test_charts_ay194; assert_in_epsilon(658.6277670769695, worksheet.charts_ay194, 0.002); end
  def test_charts_ba194; assert_in_epsilon(982.2829495753456, worksheet.charts_ba194, 0.002); end
  def test_charts_bb194; assert_in_epsilon(1349.3894359322871, worksheet.charts_bb194, 0.002); end
  def test_charts_bc194; assert_in_epsilon(1929.0188707797681, worksheet.charts_bc194, 0.002); end
  def test_charts_bd194; assert_in_epsilon(2590.0593835301593, worksheet.charts_bd194, 0.002); end
  def test_charts_be194; assert_in_epsilon(3324.2857122614537, worksheet.charts_be194, 0.002); end
  def test_charts_bf194; assert_in_epsilon(4109.830520443181, worksheet.charts_bf194, 0.002); end
  def test_charts_bg194; assert_in_epsilon(4854.804351102837, worksheet.charts_bg194, 0.002); end
  def test_charts_bh194; assert_in_epsilon(5532.528044278746, worksheet.charts_bh194, 0.002); end
  def test_charts_bi194; assert_in_epsilon(6218.3944071584465, worksheet.charts_bi194, 0.002); end
  def test_charts_c195; assert_equal("XII", worksheet.charts_c195); end
  def test_charts_f195; assert_equal("Transport", worksheet.charts_f195); end
  def test_charts_ay195; assert_in_epsilon(221.70597052391258, worksheet.charts_ay195, 0.002); end
  def test_charts_ba195; assert_in_epsilon(221.7059705239126, worksheet.charts_ba195, 0.002); end
  def test_charts_bb195; assert_in_epsilon(332.7234144635943, worksheet.charts_bb195, 0.002); end
  def test_charts_bc195; assert_in_epsilon(482.09772029926546, worksheet.charts_bc195, 0.002); end
  def test_charts_bd195; assert_in_epsilon(665.9782307957221, worksheet.charts_bd195, 0.002); end
  def test_charts_be195; assert_in_epsilon(892.1918472973097, worksheet.charts_be195, 0.002); end
  def test_charts_bf195; assert_in_epsilon(1159.1376075927294, worksheet.charts_bf195, 0.002); end
  def test_charts_bg195; assert_in_epsilon(1412.0431685443764, worksheet.charts_bg195, 0.002); end
  def test_charts_bh195; assert_in_epsilon(1690.8391897791685, worksheet.charts_bh195, 0.002); end
  def test_charts_bi195; assert_in_epsilon(2002.9666465322869, worksheet.charts_bi195, 0.002); end
  def test_charts_c196; assert_equal("XIII", worksheet.charts_c196); end
  def test_charts_f196; assert_equal("Cooking", worksheet.charts_f196); end
  def test_charts_ay196; assert_in_epsilon(10.704467295035755, worksheet.charts_ay196, 0.002); end
  def test_charts_ba196; assert_in_epsilon(16.26088882133183, worksheet.charts_ba196, 0.002); end
  def test_charts_bb196; assert_in_epsilon(24.23950354390121, worksheet.charts_bb196, 0.002); end
  def test_charts_bc196; assert_in_epsilon(35.93346095018956, worksheet.charts_bc196, 0.002); end
  def test_charts_bd196; assert_in_epsilon(52.75136645346924, worksheet.charts_bd196, 0.002); end
  def test_charts_be196; assert_in_epsilon(195.39740644307, worksheet.charts_be196, 0.002); end
  def test_charts_bf196; assert_in_epsilon(103.07922847908272, worksheet.charts_bf196, 0.002); end
  def test_charts_bg196; assert_in_epsilon(137.80633413788036, worksheet.charts_bg196, 0.002); end
  def test_charts_bh196; assert_in_epsilon(184.23361666422136, worksheet.charts_bh196, 0.002); end
  def test_charts_bi196; assert_in_epsilon(246.3033097633579, worksheet.charts_bi196, 0.002); end
  def test_charts_c197; assert_equal("XIV", worksheet.charts_c197); end
  def test_charts_f197; assert_equal("Agriculture", worksheet.charts_f197); end
  def test_charts_ay197; assert_in_epsilon(20.879036754401042, worksheet.charts_ay197, 0.002); end
  def test_charts_ba197; assert_in_epsilon(27.03601947205911, worksheet.charts_ba197, 0.002); end
  def test_charts_bb197; assert_in_epsilon(37.21072446431117, worksheet.charts_bb197, 0.002); end
  def test_charts_bc197; assert_in_epsilon(50.99549576692747, worksheet.charts_bc197, 0.002); end
  def test_charts_bd197; assert_in_epsilon(68.18646924899116, worksheet.charts_bd197, 0.002); end
  def test_charts_be197; assert_in_epsilon(85.70490968198598, worksheet.charts_be197, 0.002); end
  def test_charts_bf197; assert_in_epsilon(91.58709321034966, worksheet.charts_bf197, 0.002); end
  def test_charts_bg197; assert_in_epsilon(98.6987943689982, worksheet.charts_bg197, 0.002); end
  def test_charts_bh197; assert_in_epsilon(103.819221533879, worksheet.charts_bh197, 0.002); end
  def test_charts_bi197; assert_in_epsilon(109.56385666370986, worksheet.charts_bi197, 0.002); end
  def test_charts_c198; assert_equal("XV", worksheet.charts_c198); end
  def test_charts_f198; assert_equal("Fossil fuel production", worksheet.charts_f198); end
  def test_charts_ay198; assert_in_delta(0.0, (worksheet.charts_ay198||0), 0.002); end
  def test_charts_ba198; assert_in_delta(0.0, (worksheet.charts_ba198||0), 0.002); end
  def test_charts_bb198; assert_in_delta(0.0, (worksheet.charts_bb198||0), 0.002); end
  def test_charts_bc198; assert_in_delta(0.0, (worksheet.charts_bc198||0), 0.002); end
  def test_charts_bd198; assert_in_delta(0.0, (worksheet.charts_bd198||0), 0.002); end
  def test_charts_be198; assert_in_delta(0.0, (worksheet.charts_be198||0), 0.002); end
  def test_charts_bf198; assert_in_delta(0.0, (worksheet.charts_bf198||0), 0.002); end
  def test_charts_bg198; assert_in_delta(0.0, (worksheet.charts_bg198||0), 0.002); end
  def test_charts_bh198; assert_in_delta(0.0, (worksheet.charts_bh198||0), 0.002); end
  def test_charts_bi198; assert_in_delta(0.0, (worksheet.charts_bi198||0), 0.002); end
  def test_charts_c199; assert_equal("XVI", worksheet.charts_c199); end
  def test_charts_f199; assert_equal("Telecom", worksheet.charts_f199); end
  def test_charts_ay199; assert_in_epsilon(3.072687246913156, worksheet.charts_ay199, 0.002); end
  def test_charts_ba199; assert_in_epsilon(10.242290823043852, worksheet.charts_ba199, 0.002); end
  def test_charts_bb199; assert_in_epsilon(11.96903871423729, worksheet.charts_bb199, 0.002); end
  def test_charts_bc199; assert_in_epsilon(14.306079552899408, worksheet.charts_bc199, 0.002); end
  def test_charts_bd199; assert_in_epsilon(18.61496448419535, worksheet.charts_bd199, 0.002); end
  def test_charts_be199; assert_in_epsilon(21.940344281262913, worksheet.charts_be199, 0.002); end
  def test_charts_bf199; assert_in_epsilon(23.475215746381874, worksheet.charts_bf199, 0.002); end
  def test_charts_bg199; assert_in_epsilon(26.375105132264267, worksheet.charts_bg199, 0.002); end
  def test_charts_bh199; assert_in_epsilon(33.35927916427278, worksheet.charts_bh199, 0.002); end
  def test_charts_bi199; assert_in_epsilon(47.3207750656043, worksheet.charts_bi199, 0.002); end
  def test_charts_c200; assert_equal("XVII", worksheet.charts_c200); end
  def test_charts_f200; assert_equal("Transfer", worksheet.charts_f200); end
  def test_charts_ay200; assert_in_delta(0.0, (worksheet.charts_ay200||0), 0.002); end
  def test_charts_ba200; assert_in_delta(0.0, (worksheet.charts_ba200||0), 0.002); end
  def test_charts_bb200; assert_in_delta(0.0, (worksheet.charts_bb200||0), 0.002); end
  def test_charts_bc200; assert_in_delta(0.0, (worksheet.charts_bc200||0), 0.002); end
  def test_charts_bd200; assert_in_delta(0.0, (worksheet.charts_bd200||0), 0.002); end
  def test_charts_be200; assert_in_delta(0.0, (worksheet.charts_be200||0), 0.002); end
  def test_charts_bf200; assert_in_delta(0.0, (worksheet.charts_bf200||0), 0.002); end
  def test_charts_bg200; assert_in_delta(0.0, (worksheet.charts_bg200||0), 0.002); end
  def test_charts_bh200; assert_in_delta(0.0, (worksheet.charts_bh200||0), 0.002); end
  def test_charts_bi200; assert_in_delta(0.0, (worksheet.charts_bi200||0), 0.002); end
  def test_charts_f201; assert_equal("Total", worksheet.charts_f201); end
  def test_charts_ay201; assert_in_epsilon(1198.1564587289747, worksheet.charts_ay201, 0.002); end
  def test_charts_ba201; assert_in_epsilon(1725.785450490096, worksheet.charts_ba201, 0.002); end
  def test_charts_bb201; assert_in_epsilon(2517.9415720321576, worksheet.charts_bb201, 0.002); end
  def test_charts_bc201; assert_in_epsilon(3786.407801899424, worksheet.charts_bc201, 0.002); end
  def test_charts_bd201; assert_in_epsilon(5333.500154787168, worksheet.charts_bd201, 0.002); end
  def test_charts_be201; assert_in_epsilon(7386.359830777274, worksheet.charts_be201, 0.002); end
  def test_charts_bf201; assert_in_epsilon(9179.175514752866, worksheet.charts_bf201, 0.002); end
  def test_charts_bg201; assert_in_epsilon(11188.807187804565, worksheet.charts_bg201, 0.002); end
  def test_charts_bh201; assert_in_epsilon(13086.902480369974, worksheet.charts_bh201, 0.002); end
  def test_charts_bi201; assert_in_epsilon(15169.93945235099, worksheet.charts_bi201, 0.002); end
  def test_charts_f202; assert_equal("Emissions in the time period (up to and including year above)", worksheet.charts_f202); end
  def test_charts_ay202; assert_in_delta(0.0, (worksheet.charts_ay202||0), 0.002); end
  def test_charts_ba202; assert_in_epsilon(8349.722534248316, worksheet.charts_ba202, 0.002); end
  def test_charts_bb202; assert_in_epsilon(11005.395617076665, worksheet.charts_bb202, 0.002); end
  def test_charts_bc202; assert_in_epsilon(16395.10654976259, worksheet.charts_bc202, 0.002); end
  def test_charts_bd202; assert_in_epsilon(23573.316068160355, worksheet.charts_bd202, 0.002); end
  def test_charts_be202; assert_in_epsilon(32826.079801906155, worksheet.charts_be202, 0.002); end
  def test_charts_bf202; assert_in_epsilon(42310.24620581315, worksheet.charts_bf202, 0.002); end
  def test_charts_bg202; assert_in_epsilon(51924.77259291943, worksheet.charts_bg202, 0.002); end
  def test_charts_bh202; assert_in_epsilon(61638.32181671905, worksheet.charts_bh202, 0.002); end
  def test_charts_bi202; assert_in_epsilon(71683.62331779292, worksheet.charts_bi202, 0.002); end
  def test_charts_bj202; assert_equal("REFERENCED - All costs", worksheet.charts_bj202); end
  def test_charts_c203; assert_equal("Modelled emissions", worksheet.charts_c203); end
  def test_charts_f203; assert_equal("Cumulative emissions", worksheet.charts_f203); end
  def test_charts_ay203; assert_in_delta(0.0, (worksheet.charts_ay203||0), 0.002); end
  def test_charts_ba203; assert_in_epsilon(8349.722534248316, worksheet.charts_ba203, 0.002); end
  def test_charts_bb203; assert_in_epsilon(19355.118151324983, worksheet.charts_bb203, 0.002); end
  def test_charts_bc203; assert_in_epsilon(35750.22470108757, worksheet.charts_bc203, 0.002); end
  def test_charts_bd203; assert_in_epsilon(59323.54076924793, worksheet.charts_bd203, 0.002); end
  def test_charts_be203; assert_in_epsilon(92149.62057115408, worksheet.charts_be203, 0.002); end
  def test_charts_bf203; assert_in_epsilon(134459.86677696725, worksheet.charts_bf203, 0.002); end
  def test_charts_bg203; assert_in_epsilon(186384.63936988666, worksheet.charts_bg203, 0.002); end
  def test_charts_bh203; assert_in_epsilon(248022.9611866057, worksheet.charts_bh203, 0.002); end
  def test_charts_bi203; assert_in_epsilon(319706.58450439863, worksheet.charts_bi203, 0.002); end
  def test_charts_d205; assert_equal("IPCC Sector", worksheet.charts_d205); end
  def test_charts_f205; assert_equal("Actuals, GHG Inv.", worksheet.charts_f205); end
  def test_charts_ab205; assert_in_epsilon(1990.0, worksheet.charts_ab205, 0.002); end
  def test_charts_ac205; assert_in_epsilon(1991.0, worksheet.charts_ac205, 0.002); end
  def test_charts_ad205; assert_in_epsilon(1992.0, worksheet.charts_ad205, 0.002); end
  def test_charts_ae205; assert_in_epsilon(1993.0, worksheet.charts_ae205, 0.002); end
  def test_charts_af205; assert_in_epsilon(1994.0, worksheet.charts_af205, 0.002); end
  def test_charts_ag205; assert_in_epsilon(1995.0, worksheet.charts_ag205, 0.002); end
  def test_charts_ah205; assert_in_epsilon(1996.0, worksheet.charts_ah205, 0.002); end
  def test_charts_ai205; assert_in_epsilon(1997.0, worksheet.charts_ai205, 0.002); end
  def test_charts_aj205; assert_in_epsilon(1998.0, worksheet.charts_aj205, 0.002); end
  def test_charts_ak205; assert_in_epsilon(1999.0, worksheet.charts_ak205, 0.002); end
  def test_charts_al205; assert_in_epsilon(2000.0, worksheet.charts_al205, 0.002); end
  def test_charts_am205; assert_in_epsilon(2001.0, worksheet.charts_am205, 0.002); end
  def test_charts_an205; assert_in_epsilon(2002.0, worksheet.charts_an205, 0.002); end
  def test_charts_ao205; assert_in_epsilon(2003.0, worksheet.charts_ao205, 0.002); end
  def test_charts_ap205; assert_in_epsilon(2004.0, worksheet.charts_ap205, 0.002); end
  def test_charts_aq205; assert_in_epsilon(2005.0, worksheet.charts_aq205, 0.002); end
  def test_charts_ar205; assert_in_epsilon(2006.0, worksheet.charts_ar205, 0.002); end
  def test_charts_as205; assert_in_epsilon(2007.0, worksheet.charts_as205, 0.002); end
  def test_charts_at205; assert_in_epsilon(2008.0, worksheet.charts_at205, 0.002); end
  def test_charts_au205; assert_in_epsilon(2009.0, worksheet.charts_au205, 0.002); end
  def test_charts_av205; assert_in_epsilon(2010.0, worksheet.charts_av205, 0.002); end
  def test_charts_bi205; assert_equal("Mt CO2e", worksheet.charts_bi205); end
  def test_charts_c206; assert_equal("1A", worksheet.charts_c206); end
  def test_charts_d206; assert_equal("Fuel Combustion", worksheet.charts_d206); end
  def test_charts_ab206; assert_in_epsilon(574.3209547083816, worksheet.charts_ab206, 0.002); end
  def test_charts_ac206; assert_in_epsilon(584.0743742824582, worksheet.charts_ac206, 0.002); end
  def test_charts_ad206; assert_in_epsilon(567.775629804286, worksheet.charts_ad206, 0.002); end
  def test_charts_ae206; assert_in_epsilon(553.3375369132328, worksheet.charts_ae206, 0.002); end
  def test_charts_af206; assert_in_epsilon(546.2326953595707, worksheet.charts_af206, 0.002); end
  def test_charts_ag206; assert_in_epsilon(536.0203388339339, worksheet.charts_ag206, 0.002); end
  def test_charts_ah206; assert_in_epsilon(556.6263616262188, worksheet.charts_ah206, 0.002); end
  def test_charts_ai206; assert_in_epsilon(534.7489129925543, worksheet.charts_ai206, 0.002); end
  def test_charts_aj206; assert_in_epsilon(538.7547344689547, worksheet.charts_aj206, 0.002); end
  def test_charts_ak206; assert_in_epsilon(530.6656631394994, worksheet.charts_ak206, 0.002); end
  def test_charts_al206; assert_in_epsilon(539.0004989586873, worksheet.charts_al206, 0.002); end
  def test_charts_am206; assert_in_epsilon(552.1914120311419, worksheet.charts_am206, 0.002); end
  def test_charts_an206; assert_in_epsilon(536.2169387908792, worksheet.charts_an206, 0.002); end
  def test_charts_ao206; assert_in_epsilon(545.6418260281304, worksheet.charts_ao206, 0.002); end
  def test_charts_ap206; assert_in_epsilon(546.9152625041492, worksheet.charts_ap206, 0.002); end
  def test_charts_aq206; assert_in_epsilon(542.8024086774741, worksheet.charts_aq206, 0.002); end
  def test_charts_ar206; assert_in_epsilon(542.6566863260153, worksheet.charts_ar206, 0.002); end
  def test_charts_as206; assert_in_epsilon(534.0257455298923, worksheet.charts_as206, 0.002); end
  def test_charts_at206; assert_in_epsilon(522.9479251564137, worksheet.charts_at206, 0.002); end
  def test_charts_au206; assert_in_epsilon(475.60178758150977, worksheet.charts_au206, 0.002); end
  def test_charts_av206; assert_in_epsilon(492.7502706136072, worksheet.charts_av206, 0.002); end
  def test_charts_aw206; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw206); end
  def test_charts_ay206; assert_in_epsilon(1179.6635504223545, worksheet.charts_ay206, 0.002); end
  def test_charts_ba206; assert_in_epsilon(1542.1465709234317, worksheet.charts_ba206, 0.002); end
  def test_charts_bb206; assert_in_epsilon(2147.77722868036, worksheet.charts_bb206, 0.002); end
  def test_charts_bc206; assert_in_epsilon(3123.058390172522, worksheet.charts_bc206, 0.002); end
  def test_charts_bd206; assert_in_epsilon(4334.544426933733, worksheet.charts_bd206, 0.002); end
  def test_charts_be206; assert_in_epsilon(6022.499243527791, worksheet.charts_be206, 0.002); end
  def test_charts_bf206; assert_in_epsilon(7426.760288043572, worksheet.charts_bf206, 0.002); end
  def test_charts_bg206; assert_in_epsilon(9076.997271680259, worksheet.charts_bg206, 0.002); end
  def test_charts_bh206; assert_in_epsilon(10640.051843338957, worksheet.charts_bh206, 0.002); end
  def test_charts_bi206; assert_in_epsilon(12381.649261916114, worksheet.charts_bi206, 0.002); end
  def test_charts_c207; assert_equal("1B", worksheet.charts_c207); end
  def test_charts_d207; assert_equal("Fugitive Emissions from Fuels", worksheet.charts_d207); end
  def test_charts_ab207; assert_in_epsilon(35.28336958104466, worksheet.charts_ab207, 0.002); end
  def test_charts_ac207; assert_in_epsilon(35.182983866091305, worksheet.charts_ac207, 0.002); end
  def test_charts_ad207; assert_in_epsilon(35.289835728726885, worksheet.charts_ad207, 0.002); end
  def test_charts_ae207; assert_in_epsilon(34.03101350740516, worksheet.charts_ae207, 0.002); end
  def test_charts_af207; assert_in_epsilon(28.32476108866633, worksheet.charts_af207, 0.002); end
  def test_charts_ag207; assert_in_epsilon(31.042353791967415, worksheet.charts_ag207, 0.002); end
  def test_charts_ah207; assert_in_epsilon(30.473334583513346, worksheet.charts_ah207, 0.002); end
  def test_charts_ai207; assert_in_epsilon(27.620233281205483, worksheet.charts_ai207, 0.002); end
  def test_charts_aj207; assert_in_epsilon(25.397431061510737, worksheet.charts_aj207, 0.002); end
  def test_charts_ak207; assert_in_epsilon(22.308283841071088, worksheet.charts_ak207, 0.002); end
  def test_charts_al207; assert_in_epsilon(20.536975736659553, worksheet.charts_al207, 0.002); end
  def test_charts_am207; assert_in_epsilon(20.019669009851356, worksheet.charts_am207, 0.002); end
  def test_charts_an207; assert_in_epsilon(19.40477630089951, worksheet.charts_an207, 0.002); end
  def test_charts_ao207; assert_in_epsilon(16.07854267407026, worksheet.charts_ao207, 0.002); end
  def test_charts_ap207; assert_in_epsilon(15.736887486965456, worksheet.charts_ap207, 0.002); end
  def test_charts_aq207; assert_in_epsilon(14.992284178784804, worksheet.charts_aq207, 0.002); end
  def test_charts_ar207; assert_in_epsilon(13.51092325781543, worksheet.charts_ar207, 0.002); end
  def test_charts_as207; assert_in_epsilon(12.929712235090694, worksheet.charts_as207, 0.002); end
  def test_charts_at207; assert_in_epsilon(11.879194090477329, worksheet.charts_at207, 0.002); end
  def test_charts_au207; assert_in_epsilon(12.040107260360204, worksheet.charts_au207, 0.002); end
  def test_charts_av207; assert_in_epsilon(11.646390385331518, worksheet.charts_av207, 0.002); end
  def test_charts_aw207; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw207); end
  def test_charts_ay207; assert_in_delta(0.0, (worksheet.charts_ay207||0), 0.002); end
  def test_charts_ba207; assert_in_delta(0.0, (worksheet.charts_ba207||0), 0.002); end
  def test_charts_bb207; assert_in_delta(0.0, (worksheet.charts_bb207||0), 0.002); end
  def test_charts_bc207; assert_in_delta(0.0, (worksheet.charts_bc207||0), 0.002); end
  def test_charts_bd207; assert_in_delta(0.0, (worksheet.charts_bd207||0), 0.002); end
  def test_charts_be207; assert_in_delta(0.0, (worksheet.charts_be207||0), 0.002); end
  def test_charts_bf207; assert_in_delta(0.0, (worksheet.charts_bf207||0), 0.002); end
  def test_charts_bg207; assert_in_delta(0.0, (worksheet.charts_bg207||0), 0.002); end
  def test_charts_bh207; assert_in_delta(0.0, (worksheet.charts_bh207||0), 0.002); end
  def test_charts_bi207; assert_in_delta(0.0, (worksheet.charts_bi207||0), 0.002); end
  def test_charts_c208; assert_in_delta(1.0, worksheet.charts_c208, 0.002); end
  def test_charts_d208; assert_equal("Fuel Combustion", worksheet.charts_d208); end
  def test_charts_ab208; assert_in_epsilon(609.6043242894262, worksheet.charts_ab208, 0.002); end
  def test_charts_ac208; assert_in_epsilon(619.2573581485495, worksheet.charts_ac208, 0.002); end
  def test_charts_ad208; assert_in_epsilon(603.065465533013, worksheet.charts_ad208, 0.002); end
  def test_charts_ae208; assert_in_epsilon(587.368550420638, worksheet.charts_ae208, 0.002); end
  def test_charts_af208; assert_in_epsilon(574.5574564482371, worksheet.charts_af208, 0.002); end
  def test_charts_ag208; assert_in_epsilon(567.0626926259013, worksheet.charts_ag208, 0.002); end
  def test_charts_ah208; assert_in_epsilon(587.0996962097321, worksheet.charts_ah208, 0.002); end
  def test_charts_ai208; assert_in_epsilon(562.3691462737597, worksheet.charts_ai208, 0.002); end
  def test_charts_aj208; assert_in_epsilon(564.1521655304655, worksheet.charts_aj208, 0.002); end
  def test_charts_ak208; assert_in_epsilon(552.9739469805704, worksheet.charts_ak208, 0.002); end
  def test_charts_al208; assert_in_epsilon(559.5374746953468, worksheet.charts_al208, 0.002); end
  def test_charts_am208; assert_in_epsilon(572.2110810409933, worksheet.charts_am208, 0.002); end
  def test_charts_an208; assert_in_epsilon(555.6217150917786, worksheet.charts_an208, 0.002); end
  def test_charts_ao208; assert_in_epsilon(561.7203687022006, worksheet.charts_ao208, 0.002); end
  def test_charts_ap208; assert_in_epsilon(562.6521499911145, worksheet.charts_ap208, 0.002); end
  def test_charts_aq208; assert_in_epsilon(557.794692856259, worksheet.charts_aq208, 0.002); end
  def test_charts_ar208; assert_in_epsilon(556.1676095838308, worksheet.charts_ar208, 0.002); end
  def test_charts_as208; assert_in_epsilon(546.9554577649831, worksheet.charts_as208, 0.002); end
  def test_charts_at208; assert_in_epsilon(534.827119246891, worksheet.charts_at208, 0.002); end
  def test_charts_au208; assert_in_epsilon(487.64189484186994, worksheet.charts_au208, 0.002); end
  def test_charts_av208; assert_in_epsilon(504.39666099893867, worksheet.charts_av208, 0.002); end
  def test_charts_aw208; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw208); end
  def test_charts_ay208; assert_in_epsilon(1179.6635504223545, worksheet.charts_ay208, 0.002); end
  def test_charts_ba208; assert_in_epsilon(1542.1465709234317, worksheet.charts_ba208, 0.002); end
  def test_charts_bb208; assert_in_epsilon(2147.77722868036, worksheet.charts_bb208, 0.002); end
  def test_charts_bc208; assert_in_epsilon(3123.058390172522, worksheet.charts_bc208, 0.002); end
  def test_charts_bd208; assert_in_epsilon(4334.544426933733, worksheet.charts_bd208, 0.002); end
  def test_charts_be208; assert_in_epsilon(6022.499243527791, worksheet.charts_be208, 0.002); end
  def test_charts_bf208; assert_in_epsilon(7426.760288043572, worksheet.charts_bf208, 0.002); end
  def test_charts_bg208; assert_in_epsilon(9076.997271680259, worksheet.charts_bg208, 0.002); end
  def test_charts_bh208; assert_in_epsilon(10640.051843338957, worksheet.charts_bh208, 0.002); end
  def test_charts_bi208; assert_in_epsilon(12381.649261916114, worksheet.charts_bi208, 0.002); end
  def test_charts_c209; assert_in_epsilon(2.0, worksheet.charts_c209, 0.002); end
  def test_charts_d209; assert_equal("Industrial Processes", worksheet.charts_d209); end
  def test_charts_ab209; assert_in_epsilon(54.14857476869939, worksheet.charts_ab209, 0.002); end
  def test_charts_ac209; assert_in_epsilon(52.4759760853303, worksheet.charts_ac209, 0.002); end
  def test_charts_ad209; assert_in_epsilon(47.09357259520948, worksheet.charts_ad209, 0.002); end
  def test_charts_ae209; assert_in_epsilon(43.78326664990354, worksheet.charts_ae209, 0.002); end
  def test_charts_af209; assert_in_epsilon(46.200468631708674, worksheet.charts_af209, 0.002); end
  def test_charts_ag209; assert_in_epsilon(46.43810864086563, worksheet.charts_ag209, 0.002); end
  def test_charts_ah209; assert_in_epsilon(48.20629279360756, worksheet.charts_ah209, 0.002); end
  def test_charts_ai209; assert_in_epsilon(50.50974315789668, worksheet.charts_ai209, 0.002); end
  def test_charts_aj209; assert_in_epsilon(48.95561951370075, worksheet.charts_aj209, 0.002); end
  def test_charts_ak209; assert_in_epsilon(32.39425526510215, worksheet.charts_ak209, 0.002); end
  def test_charts_al209; assert_in_epsilon(31.67702412980407, worksheet.charts_al209, 0.002); end
  def test_charts_am209; assert_in_epsilon(30.092795678224793, worksheet.charts_am209, 0.002); end
  def test_charts_an209; assert_in_epsilon(28.177211033386556, worksheet.charts_an209, 0.002); end
  def test_charts_ao209; assert_in_epsilon(30.02666734078687, worksheet.charts_ao209, 0.002); end
  def test_charts_ap209; assert_in_epsilon(30.291978553378527, worksheet.charts_ap209, 0.002); end
  def test_charts_aq209; assert_in_epsilon(30.61923542294498, worksheet.charts_aq209, 0.002); end
  def test_charts_ar209; assert_in_epsilon(29.927484392152323, worksheet.charts_ar209, 0.002); end
  def test_charts_as209; assert_in_epsilon(31.616603644661854, worksheet.charts_as209, 0.002); end
  def test_charts_at209; assert_in_epsilon(30.80187951705711, worksheet.charts_at209, 0.002); end
  def test_charts_au209; assert_in_epsilon(25.47849294203823, worksheet.charts_au209, 0.002); end
  def test_charts_av209; assert_in_epsilon(26.811492537019994, worksheet.charts_av209, 0.002); end
  def test_charts_aw209; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw209); end
  def test_charts_ay209; assert_in_delta(0.0, (worksheet.charts_ay209||0), 0.002); end
  def test_charts_ba209; assert_in_delta(0.0, (worksheet.charts_ba209||0), 0.002); end
  def test_charts_bb209; assert_in_delta(0.0, (worksheet.charts_bb209||0), 0.002); end
  def test_charts_bc209; assert_in_delta(0.0, (worksheet.charts_bc209||0), 0.002); end
  def test_charts_bd209; assert_in_delta(0.0, (worksheet.charts_bd209||0), 0.002); end
  def test_charts_be209; assert_in_delta(0.0, (worksheet.charts_be209||0), 0.002); end
  def test_charts_bf209; assert_in_delta(0.0, (worksheet.charts_bf209||0), 0.002); end
  def test_charts_bg209; assert_in_delta(0.0, (worksheet.charts_bg209||0), 0.002); end
  def test_charts_bh209; assert_in_delta(0.0, (worksheet.charts_bh209||0), 0.002); end
  def test_charts_bi209; assert_in_delta(0.0, (worksheet.charts_bi209||0), 0.002); end
  def test_charts_c210; assert_in_epsilon(3.0, worksheet.charts_c210, 0.002); end
  def test_charts_d210; assert_equal("Solvent and Other Product Use", worksheet.charts_d210); end
  def test_charts_ab210; assert_equal("NE,NO", worksheet.charts_ab210); end
  def test_charts_ac210; assert_equal("NE,NO", worksheet.charts_ac210); end
  def test_charts_ad210; assert_equal("NE,NO", worksheet.charts_ad210); end
  def test_charts_ae210; assert_equal("NE,NO", worksheet.charts_ae210); end
  def test_charts_af210; assert_equal("NE,NO", worksheet.charts_af210); end
  def test_charts_ag210; assert_equal("NE,NO", worksheet.charts_ag210); end
  def test_charts_ah210; assert_equal("NE,NO", worksheet.charts_ah210); end
  def test_charts_ai210; assert_equal("NE,NO", worksheet.charts_ai210); end
  def test_charts_aj210; assert_equal("NE,NO", worksheet.charts_aj210); end
  def test_charts_ak210; assert_equal("NE,NO", worksheet.charts_ak210); end
  def test_charts_al210; assert_equal("NE,NO", worksheet.charts_al210); end
  def test_charts_am210; assert_equal("NE,NO", worksheet.charts_am210); end
  def test_charts_an210; assert_equal("NE,NO", worksheet.charts_an210); end
  def test_charts_ao210; assert_equal("NE,NO", worksheet.charts_ao210); end
  def test_charts_ap210; assert_equal("NE,NO", worksheet.charts_ap210); end
  def test_charts_aq210; assert_equal("NE,NO", worksheet.charts_aq210); end
  def test_charts_ar210; assert_equal("NE,NO", worksheet.charts_ar210); end
  def test_charts_as210; assert_equal("NE,NO", worksheet.charts_as210); end
  def test_charts_at210; assert_equal("NE,NO", worksheet.charts_at210); end
  def test_charts_au210; assert_equal("NE,NO", worksheet.charts_au210); end
  def test_charts_av210; assert_equal("NE,NO", worksheet.charts_av210); end
  def test_charts_aw210; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw210); end
  def test_charts_ay210; assert_in_delta(0.0, (worksheet.charts_ay210||0), 0.002); end
  def test_charts_ba210; assert_in_delta(0.0, (worksheet.charts_ba210||0), 0.002); end
  def test_charts_bb210; assert_in_delta(0.0, (worksheet.charts_bb210||0), 0.002); end
  def test_charts_bc210; assert_in_delta(0.0, (worksheet.charts_bc210||0), 0.002); end
  def test_charts_bd210; assert_in_delta(0.0, (worksheet.charts_bd210||0), 0.002); end
  def test_charts_be210; assert_in_delta(0.0, (worksheet.charts_be210||0), 0.002); end
  def test_charts_bf210; assert_in_delta(0.0, (worksheet.charts_bf210||0), 0.002); end
  def test_charts_bg210; assert_in_delta(0.0, (worksheet.charts_bg210||0), 0.002); end
  def test_charts_bh210; assert_in_delta(0.0, (worksheet.charts_bh210||0), 0.002); end
  def test_charts_bi210; assert_in_delta(0.0, (worksheet.charts_bi210||0), 0.002); end
  def test_charts_c211; assert_in_epsilon(4.0, worksheet.charts_c211, 0.002); end
  def test_charts_d211; assert_equal("Agriculture", worksheet.charts_d211); end
  def test_charts_ab211; assert_in_epsilon(57.50148520668305, worksheet.charts_ab211, 0.002); end
  def test_charts_ac211; assert_in_epsilon(57.24644655351287, worksheet.charts_ac211, 0.002); end
  def test_charts_ad211; assert_in_epsilon(57.06468640798265, worksheet.charts_ad211, 0.002); end
  def test_charts_ae211; assert_in_epsilon(56.34978284842551, worksheet.charts_ae211, 0.002); end
  def test_charts_af211; assert_in_epsilon(56.48263422998958, worksheet.charts_af211, 0.002); end
  def test_charts_ag211; assert_in_epsilon(56.062993674503744, worksheet.charts_ag211, 0.002); end
  def test_charts_ah211; assert_in_epsilon(56.43865050923289, worksheet.charts_ah211, 0.002); end
  def test_charts_ai211; assert_in_epsilon(56.199934507252166, worksheet.charts_ai211, 0.002); end
  def test_charts_aj211; assert_in_epsilon(55.56381376596924, worksheet.charts_aj211, 0.002); end
  def test_charts_ak211; assert_in_epsilon(54.89013786342752, worksheet.charts_ak211, 0.002); end
  def test_charts_al211; assert_in_epsilon(52.89330883023328, worksheet.charts_al211, 0.002); end
  def test_charts_am211; assert_in_epsilon(50.09449175034138, worksheet.charts_am211, 0.002); end
  def test_charts_an211; assert_in_epsilon(50.07904843936754, worksheet.charts_an211, 0.002); end
  def test_charts_ao211; assert_in_epsilon(49.64648293369818, worksheet.charts_ao211, 0.002); end
  def test_charts_ap211; assert_in_epsilon(49.91256372328529, worksheet.charts_ap211, 0.002); end
  def test_charts_aq211; assert_in_epsilon(50.204852733460946, worksheet.charts_aq211, 0.002); end
  def test_charts_ar211; assert_in_epsilon(48.57347881134549, worksheet.charts_ar211, 0.002); end
  def test_charts_as211; assert_in_epsilon(47.14536110436577, worksheet.charts_as211, 0.002); end
  def test_charts_at211; assert_in_epsilon(46.49071243914793, worksheet.charts_at211, 0.002); end
  def test_charts_au211; assert_in_epsilon(45.80826374399665, worksheet.charts_au211, 0.002); end
  def test_charts_av211; assert_in_epsilon(46.20138331934621, worksheet.charts_av211, 0.002); end
  def test_charts_aw211; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw211); end
  def test_charts_ay211; assert_in_delta(0.0, (worksheet.charts_ay211||0), 0.002); end
  def test_charts_ba211; assert_in_delta(0.0, (worksheet.charts_ba211||0), 0.002); end
  def test_charts_bb211; assert_in_delta(0.0, (worksheet.charts_bb211||0), 0.002); end
  def test_charts_bc211; assert_in_delta(0.0, (worksheet.charts_bc211||0), 0.002); end
  def test_charts_bd211; assert_in_delta(0.0, (worksheet.charts_bd211||0), 0.002); end
  def test_charts_be211; assert_in_delta(0.0, (worksheet.charts_be211||0), 0.002); end
  def test_charts_bf211; assert_in_delta(0.0, (worksheet.charts_bf211||0), 0.002); end
  def test_charts_bg211; assert_in_delta(0.0, (worksheet.charts_bg211||0), 0.002); end
  def test_charts_bh211; assert_in_delta(0.0, (worksheet.charts_bh211||0), 0.002); end
  def test_charts_bi211; assert_in_delta(0.0, (worksheet.charts_bi211||0), 0.002); end
  def test_charts_c212; assert_in_epsilon(5.0, worksheet.charts_c212, 0.002); end
  def test_charts_d212; assert_equal("Land Use, Land-Use Change and Forestry", worksheet.charts_d212); end
  def test_charts_ab212; assert_in_epsilon(3.893008757281268, worksheet.charts_ab212, 0.002); end
  def test_charts_ac212; assert_in_epsilon(3.8686000622628693, worksheet.charts_ac212, 0.002); end
  def test_charts_ad212; assert_in_epsilon(3.343314741436101, worksheet.charts_ad212, 0.002); end
  def test_charts_ae212; assert_in_epsilon(2.2265845845315693, worksheet.charts_ae212, 0.002); end
  def test_charts_af212; assert_in_epsilon(2.0533141148288525, worksheet.charts_af212, 0.002); end
  def test_charts_ag212; assert_in_epsilon(2.4654776194817205, worksheet.charts_ag212, 0.002); end
  def test_charts_ah212; assert_in_epsilon(2.1813341723246857, worksheet.charts_ah212, 0.002); end
  def test_charts_ai212; assert_in_epsilon(1.920070200944781, worksheet.charts_ai212, 0.002); end
  def test_charts_aj212; assert_in_epsilon(1.2405726372813575, worksheet.charts_aj212, 0.002); end
  def test_charts_ak212; assert_in_epsilon(1.0620443971872269, worksheet.charts_ak212, 0.002); end
  def test_charts_al212; assert_in_delta(0.37726047037436505, worksheet.charts_al212, 0.002); end
  def test_charts_am212; assert_in_delta(-0.11419377707044237, worksheet.charts_am212, 0.002); end
  def test_charts_an212; assert_in_delta(-0.9345905038933172, worksheet.charts_an212, 0.002); end
  def test_charts_ao212; assert_in_epsilon(-1.2868015775516333, worksheet.charts_ao212, 0.002); end
  def test_charts_ap212; assert_in_epsilon(-2.35792234318885, worksheet.charts_ap212, 0.002); end
  def test_charts_aq212; assert_in_epsilon(-2.9449125339525444, worksheet.charts_aq212, 0.002); end
  def test_charts_ar212; assert_in_epsilon(-3.09694243630463, worksheet.charts_ar212, 0.002); end
  def test_charts_as212; assert_in_epsilon(-3.483645518036744, worksheet.charts_as212, 0.002); end
  def test_charts_at212; assert_in_epsilon(-3.882431722717277, worksheet.charts_at212, 0.002); end
  def test_charts_au212; assert_in_epsilon(-4.20782838040957, worksheet.charts_au212, 0.002); end
  def test_charts_av212; assert_in_epsilon(-3.8423973221854, worksheet.charts_av212, 0.002); end
  def test_charts_aw212; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw212); end
  def test_charts_ay212; assert_in_delta(0.0, (worksheet.charts_ay212||0), 0.002); end
  def test_charts_ba212; assert_in_delta(0.0, (worksheet.charts_ba212||0), 0.002); end
  def test_charts_bb212; assert_in_delta(0.0, (worksheet.charts_bb212||0), 0.002); end
  def test_charts_bc212; assert_in_delta(0.0, (worksheet.charts_bc212||0), 0.002); end
  def test_charts_bd212; assert_in_delta(0.0, (worksheet.charts_bd212||0), 0.002); end
  def test_charts_be212; assert_in_delta(0.0, (worksheet.charts_be212||0), 0.002); end
  def test_charts_bf212; assert_in_delta(0.0, (worksheet.charts_bf212||0), 0.002); end
  def test_charts_bg212; assert_in_delta(0.0, (worksheet.charts_bg212||0), 0.002); end
  def test_charts_bh212; assert_in_delta(0.0, (worksheet.charts_bh212||0), 0.002); end
  def test_charts_bi212; assert_in_delta(0.0, (worksheet.charts_bi212||0), 0.002); end
  def test_charts_c213; assert_in_epsilon(6.0, worksheet.charts_c213, 0.002); end
  def test_charts_d213; assert_equal("Waste", worksheet.charts_d213); end
  def test_charts_ab213; assert_in_epsilon(46.005376459169604, worksheet.charts_ab213, 0.002); end
  def test_charts_ac213; assert_in_epsilon(45.10625753555002, worksheet.charts_ac213, 0.002); end
  def test_charts_ad213; assert_in_epsilon(43.802323592142784, worksheet.charts_ad213, 0.002); end
  def test_charts_ae213; assert_in_epsilon(42.39886501728903, worksheet.charts_ae213, 0.002); end
  def test_charts_af213; assert_in_epsilon(41.17552511781319, worksheet.charts_af213, 0.002); end
  def test_charts_ag213; assert_in_epsilon(40.080722749499124, worksheet.charts_ag213, 0.002); end
  def test_charts_ah213; assert_in_epsilon(39.045211708359346, worksheet.charts_ah213, 0.002); end
  def test_charts_ai213; assert_in_epsilon(35.94620343888157, worksheet.charts_ai213, 0.002); end
  def test_charts_aj213; assert_in_epsilon(33.90394222233129, worksheet.charts_aj213, 0.002); end
  def test_charts_ak213; assert_in_epsilon(31.176954037822373, worksheet.charts_ak213, 0.002); end
  def test_charts_al213; assert_in_epsilon(29.422387452691304, worksheet.charts_al213, 0.002); end
  def test_charts_am213; assert_in_epsilon(26.000773929539882, worksheet.charts_am213, 0.002); end
  def test_charts_an213; assert_in_epsilon(23.914147643814456, worksheet.charts_an213, 0.002); end
  def test_charts_ao213; assert_in_epsilon(21.05852685080172, worksheet.charts_ao213, 0.002); end
  def test_charts_ap213; assert_in_epsilon(19.538460113710165, worksheet.charts_ap213, 0.002); end
  def test_charts_aq213; assert_in_epsilon(19.03714113686196, worksheet.charts_aq213, 0.002); end
  def test_charts_ar213; assert_in_epsilon(18.640862074715724, worksheet.charts_ar213, 0.002); end
  def test_charts_as213; assert_in_epsilon(18.27157774713009, worksheet.charts_as213, 0.002); end
  def test_charts_at213; assert_in_epsilon(17.712063346383925, worksheet.charts_at213, 0.002); end
  def test_charts_au213; assert_in_epsilon(17.198378568592883, worksheet.charts_au213, 0.002); end
  def test_charts_av213; assert_in_epsilon(16.61196186224757, worksheet.charts_av213, 0.002); end
  def test_charts_aw213; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw213); end
  def test_charts_ay213; assert_in_delta(0.0, (worksheet.charts_ay213||0), 0.002); end
  def test_charts_ba213; assert_in_delta(0.0, (worksheet.charts_ba213||0), 0.002); end
  def test_charts_bb213; assert_in_delta(0.0, (worksheet.charts_bb213||0), 0.002); end
  def test_charts_bc213; assert_in_delta(0.0, (worksheet.charts_bc213||0), 0.002); end
  def test_charts_bd213; assert_in_delta(0.0, (worksheet.charts_bd213||0), 0.002); end
  def test_charts_be213; assert_in_delta(0.0, (worksheet.charts_be213||0), 0.002); end
  def test_charts_bf213; assert_in_delta(0.0, (worksheet.charts_bf213||0), 0.002); end
  def test_charts_bg213; assert_in_delta(0.0, (worksheet.charts_bg213||0), 0.002); end
  def test_charts_bh213; assert_in_delta(0.0, (worksheet.charts_bh213||0), 0.002); end
  def test_charts_bi213; assert_in_delta(0.0, (worksheet.charts_bi213||0), 0.002); end
  def test_charts_c214; assert_in_epsilon(7.0, worksheet.charts_c214, 0.002); end
  def test_charts_d214; assert_equal("Other", worksheet.charts_d214); end
  def test_charts_ab214; assert_equal("NA", worksheet.charts_ab214); end
  def test_charts_ac214; assert_equal("NA", worksheet.charts_ac214); end
  def test_charts_ad214; assert_equal("NA", worksheet.charts_ad214); end
  def test_charts_ae214; assert_equal("NA", worksheet.charts_ae214); end
  def test_charts_af214; assert_equal("NA", worksheet.charts_af214); end
  def test_charts_ag214; assert_equal("NA", worksheet.charts_ag214); end
  def test_charts_ah214; assert_equal("NA", worksheet.charts_ah214); end
  def test_charts_ai214; assert_equal("NA", worksheet.charts_ai214); end
  def test_charts_aj214; assert_equal("NA", worksheet.charts_aj214); end
  def test_charts_ak214; assert_equal("NA", worksheet.charts_ak214); end
  def test_charts_al214; assert_equal("NA", worksheet.charts_al214); end
  def test_charts_am214; assert_equal("NA", worksheet.charts_am214); end
  def test_charts_an214; assert_equal("NA", worksheet.charts_an214); end
  def test_charts_ao214; assert_equal("NA", worksheet.charts_ao214); end
  def test_charts_ap214; assert_equal("NA", worksheet.charts_ap214); end
  def test_charts_aq214; assert_equal("NA", worksheet.charts_aq214); end
  def test_charts_ar214; assert_equal("NA", worksheet.charts_ar214); end
  def test_charts_as214; assert_equal("NA", worksheet.charts_as214); end
  def test_charts_at214; assert_equal("NA", worksheet.charts_at214); end
  def test_charts_au214; assert_equal("NA", worksheet.charts_au214); end
  def test_charts_av214; assert_equal("NA", worksheet.charts_av214); end
  def test_charts_aw214; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw214); end
  def test_charts_ay214; assert_in_delta(0.0, (worksheet.charts_ay214||0), 0.002); end
  def test_charts_ba214; assert_in_delta(0.0, (worksheet.charts_ba214||0), 0.002); end
  def test_charts_bb214; assert_in_delta(0.0, (worksheet.charts_bb214||0), 0.002); end
  def test_charts_bc214; assert_in_delta(0.0, (worksheet.charts_bc214||0), 0.002); end
  def test_charts_bd214; assert_in_delta(0.0, (worksheet.charts_bd214||0), 0.002); end
  def test_charts_be214; assert_in_delta(0.0, (worksheet.charts_be214||0), 0.002); end
  def test_charts_bf214; assert_in_delta(0.0, (worksheet.charts_bf214||0), 0.002); end
  def test_charts_bg214; assert_in_delta(0.0, (worksheet.charts_bg214||0), 0.002); end
  def test_charts_bh214; assert_in_delta(0.0, (worksheet.charts_bh214||0), 0.002); end
  def test_charts_bi214; assert_in_delta(0.0, (worksheet.charts_bi214||0), 0.002); end
  def test_charts_c215; assert_equal("X1", worksheet.charts_c215); end
  def test_charts_d215; assert_equal("International Aviation and Shipping", worksheet.charts_d215); end
  def test_charts_ab215; assert_in_delta(0.0, (worksheet.charts_ab215||0), 0.002); end
  def test_charts_ac215; assert_in_delta(0.0, (worksheet.charts_ac215||0), 0.002); end
  def test_charts_ad215; assert_in_delta(0.0, (worksheet.charts_ad215||0), 0.002); end
  def test_charts_ae215; assert_in_delta(0.0, (worksheet.charts_ae215||0), 0.002); end
  def test_charts_af215; assert_in_delta(0.0, (worksheet.charts_af215||0), 0.002); end
  def test_charts_ag215; assert_in_delta(0.0, (worksheet.charts_ag215||0), 0.002); end
  def test_charts_ah215; assert_in_delta(0.0, (worksheet.charts_ah215||0), 0.002); end
  def test_charts_ai215; assert_in_delta(0.0, (worksheet.charts_ai215||0), 0.002); end
  def test_charts_aj215; assert_in_delta(0.0, (worksheet.charts_aj215||0), 0.002); end
  def test_charts_ak215; assert_in_delta(0.0, (worksheet.charts_ak215||0), 0.002); end
  def test_charts_al215; assert_in_delta(0.0, (worksheet.charts_al215||0), 0.002); end
  def test_charts_am215; assert_in_delta(0.0, (worksheet.charts_am215||0), 0.002); end
  def test_charts_an215; assert_in_delta(0.0, (worksheet.charts_an215||0), 0.002); end
  def test_charts_ao215; assert_in_delta(0.0, (worksheet.charts_ao215||0), 0.002); end
  def test_charts_ap215; assert_in_delta(0.0, (worksheet.charts_ap215||0), 0.002); end
  def test_charts_aq215; assert_in_delta(0.0, (worksheet.charts_aq215||0), 0.002); end
  def test_charts_ar215; assert_in_delta(0.0, (worksheet.charts_ar215||0), 0.002); end
  def test_charts_aw215; assert_equal("Calculation", worksheet.charts_aw215); end
  def test_charts_ay215; assert_in_delta(0.0, (worksheet.charts_ay215||0), 0.002); end
  def test_charts_ba215; assert_in_delta(0.0, (worksheet.charts_ba215||0), 0.002); end
  def test_charts_bb215; assert_in_delta(0.0, (worksheet.charts_bb215||0), 0.002); end
  def test_charts_bc215; assert_in_delta(0.0, (worksheet.charts_bc215||0), 0.002); end
  def test_charts_bd215; assert_in_delta(0.0, (worksheet.charts_bd215||0), 0.002); end
  def test_charts_be215; assert_in_delta(0.0, (worksheet.charts_be215||0), 0.002); end
  def test_charts_bf215; assert_in_delta(0.0, (worksheet.charts_bf215||0), 0.002); end
  def test_charts_bg215; assert_in_delta(0.0, (worksheet.charts_bg215||0), 0.002); end
  def test_charts_bh215; assert_in_delta(0.0, (worksheet.charts_bh215||0), 0.002); end
  def test_charts_bi215; assert_in_delta(0.0, (worksheet.charts_bi215||0), 0.002); end
  def test_charts_c216; assert_equal("X2", worksheet.charts_c216); end
  def test_charts_d216; assert_equal("Bioenergy credit", worksheet.charts_d216); end
  def test_charts_ab216; assert_in_delta(0.0, (worksheet.charts_ab216||0), 0.002); end
  def test_charts_ac216; assert_in_delta(0.0, (worksheet.charts_ac216||0), 0.002); end
  def test_charts_ad216; assert_in_delta(0.0, (worksheet.charts_ad216||0), 0.002); end
  def test_charts_ae216; assert_in_delta(0.0, (worksheet.charts_ae216||0), 0.002); end
  def test_charts_af216; assert_in_delta(0.0, (worksheet.charts_af216||0), 0.002); end
  def test_charts_ag216; assert_in_delta(0.0, (worksheet.charts_ag216||0), 0.002); end
  def test_charts_ah216; assert_in_delta(0.0, (worksheet.charts_ah216||0), 0.002); end
  def test_charts_ai216; assert_in_delta(0.0, (worksheet.charts_ai216||0), 0.002); end
  def test_charts_aj216; assert_in_delta(0.0, (worksheet.charts_aj216||0), 0.002); end
  def test_charts_ak216; assert_in_delta(0.0, (worksheet.charts_ak216||0), 0.002); end
  def test_charts_al216; assert_in_delta(0.0, (worksheet.charts_al216||0), 0.002); end
  def test_charts_am216; assert_in_delta(0.0, (worksheet.charts_am216||0), 0.002); end
  def test_charts_an216; assert_in_delta(0.0, (worksheet.charts_an216||0), 0.002); end
  def test_charts_ao216; assert_in_delta(0.0, (worksheet.charts_ao216||0), 0.002); end
  def test_charts_ap216; assert_in_delta(0.0, (worksheet.charts_ap216||0), 0.002); end
  def test_charts_aq216; assert_in_delta(0.0, (worksheet.charts_aq216||0), 0.002); end
  def test_charts_ar216; assert_in_delta(0.0, (worksheet.charts_ar216||0), 0.002); end
  def test_charts_as216; assert_in_delta(0.0, (worksheet.charts_as216||0), 0.002); end
  def test_charts_at216; assert_in_delta(0.0, (worksheet.charts_at216||0), 0.002); end
  def test_charts_au216; assert_in_delta(0.0, (worksheet.charts_au216||0), 0.002); end
  def test_charts_av216; assert_in_delta(0.0, (worksheet.charts_av216||0), 0.002); end
  def test_charts_aw216; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw216); end
  def test_charts_ay216; assert_in_delta(0.0, (worksheet.charts_ay216||0), 0.002); end
  def test_charts_ba216; assert_in_delta(0.0, (worksheet.charts_ba216||0), 0.002); end
  def test_charts_bb216; assert_in_delta(0.0, (worksheet.charts_bb216||0), 0.002); end
  def test_charts_bc216; assert_in_delta(0.0, (worksheet.charts_bc216||0), 0.002); end
  def test_charts_bd216; assert_in_delta(0.0, (worksheet.charts_bd216||0), 0.002); end
  def test_charts_be216; assert_in_delta(0.0, (worksheet.charts_be216||0), 0.002); end
  def test_charts_bf216; assert_in_delta(0.0, (worksheet.charts_bf216||0), 0.002); end
  def test_charts_bg216; assert_in_delta(0.0, (worksheet.charts_bg216||0), 0.002); end
  def test_charts_bh216; assert_in_delta(0.0, (worksheet.charts_bh216||0), 0.002); end
  def test_charts_bi216; assert_in_delta(0.0, (worksheet.charts_bi216||0), 0.002); end
  def test_charts_c217; assert_equal("X3", worksheet.charts_c217); end
  def test_charts_d217; assert_equal("Carbon capture", worksheet.charts_d217); end
  def test_charts_ab217; assert_in_delta(0.0, (worksheet.charts_ab217||0), 0.002); end
  def test_charts_ac217; assert_in_delta(0.0, (worksheet.charts_ac217||0), 0.002); end
  def test_charts_ad217; assert_in_delta(0.0, (worksheet.charts_ad217||0), 0.002); end
  def test_charts_ae217; assert_in_delta(0.0, (worksheet.charts_ae217||0), 0.002); end
  def test_charts_af217; assert_in_delta(0.0, (worksheet.charts_af217||0), 0.002); end
  def test_charts_ag217; assert_in_delta(0.0, (worksheet.charts_ag217||0), 0.002); end
  def test_charts_ah217; assert_in_delta(0.0, (worksheet.charts_ah217||0), 0.002); end
  def test_charts_ai217; assert_in_delta(0.0, (worksheet.charts_ai217||0), 0.002); end
  def test_charts_aj217; assert_in_delta(0.0, (worksheet.charts_aj217||0), 0.002); end
  def test_charts_ak217; assert_in_delta(0.0, (worksheet.charts_ak217||0), 0.002); end
  def test_charts_al217; assert_in_delta(0.0, (worksheet.charts_al217||0), 0.002); end
  def test_charts_am217; assert_in_delta(0.0, (worksheet.charts_am217||0), 0.002); end
  def test_charts_an217; assert_in_delta(0.0, (worksheet.charts_an217||0), 0.002); end
  def test_charts_ao217; assert_in_delta(0.0, (worksheet.charts_ao217||0), 0.002); end
  def test_charts_ap217; assert_in_delta(0.0, (worksheet.charts_ap217||0), 0.002); end
  def test_charts_aq217; assert_in_delta(0.0, (worksheet.charts_aq217||0), 0.002); end
  def test_charts_ar217; assert_in_delta(0.0, (worksheet.charts_ar217||0), 0.002); end
  def test_charts_as217; assert_in_delta(0.0, (worksheet.charts_as217||0), 0.002); end
  def test_charts_at217; assert_in_delta(0.0, (worksheet.charts_at217||0), 0.002); end
  def test_charts_au217; assert_in_delta(0.0, (worksheet.charts_au217||0), 0.002); end
  def test_charts_av217; assert_in_delta(0.0, (worksheet.charts_av217||0), 0.002); end
  def test_charts_aw217; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.charts_aw217); end
  def test_charts_ay217; assert_in_delta(0.0, (worksheet.charts_ay217||0), 0.002); end
  def test_charts_ba217; assert_in_delta(0.0, (worksheet.charts_ba217||0), 0.002); end
  def test_charts_bb217; assert_in_delta(0.0, (worksheet.charts_bb217||0), 0.002); end
  def test_charts_bc217; assert_in_delta(0.0, (worksheet.charts_bc217||0), 0.002); end
  def test_charts_bd217; assert_in_delta(0.0, (worksheet.charts_bd217||0), 0.002); end
  def test_charts_be217; assert_in_epsilon(-5.990217822580646, worksheet.charts_be217, 0.002); end
  def test_charts_bf217; assert_in_epsilon(-11.98043564516129, worksheet.charts_bf217, 0.002); end
  def test_charts_bg217; assert_in_epsilon(-29.04348035190616, worksheet.charts_bg217, 0.002); end
  def test_charts_bh217; assert_in_epsilon(-40.660872492668624, worksheet.charts_bh217, 0.002); end
  def test_charts_bi217; assert_in_epsilon(-56.37852068311195, worksheet.charts_bi217, 0.002); end
  def test_charts_d218; assert_equal("Total", worksheet.charts_d218); end
  def test_charts_ab218; assert_in_epsilon(795.9357218212427, worksheet.charts_ab218, 0.002); end
  def test_charts_ac218; assert_in_epsilon(802.4755376560646, worksheet.charts_ac218, 0.002); end
  def test_charts_ad218; assert_in_epsilon(780.6853453672503, worksheet.charts_ad218, 0.002); end
  def test_charts_ae218; assert_in_epsilon(759.520352486888, worksheet.charts_ae218, 0.002); end
  def test_charts_af218; assert_in_epsilon(747.789442305871, worksheet.charts_af218, 0.002); end
  def test_charts_ag218; assert_in_epsilon(740.8889166508336, worksheet.charts_ag218, 0.002); end
  def test_charts_ah218; assert_in_epsilon(763.8906551933961, worksheet.charts_ah218, 0.002); end
  def test_charts_ai218; assert_in_epsilon(740.013886608237, worksheet.charts_ai218, 0.002); end
  def test_charts_aj218; assert_in_epsilon(739.9402055350414, worksheet.charts_aj218, 0.002); end
  def test_charts_ak218; assert_in_epsilon(708.0013598494589, worksheet.charts_ak218, 0.002); end
  def test_charts_al218; assert_in_epsilon(711.5094018571616, worksheet.charts_al218, 0.002); end
  def test_charts_am218; assert_in_epsilon(715.304303200507, worksheet.charts_am218, 0.002); end
  def test_charts_an218; assert_in_epsilon(691.7660822271035, worksheet.charts_an218, 0.002); end
  def test_charts_ao218; assert_in_epsilon(697.8282169304625, worksheet.charts_ao218, 0.002); end
  def test_charts_ap218; assert_in_epsilon(700.4521828746699, worksheet.charts_ap218, 0.002); end
  def test_charts_aq218; assert_in_epsilon(698.3081366655189, worksheet.charts_aq218, 0.002); end
  def test_charts_ar218; assert_in_epsilon(696.6613392795155, worksheet.charts_ar218, 0.002); end
  def test_charts_ay218; assert_in_epsilon(1179.6635504223545, worksheet.charts_ay218, 0.002); end
  def test_charts_ba218; assert_in_epsilon(1542.1465709234317, worksheet.charts_ba218, 0.002); end
  def test_charts_bb218; assert_in_epsilon(2147.77722868036, worksheet.charts_bb218, 0.002); end
  def test_charts_bc218; assert_in_epsilon(3123.058390172522, worksheet.charts_bc218, 0.002); end
  def test_charts_bd218; assert_in_epsilon(4334.544426933733, worksheet.charts_bd218, 0.002); end
  def test_charts_be218; assert_in_epsilon(6016.509025705211, worksheet.charts_be218, 0.002); end
  def test_charts_bf218; assert_in_epsilon(7414.77985239841, worksheet.charts_bf218, 0.002); end
  def test_charts_bg218; assert_in_epsilon(9047.953791328353, worksheet.charts_bg218, 0.002); end
  def test_charts_bh218; assert_in_epsilon(10599.390970846289, worksheet.charts_bh218, 0.002); end
  def test_charts_bi218; assert_in_epsilon(12325.270741233002, worksheet.charts_bi218, 0.002); end
  def test_charts_bj218; assert_equal("REFERENCED - All costs", worksheet.charts_bj218); end
  def test_charts_c223; assert_equal("Please note: emissions by sector need to account for bio-energy, which is accounted for seperately (in V). ", worksheet.charts_c223); end
  def test_charts_c224; assert_equal("Cumulative emissions are estimates based on a linear trajectory between the 5 year time periods", worksheet.charts_c224); end
  def test_charts_c227; assert_equal("Targets", worksheet.charts_c227); end
  def test_charts_ay227; assert_equal("2052 target", worksheet.charts_ay227); end
  def test_charts_ba227; assert_equal("2020 target ", worksheet.charts_ba227); end
  def test_charts_bc227; assert_equal("2052 target", worksheet.charts_bc227); end
  def test_charts_bd227; assert_equal("2020 target", worksheet.charts_bd227); end
  def test_charts_bf227; assert_equal("Actuals, as % of 2007, modelled", worksheet.charts_bf227); end
  def test_charts_f228; assert_equal("Base year (1990)", worksheet.charts_f228); end
  def test_charts_ay228; assert_equal("(20% of base)", worksheet.charts_ay228); end
  def test_charts_ba228; assert_equal("(66% of base)", worksheet.charts_ba228); end
  def test_charts_bc228; assert_equal("% of 2007", worksheet.charts_bc228); end
  def test_charts_bd228; assert_equal("% of 2007", worksheet.charts_bd228); end
  def test_charts_bg228; assert_in_epsilon(2020.0, worksheet.charts_bg228, 0.002); end
  def test_charts_bh228; assert_in_epsilon(2030.0, worksheet.charts_bh228, 0.002); end
  def test_charts_bi228; assert_in_epsilon(2050.0, worksheet.charts_bi228, 0.002); end
  def test_charts_d229; assert_equal("Kyoto agreed sectors", worksheet.charts_d229); end
  def test_charts_d230; assert_equal("International bunkers (CO2 only)", worksheet.charts_d230); end
  def test_charts_d231; assert_equal("Total", worksheet.charts_d231); end
  def test_charts_d232; assert_equal("Target, for chart", worksheet.charts_d232); end
  def test_charts_d233; assert_equal("Dummy, for chart", worksheet.charts_d233); end
  def test_charts_ay233; assert_in_delta(0.0, (worksheet.charts_ay233||0), 0.002); end
  def test_charts_ba233; assert_in_delta(0.0, (worksheet.charts_ba233||0), 0.002); end
  def test_charts_bb233; assert_in_delta(0.0, (worksheet.charts_bb233||0), 0.002); end
  def test_charts_bc233; assert_in_delta(0.0, (worksheet.charts_bc233||0), 0.002); end
  def test_charts_bd233; assert_in_delta(0.0, (worksheet.charts_bd233||0), 0.002); end
  def test_charts_be233; assert_in_delta(0.0, (worksheet.charts_be233||0), 0.002); end
  def test_charts_bf233; assert_in_delta(0.0, (worksheet.charts_bf233||0), 0.002); end
  def test_charts_bg233; assert_in_delta(0.0, (worksheet.charts_bg233||0), 0.002); end
  def test_charts_bh233; assert_in_delta(0.0, (worksheet.charts_bh233||0), 0.002); end
  def test_charts_bi233; assert_in_delta(0.0, (worksheet.charts_bi233||0), 0.002); end
  def test_charts_b236; assert_equal("Bio-energy - Production and Use", worksheet.charts_b236); end
  def test_charts_b238; assert_equal("Production", worksheet.charts_b238); end
  def test_charts_c240; assert_equal("Domestic", worksheet.charts_c240); end
  def test_charts_ay240; assert_in_epsilon(2007.0, worksheet.charts_ay240, 0.002); end
  def test_charts_ba240; assert_in_epsilon(2012.0, worksheet.charts_ba240, 0.002); end
  def test_charts_bb240; assert_in_epsilon(2017.0, worksheet.charts_bb240, 0.002); end
  def test_charts_bc240; assert_in_epsilon(2022.0, worksheet.charts_bc240, 0.002); end
  def test_charts_bd240; assert_in_epsilon(2027.0, worksheet.charts_bd240, 0.002); end
  def test_charts_be240; assert_in_epsilon(2032.0, worksheet.charts_be240, 0.002); end
  def test_charts_bf240; assert_in_epsilon(2037.0, worksheet.charts_bf240, 0.002); end
  def test_charts_bg240; assert_in_epsilon(2042.0, worksheet.charts_bg240, 0.002); end
  def test_charts_bh240; assert_in_epsilon(2047.0, worksheet.charts_bh240, 0.002); end
  def test_charts_bi240; assert_in_epsilon(2052.0, worksheet.charts_bi240, 0.002); end
  def test_charts_c241; assert_equal("V.a", worksheet.charts_c241); end
  def test_charts_d241; assert_equal("V.03", worksheet.charts_d241); end
  def test_charts_e241; assert_equal("Solid hydrocarbons", worksheet.charts_e241); end
  def test_charts_aj241; assert_in_epsilon(11.2811, worksheet.charts_aj241, 0.002); end
  def test_charts_ak241; assert_in_epsilon(11.5128859, worksheet.charts_ak241, 0.002); end
  def test_charts_al241; assert_in_epsilon(9.9829594, worksheet.charts_al241, 0.002); end
  def test_charts_am241; assert_in_epsilon(10.7253023, worksheet.charts_am241, 0.002); end
  def test_charts_an241; assert_in_epsilon(11.7831671, worksheet.charts_an241, 0.002); end
  def test_charts_ao241; assert_in_epsilon(11.9234249, worksheet.charts_ao241, 0.002); end
  def test_charts_ap241; assert_in_epsilon(8.2292717, worksheet.charts_ap241, 0.002); end
  def test_charts_aq241; assert_in_epsilon(13.56519449, worksheet.charts_aq241, 0.002); end
  def test_charts_ar241; assert_in_epsilon(13.10799238, worksheet.charts_ar241, 0.002); end
  def test_charts_as241; assert_in_epsilon(14.11044992, worksheet.charts_as241, 0.002); end
  def test_charts_at241; assert_in_epsilon(15.68101481, worksheet.charts_at241, 0.002); end
  def test_charts_au241; assert_in_epsilon(18.7866056, worksheet.charts_au241, 0.002); end
  def test_charts_av241; assert_in_epsilon(19.95985165, worksheet.charts_av241, 0.002); end
  def test_charts_aw241; assert_equal("DUKES - Commodity balances, production of wood waste, wood, poultry litter, meal and bone, and farm waste, and straw, SRC, and other plant-based biomass ", worksheet.charts_aw241); end
  def test_charts_c242; assert_equal("V.a", worksheet.charts_c242); end
  def test_charts_d242; assert_equal("V.04", worksheet.charts_d242); end
  def test_charts_e242; assert_equal("Liquid hydrocarbons", worksheet.charts_e242); end
  def test_charts_aj242; assert_in_delta(0.0, (worksheet.charts_aj242||0), 0.002); end
  def test_charts_ak242; assert_in_delta(0.0, (worksheet.charts_ak242||0), 0.002); end
  def test_charts_al242; assert_in_delta(0.0, (worksheet.charts_al242||0), 0.002); end
  def test_charts_am242; assert_in_delta(0.0, (worksheet.charts_am242||0), 0.002); end
  def test_charts_an242; assert_in_delta(0.0, (worksheet.charts_an242||0), 0.002); end
  def test_charts_ao242; assert_in_delta(0.0, (worksheet.charts_ao242||0), 0.002); end
  def test_charts_ap242; assert_in_delta(0.0, (worksheet.charts_ap242||0), 0.002); end
  def test_charts_aq242; assert_in_delta(0.09313615, worksheet.charts_aq242, 0.002); end
  def test_charts_ar242; assert_in_epsilon(2.691796244, worksheet.charts_ar242, 0.002); end
  def test_charts_as242; assert_in_epsilon(4.599912358, worksheet.charts_as242, 0.002); end
  def test_charts_at242; assert_in_epsilon(3.516727083, worksheet.charts_at242, 0.002); end
  def test_charts_au242; assert_in_epsilon(2.629156279, worksheet.charts_au242, 0.002); end
  def test_charts_av242; assert_in_epsilon(3.539047787, worksheet.charts_av242, 0.002); end
  def test_charts_aw242; assert_equal("DUKES - Commodity balances, production of liquid biofuels", worksheet.charts_aw242); end
  def test_charts_c243; assert_equal("V.a", worksheet.charts_c243); end
  def test_charts_d243; assert_equal("V.05", worksheet.charts_d243); end
  def test_charts_e243; assert_equal("Gaseous hydrocarbons", worksheet.charts_e243); end
  def test_charts_aj243; assert_in_epsilon(4.679912, worksheet.charts_aj243, 0.002); end
  def test_charts_ak243; assert_in_epsilon(6.65236, worksheet.charts_ak243, 0.002); end
  def test_charts_al243; assert_in_epsilon(8.5030419, worksheet.charts_al243, 0.002); end
  def test_charts_am243; assert_in_epsilon(9.7205866, worksheet.charts_am243, 0.002); end
  def test_charts_an243; assert_in_epsilon(10.375123, worksheet.charts_an243, 0.002); end
  def test_charts_ao243; assert_in_epsilon(12.654603, worksheet.charts_ao243, 0.002); end
  def test_charts_ap243; assert_in_epsilon(17.4844257, worksheet.charts_ap243, 0.002); end
  def test_charts_aq243; assert_in_epsilon(18.91593462, worksheet.charts_aq243, 0.002); end
  def test_charts_ar243; assert_in_epsilon(19.24482717, worksheet.charts_ar243, 0.002); end
  def test_charts_as243; assert_in_epsilon(20.29461125, worksheet.charts_as243, 0.002); end
  def test_charts_at243; assert_in_epsilon(20.91263605, worksheet.charts_at243, 0.002); end
  def test_charts_au243; assert_in_epsilon(21.92331406, worksheet.charts_au243, 0.002); end
  def test_charts_av243; assert_in_epsilon(22.89564828, worksheet.charts_av243, 0.002); end
  def test_charts_aw243; assert_equal("DUKES - Commodity balances, production of sewage gas and landfill gas", worksheet.charts_aw243); end
  def test_charts_ay243; assert_in_epsilon(9.177777777777777, worksheet.charts_ay243, 0.002); end
  def test_charts_ba243; assert_in_epsilon(10.305777777777783, worksheet.charts_ba243, 0.002); end
  def test_charts_bb243; assert_in_epsilon(11.34601666666667, worksheet.charts_bb243, 0.002); end
  def test_charts_bc243; assert_in_epsilon(12.38625555555556, worksheet.charts_bc243, 0.002); end
  def test_charts_bd243; assert_in_epsilon(13.426494444444447, worksheet.charts_bd243, 0.002); end
  def test_charts_be243; assert_in_epsilon(14.466733333333337, worksheet.charts_be243, 0.002); end
  def test_charts_bf243; assert_in_epsilon(14.832036478670412, worksheet.charts_bf243, 0.002); end
  def test_charts_bg243; assert_in_epsilon(15.206563986198885, worksheet.charts_bg243, 0.002); end
  def test_charts_bh243; assert_in_epsilon(15.590548782623422, worksheet.charts_bh243, 0.002); end
  def test_charts_bi243; assert_in_epsilon(15.984229676339865, worksheet.charts_bi243, 0.002); end
  def test_charts_c245; assert_equal("Domestic", worksheet.charts_c245); end
  def test_charts_c246; assert_equal("V.b", worksheet.charts_c246); end
  def test_charts_d246; assert_equal("V.03", worksheet.charts_d246); end
  def test_charts_e246; assert_equal("Solid hydrocarbons", worksheet.charts_e246); end
  def test_charts_aj246; assert_in_delta(0.0, (worksheet.charts_aj246||0), 0.002); end
  def test_charts_ak246; assert_in_delta(0.0, (worksheet.charts_ak246||0), 0.002); end
  def test_charts_al246; assert_in_delta(0.0, (worksheet.charts_al246||0), 0.002); end
  def test_charts_am246; assert_in_delta(0.0, (worksheet.charts_am246||0), 0.002); end
  def test_charts_an246; assert_in_delta(0.0, (worksheet.charts_an246||0), 0.002); end
  def test_charts_ao246; assert_in_epsilon(1.2843009, worksheet.charts_ao246, 0.002); end
  def test_charts_ap246; assert_in_epsilon(4.67526, worksheet.charts_ap246, 0.002); end
  def test_charts_aq246; assert_in_epsilon(4.89331583, worksheet.charts_aq246, 0.002); end
  def test_charts_ar246; assert_in_epsilon(5.78000326, worksheet.charts_ar246, 0.002); end
  def test_charts_as246; assert_in_epsilon(4.398455251, worksheet.charts_as246, 0.002); end
  def test_charts_at246; assert_in_epsilon(5.033138643, worksheet.charts_at246, 0.002); end
  def test_charts_au246; assert_in_epsilon(4.917245238, worksheet.charts_au246, 0.002); end
  def test_charts_av246; assert_in_epsilon(8.756573386, worksheet.charts_av246, 0.002); end
  def test_charts_aw246; assert_equal("DUKES - Commodity balances, imports of wood waste, wood, poultry litter, meal and bone, and farm waste, and straw, SRC, and other plant-based biomass ", worksheet.charts_aw246); end
  def test_charts_c247; assert_equal("V.b", worksheet.charts_c247); end
  def test_charts_d247; assert_equal("V.04", worksheet.charts_d247); end
  def test_charts_e247; assert_equal("Liquid hydrocarbons", worksheet.charts_e247); end
  def test_charts_aj247; assert_in_delta(0.0, (worksheet.charts_aj247||0), 0.002); end
  def test_charts_ak247; assert_in_delta(0.0, (worksheet.charts_ak247||0), 0.002); end
  def test_charts_al247; assert_in_delta(0.0, (worksheet.charts_al247||0), 0.002); end
  def test_charts_am247; assert_in_delta(0.0, (worksheet.charts_am247||0), 0.002); end
  def test_charts_an247; assert_in_delta(0.0, (worksheet.charts_an247||0), 0.002); end
  def test_charts_ao247; assert_in_delta(0.0, (worksheet.charts_ao247||0), 0.002); end
  def test_charts_ap247; assert_in_delta(0.0, (worksheet.charts_ap247||0), 0.002); end
  def test_charts_aq247; assert_in_delta(0.768079488, worksheet.charts_aq247, 0.002); end
  def test_charts_ar247; assert_in_delta(0.621433135, worksheet.charts_ar247, 0.002); end
  def test_charts_as247; assert_in_delta(0.883831113, worksheet.charts_as247, 0.002); end
  def test_charts_at247; assert_in_epsilon(6.362225731, worksheet.charts_at247, 0.002); end
  def test_charts_au247; assert_in_epsilon(9.448472566, worksheet.charts_au247, 0.002); end
  def test_charts_av247; assert_in_epsilon(11.52719409, worksheet.charts_av247, 0.002); end
  def test_charts_aw247; assert_equal("DUKES - Commodity balances, imports of liquid biofuels", worksheet.charts_aw247); end
  def test_charts_ay247; assert_in_delta(0.0, (worksheet.charts_ay247||0), 0.002); end
  def test_charts_ba247; assert_in_delta(0.13142242804166665, worksheet.charts_ba247, 0.002); end
  def test_charts_bb247; assert_in_epsilon(3.0140876139388606, worksheet.charts_bb247, 0.002); end
  def test_charts_bc247; assert_in_epsilon(6.640349805567526, worksheet.charts_bc247, 0.002); end
  def test_charts_bd247; assert_in_epsilon(11.174550655547504, worksheet.charts_bd247, 0.002); end
  def test_charts_be247; assert_in_epsilon(16.858011722794185, worksheet.charts_be247, 0.002); end
  def test_charts_bf247; assert_in_epsilon(23.81237420320716, worksheet.charts_bf247, 0.002); end
  def test_charts_bg247; assert_in_epsilon(32.28279205089418, worksheet.charts_bg247, 0.002); end
  def test_charts_bh247; assert_in_epsilon(42.4432602465375, worksheet.charts_bh247, 0.002); end
  def test_charts_bi247; assert_in_epsilon(54.65693393750001, worksheet.charts_bi247, 0.002); end
  def test_charts_c248; assert_equal("V.b", worksheet.charts_c248); end
  def test_charts_d248; assert_equal("V.05", worksheet.charts_d248); end
  def test_charts_e248; assert_equal("Gaseous hydrocarbons", worksheet.charts_e248); end
  def test_charts_aj248; assert_in_delta(0.0, (worksheet.charts_aj248||0), 0.002); end
  def test_charts_ak248; assert_in_delta(0.0, (worksheet.charts_ak248||0), 0.002); end
  def test_charts_al248; assert_in_delta(0.0, (worksheet.charts_al248||0), 0.002); end
  def test_charts_am248; assert_in_delta(0.0, (worksheet.charts_am248||0), 0.002); end
  def test_charts_an248; assert_in_delta(0.0, (worksheet.charts_an248||0), 0.002); end
  def test_charts_ao248; assert_in_delta(0.0, (worksheet.charts_ao248||0), 0.002); end
  def test_charts_ap248; assert_in_delta(0.0, (worksheet.charts_ap248||0), 0.002); end
  def test_charts_aq248; assert_in_delta(0.0, (worksheet.charts_aq248||0), 0.002); end
  def test_charts_ar248; assert_in_delta(0.0, (worksheet.charts_ar248||0), 0.002); end
  def test_charts_as248; assert_in_delta(0.0, (worksheet.charts_as248||0), 0.002); end
  def test_charts_at248; assert_in_delta(0.0, (worksheet.charts_at248||0), 0.002); end
  def test_charts_au248; assert_in_delta(0.0, (worksheet.charts_au248||0), 0.002); end
  def test_charts_av248; assert_in_delta(0.0, (worksheet.charts_av248||0), 0.002); end
  def test_charts_aw248; assert_equal("DUKES - Commodity balances, imports of sewage gas and landfill gas", worksheet.charts_aw248); end
  def test_charts_c250; assert_equal("Domestic", worksheet.charts_c250); end
  def test_charts_c251; assert_equal("V.e", worksheet.charts_c251); end
  def test_charts_d251; assert_equal("V.03", worksheet.charts_d251); end
  def test_charts_e251; assert_equal("Solid hydrocarbons", worksheet.charts_e251); end
  def test_charts_aj251; assert_in_epsilon(11.2811, worksheet.charts_aj251, 0.002); end
  def test_charts_ak251; assert_in_epsilon(11.5128859, worksheet.charts_ak251, 0.002); end
  def test_charts_al251; assert_in_epsilon(9.9829594, worksheet.charts_al251, 0.002); end
  def test_charts_am251; assert_in_epsilon(10.7253023, worksheet.charts_am251, 0.002); end
  def test_charts_an251; assert_in_epsilon(11.7831671, worksheet.charts_an251, 0.002); end
  def test_charts_ao251; assert_in_epsilon(13.2077258, worksheet.charts_ao251, 0.002); end
  def test_charts_ap251; assert_in_epsilon(12.9045317, worksheet.charts_ap251, 0.002); end
  def test_charts_aq251; assert_in_epsilon(18.45851032, worksheet.charts_aq251, 0.002); end
  def test_charts_ar251; assert_in_epsilon(18.88799564, worksheet.charts_ar251, 0.002); end
  def test_charts_as251; assert_in_epsilon(18.50890517, worksheet.charts_as251, 0.002); end
  def test_charts_at251; assert_in_epsilon(20.71415345, worksheet.charts_at251, 0.002); end
  def test_charts_au251; assert_in_epsilon(23.70385084, worksheet.charts_au251, 0.002); end
  def test_charts_av251; assert_in_epsilon(28.71642504, worksheet.charts_av251, 0.002); end
  def test_charts_aw251; assert_equal("Calculation", worksheet.charts_aw251); end
  def test_charts_ay251; assert_in_epsilon(937.2335555555555, worksheet.charts_ay251, 0.002); end
  def test_charts_ba251; assert_in_epsilon(948.4098, worksheet.charts_ba251, 0.002); end
  def test_charts_bb251; assert_in_epsilon(947.5049146476287, worksheet.charts_bb251, 0.002); end
  def test_charts_bc251; assert_in_epsilon(946.6398667230644, worksheet.charts_bc251, 0.002); end
  def test_charts_bd251; assert_in_epsilon(945.8150561972723, worksheet.charts_bd251, 0.002); end
  def test_charts_be251; assert_in_epsilon(945.0308870569582, worksheet.charts_be251, 0.002); end
  def test_charts_bf251; assert_in_epsilon(944.2877673448872, worksheet.charts_bf251, 0.002); end
  def test_charts_bg251; assert_in_epsilon(939.9734500000004, worksheet.charts_bg251, 0.002); end
  def test_charts_bh251; assert_in_epsilon(935.1007250000002, worksheet.charts_bh251, 0.002); end
  def test_charts_bi251; assert_in_epsilon(930.2280000000001, worksheet.charts_bi251, 0.002); end
  def test_charts_c252; assert_equal("V.e", worksheet.charts_c252); end
  def test_charts_d252; assert_equal("V.04", worksheet.charts_d252); end
  def test_charts_e252; assert_equal("Liquid hydrocarbons", worksheet.charts_e252); end
  def test_charts_aj252; assert_in_delta(0.0, (worksheet.charts_aj252||0), 0.002); end
  def test_charts_ak252; assert_in_delta(0.0, (worksheet.charts_ak252||0), 0.002); end
  def test_charts_al252; assert_in_delta(0.0, (worksheet.charts_al252||0), 0.002); end
  def test_charts_am252; assert_in_delta(0.0, (worksheet.charts_am252||0), 0.002); end
  def test_charts_an252; assert_in_delta(0.0, (worksheet.charts_an252||0), 0.002); end
  def test_charts_ao252; assert_in_delta(0.0, (worksheet.charts_ao252||0), 0.002); end
  def test_charts_ap252; assert_in_delta(0.0, (worksheet.charts_ap252||0), 0.002); end
  def test_charts_aq252; assert_in_delta(0.861215638, worksheet.charts_aq252, 0.002); end
  def test_charts_ar252; assert_in_epsilon(3.313229379, worksheet.charts_ar252, 0.002); end
  def test_charts_as252; assert_in_epsilon(5.483743472, worksheet.charts_as252, 0.002); end
  def test_charts_at252; assert_in_epsilon(9.878952814, worksheet.charts_at252, 0.002); end
  def test_charts_au252; assert_in_epsilon(12.07762885, worksheet.charts_au252, 0.002); end
  def test_charts_av252; assert_in_epsilon(15.06624188, worksheet.charts_av252, 0.002); end
  def test_charts_aw252; assert_equal("Calculation", worksheet.charts_aw252); end
  def test_charts_c253; assert_equal("V.e", worksheet.charts_c253); end
  def test_charts_d253; assert_equal("V.05", worksheet.charts_d253); end
  def test_charts_e253; assert_equal("Gaseous hydrocarbons", worksheet.charts_e253); end
  def test_charts_aj253; assert_in_epsilon(4.679912, worksheet.charts_aj253, 0.002); end
  def test_charts_ak253; assert_in_epsilon(6.65236, worksheet.charts_ak253, 0.002); end
  def test_charts_al253; assert_in_epsilon(8.5030419, worksheet.charts_al253, 0.002); end
  def test_charts_am253; assert_in_epsilon(9.7205866, worksheet.charts_am253, 0.002); end
  def test_charts_an253; assert_in_epsilon(10.375123, worksheet.charts_an253, 0.002); end
  def test_charts_ao253; assert_in_epsilon(12.654603, worksheet.charts_ao253, 0.002); end
  def test_charts_ap253; assert_in_epsilon(17.4844257, worksheet.charts_ap253, 0.002); end
  def test_charts_aq253; assert_in_epsilon(18.91593462, worksheet.charts_aq253, 0.002); end
  def test_charts_ar253; assert_in_epsilon(19.24482717, worksheet.charts_ar253, 0.002); end
  def test_charts_as253; assert_in_epsilon(20.29461125, worksheet.charts_as253, 0.002); end
  def test_charts_at253; assert_in_epsilon(20.91263605, worksheet.charts_at253, 0.002); end
  def test_charts_au253; assert_in_epsilon(21.92331406, worksheet.charts_au253, 0.002); end
  def test_charts_av253; assert_in_epsilon(22.89564828, worksheet.charts_av253, 0.002); end
  def test_charts_aw253; assert_equal("Calculation", worksheet.charts_aw253); end
  def test_charts_c255; assert_equal("Domestic Production from Waste", worksheet.charts_c255); end
  def test_charts_c256; assert_equal("VI.a", worksheet.charts_c256); end
  def test_charts_d256; assert_equal("V.03", worksheet.charts_d256); end
  def test_charts_e256; assert_equal("Solid hydrocarbons", worksheet.charts_e256); end
  def test_charts_aj256; assert_in_epsilon(11.2811, worksheet.charts_aj256, 0.002); end
  def test_charts_ak256; assert_in_epsilon(11.5128859, worksheet.charts_ak256, 0.002); end
  def test_charts_al256; assert_in_epsilon(9.9829594, worksheet.charts_al256, 0.002); end
  def test_charts_am256; assert_in_epsilon(10.7253023, worksheet.charts_am256, 0.002); end
  def test_charts_an256; assert_in_epsilon(11.7831671, worksheet.charts_an256, 0.002); end
  def test_charts_ao256; assert_in_epsilon(13.2077258, worksheet.charts_ao256, 0.002); end
  def test_charts_ap256; assert_in_epsilon(12.9045317, worksheet.charts_ap256, 0.002); end
  def test_charts_aq256; assert_in_epsilon(18.45851032, worksheet.charts_aq256, 0.002); end
  def test_charts_ar256; assert_in_epsilon(18.88799564, worksheet.charts_ar256, 0.002); end
  def test_charts_as256; assert_in_epsilon(18.50890517, worksheet.charts_as256, 0.002); end
  def test_charts_at256; assert_in_epsilon(20.71415345, worksheet.charts_at256, 0.002); end
  def test_charts_au256; assert_in_epsilon(23.70385084, worksheet.charts_au256, 0.002); end
  def test_charts_av256; assert_in_epsilon(28.71642504, worksheet.charts_av256, 0.002); end
  def test_charts_aw256; assert_equal("Calculation", worksheet.charts_aw256); end
  def test_charts_ay256; assert_in_delta(0.0, (worksheet.charts_ay256||0), 0.002); end
  def test_charts_ba256; assert_in_delta(0.0, (worksheet.charts_ba256||0), 0.002); end
  def test_charts_bb256; assert_in_delta(0.0, (worksheet.charts_bb256||0), 0.002); end
  def test_charts_bc256; assert_in_delta(0.0, (worksheet.charts_bc256||0), 0.002); end
  def test_charts_bd256; assert_in_delta(0.0, (worksheet.charts_bd256||0), 0.002); end
  def test_charts_be256; assert_in_delta(0.0, (worksheet.charts_be256||0), 0.002); end
  def test_charts_bf256; assert_in_delta(0.0, (worksheet.charts_bf256||0), 0.002); end
  def test_charts_bg256; assert_in_delta(0.0, (worksheet.charts_bg256||0), 0.002); end
  def test_charts_bh256; assert_in_delta(0.0, (worksheet.charts_bh256||0), 0.002); end
  def test_charts_bi256; assert_in_delta(0.0, (worksheet.charts_bi256||0), 0.002); end
  def test_charts_c257; assert_equal("VI.a", worksheet.charts_c257); end
  def test_charts_d257; assert_equal("V.04", worksheet.charts_d257); end
  def test_charts_e257; assert_equal("Liquid hydrocarbons", worksheet.charts_e257); end
  def test_charts_aj257; assert_in_delta(0.0, (worksheet.charts_aj257||0), 0.002); end
  def test_charts_ak257; assert_in_delta(0.0, (worksheet.charts_ak257||0), 0.002); end
  def test_charts_al257; assert_in_delta(0.0, (worksheet.charts_al257||0), 0.002); end
  def test_charts_am257; assert_in_delta(0.0, (worksheet.charts_am257||0), 0.002); end
  def test_charts_an257; assert_in_delta(0.0, (worksheet.charts_an257||0), 0.002); end
  def test_charts_ao257; assert_in_delta(0.0, (worksheet.charts_ao257||0), 0.002); end
  def test_charts_ap257; assert_in_delta(0.0, (worksheet.charts_ap257||0), 0.002); end
  def test_charts_aq257; assert_in_delta(0.861215638, worksheet.charts_aq257, 0.002); end
  def test_charts_ar257; assert_in_epsilon(3.313229379, worksheet.charts_ar257, 0.002); end
  def test_charts_as257; assert_in_epsilon(5.483743472, worksheet.charts_as257, 0.002); end
  def test_charts_at257; assert_in_epsilon(9.878952814, worksheet.charts_at257, 0.002); end
  def test_charts_au257; assert_in_epsilon(12.07762885, worksheet.charts_au257, 0.002); end
  def test_charts_av257; assert_in_epsilon(15.06624188, worksheet.charts_av257, 0.002); end
  def test_charts_aw257; assert_equal("Calculation", worksheet.charts_aw257); end
  def test_charts_c258; assert_equal("VI.a", worksheet.charts_c258); end
  def test_charts_d258; assert_equal("V.05", worksheet.charts_d258); end
  def test_charts_e258; assert_equal("Gaseous hydrocarbons", worksheet.charts_e258); end
  def test_charts_aj258; assert_in_epsilon(4.679912, worksheet.charts_aj258, 0.002); end
  def test_charts_ak258; assert_in_epsilon(6.65236, worksheet.charts_ak258, 0.002); end
  def test_charts_al258; assert_in_epsilon(8.5030419, worksheet.charts_al258, 0.002); end
  def test_charts_am258; assert_in_epsilon(9.7205866, worksheet.charts_am258, 0.002); end
  def test_charts_an258; assert_in_epsilon(10.375123, worksheet.charts_an258, 0.002); end
  def test_charts_ao258; assert_in_epsilon(12.654603, worksheet.charts_ao258, 0.002); end
  def test_charts_ap258; assert_in_epsilon(17.4844257, worksheet.charts_ap258, 0.002); end
  def test_charts_aq258; assert_in_epsilon(18.91593462, worksheet.charts_aq258, 0.002); end
  def test_charts_ar258; assert_in_epsilon(19.24482717, worksheet.charts_ar258, 0.002); end
  def test_charts_as258; assert_in_epsilon(20.29461125, worksheet.charts_as258, 0.002); end
  def test_charts_at258; assert_in_epsilon(20.91263605, worksheet.charts_at258, 0.002); end
  def test_charts_au258; assert_in_epsilon(21.92331406, worksheet.charts_au258, 0.002); end
  def test_charts_av258; assert_in_epsilon(22.89564828, worksheet.charts_av258, 0.002); end
  def test_charts_aw258; assert_equal("Calculation", worksheet.charts_aw258); end
  def test_charts_ay258; assert_in_delta(0.0, (worksheet.charts_ay258||0), 0.002); end
  def test_charts_ba258; assert_in_delta(0.0, (worksheet.charts_ba258||0), 0.002); end
  def test_charts_bb258; assert_in_delta(0.0, (worksheet.charts_bb258||0), 0.002); end
  def test_charts_bc258; assert_in_delta(0.0, (worksheet.charts_bc258||0), 0.002); end
  def test_charts_bd258; assert_in_delta(0.0, (worksheet.charts_bd258||0), 0.002); end
  def test_charts_be258; assert_in_delta(0.0, (worksheet.charts_be258||0), 0.002); end
  def test_charts_bf258; assert_in_delta(0.0, (worksheet.charts_bf258||0), 0.002); end
  def test_charts_bg258; assert_in_delta(0.0, (worksheet.charts_bg258||0), 0.002); end
  def test_charts_bh258; assert_in_delta(0.0, (worksheet.charts_bh258||0), 0.002); end
  def test_charts_bi258; assert_in_delta(0.0, (worksheet.charts_bi258||0), 0.002); end
  def test_charts_c260; assert_equal("Total from Bio Energy and Waste", worksheet.charts_c260); end
  def test_charts_c261; assert_equal("V", worksheet.charts_c261); end
  def test_charts_d261; assert_equal("V.03", worksheet.charts_d261); end
  def test_charts_e261; assert_equal("Solid hydrocarbons", worksheet.charts_e261); end
  def test_charts_aj261; assert_in_epsilon(11.2811, worksheet.charts_aj261, 0.002); end
  def test_charts_ak261; assert_in_epsilon(11.5128859, worksheet.charts_ak261, 0.002); end
  def test_charts_al261; assert_in_epsilon(9.9829594, worksheet.charts_al261, 0.002); end
  def test_charts_am261; assert_in_epsilon(10.7253023, worksheet.charts_am261, 0.002); end
  def test_charts_an261; assert_in_epsilon(11.7831671, worksheet.charts_an261, 0.002); end
  def test_charts_ao261; assert_in_epsilon(13.2077258, worksheet.charts_ao261, 0.002); end
  def test_charts_ap261; assert_in_epsilon(12.9045317, worksheet.charts_ap261, 0.002); end
  def test_charts_aq261; assert_in_epsilon(18.45851032, worksheet.charts_aq261, 0.002); end
  def test_charts_ar261; assert_in_epsilon(18.88799564, worksheet.charts_ar261, 0.002); end
  def test_charts_as261; assert_in_epsilon(18.50890517, worksheet.charts_as261, 0.002); end
  def test_charts_at261; assert_in_epsilon(20.71415345, worksheet.charts_at261, 0.002); end
  def test_charts_au261; assert_in_epsilon(23.70385084, worksheet.charts_au261, 0.002); end
  def test_charts_av261; assert_in_epsilon(28.71642504, worksheet.charts_av261, 0.002); end
  def test_charts_aw261; assert_equal("Calculation", worksheet.charts_aw261); end
  def test_charts_ay261; assert_in_epsilon(937.2335555555555, worksheet.charts_ay261, 0.002); end
  def test_charts_ba261; assert_in_epsilon(948.4098, worksheet.charts_ba261, 0.002); end
  def test_charts_bb261; assert_in_epsilon(947.5049146476287, worksheet.charts_bb261, 0.002); end
  def test_charts_bc261; assert_in_epsilon(946.6398667230644, worksheet.charts_bc261, 0.002); end
  def test_charts_bd261; assert_in_epsilon(945.8150561972723, worksheet.charts_bd261, 0.002); end
  def test_charts_be261; assert_in_epsilon(945.0308870569582, worksheet.charts_be261, 0.002); end
  def test_charts_bf261; assert_in_epsilon(944.2877673448872, worksheet.charts_bf261, 0.002); end
  def test_charts_bg261; assert_in_epsilon(939.9734500000004, worksheet.charts_bg261, 0.002); end
  def test_charts_bh261; assert_in_epsilon(935.1007250000002, worksheet.charts_bh261, 0.002); end
  def test_charts_bi261; assert_in_epsilon(930.2280000000001, worksheet.charts_bi261, 0.002); end
  def test_charts_c262; assert_equal("V", worksheet.charts_c262); end
  def test_charts_d262; assert_equal("V.04", worksheet.charts_d262); end
  def test_charts_e262; assert_equal("Liquid hydrocarbons", worksheet.charts_e262); end
  def test_charts_aj262; assert_in_delta(0.0, (worksheet.charts_aj262||0), 0.002); end
  def test_charts_ak262; assert_in_delta(0.0, (worksheet.charts_ak262||0), 0.002); end
  def test_charts_al262; assert_in_delta(0.0, (worksheet.charts_al262||0), 0.002); end
  def test_charts_am262; assert_in_delta(0.0, (worksheet.charts_am262||0), 0.002); end
  def test_charts_an262; assert_in_delta(0.0, (worksheet.charts_an262||0), 0.002); end
  def test_charts_ao262; assert_in_delta(0.0, (worksheet.charts_ao262||0), 0.002); end
  def test_charts_ap262; assert_in_delta(0.0, (worksheet.charts_ap262||0), 0.002); end
  def test_charts_aq262; assert_in_delta(0.861215638, worksheet.charts_aq262, 0.002); end
  def test_charts_ar262; assert_in_epsilon(3.313229379, worksheet.charts_ar262, 0.002); end
  def test_charts_as262; assert_in_epsilon(5.483743472, worksheet.charts_as262, 0.002); end
  def test_charts_at262; assert_in_epsilon(9.878952814, worksheet.charts_at262, 0.002); end
  def test_charts_au262; assert_in_epsilon(12.07762885, worksheet.charts_au262, 0.002); end
  def test_charts_av262; assert_in_epsilon(15.06624188, worksheet.charts_av262, 0.002); end
  def test_charts_aw262; assert_equal("Calculation", worksheet.charts_aw262); end
  def test_charts_ay262; assert_in_delta(0.0, (worksheet.charts_ay262||0), 0.002); end
  def test_charts_ba262; assert_in_delta(0.13142242804166665, worksheet.charts_ba262, 0.002); end
  def test_charts_bb262; assert_in_epsilon(3.0140876139388606, worksheet.charts_bb262, 0.002); end
  def test_charts_bc262; assert_in_epsilon(6.640349805567526, worksheet.charts_bc262, 0.002); end
  def test_charts_bd262; assert_in_epsilon(11.174550655547504, worksheet.charts_bd262, 0.002); end
  def test_charts_be262; assert_in_epsilon(16.858011722794185, worksheet.charts_be262, 0.002); end
  def test_charts_bf262; assert_in_epsilon(23.81237420320716, worksheet.charts_bf262, 0.002); end
  def test_charts_bg262; assert_in_epsilon(32.28279205089418, worksheet.charts_bg262, 0.002); end
  def test_charts_bh262; assert_in_epsilon(42.4432602465375, worksheet.charts_bh262, 0.002); end
  def test_charts_bi262; assert_in_epsilon(54.65693393750001, worksheet.charts_bi262, 0.002); end
  def test_charts_c263; assert_equal("V", worksheet.charts_c263); end
  def test_charts_d263; assert_equal("V.05", worksheet.charts_d263); end
  def test_charts_e263; assert_equal("Gaseous hydrocarbons", worksheet.charts_e263); end
  def test_charts_aj263; assert_in_epsilon(4.679912, worksheet.charts_aj263, 0.002); end
  def test_charts_ak263; assert_in_epsilon(6.65236, worksheet.charts_ak263, 0.002); end
  def test_charts_al263; assert_in_epsilon(8.5030419, worksheet.charts_al263, 0.002); end
  def test_charts_am263; assert_in_epsilon(9.7205866, worksheet.charts_am263, 0.002); end
  def test_charts_an263; assert_in_epsilon(10.375123, worksheet.charts_an263, 0.002); end
  def test_charts_ao263; assert_in_epsilon(12.654603, worksheet.charts_ao263, 0.002); end
  def test_charts_ap263; assert_in_epsilon(17.4844257, worksheet.charts_ap263, 0.002); end
  def test_charts_aq263; assert_in_epsilon(18.91593462, worksheet.charts_aq263, 0.002); end
  def test_charts_ar263; assert_in_epsilon(19.24482717, worksheet.charts_ar263, 0.002); end
  def test_charts_as263; assert_in_epsilon(20.29461125, worksheet.charts_as263, 0.002); end
  def test_charts_at263; assert_in_epsilon(20.91263605, worksheet.charts_at263, 0.002); end
  def test_charts_au263; assert_in_epsilon(21.92331406, worksheet.charts_au263, 0.002); end
  def test_charts_av263; assert_in_epsilon(22.89564828, worksheet.charts_av263, 0.002); end
  def test_charts_aw263; assert_equal("Calculation", worksheet.charts_aw263); end
  def test_charts_ay263; assert_in_epsilon(9.177777777777777, worksheet.charts_ay263, 0.002); end
  def test_charts_ba263; assert_in_epsilon(10.305777777777783, worksheet.charts_ba263, 0.002); end
  def test_charts_bb263; assert_in_epsilon(11.34601666666667, worksheet.charts_bb263, 0.002); end
  def test_charts_bc263; assert_in_epsilon(12.38625555555556, worksheet.charts_bc263, 0.002); end
  def test_charts_bd263; assert_in_epsilon(13.426494444444447, worksheet.charts_bd263, 0.002); end
  def test_charts_be263; assert_in_epsilon(14.466733333333337, worksheet.charts_be263, 0.002); end
  def test_charts_bf263; assert_in_epsilon(14.832036478670412, worksheet.charts_bf263, 0.002); end
  def test_charts_bg263; assert_in_epsilon(15.206563986198885, worksheet.charts_bg263, 0.002); end
  def test_charts_bh263; assert_in_epsilon(15.590548782623422, worksheet.charts_bh263, 0.002); end
  def test_charts_bi263; assert_in_epsilon(15.984229676339865, worksheet.charts_bi263, 0.002); end
  def test_charts_b266; assert_equal("Hydro-carbon use by sector and Bio-energy share", worksheet.charts_b266); end
  def test_charts_ay266; assert_equal("Please note: Bio-energy is not assigned to sectors but is assumed to replace fossil fuels up to maximum demand", worksheet.charts_ay266); end
  def test_charts_c268; assert_equal("Solid Hydrocarbon consumption", worksheet.charts_c268); end
  def test_charts_c269; assert_equal("V", worksheet.charts_c269); end
  def test_charts_d269; assert_equal("Share of solid biomass to total solid hydrocarbon consumption", worksheet.charts_d269); end
  def test_charts_c270; assert_equal("I.b", worksheet.charts_c270); end
  def test_charts_d270; assert_equal("Coal power stations", worksheet.charts_d270); end
  def test_charts_ak270; assert_in_delta(0.0, (worksheet.charts_ak270||0), 0.002); end
  def test_charts_al270; assert_in_delta(0.0, (worksheet.charts_al270||0), 0.002); end
  def test_charts_am270; assert_in_delta(0.0, (worksheet.charts_am270||0), 0.002); end
  def test_charts_an270; assert_in_delta(0.0, (worksheet.charts_an270||0), 0.002); end
  def test_charts_ao270; assert_in_delta(0.0, (worksheet.charts_ao270||0), 0.002); end
  def test_charts_ap270; assert_in_delta(0.0, (worksheet.charts_ap270||0), 0.002); end
  def test_charts_aq270; assert_in_delta(0.0, (worksheet.charts_aq270||0), 0.002); end
  def test_charts_ar270; assert_in_delta(0.0, (worksheet.charts_ar270||0), 0.002); end
  def test_charts_as270; assert_in_delta(0.0, (worksheet.charts_as270||0), 0.002); end
  def test_charts_at270; assert_in_delta(0.0, (worksheet.charts_at270||0), 0.002); end
  def test_charts_au270; assert_in_delta(0.0, (worksheet.charts_au270||0), 0.002); end
  def test_charts_av270; assert_in_delta(0.0, (worksheet.charts_av270||0), 0.002); end
  def test_charts_aw270; assert_equal("n/a ", worksheet.charts_aw270); end
  def test_charts_c271; assert_equal("I.a", worksheet.charts_c271); end
  def test_charts_d271; assert_equal("Gas Power Stations", worksheet.charts_d271); end
  def test_charts_ak271; assert_in_delta(0.0, (worksheet.charts_ak271||0), 0.002); end
  def test_charts_al271; assert_in_delta(0.0, (worksheet.charts_al271||0), 0.002); end
  def test_charts_am271; assert_in_delta(0.0, (worksheet.charts_am271||0), 0.002); end
  def test_charts_an271; assert_in_delta(0.0, (worksheet.charts_an271||0), 0.002); end
  def test_charts_ao271; assert_in_delta(0.0, (worksheet.charts_ao271||0), 0.002); end
  def test_charts_ap271; assert_in_delta(0.0, (worksheet.charts_ap271||0), 0.002); end
  def test_charts_aq271; assert_in_delta(0.0, (worksheet.charts_aq271||0), 0.002); end
  def test_charts_ar271; assert_in_delta(0.0, (worksheet.charts_ar271||0), 0.002); end
  def test_charts_as271; assert_in_delta(0.0, (worksheet.charts_as271||0), 0.002); end
  def test_charts_at271; assert_in_delta(0.0, (worksheet.charts_at271||0), 0.002); end
  def test_charts_au271; assert_in_delta(0.0, (worksheet.charts_au271||0), 0.002); end
  def test_charts_av271; assert_in_delta(0.0, (worksheet.charts_av271||0), 0.002); end
  def test_charts_aw271; assert_equal("DUKES -  Electricity fuel use, generation and supply", worksheet.charts_aw271); end
  def test_charts_c272; assert_equal("XI", worksheet.charts_c272); end
  def test_charts_d272; assert_equal("Industry", worksheet.charts_d272); end
  def test_charts_ak272; assert_in_epsilon(113.55532, worksheet.charts_ak272, 0.002); end
  def test_charts_al272; assert_in_epsilon(117.004, worksheet.charts_al272, 0.002); end
  def test_charts_am272; assert_in_epsilon(114.168, worksheet.charts_am272, 0.002); end
  def test_charts_an272; assert_in_epsilon(112.6194092, worksheet.charts_an272, 0.002); end
  def test_charts_ao272; assert_in_epsilon(112.1681073, worksheet.charts_ao272, 0.002); end
  def test_charts_ap272; assert_in_epsilon(113.9677442, worksheet.charts_ap272, 0.002); end
  def test_charts_aq272; assert_in_epsilon(118.5182465, worksheet.charts_aq272, 0.002); end
  def test_charts_ar272; assert_in_epsilon(117.2874293, worksheet.charts_ar272, 0.002); end
  def test_charts_as272; assert_in_epsilon(116.4151009, worksheet.charts_as272, 0.002); end
  def test_charts_at272; assert_in_epsilon(116.8549575, worksheet.charts_at272, 0.002); end
  def test_charts_au272; assert_in_epsilon(103.0706654, worksheet.charts_au272, 0.002); end
  def test_charts_av272; assert_in_epsilon(106.6044588, worksheet.charts_av272, 0.002); end
  def test_charts_aw272; assert_equal("DUKES - Aggregate energy balances, industry, coal", worksheet.charts_aw272); end
  def test_charts_c273; assert_equal("IX", worksheet.charts_c273); end
  def test_charts_ak273; assert_in_epsilon(24.42074453, worksheet.charts_ak273, 0.002); end
  def test_charts_al273; assert_in_epsilon(17.4515637, worksheet.charts_al273, 0.002); end
  def test_charts_am273; assert_in_epsilon(17.50532048, worksheet.charts_am273, 0.002); end
  def test_charts_an273; assert_in_epsilon(11.8550141, worksheet.charts_an273, 0.002); end
  def test_charts_ao273; assert_in_epsilon(9.603553023, worksheet.charts_ao273, 0.002); end
  def test_charts_ap273; assert_in_epsilon(8.68614397, worksheet.charts_ap273, 0.002); end
  def test_charts_aq273; assert_in_epsilon(5.883140333, worksheet.charts_aq273, 0.002); end
  def test_charts_ar273; assert_in_epsilon(5.193713923, worksheet.charts_ar273, 0.002); end
  def test_charts_as273; assert_in_epsilon(5.849571352, worksheet.charts_as273, 0.002); end
  def test_charts_at273; assert_in_epsilon(6.189137293, worksheet.charts_at273, 0.002); end
  def test_charts_au273; assert_in_epsilon(6.601790658, worksheet.charts_au273, 0.002); end
  def test_charts_av273; assert_in_epsilon(6.54085466, worksheet.charts_av273, 0.002); end
  def test_charts_aw273; assert_equal("DUKES - Aggregate energy balances, domestic coal", worksheet.charts_aw273); end
  def test_charts_c275; assert_equal("Liquid Hydrocarbon consumption", worksheet.charts_c275); end
  def test_charts_c276; assert_equal("V", worksheet.charts_c276); end
  def test_charts_d276; assert_equal("Share of Bioliquids to total liquid hydrocarbon consumption", worksheet.charts_d276); end
  def test_charts_c277; assert_equal("XII", worksheet.charts_c277); end
  def test_charts_d277; assert_equal("Transport", worksheet.charts_d277); end
  def test_charts_ak277; assert_equal(:na, worksheet.charts_ak277); end
  def test_charts_al277; assert_equal(:na, worksheet.charts_al277); end
  def test_charts_am277; assert_equal(:na, worksheet.charts_am277); end
  def test_charts_an277; assert_equal(:na, worksheet.charts_an277); end
  def test_charts_ao277; assert_equal(:na, worksheet.charts_ao277); end
  def test_charts_ap277; assert_equal(:na, worksheet.charts_ap277); end
  def test_charts_aq277; assert_equal(:na, worksheet.charts_aq277); end
  def test_charts_ar277; assert_equal(:na, worksheet.charts_ar277); end
  def test_charts_as277; assert_equal(:na, worksheet.charts_as277); end
  def test_charts_at277; assert_equal(:na, worksheet.charts_at277); end
  def test_charts_au277; assert_equal(:na, worksheet.charts_au277); end
  def test_charts_av277; assert_equal(:na, worksheet.charts_av277); end
  def test_charts_aw277; assert_equal("Energy consumption in the UK, Transport, Table 2.1, total petroleum use", worksheet.charts_aw277); end
  def test_charts_c278; assert_equal("XI", worksheet.charts_c278); end
  def test_charts_d278; assert_equal("Industry", worksheet.charts_d278); end
  def test_charts_ak278; assert_in_epsilon(73.00151, worksheet.charts_ak278, 0.002); end
  def test_charts_al278; assert_in_epsilon(76.15702378, worksheet.charts_al278, 0.002); end
  def test_charts_am278; assert_in_epsilon(72.21332952, worksheet.charts_am278, 0.002); end
  def test_charts_an278; assert_in_epsilon(58.04690626, worksheet.charts_an278, 0.002); end
  def test_charts_ao278; assert_in_epsilon(56.93925004, worksheet.charts_ao278, 0.002); end
  def test_charts_ap278; assert_in_epsilon(53.5808897, worksheet.charts_ap278, 0.002); end
  def test_charts_aq278; assert_in_epsilon(55.73394665, worksheet.charts_aq278, 0.002); end
  def test_charts_ar278; assert_in_epsilon(59.85796902, worksheet.charts_ar278, 0.002); end
  def test_charts_as278; assert_in_epsilon(60.4447161, worksheet.charts_as278, 0.002); end
  def test_charts_at278; assert_in_epsilon(59.74594793, worksheet.charts_at278, 0.002); end
  def test_charts_au278; assert_in_epsilon(52.77511272, worksheet.charts_au278, 0.002); end
  def test_charts_av278; assert_in_epsilon(55.63460029, worksheet.charts_av278, 0.002); end
  def test_charts_aw278; assert_equal("DUKES - aggregate energy balances, industry liquid hydrocarbons", worksheet.charts_aw278); end
  def test_charts_c279; assert_equal("XV.a", worksheet.charts_c279); end
  def test_charts_d279; assert_equal("Domestic Gas Production", worksheet.charts_d279); end
  def test_charts_ak279; assert_in_epsilon(68.37816011, worksheet.charts_ak279, 0.002); end
  def test_charts_al279; assert_in_epsilon(64.8507886, worksheet.charts_al279, 0.002); end
  def test_charts_am279; assert_in_epsilon(63.04462365, worksheet.charts_am279, 0.002); end
  def test_charts_an279; assert_in_epsilon(70.29185596, worksheet.charts_an279, 0.002); end
  def test_charts_ao279; assert_in_epsilon(67.50576921, worksheet.charts_ao279, 0.002); end
  def test_charts_ap279; assert_in_epsilon(67.55346877, worksheet.charts_ap279, 0.002); end
  def test_charts_aq279; assert_in_epsilon(69.45787, worksheet.charts_aq279, 0.002); end
  def test_charts_ar279; assert_in_epsilon(60.05119281, worksheet.charts_ar279, 0.002); end
  def test_charts_as279; assert_in_epsilon(57.24685939, worksheet.charts_as279, 0.002); end
  def test_charts_at279; assert_in_epsilon(58.57160534, worksheet.charts_at279, 0.002); end
  def test_charts_au279; assert_in_epsilon(53.80431206, worksheet.charts_au279, 0.002); end
  def test_charts_av279; assert_in_epsilon(54.98917277, worksheet.charts_av279, 0.002); end
  def test_charts_aw279; assert_equal("DUKES aggregate energy balances, petroleum refinaries petroleum products use", worksheet.charts_aw279); end
  def test_charts_c281; assert_equal("Gaseous Hydrocarbon consumption", worksheet.charts_c281); end
  def test_charts_c282; assert_equal("V", worksheet.charts_c282); end
  def test_charts_d282; assert_equal("Share of Biogas to total gaseous hydrocarbon consumption", worksheet.charts_d282); end
  def test_charts_c283; assert_equal("X.a", worksheet.charts_c283); end
  def test_charts_d283; assert_equal("Domestic Lighting & Appliances", worksheet.charts_d283); end
  def test_charts_ar283; assert_in_epsilon(254.0914794, worksheet.charts_ar283, 0.002); end
  def test_charts_as283; assert_in_epsilon(241.4598289, worksheet.charts_as283, 0.002); end
  def test_charts_at283; assert_in_epsilon(254.5511238, worksheet.charts_at283, 0.002); end
  def test_charts_au283; assert_in_epsilon(251.6905486, worksheet.charts_au283, 0.002); end
  def test_charts_aw283; assert_equal("Energy consumption in UK, domestic gas space heating", worksheet.charts_aw283); end
  def test_charts_c284; assert_equal("X.b", worksheet.charts_c284); end
  def test_charts_d284; assert_equal("Commercial Lighting & Appliances", worksheet.charts_d284); end
  def test_charts_ar284; assert_in_epsilon(75.26536024, worksheet.charts_ar284, 0.002); end
  def test_charts_as284; assert_in_epsilon(72.43646261, worksheet.charts_as284, 0.002); end
  def test_charts_at284; assert_in_epsilon(70.4353316, worksheet.charts_at284, 0.002); end
  def test_charts_au284; assert_in_epsilon(61.68484301, worksheet.charts_au284, 0.002); end
  def test_charts_aw284; assert_equal("Energy consumption in UK, commercial gas space heating", worksheet.charts_aw284); end
  def test_charts_c285; assert_equal("XI", worksheet.charts_c285); end
  def test_charts_d285; assert_equal("Industry", worksheet.charts_d285); end
  def test_charts_ak285; assert_in_epsilon(68.19307333, worksheet.charts_ak285, 0.002); end
  def test_charts_al285; assert_in_epsilon(84.8390885, worksheet.charts_al285, 0.002); end
  def test_charts_am285; assert_in_epsilon(76.97345584, worksheet.charts_am285, 0.002); end
  def test_charts_an285; assert_in_epsilon(62.61575762, worksheet.charts_an285, 0.002); end
  def test_charts_ao285; assert_in_epsilon(69.01463435, worksheet.charts_ao285, 0.002); end
  def test_charts_ap285; assert_in_epsilon(68.26181377, worksheet.charts_ap285, 0.002); end
  def test_charts_aq285; assert_in_epsilon(68.96100319, worksheet.charts_aq285, 0.002); end
  def test_charts_ar285; assert_in_epsilon(73.31393634, worksheet.charts_ar285, 0.002); end
  def test_charts_as285; assert_in_epsilon(75.52793362, worksheet.charts_as285, 0.002); end
  def test_charts_at285; assert_in_epsilon(74.21415243, worksheet.charts_at285, 0.002); end
  def test_charts_au285; assert_in_epsilon(59.8750939, worksheet.charts_au285, 0.002); end
  def test_charts_av285; assert_in_epsilon(59.91086183, worksheet.charts_av285, 0.002); end
  def test_charts_aw285; assert_equal("DUKES - 1.2 and 2.5", worksheet.charts_aw285); end
  def test_charts_c286; assert_equal("I.a", worksheet.charts_c286); end
  def test_charts_d286; assert_equal("Gas Power Stations", worksheet.charts_d286); end
  def test_charts_ak286; assert_in_delta(0.0, (worksheet.charts_ak286||0), 0.002); end
  def test_charts_al286; assert_in_delta(0.0, (worksheet.charts_al286||0), 0.002); end
  def test_charts_am286; assert_in_delta(0.0, (worksheet.charts_am286||0), 0.002); end
  def test_charts_an286; assert_in_delta(0.0, (worksheet.charts_an286||0), 0.002); end
  def test_charts_ao286; assert_in_delta(0.0, (worksheet.charts_ao286||0), 0.002); end
  def test_charts_ap286; assert_in_delta(0.0, (worksheet.charts_ap286||0), 0.002); end
  def test_charts_aq286; assert_in_delta(0.0, (worksheet.charts_aq286||0), 0.002); end
  def test_charts_ar286; assert_in_delta(0.0, (worksheet.charts_ar286||0), 0.002); end
  def test_charts_as286; assert_in_delta(0.0, (worksheet.charts_as286||0), 0.002); end
  def test_charts_at286; assert_in_delta(0.0, (worksheet.charts_at286||0), 0.002); end
  def test_charts_au286; assert_in_delta(0.0, (worksheet.charts_au286||0), 0.002); end
  def test_charts_av286; assert_in_delta(0.0, (worksheet.charts_av286||0), 0.002); end
  def test_charts_aw286; assert_equal("DUKES -  Electricity fuel use, generation and supply", worksheet.charts_aw286); end
  def test_charts_c287; assert_equal("I.b", worksheet.charts_c287); end
  def test_charts_d287; assert_equal("Coal power stations", worksheet.charts_d287); end
  def test_charts_ak287; assert_in_delta(0.0, (worksheet.charts_ak287||0), 0.002); end
  def test_charts_al287; assert_in_delta(0.0, (worksheet.charts_al287||0), 0.002); end
  def test_charts_am287; assert_in_delta(0.0, (worksheet.charts_am287||0), 0.002); end
  def test_charts_an287; assert_in_delta(0.0, (worksheet.charts_an287||0), 0.002); end
  def test_charts_ao287; assert_in_delta(0.0, (worksheet.charts_ao287||0), 0.002); end
  def test_charts_ap287; assert_in_delta(0.0, (worksheet.charts_ap287||0), 0.002); end
  def test_charts_aq287; assert_in_delta(0.0, (worksheet.charts_aq287||0), 0.002); end
  def test_charts_ar287; assert_in_delta(0.0, (worksheet.charts_ar287||0), 0.002); end
  def test_charts_as287; assert_in_delta(0.0, (worksheet.charts_as287||0), 0.002); end
  def test_charts_at287; assert_in_delta(0.0, (worksheet.charts_at287||0), 0.002); end
  def test_charts_au287; assert_in_delta(0.0, (worksheet.charts_au287||0), 0.002); end
  def test_charts_av287; assert_in_delta(0.0, (worksheet.charts_av287||0), 0.002); end
  def test_charts_aw287; assert_equal("n/a ", worksheet.charts_aw287); end
  def test_charts_d289; assert_equal("Bio type", worksheet.charts_d289); end
  def test_charts_e289; assert_equal("Column1", worksheet.charts_e289); end
  def test_charts_f289; assert_equal("Column2", worksheet.charts_f289); end
  def test_charts_g289; assert_equal("Column22", worksheet.charts_g289); end
  def test_charts_h289; assert_equal("Column23", worksheet.charts_h289); end
  def test_charts_i289; assert_equal("Column24", worksheet.charts_i289); end
  def test_charts_j289; assert_equal("Column25", worksheet.charts_j289); end
  def test_charts_k289; assert_equal("Column26", worksheet.charts_k289); end
  def test_charts_l289; assert_equal("Column27", worksheet.charts_l289); end
  def test_charts_m289; assert_equal("Column28", worksheet.charts_m289); end
  def test_charts_n289; assert_equal("Column29", worksheet.charts_n289); end
  def test_charts_o289; assert_equal("Column30", worksheet.charts_o289); end
  def test_charts_p289; assert_equal("Column31", worksheet.charts_p289); end
  def test_charts_q289; assert_equal("Column32", worksheet.charts_q289); end
  def test_charts_r289; assert_equal("Column33", worksheet.charts_r289); end
  def test_charts_s289; assert_equal("Column34", worksheet.charts_s289); end
  def test_charts_t289; assert_equal("Column35", worksheet.charts_t289); end
  def test_charts_u289; assert_equal("Column36", worksheet.charts_u289); end
  def test_charts_v289; assert_equal("Column37", worksheet.charts_v289); end
  def test_charts_w289; assert_equal("Column38", worksheet.charts_w289); end
  def test_charts_x289; assert_equal("Column39", worksheet.charts_x289); end
  def test_charts_y289; assert_equal("Column40", worksheet.charts_y289); end
  def test_charts_z289; assert_equal("Column41", worksheet.charts_z289); end
  def test_charts_aa289; assert_equal("Column42", worksheet.charts_aa289); end
  def test_charts_ab289; assert_equal("Column43", worksheet.charts_ab289); end
  def test_charts_ac289; assert_equal("Column44", worksheet.charts_ac289); end
  def test_charts_ad289; assert_equal("Column45", worksheet.charts_ad289); end
  def test_charts_ae289; assert_equal("Column46", worksheet.charts_ae289); end
  def test_charts_af289; assert_equal("Column47", worksheet.charts_af289); end
  def test_charts_ag289; assert_equal("Column48", worksheet.charts_ag289); end
  def test_charts_ah289; assert_equal("Column49", worksheet.charts_ah289); end
  def test_charts_ai289; assert_equal("Column50", worksheet.charts_ai289); end
  def test_charts_aj289; assert_equal("Column51", worksheet.charts_aj289); end
  def test_charts_ak289; assert_equal("Column52", worksheet.charts_ak289); end
  def test_charts_al289; assert_equal("Column53", worksheet.charts_al289); end
  def test_charts_am289; assert_equal("Column54", worksheet.charts_am289); end
  def test_charts_an289; assert_equal("Column55", worksheet.charts_an289); end
  def test_charts_ao289; assert_equal("Column56", worksheet.charts_ao289); end
  def test_charts_ap289; assert_equal("Column57", worksheet.charts_ap289); end
  def test_charts_aq289; assert_equal("Column58", worksheet.charts_aq289); end
  def test_charts_ar289; assert_equal("Column59", worksheet.charts_ar289); end
  def test_charts_as289; assert_equal("Column60", worksheet.charts_as289); end
  def test_charts_at289; assert_equal("Column61", worksheet.charts_at289); end
  def test_charts_au289; assert_equal("Column612", worksheet.charts_au289); end
  def test_charts_av289; assert_equal("Column62", worksheet.charts_av289); end
  def test_charts_aw289; assert_equal("Column63", worksheet.charts_aw289); end
  def test_charts_ax289; assert_equal("Column3", worksheet.charts_ax289); end
  def test_charts_ay289; assert_equal("2007", worksheet.charts_ay289); end
  def test_charts_az289; assert_equal("2008", worksheet.charts_az289); end
  def test_charts_ba289; assert_equal("2012", worksheet.charts_ba289); end
  def test_charts_bb289; assert_equal("2017", worksheet.charts_bb289); end
  def test_charts_bc289; assert_equal("2022", worksheet.charts_bc289); end
  def test_charts_bd289; assert_equal("2027", worksheet.charts_bd289); end
  def test_charts_be289; assert_equal("2032", worksheet.charts_be289); end
  def test_charts_bf289; assert_equal("2037", worksheet.charts_bf289); end
  def test_charts_bg289; assert_equal("2042", worksheet.charts_bg289); end
  def test_charts_bh289; assert_equal("2047", worksheet.charts_bh289); end
  def test_charts_bi289; assert_equal("2052", worksheet.charts_bi289); end
  def test_charts_d290; assert_equal("Solid", worksheet.charts_d290); end
  def test_charts_ay290; assert_in_delta(0.0, (worksheet.charts_ay290||0), 0.002); end
  def test_charts_ba290; assert_in_delta(0.0, (worksheet.charts_ba290||0), 0.002); end
  def test_charts_bb290; assert_in_delta(0.0, (worksheet.charts_bb290||0), 0.002); end
  def test_charts_bc290; assert_in_delta(0.0, (worksheet.charts_bc290||0), 0.002); end
  def test_charts_bd290; assert_in_delta(0.0, (worksheet.charts_bd290||0), 0.002); end
  def test_charts_be290; assert_in_delta(0.0, (worksheet.charts_be290||0), 0.002); end
  def test_charts_bf290; assert_in_delta(0.0, (worksheet.charts_bf290||0), 0.002); end
  def test_charts_bg290; assert_in_delta(0.0, (worksheet.charts_bg290||0), 0.002); end
  def test_charts_bh290; assert_in_delta(0.0, (worksheet.charts_bh290||0), 0.002); end
  def test_charts_bi290; assert_in_delta(0.0, (worksheet.charts_bi290||0), 0.002); end
  def test_charts_d291; assert_equal("Liquid", worksheet.charts_d291); end
  def test_charts_ay291; assert_in_delta(0.0, (worksheet.charts_ay291||0), 0.002); end
  def test_charts_ba291; assert_in_delta(0.0, (worksheet.charts_ba291||0), 0.002); end
  def test_charts_bb291; assert_in_delta(0.0, (worksheet.charts_bb291||0), 0.002); end
  def test_charts_bc291; assert_in_delta(0.0, (worksheet.charts_bc291||0), 0.002); end
  def test_charts_bd291; assert_in_delta(0.0, (worksheet.charts_bd291||0), 0.002); end
  def test_charts_be291; assert_in_delta(0.0, (worksheet.charts_be291||0), 0.002); end
  def test_charts_bf291; assert_in_delta(0.0, (worksheet.charts_bf291||0), 0.002); end
  def test_charts_bg291; assert_in_delta(0.0, (worksheet.charts_bg291||0), 0.002); end
  def test_charts_bh291; assert_in_delta(0.0, (worksheet.charts_bh291||0), 0.002); end
  def test_charts_bi291; assert_in_delta(0.0, (worksheet.charts_bi291||0), 0.002); end
  def test_charts_d292; assert_equal("Gas", worksheet.charts_d292); end
  def test_charts_ay292; assert_in_delta(0.0, (worksheet.charts_ay292||0), 0.002); end
  def test_charts_ba292; assert_in_delta(0.0, (worksheet.charts_ba292||0), 0.002); end
  def test_charts_bb292; assert_in_delta(0.0, (worksheet.charts_bb292||0), 0.002); end
  def test_charts_bc292; assert_in_delta(0.0, (worksheet.charts_bc292||0), 0.002); end
  def test_charts_bd292; assert_in_delta(0.0, (worksheet.charts_bd292||0), 0.002); end
  def test_charts_be292; assert_in_delta(0.0, (worksheet.charts_be292||0), 0.002); end
  def test_charts_bf292; assert_in_delta(0.0, (worksheet.charts_bf292||0), 0.002); end
  def test_charts_bg292; assert_in_delta(0.0, (worksheet.charts_bg292||0), 0.002); end
  def test_charts_bh292; assert_in_delta(0.0, (worksheet.charts_bh292||0), 0.002); end
  def test_charts_bi292; assert_in_delta(0.0, (worksheet.charts_bi292||0), 0.002); end
  def test_charts_b296; assert_equal("Electricity Generation Emissions", worksheet.charts_b296); end
  def test_charts_c297; assert_equal("Emissions from Electricity Generation, exlcuding CHP", worksheet.charts_c297); end
  def test_charts_ay297; assert_equal("2007", worksheet.charts_ay297); end
  def test_charts_ba297; assert_equal("2012", worksheet.charts_ba297); end
  def test_charts_bb297; assert_equal("2017", worksheet.charts_bb297); end
  def test_charts_bc297; assert_equal("2022", worksheet.charts_bc297); end
  def test_charts_bd297; assert_equal("2027", worksheet.charts_bd297); end
  def test_charts_be297; assert_equal("2032", worksheet.charts_be297); end
  def test_charts_bf297; assert_equal("2037", worksheet.charts_bf297); end
  def test_charts_bg297; assert_equal("2042", worksheet.charts_bg297); end
  def test_charts_bh297; assert_equal("2047", worksheet.charts_bh297); end
  def test_charts_bi297; assert_equal("2052", worksheet.charts_bi297); end
  def test_charts_c298; assert_equal("Power Generation", worksheet.charts_c298); end
  def test_charts_c299; assert_equal("CCS in Power", worksheet.charts_c299); end
  def test_charts_c300; assert_equal("Bioenergy in Gas Power", worksheet.charts_c300); end
  def test_charts_c301; assert_equal("Bioenergy in Solid BM Power", worksheet.charts_c301); end
  def test_charts_c302; assert_equal("Bioenergy in Solid HC CCS Power", worksheet.charts_c302); end
  def test_charts_c303; assert_equal("Bioenergy in Gas CCS Power", worksheet.charts_c303); end
  def test_charts_c304; assert_equal("Total Emissions from Power", worksheet.charts_c304); end
  def test_charts_c306; assert_equal("Emissions reclassified", worksheet.charts_c306); end
  def test_charts_c307; assert_in_delta(1.0, worksheet.charts_c307, 0.002); end
  def test_charts_d307; assert_equal("Fuel Combustion", worksheet.charts_d307); end
  def test_charts_c308; assert_equal("X2", worksheet.charts_c308); end
  def test_charts_d308; assert_equal("Bioenergy credit", worksheet.charts_d308); end
  def test_charts_c309; assert_equal("X3", worksheet.charts_c309); end
  def test_charts_d309; assert_equal("Carbon capture", worksheet.charts_d309); end
  def test_charts_d310; assert_equal("Total", worksheet.charts_d310); end
  def test_charts_c312; assert_equal("Emissions intensity", worksheet.charts_c312); end
  def test_charts_e312; assert_equal("MtCO2e/TWh", worksheet.charts_e312); end
  def test_charts_e313; assert_equal("gCO2e/KWh", worksheet.charts_e313); end
  def test_charts_c315; assert_equal("Note: Emissions from CHP are excluded, while emissions from district heating are included.", worksheet.charts_c315); end
  def test_charts_b318; assert_equal("Primary supply, format for web-based interface", worksheet.charts_b318); end
  def test_charts_c320; assert_equal("N.01", worksheet.charts_c320); end
  def test_charts_d320; assert_equal("Nuclear fission", worksheet.charts_d320); end
  def test_charts_e320; assert_in_delta(0.0, (worksheet.charts_e320||0), 0.002); end
  def test_charts_f320; assert_in_delta(0.0, (worksheet.charts_f320||0), 0.002); end
  def test_charts_ax320; assert_in_delta(0.0, (worksheet.charts_ax320||0), 0.002); end
  def test_charts_ay320; assert_in_epsilon(80.94774857142859, worksheet.charts_ay320, 0.002); end
  def test_charts_ba320; assert_in_epsilon(93.77115428571429, worksheet.charts_ba320, 0.002); end
  def test_charts_bb320; assert_in_epsilon(199.9649828571429, worksheet.charts_bb320, 0.002); end
  def test_charts_bc320; assert_in_epsilon(193.55328000000003, worksheet.charts_bc320, 0.002); end
  def test_charts_bd320; assert_in_epsilon(193.55328000000003, worksheet.charts_bd320, 0.002); end
  def test_charts_be320; assert_in_epsilon(189.54596571428576, worksheet.charts_be320, 0.002); end
  def test_charts_bf320; assert_in_epsilon(180.72987428571432, worksheet.charts_bf320, 0.002); end
  def test_charts_bg320; assert_in_epsilon(176.3218285714286, worksheet.charts_bg320, 0.002); end
  def test_charts_bh320; assert_in_epsilon(167.50573714285716, worksheet.charts_bh320, 0.002); end
  def test_charts_bi320; assert_in_epsilon(167.50573714285716, worksheet.charts_bi320, 0.002); end
  def test_charts_c321; assert_equal("R.01", worksheet.charts_c321); end
  def test_charts_d321; assert_equal("Solar", worksheet.charts_d321); end
  def test_charts_e321; assert_in_delta(0.0, (worksheet.charts_e321||0), 0.002); end
  def test_charts_f321; assert_in_delta(0.0, (worksheet.charts_f321||0), 0.002); end
  def test_charts_ax321; assert_in_delta(0.0, (worksheet.charts_ax321||0), 0.002); end
  def test_charts_ay321; assert_in_delta(0.0, (worksheet.charts_ay321||0), 0.002); end
  def test_charts_ba321; assert_in_epsilon(1.56727314, worksheet.charts_ba321, 0.002); end
  def test_charts_bb321; assert_in_epsilon(10.911534564022219, worksheet.charts_bb321, 0.002); end
  def test_charts_bc321; assert_in_epsilon(27.26546309941403, worksheet.charts_bc321, 0.002); end
  def test_charts_bd321; assert_in_epsilon(48.89299422565567, worksheet.charts_bd321, 0.002); end
  def test_charts_be321; assert_in_epsilon(74.07697845643895, worksheet.charts_be321, 0.002); end
  def test_charts_bf321; assert_in_epsilon(96.03124385430904, worksheet.charts_bf321, 0.002); end
  def test_charts_bg321; assert_in_epsilon(108.31259745899473, worksheet.charts_bg321, 0.002); end
  def test_charts_bh321; assert_in_epsilon(106.27845543771349, worksheet.charts_bh321, 0.002); end
  def test_charts_bi321; assert_in_epsilon(92.93002046477042, worksheet.charts_bi321, 0.002); end
  def test_charts_c322; assert_equal("R.02", worksheet.charts_c322); end
  def test_charts_d322; assert_equal("Wind", worksheet.charts_d322); end
  def test_charts_e322; assert_in_delta(0.0, (worksheet.charts_e322||0), 0.002); end
  def test_charts_f322; assert_in_delta(0.0, (worksheet.charts_f322||0), 0.002); end
  def test_charts_ax322; assert_in_delta(0.0, (worksheet.charts_ax322||0), 0.002); end
  def test_charts_ay322; assert_in_epsilon(12.437183268, worksheet.charts_ay322, 0.002); end
  def test_charts_ba322; assert_in_epsilon(18.7222492332, worksheet.charts_ba322, 0.002); end
  def test_charts_bb322; assert_in_epsilon(36.6048892332, worksheet.charts_bb322, 0.002); end
  def test_charts_bc322; assert_in_epsilon(59.9662792332, worksheet.charts_bc322, 0.002); end
  def test_charts_bd322; assert_in_epsilon(84.3357592332, worksheet.charts_bd322, 0.002); end
  def test_charts_be322; assert_in_epsilon(115.49888923319999, worksheet.charts_be322, 0.002); end
  def test_charts_bf322; assert_in_epsilon(136.9861259652, worksheet.charts_bf322, 0.002); end
  def test_charts_bg322; assert_in_epsilon(151.03817999999998, worksheet.charts_bg322, 0.002); end
  def test_charts_bh322; assert_in_epsilon(161.16290999999998, worksheet.charts_bh322, 0.002); end
  def test_charts_bi322; assert_in_epsilon(161.95184999999998, worksheet.charts_bi322, 0.002); end
  def test_charts_c323; assert_equal("R.03", worksheet.charts_c323); end
  def test_charts_d323; assert_equal("Tidal", worksheet.charts_d323); end
  def test_charts_e323; assert_in_delta(0.0, (worksheet.charts_e323||0), 0.002); end
  def test_charts_f323; assert_in_delta(0.0, (worksheet.charts_f323||0), 0.002); end
  def test_charts_ax323; assert_in_delta(0.0, (worksheet.charts_ax323||0), 0.002); end
  def test_charts_ay323; assert_in_delta(0.0, (worksheet.charts_ay323||0), 0.002); end
  def test_charts_ba323; assert_in_delta(0.0, (worksheet.charts_ba323||0), 0.002); end
  def test_charts_bb323; assert_in_delta(0.0, (worksheet.charts_bb323||0), 0.002); end
  def test_charts_bc323; assert_in_delta(0.0, (worksheet.charts_bc323||0), 0.002); end
  def test_charts_bd323; assert_in_delta(0.0, (worksheet.charts_bd323||0), 0.002); end
  def test_charts_be323; assert_in_delta(0.0, (worksheet.charts_be323||0), 0.002); end
  def test_charts_bf323; assert_in_delta(0.0, (worksheet.charts_bf323||0), 0.002); end
  def test_charts_bg323; assert_in_delta(0.0, (worksheet.charts_bg323||0), 0.002); end
  def test_charts_bh323; assert_in_delta(0.0, (worksheet.charts_bh323||0), 0.002); end
  def test_charts_bi323; assert_in_delta(0.0, (worksheet.charts_bi323||0), 0.002); end
  def test_charts_c324; assert_equal("R.04", worksheet.charts_c324); end
  def test_charts_d324; assert_equal("Wave", worksheet.charts_d324); end
  def test_charts_e324; assert_in_delta(0.0, (worksheet.charts_e324||0), 0.002); end
  def test_charts_f324; assert_in_delta(0.0, (worksheet.charts_f324||0), 0.002); end
  def test_charts_ax324; assert_in_delta(0.0, (worksheet.charts_ax324||0), 0.002); end
  def test_charts_ay324; assert_in_delta(0.0, (worksheet.charts_ay324||0), 0.002); end
  def test_charts_ba324; assert_in_delta(0.0, (worksheet.charts_ba324||0), 0.002); end
  def test_charts_bb324; assert_in_delta(0.0, (worksheet.charts_bb324||0), 0.002); end
  def test_charts_bc324; assert_in_delta(0.0, (worksheet.charts_bc324||0), 0.002); end
  def test_charts_bd324; assert_in_delta(0.0, (worksheet.charts_bd324||0), 0.002); end
  def test_charts_be324; assert_in_delta(0.0, (worksheet.charts_be324||0), 0.002); end
  def test_charts_bf324; assert_in_delta(0.0, (worksheet.charts_bf324||0), 0.002); end
  def test_charts_bg324; assert_in_delta(0.0, (worksheet.charts_bg324||0), 0.002); end
  def test_charts_bh324; assert_in_delta(0.0, (worksheet.charts_bh324||0), 0.002); end
  def test_charts_bi324; assert_in_delta(0.0, (worksheet.charts_bi324||0), 0.002); end
  def test_charts_c325; assert_equal("R.05", worksheet.charts_c325); end
  def test_charts_d325; assert_equal("Geothermal", worksheet.charts_d325); end
  def test_charts_e325; assert_in_delta(0.0, (worksheet.charts_e325||0), 0.002); end
  def test_charts_f325; assert_in_delta(0.0, (worksheet.charts_f325||0), 0.002); end
  def test_charts_ax325; assert_in_delta(0.0, (worksheet.charts_ax325||0), 0.002); end
  def test_charts_ay325; assert_in_delta(0.0, (worksheet.charts_ay325||0), 0.002); end
  def test_charts_ba325; assert_in_delta(0.0, (worksheet.charts_ba325||0), 0.002); end
  def test_charts_bb325; assert_in_delta(0.0, (worksheet.charts_bb325||0), 0.002); end
  def test_charts_bc325; assert_in_delta(0.0, (worksheet.charts_bc325||0), 0.002); end
  def test_charts_bd325; assert_in_delta(0.0, (worksheet.charts_bd325||0), 0.002); end
  def test_charts_be325; assert_in_delta(0.0, (worksheet.charts_be325||0), 0.002); end
  def test_charts_bf325; assert_in_delta(0.0, (worksheet.charts_bf325||0), 0.002); end
  def test_charts_bg325; assert_in_delta(0.0, (worksheet.charts_bg325||0), 0.002); end
  def test_charts_bh325; assert_in_delta(0.0, (worksheet.charts_bh325||0), 0.002); end
  def test_charts_bi325; assert_in_delta(0.0, (worksheet.charts_bi325||0), 0.002); end
  def test_charts_c326; assert_equal("R.06", worksheet.charts_c326); end
  def test_charts_d326; assert_equal("Hydro", worksheet.charts_d326); end
  def test_charts_e326; assert_in_delta(0.0, (worksheet.charts_e326||0), 0.002); end
  def test_charts_f326; assert_in_delta(0.0, (worksheet.charts_f326||0), 0.002); end
  def test_charts_ax326; assert_in_delta(0.0, (worksheet.charts_ax326||0), 0.002); end
  def test_charts_ay326; assert_in_epsilon(128.510594388, worksheet.charts_ay326, 0.002); end
  def test_charts_ba326; assert_in_epsilon(155.84385898800002, worksheet.charts_ba326, 0.002); end
  def test_charts_bb326; assert_in_epsilon(189.41763898800005, worksheet.charts_bb326, 0.002); end
  def test_charts_bc326; assert_in_epsilon(195.75107398800003, worksheet.charts_bc326, 0.002); end
  def test_charts_bd326; assert_in_epsilon(199.56428398800003, worksheet.charts_bd326, 0.002); end
  def test_charts_be326; assert_in_epsilon(203.46515398800005, worksheet.charts_be326, 0.002); end
  def test_charts_bf326; assert_in_epsilon(205.43750398800003, worksheet.charts_bf326, 0.002); end
  def test_charts_bg326; assert_in_epsilon(205.71585955200004, worksheet.charts_bg326, 0.002); end
  def test_charts_bh326; assert_in_epsilon(206.60431118400004, worksheet.charts_bh326, 0.002); end
  def test_charts_bi326; assert_in_epsilon(207.19601618400003, worksheet.charts_bi326, 0.002); end
  def test_charts_c327; assert_equal("Y.02", worksheet.charts_c327); end
  def test_charts_d327; assert_equal("Electricity oversupply (imports)", worksheet.charts_d327); end
  def test_charts_e327; assert_in_delta(0.0, (worksheet.charts_e327||0), 0.002); end
  def test_charts_f327; assert_in_delta(0.0, (worksheet.charts_f327||0), 0.002); end
  def test_charts_ax327; assert_in_delta(0.0, (worksheet.charts_ax327||0), 0.002); end
  def test_charts_ay327; assert_in_delta(1.0, worksheet.charts_ay327, 0.002); end
  def test_charts_ba327; assert_in_delta(0.0, (worksheet.charts_ba327||0), 0.002); end
  def test_charts_bb327; assert_in_epsilon(14.000000000000455, worksheet.charts_bb327, 0.002); end
  def test_charts_bc327; assert_in_epsilon(21.000000000000227, worksheet.charts_bc327, 0.002); end
  def test_charts_bd327; assert_in_epsilon(30.999999999999545, worksheet.charts_bd327, 0.002); end
  def test_charts_be327; assert_in_epsilon(39.999999999999545, worksheet.charts_be327, 0.002); end
  def test_charts_bf327; assert_in_epsilon(49.0, worksheet.charts_bf327, 0.002); end
  def test_charts_bg327; assert_in_epsilon(55.00000000000091, worksheet.charts_bg327, 0.002); end
  def test_charts_bh327; assert_in_epsilon(55.00000000000091, worksheet.charts_bh327, 0.002); end
  def test_charts_bi327; assert_in_epsilon(55.00000000000091, worksheet.charts_bi327, 0.002); end
  def test_charts_c328; assert_equal("R.07", worksheet.charts_c328); end
  def test_charts_d328; assert_equal("Environmental heat", worksheet.charts_d328); end
  def test_charts_e328; assert_in_delta(0.0, (worksheet.charts_e328||0), 0.002); end
  def test_charts_f328; assert_in_delta(0.0, (worksheet.charts_f328||0), 0.002); end
  def test_charts_ax328; assert_in_delta(0.0, (worksheet.charts_ax328||0), 0.002); end
  def test_charts_ay328; assert_in_epsilon(222.89552622742858, worksheet.charts_ay328, 0.002); end
  def test_charts_ba328; assert_in_epsilon(268.44056476146187, worksheet.charts_ba328, 0.002); end
  def test_charts_bb328; assert_in_epsilon(450.89904564236565, worksheet.charts_bb328, 0.002); end
  def test_charts_bc328; assert_in_epsilon(497.5360963206143, worksheet.charts_bc328, 0.002); end
  def test_charts_bd328; assert_in_epsilon(557.3463174468553, worksheet.charts_bd328, 0.002); end
  def test_charts_be328; assert_in_epsilon(622.5869873919244, worksheet.charts_be328, 0.002); end
  def test_charts_bf328; assert_in_epsilon(668.1847480932233, worksheet.charts_bf328, 0.002); end
  def test_charts_bg328; assert_in_epsilon(696.3884655824243, worksheet.charts_bg328, 0.002); end
  def test_charts_bh328; assert_in_epsilon(696.5514137645716, worksheet.charts_bh328, 0.002); end
  def test_charts_bi328; assert_in_epsilon(684.5836237916285, worksheet.charts_bi328, 0.002); end
  def test_charts_d329; assert_equal("Bio Energy", worksheet.charts_d329); end
  def test_charts_e329; assert_in_delta(0.0, (worksheet.charts_e329||0), 0.002); end
  def test_charts_f329; assert_in_delta(0.0, (worksheet.charts_f329||0), 0.002); end
  def test_charts_ax329; assert_in_delta(0.0, (worksheet.charts_ax329||0), 0.002); end
  def test_charts_ay329; assert_in_delta(0.0, (worksheet.charts_ay329||0), 0.002); end
  def test_charts_ba329; assert_in_delta(0.0, (worksheet.charts_ba329||0), 0.002); end
  def test_charts_bb329; assert_in_delta(0.0, (worksheet.charts_bb329||0), 0.002); end
  def test_charts_bc329; assert_in_delta(0.0, (worksheet.charts_bc329||0), 0.002); end
  def test_charts_bd329; assert_in_delta(0.0, (worksheet.charts_bd329||0), 0.002); end
  def test_charts_be329; assert_in_delta(0.0, (worksheet.charts_be329||0), 0.002); end
  def test_charts_bf329; assert_in_delta(0.0, (worksheet.charts_bf329||0), 0.002); end
  def test_charts_bg329; assert_in_delta(0.0, (worksheet.charts_bg329||0), 0.002); end
  def test_charts_bh329; assert_in_delta(0.0, (worksheet.charts_bh329||0), 0.002); end
  def test_charts_bi329; assert_in_delta(0.0, (worksheet.charts_bi329||0), 0.002); end
  def test_charts_d330; assert_equal("Coal", worksheet.charts_d330); end
  def test_charts_e330; assert_in_delta(0.0, (worksheet.charts_e330||0), 0.002); end
  def test_charts_f330; assert_in_delta(0.0, (worksheet.charts_f330||0), 0.002); end
  def test_charts_ax330; assert_in_delta(0.0, (worksheet.charts_ax330||0), 0.002); end
  def test_charts_ay330; assert_in_epsilon(2003.3688000000002, worksheet.charts_ay330, 0.002); end
  def test_charts_ba330; assert_in_epsilon(2704.3935, worksheet.charts_ba330, 0.002); end
  def test_charts_bb330; assert_in_epsilon(3143.1914134327285, worksheet.charts_bb330, 0.002); end
  def test_charts_bc330; assert_in_epsilon(3584.150763898312, worksheet.charts_bc330, 0.002); end
  def test_charts_bd330; assert_in_epsilon(3874.5049279836685, worksheet.charts_bd330, 0.002); end
  def test_charts_be330; assert_in_epsilon(3958.482454759453, worksheet.charts_be330, 0.002); end
  def test_charts_bf330; assert_in_epsilon(4025.571481185473, worksheet.charts_bf330, 0.002); end
  def test_charts_bg330; assert_in_epsilon(3406.602207191723, worksheet.charts_bg330, 0.002); end
  def test_charts_bh330; assert_in_epsilon(2878.2636796999973, worksheet.charts_bh330, 0.002); end
  def test_charts_bi330; assert_in_epsilon(2435.1118288080042, worksheet.charts_bi330, 0.002); end
  def test_charts_d331; assert_equal("Oil", worksheet.charts_d331); end
  def test_charts_e331; assert_in_delta(0.0, (worksheet.charts_e331||0), 0.002); end
  def test_charts_f331; assert_in_delta(0.0, (worksheet.charts_f331||0), 0.002); end
  def test_charts_ax331; assert_in_delta(0.0, (worksheet.charts_ax331||0), 0.002); end
  def test_charts_ay331; assert_in_epsilon(1235.4943240445418, worksheet.charts_ay331, 0.002); end
  def test_charts_ba331; assert_in_epsilon(1459.1773716311466, worksheet.charts_ba331, 0.002); end
  def test_charts_bb331; assert_in_epsilon(2094.1308465841576, worksheet.charts_bb331, 0.002); end
  def test_charts_bc331; assert_in_epsilon(3065.9673559076937, worksheet.charts_bc331, 0.002); end
  def test_charts_bd331; assert_in_epsilon(4157.631767599084, worksheet.charts_bd331, 0.002); end
  def test_charts_be331; assert_in_epsilon(5448.054666446535, worksheet.charts_be331, 0.002); end
  def test_charts_bf331; assert_in_epsilon(6933.9942488753495, worksheet.charts_bf331, 0.002); end
  def test_charts_bg331; assert_in_epsilon(8427.225528478948, worksheet.charts_bg331, 0.002); end
  def test_charts_bh331; assert_in_epsilon(10106.26043154715, worksheet.charts_bh331, 0.002); end
  def test_charts_bi331; assert_in_epsilon(12020.741898724571, worksheet.charts_bi331, 0.002); end
  def test_charts_d332; assert_equal("Natural gas", worksheet.charts_d332); end
  def test_charts_e332; assert_in_delta(0.0, (worksheet.charts_e332||0), 0.002); end
  def test_charts_f332; assert_in_delta(0.0, (worksheet.charts_f332||0), 0.002); end
  def test_charts_ax332; assert_in_delta(0.0, (worksheet.charts_ax332||0), 0.002); end
  def test_charts_ay332; assert_in_epsilon(296.5420125, worksheet.charts_ay332, 0.002); end
  def test_charts_ba332; assert_in_epsilon(449.1920925, worksheet.charts_ba332, 0.002); end
  def test_charts_bb332; assert_in_epsilon(507.092611005, worksheet.charts_bb332, 0.002); end
  def test_charts_bc332; assert_in_epsilon(548.56099701, worksheet.charts_bc332, 0.002); end
  def test_charts_bd332; assert_in_epsilon(586.573218056151, worksheet.charts_bd332, 0.002); end
  def test_charts_be332; assert_in_epsilon(641.5415598915608, worksheet.charts_be332, 0.002); end
  def test_charts_bf332; assert_in_epsilon(680.5418754437976, worksheet.charts_bf332, 0.002); end
  def test_charts_bg332; assert_in_epsilon(722.9297284085899, worksheet.charts_bg332, 0.002); end
  def test_charts_bh332; assert_in_epsilon(769.0713331120461, worksheet.charts_bh332, 0.002); end
  def test_charts_bi332; assert_in_epsilon(803.223, worksheet.charts_bi332, 0.002); end
  def test_charts_d333; assert_equal("Total Primary Supply", worksheet.charts_d333); end
  def test_charts_e333; assert_in_delta(0.0, (worksheet.charts_e333||0), 0.002); end
  def test_charts_f333; assert_in_delta(0.0, (worksheet.charts_f333||0), 0.002); end
  def test_charts_ax333; assert_in_delta(0.0, (worksheet.charts_ax333||0), 0.002); end
  def test_charts_ay333; assert_in_epsilon(430.87022875762193, worksheet.charts_ay333, 0.002); end
  def test_charts_ba333; assert_in_epsilon(581.2480621218025, worksheet.charts_ba333, 0.002); end
  def test_charts_bb333; assert_in_epsilon(921.323614020371, worksheet.charts_bb333, 0.002); end
  def test_charts_bc333; assert_in_epsilon(1089.3245670754293, worksheet.charts_bc333, 0.002); end
  def test_charts_bd333; assert_in_epsilon(1260.1737602798842, worksheet.charts_bd333, 0.002); end
  def test_charts_be333; assert_in_epsilon(1472.0196128987889, worksheet.charts_be333, 0.002); end
  def test_charts_bf333; assert_in_epsilon(1708.5020369279832, worksheet.charts_bf333, 0.002); end
  def test_charts_bg333; assert_in_epsilon(1969.5559610432313, worksheet.charts_bg333, 0.002); end
  def test_charts_bh333; assert_in_epsilon(2252.8472290441127, worksheet.charts_bh333, 0.002); end
  def test_charts_bi333; assert_in_epsilon(2577.2839355299016, worksheet.charts_bi333, 0.002); end
  def test_charts_d334; assert_equal("Imported Hydrocarbons", worksheet.charts_d334); end
  def test_charts_f334; assert_in_delta(0.0, (worksheet.charts_f334||0), 0.002); end
  def test_charts_ax334; assert_in_delta(0.0, (worksheet.charts_ax334||0), 0.002); end
  def test_charts_ay334; assert_in_epsilon(1557.967738162384, worksheet.charts_ay334, 0.002); end
  def test_charts_ba334; assert_in_epsilon(3397.900348550722, worksheet.charts_ba334, 0.002); end
  def test_charts_bb334; assert_in_epsilon(4231.014760912135, worksheet.charts_bb334, 0.002); end
  def test_charts_bc334; assert_in_epsilon(5060.136800850636, worksheet.charts_bc334, 0.002); end
  def test_charts_bd334; assert_in_epsilon(6162.404841268646, worksheet.charts_bd334, 0.002); end
  def test_charts_be334; assert_in_epsilon(7460.144930802829, worksheet.charts_be334, 0.002); end
  def test_charts_bf334; assert_in_epsilon(8950.656893458417, worksheet.charts_bf334, 0.002); end
  def test_charts_bg334; assert_in_epsilon(10449.062934611606, worksheet.charts_bg334, 0.002); end
  def test_charts_bh334; assert_in_epsilon(12125.186060951159, worksheet.charts_bh334, 0.002); end
  def test_charts_bi334; assert_in_epsilon(14048.911959798997, worksheet.charts_bi334, 0.002); end
  def test_charts_bh335; assert_equal("% imported", worksheet.charts_bh335); end
  def test_charts_bi335; assert_in_epsilon(5.451053244900033, worksheet.charts_bi335, 0.002); end
  def test_charts_d336; assert_equal("Primary demand", worksheet.charts_d336); end
  def test_charts_ax336; assert_in_delta(0.0, (worksheet.charts_ax336||0), 0.002); end
  def test_charts_ay336; assert_in_epsilon(3938.870702431258, worksheet.charts_ay336, 0.002); end
  def test_charts_ba336; assert_in_epsilon(4868.177288062636, worksheet.charts_ba336, 0.002); end
  def test_charts_bb336; assert_in_epsilon(6504.809109942775, worksheet.charts_bb336, 0.002); end
  def test_charts_bc336; assert_in_epsilon(8643.36808394456, worksheet.charts_bc336, 0.002); end
  def test_charts_bd336; assert_in_epsilon(11195.232592127055, worksheet.charts_bd336, 0.002); end
  def test_charts_be336; assert_in_epsilon(14288.32562279502, worksheet.charts_be336, 0.002); end
  def test_charts_bf336; assert_in_epsilon(17496.300880645067, worksheet.charts_bf336, 0.002); end
  def test_charts_bg336; assert_in_epsilon(20783.703320373068, worksheet.charts_bg336, 0.002); end
  def test_charts_bh336; assert_in_epsilon(24015.916656305515, worksheet.charts_bh336, 0.002); end
  def test_charts_bi336; assert_in_epsilon(27635.26137277401, worksheet.charts_bi336, 0.002); end
  def test_charts_b339; assert_equal("Electricity, format for web-based interface", worksheet.charts_b339); end
  def test_charts_c341; assert_equal("V.01", worksheet.charts_c341); end
  def test_charts_ay341; assert_equal("2007", worksheet.charts_ay341); end
  def test_charts_ba341; assert_equal("2012", worksheet.charts_ba341); end
  def test_charts_bb341; assert_equal("2017", worksheet.charts_bb341); end
  def test_charts_bc341; assert_equal("2022", worksheet.charts_bc341); end
  def test_charts_bd341; assert_equal("2027", worksheet.charts_bd341); end
  def test_charts_be341; assert_equal("2032", worksheet.charts_be341); end
  def test_charts_bf341; assert_equal("2037", worksheet.charts_bf341); end
  def test_charts_bg341; assert_equal("2042", worksheet.charts_bg341); end
  def test_charts_bh341; assert_equal("2047", worksheet.charts_bh341); end
  def test_charts_bi341; assert_equal("2052", worksheet.charts_bi341); end
  def test_charts_bj341; assert_equal("TWh", worksheet.charts_bj341); end
  def test_charts_c343; assert_equal("X.a", worksheet.charts_c343); end
  def test_charts_d343; assert_equal("Domestic Lighting & Appliances", worksheet.charts_d343); end
  def test_charts_ay343; assert_in_epsilon(117.7523722493629, worksheet.charts_ay343, 0.002); end
  def test_charts_ba343; assert_in_epsilon(162.8229405663922, worksheet.charts_ba343, 0.002); end
  def test_charts_bb343; assert_in_epsilon(294.1978328715296, worksheet.charts_bb343, 0.002); end
  def test_charts_bc343; assert_in_epsilon(488.120152658904, worksheet.charts_bc343, 0.002); end
  def test_charts_bd343; assert_in_epsilon(762.138273505526, worksheet.charts_bd343, 0.002); end
  def test_charts_be343; assert_in_epsilon(1157.9120424167459, worksheet.charts_be343, 0.002); end
  def test_charts_bf343; assert_in_epsilon(1452.2441557318687, worksheet.charts_bf343, 0.002); end
  def test_charts_bg343; assert_in_epsilon(1803.3634131162555, worksheet.charts_bg343, 0.002); end
  def test_charts_bh343; assert_in_epsilon(2203.893791654689, worksheet.charts_bh343, 0.002); end
  def test_charts_bi343; assert_in_epsilon(2671.8455088986316, worksheet.charts_bi343, 0.002); end
  def test_charts_c344; assert_equal("X.b", worksheet.charts_c344); end
  def test_charts_d344; assert_equal("Commercial Lighting & Appliances", worksheet.charts_d344); end
  def test_charts_ay344; assert_in_epsilon(69.81857167070955, worksheet.charts_ay344, 0.002); end
  def test_charts_ba344; assert_in_epsilon(69.8185182074853, worksheet.charts_ba344, 0.002); end
  def test_charts_bb344; assert_in_epsilon(115.39506380103352, worksheet.charts_bb344, 0.002); end
  def test_charts_bc344; assert_in_epsilon(190.7403546122752, worksheet.charts_bc344, 0.002); end
  def test_charts_bd344; assert_in_epsilon(315.3108276463584, worksheet.charts_bd344, 0.002); end
  def test_charts_be344; assert_in_epsilon(521.2826104810658, worksheet.charts_be344, 0.002); end
  def test_charts_bf344; assert_in_epsilon(689.4051063589067, worksheet.charts_bf344, 0.002); end
  def test_charts_bg344; assert_in_epsilon(911.749902556425, worksheet.charts_bg344, 0.002); end
  def test_charts_bh344; assert_in_epsilon(970.175284639915, worksheet.charts_bh344, 0.002); end
  def test_charts_bi344; assert_in_epsilon(1032.3445308366922, worksheet.charts_bi344, 0.002); end
  def test_charts_c345; assert_equal("XII.a", worksheet.charts_c345); end
  def test_charts_d345; assert_equal("Domestic passenger transport", worksheet.charts_d345); end
  def test_charts_ay345; assert_in_epsilon(7.804557892034429, worksheet.charts_ay345, 0.002); end
  def test_charts_ba345; assert_in_epsilon(7.804557892034429, worksheet.charts_ba345, 0.002); end
  def test_charts_bb345; assert_in_epsilon(9.98120573742474, worksheet.charts_bb345, 0.002); end
  def test_charts_bc345; assert_in_epsilon(12.677744583468431, worksheet.charts_bc345, 0.002); end
  def test_charts_bd345; assert_in_epsilon(15.183119042462815, worksheet.charts_bd345, 0.002); end
  def test_charts_be345; assert_in_epsilon(17.97800145980359, worksheet.charts_be345, 0.002); end
  def test_charts_bf345; assert_in_epsilon(20.996398618954622, worksheet.charts_bf345, 0.002); end
  def test_charts_bg345; assert_in_epsilon(23.918000610343412, worksheet.charts_bg345, 0.002); end
  def test_charts_bh345; assert_in_epsilon(26.47001683994065, worksheet.charts_bh345, 0.002); end
  def test_charts_bi345; assert_in_epsilon(28.239990009727272, worksheet.charts_bi345, 0.002); end
  def test_charts_c346; assert_equal("XII.b", worksheet.charts_c346); end
  def test_charts_d346; assert_equal("Domestic freight", worksheet.charts_d346); end
  def test_charts_ay346; assert_in_epsilon(6.371041500000006, worksheet.charts_ay346, 0.002); end
  def test_charts_ba346; assert_in_epsilon(6.371041500000006, worksheet.charts_ba346, 0.002); end
  def test_charts_bb346; assert_in_epsilon(9.40687970251694, worksheet.charts_bb346, 0.002); end
  def test_charts_bc346; assert_in_epsilon(13.140797584316113, worksheet.charts_bc346, 0.002); end
  def test_charts_bd346; assert_in_epsilon(17.610110958084224, worksheet.charts_bd346, 0.002); end
  def test_charts_be346; assert_in_epsilon(22.892634286083435, worksheet.charts_be346, 0.002); end
  def test_charts_bf346; assert_in_epsilon(28.404926019576415, worksheet.charts_bf346, 0.002); end
  def test_charts_bg346; assert_in_epsilon(30.876418737637415, worksheet.charts_bg346, 0.002); end
  def test_charts_bh346; assert_in_epsilon(33.48478498636817, worksheet.charts_bh346, 0.002); end
  def test_charts_bi346; assert_in_epsilon(35.94665822824585, worksheet.charts_bi346, 0.002); end
  def test_charts_c347; assert_equal("XIII.a", worksheet.charts_c347); end
  def test_charts_d347; assert_equal("Domestic Cooking", worksheet.charts_d347); end
  def test_charts_ay347; assert_in_delta(0.30660334104356374, worksheet.charts_ay347, 0.002); end
  def test_charts_ba347; assert_in_delta(0.4056812477360954, worksheet.charts_ba347, 0.002); end
  def test_charts_bb347; assert_in_epsilon(1.9119107308416539, worksheet.charts_bb347, 0.002); end
  def test_charts_bc347; assert_in_epsilon(3.0737404888957927, worksheet.charts_bc347, 0.002); end
  def test_charts_bd347; assert_in_epsilon(5.987845305057132, worksheet.charts_bd347, 0.002); end
  def test_charts_be347; assert_in_epsilon(10.924338830969084, worksheet.charts_be347, 0.002); end
  def test_charts_bf347; assert_in_epsilon(14.605179460099949, worksheet.charts_bf347, 0.002); end
  def test_charts_bg347; assert_in_epsilon(19.221420721203312, worksheet.charts_bg347, 0.002); end
  def test_charts_bh347; assert_in_epsilon(25.37842895536987, worksheet.charts_bh347, 0.002); end
  def test_charts_bi347; assert_in_epsilon(29.2476501509129, worksheet.charts_bi347, 0.002); end
  def test_charts_c348; assert_equal("XIII.b", worksheet.charts_c348); end
  def test_charts_d348; assert_equal("Commercial Cooking", worksheet.charts_d348); end
  def test_charts_ay348; assert_in_delta(0.0, (worksheet.charts_ay348||0), 0.002); end
  def test_charts_ba348; assert_in_delta(0.0, (worksheet.charts_ba348||0), 0.002); end
  def test_charts_bb348; assert_in_delta(0.0, (worksheet.charts_bb348||0), 0.002); end
  def test_charts_bc348; assert_in_delta(0.0, (worksheet.charts_bc348||0), 0.002); end
  def test_charts_bd348; assert_in_delta(0.0, (worksheet.charts_bd348||0), 0.002); end
  def test_charts_be348; assert_in_delta(0.0, (worksheet.charts_be348||0), 0.002); end
  def test_charts_bf348; assert_in_delta(0.0, (worksheet.charts_bf348||0), 0.002); end
  def test_charts_bg348; assert_in_delta(0.0, (worksheet.charts_bg348||0), 0.002); end
  def test_charts_bh348; assert_in_delta(0.0, (worksheet.charts_bh348||0), 0.002); end
  def test_charts_bi348; assert_in_delta(0.0, (worksheet.charts_bi348||0), 0.002); end
  def test_charts_c349; assert_equal("XIV", worksheet.charts_c349); end
  def test_charts_d349; assert_equal("Agriculture", worksheet.charts_d349); end
  def test_charts_ay349; assert_in_epsilon(99.549, worksheet.charts_ay349, 0.002); end
  def test_charts_ba349; assert_in_epsilon(135.84360999999998, worksheet.charts_ba349, 0.002); end
  def test_charts_bb349; assert_in_epsilon(188.7750131492979, worksheet.charts_bb349, 0.002); end
  def test_charts_bc349; assert_in_epsilon(262.3257106793957, worksheet.charts_bc349, 0.002); end
  def test_charts_bd349; assert_in_epsilon(335.74068575957824, worksheet.charts_bd349, 0.002); end
  def test_charts_be349; assert_in_epsilon(428.7780628500808, worksheet.charts_be349, 0.002); end
  def test_charts_bf349; assert_in_epsilon(506.9106409238258, worksheet.charts_bf349, 0.002); end
  def test_charts_bg349; assert_in_epsilon(599.267848785967, worksheet.charts_bg349, 0.002); end
  def test_charts_bh349; assert_in_epsilon(658.5674956470099, worksheet.charts_bh349, 0.002); end
  def test_charts_bi349; assert_in_epsilon(723.7192953583711, worksheet.charts_bi349, 0.002); end
  def test_charts_c350; assert_equal("XVI", worksheet.charts_c350); end
  def test_charts_d350; assert_equal("Telecom", worksheet.charts_d350); end
  def test_charts_ay350; assert_in_epsilon(2.3668199999999997, worksheet.charts_ay350, 0.002); end
  def test_charts_ba350; assert_in_epsilon(7.8894, worksheet.charts_ba350, 0.002); end
  def test_charts_bb350; assert_in_epsilon(11.339855899466881, worksheet.charts_bb350, 0.002); end
  def test_charts_bc350; assert_in_epsilon(16.117199465438524, worksheet.charts_bc350, 0.002); end
  def test_charts_bd350; assert_in_epsilon(21.568448563930875, worksheet.charts_bd350, 0.002); end
  def test_charts_be350; assert_in_epsilon(30.55027451036736, worksheet.charts_be350, 0.002); end
  def test_charts_bf350; assert_in_epsilon(43.39132800109303, worksheet.charts_bf350, 0.002); end
  def test_charts_bg350; assert_in_epsilon(61.08823159439924, worksheet.charts_bg350, 0.002); end
  def test_charts_bh350; assert_in_epsilon(81.74983400997752, worksheet.charts_bh350, 0.002); end
  def test_charts_bi350; assert_in_epsilon(115.96370196690869, worksheet.charts_bi350, 0.002); end
  def test_charts_c351; assert_equal("XV.a", worksheet.charts_c351); end
  def test_charts_d351; assert_equal("Domestic Gas Production", worksheet.charts_d351); end
  def test_charts_ay351; assert_in_delta(0.0, (worksheet.charts_ay351||0), 0.002); end
  def test_charts_ba351; assert_in_delta(0.0, (worksheet.charts_ba351||0), 0.002); end
  def test_charts_bb351; assert_in_delta(0.0, (worksheet.charts_bb351||0), 0.002); end
  def test_charts_bc351; assert_in_delta(0.0, (worksheet.charts_bc351||0), 0.002); end
  def test_charts_bd351; assert_in_delta(0.0, (worksheet.charts_bd351||0), 0.002); end
  def test_charts_be351; assert_in_delta(0.0, (worksheet.charts_be351||0), 0.002); end
  def test_charts_bf351; assert_in_delta(0.0, (worksheet.charts_bf351||0), 0.002); end
  def test_charts_bg351; assert_in_delta(0.0, (worksheet.charts_bg351||0), 0.002); end
  def test_charts_bh351; assert_in_delta(0.0, (worksheet.charts_bh351||0), 0.002); end
  def test_charts_bi351; assert_in_delta(0.0, (worksheet.charts_bi351||0), 0.002); end
  def test_charts_c352; assert_equal("XV.b", worksheet.charts_c352); end
  def test_charts_d352; assert_equal("Domestic Coal Production", worksheet.charts_d352); end
  def test_charts_ay352; assert_in_delta(0.0, (worksheet.charts_ay352||0), 0.002); end
  def test_charts_ba352; assert_in_delta(0.0, (worksheet.charts_ba352||0), 0.002); end
  def test_charts_bb352; assert_in_delta(0.0, (worksheet.charts_bb352||0), 0.002); end
  def test_charts_bc352; assert_in_delta(0.0, (worksheet.charts_bc352||0), 0.002); end
  def test_charts_bd352; assert_in_delta(0.0, (worksheet.charts_bd352||0), 0.002); end
  def test_charts_be352; assert_in_delta(0.0, (worksheet.charts_be352||0), 0.002); end
  def test_charts_bf352; assert_in_delta(0.0, (worksheet.charts_bf352||0), 0.002); end
  def test_charts_bg352; assert_in_delta(0.0, (worksheet.charts_bg352||0), 0.002); end
  def test_charts_bh352; assert_in_delta(0.0, (worksheet.charts_bh352||0), 0.002); end
  def test_charts_bi352; assert_in_delta(0.0, (worksheet.charts_bi352||0), 0.002); end
  def test_charts_c353; assert_equal("XV.c", worksheet.charts_c353); end
  def test_charts_d353; assert_equal("Domestic Oil Production", worksheet.charts_d353); end
  def test_charts_c354; assert_equal("XVII.a", worksheet.charts_c354); end
  def test_charts_d354; assert_equal("Fossil Fuel Transfer", worksheet.charts_d354); end
  def test_charts_c355; assert_equal("XI", worksheet.charts_c355); end
  def test_charts_d355; assert_equal("Industry", worksheet.charts_d355); end
  def test_charts_ay355; assert_in_epsilon(291.7178485116746, worksheet.charts_ay355, 0.002); end
  def test_charts_ba355; assert_in_epsilon(401.235, worksheet.charts_ba355, 0.002); end
  def test_charts_bb355; assert_in_epsilon(503.1177061491396, worksheet.charts_bb355, 0.002); end
  def test_charts_bc355; assert_in_epsilon(638.2062218628469, worksheet.charts_bc355, 0.002); end
  def test_charts_bd355; assert_in_epsilon(792.4818867749141, worksheet.charts_bd355, 0.002); end
  def test_charts_be355; assert_in_epsilon(966.17848871674, worksheet.charts_be355, 0.002); end
  def test_charts_bf355; assert_in_epsilon(1200.6228340761327, worksheet.charts_bf355, 0.002); end
  def test_charts_bg355; assert_in_epsilon(1462.2792945499318, worksheet.charts_bg355, 0.002); end
  def test_charts_bh355; assert_in_epsilon(1752.1756493279522, worksheet.charts_bh355, 0.002); end
  def test_charts_bi355; assert_in_epsilon(2061.261323802787, worksheet.charts_bi355, 0.002); end
  def test_charts_d357; assert_equal("Total", worksheet.charts_d357); end
  def test_charts_ay357; assert_in_epsilon(595.6868151648251, worksheet.charts_ay357, 0.002); end
  def test_charts_ba357; assert_in_epsilon(792.1907494136481, worksheet.charts_ba357, 0.002); end
  def test_charts_bb357; assert_in_epsilon(1134.1254680412508, worksheet.charts_bb357, 0.002); end
  def test_charts_bc357; assert_in_epsilon(1624.4019219355405, worksheet.charts_bc357, 0.002); end
  def test_charts_bd357; assert_in_epsilon(2266.021197555912, worksheet.charts_bd357, 0.002); end
  def test_charts_be357; assert_in_epsilon(3156.496453551856, worksheet.charts_be357, 0.002); end
  def test_charts_bf357; assert_in_epsilon(3956.5805691904575, worksheet.charts_bf357, 0.002); end
  def test_charts_bg357; assert_in_epsilon(4911.764530672162, worksheet.charts_bg357, 0.002); end
  def test_charts_bh357; assert_in_epsilon(5751.895286061223, worksheet.charts_bh357, 0.002); end
  def test_charts_bi357; assert_in_epsilon(6698.568659252276, worksheet.charts_bi357, 0.002); end
  def test_charts_d359; assert_equal("Transport", worksheet.charts_d359); end
  def test_charts_ay359; assert_in_epsilon(14.175599392034435, worksheet.charts_ay359, 0.002); end
  def test_charts_ba359; assert_in_epsilon(14.175599392034435, worksheet.charts_ba359, 0.002); end
  def test_charts_bb359; assert_in_epsilon(19.38808543994168, worksheet.charts_bb359, 0.002); end
  def test_charts_bc359; assert_in_epsilon(25.818542167784543, worksheet.charts_bc359, 0.002); end
  def test_charts_bd359; assert_in_epsilon(32.79323000054704, worksheet.charts_bd359, 0.002); end
  def test_charts_be359; assert_in_epsilon(40.87063574588703, worksheet.charts_be359, 0.002); end
  def test_charts_bf359; assert_in_epsilon(49.40132463853104, worksheet.charts_bf359, 0.002); end
  def test_charts_bg359; assert_in_epsilon(54.79441934798083, worksheet.charts_bg359, 0.002); end
  def test_charts_bh359; assert_in_epsilon(59.954801826308824, worksheet.charts_bh359, 0.002); end
  def test_charts_bi359; assert_in_epsilon(64.18664823797312, worksheet.charts_bi359, 0.002); end
  def test_charts_d360; assert_equal("Industry", worksheet.charts_d360); end
  def test_charts_ay360; assert_in_epsilon(291.7178485116746, worksheet.charts_ay360, 0.002); end
  def test_charts_ba360; assert_in_epsilon(401.235, worksheet.charts_ba360, 0.002); end
  def test_charts_bb360; assert_in_epsilon(503.1177061491396, worksheet.charts_bb360, 0.002); end
  def test_charts_bc360; assert_in_epsilon(638.2062218628469, worksheet.charts_bc360, 0.002); end
  def test_charts_bd360; assert_in_epsilon(792.4818867749141, worksheet.charts_bd360, 0.002); end
  def test_charts_be360; assert_in_epsilon(966.17848871674, worksheet.charts_be360, 0.002); end
  def test_charts_bf360; assert_in_epsilon(1200.6228340761327, worksheet.charts_bf360, 0.002); end
  def test_charts_bg360; assert_in_epsilon(1462.2792945499318, worksheet.charts_bg360, 0.002); end
  def test_charts_bh360; assert_in_epsilon(1752.1756493279522, worksheet.charts_bh360, 0.002); end
  def test_charts_bi360; assert_in_epsilon(2061.261323802787, worksheet.charts_bi360, 0.002); end
  def test_charts_d361; assert_equal("Cooking", worksheet.charts_d361); end
  def test_charts_ay361; assert_in_delta(0.30660334104356374, worksheet.charts_ay361, 0.002); end
  def test_charts_ba361; assert_in_delta(0.4056812477360954, worksheet.charts_ba361, 0.002); end
  def test_charts_bb361; assert_in_epsilon(1.9119107308416539, worksheet.charts_bb361, 0.002); end
  def test_charts_bc361; assert_in_epsilon(3.0737404888957927, worksheet.charts_bc361, 0.002); end
  def test_charts_bd361; assert_in_epsilon(5.987845305057132, worksheet.charts_bd361, 0.002); end
  def test_charts_be361; assert_in_epsilon(10.924338830969084, worksheet.charts_be361, 0.002); end
  def test_charts_bf361; assert_in_epsilon(14.605179460099949, worksheet.charts_bf361, 0.002); end
  def test_charts_bg361; assert_in_epsilon(19.221420721203312, worksheet.charts_bg361, 0.002); end
  def test_charts_bh361; assert_in_epsilon(25.37842895536987, worksheet.charts_bh361, 0.002); end
  def test_charts_bi361; assert_in_epsilon(29.2476501509129, worksheet.charts_bi361, 0.002); end
  def test_charts_d362; assert_equal("Lighting & appliances", worksheet.charts_d362); end
  def test_charts_ay362; assert_in_epsilon(187.57094392007247, worksheet.charts_ay362, 0.002); end
  def test_charts_ba362; assert_in_epsilon(232.6414587738775, worksheet.charts_ba362, 0.002); end
  def test_charts_bb362; assert_in_epsilon(409.59289667256314, worksheet.charts_bb362, 0.002); end
  def test_charts_bc362; assert_in_epsilon(678.8605072711791, worksheet.charts_bc362, 0.002); end
  def test_charts_bd362; assert_in_epsilon(1077.4491011518844, worksheet.charts_bd362, 0.002); end
  def test_charts_be362; assert_in_epsilon(1679.1946528978117, worksheet.charts_be362, 0.002); end
  def test_charts_bf362; assert_in_epsilon(2141.649262090775, worksheet.charts_bf362, 0.002); end
  def test_charts_bg362; assert_in_epsilon(2715.1133156726805, worksheet.charts_bg362, 0.002); end
  def test_charts_bh362; assert_in_epsilon(3174.0690762946037, worksheet.charts_bh362, 0.002); end
  def test_charts_bi362; assert_in_epsilon(3704.190039735324, worksheet.charts_bi362, 0.002); end
  def test_charts_d363; assert_equal("Telecom", worksheet.charts_d363); end
  def test_charts_ay363; assert_in_epsilon(99.549, worksheet.charts_ay363, 0.002); end
  def test_charts_ba363; assert_in_epsilon(135.84360999999998, worksheet.charts_ba363, 0.002); end
  def test_charts_bb363; assert_in_epsilon(188.7750131492979, worksheet.charts_bb363, 0.002); end
  def test_charts_bc363; assert_in_epsilon(262.3257106793957, worksheet.charts_bc363, 0.002); end
  def test_charts_bd363; assert_in_epsilon(335.74068575957824, worksheet.charts_bd363, 0.002); end
  def test_charts_be363; assert_in_epsilon(428.7780628500808, worksheet.charts_be363, 0.002); end
  def test_charts_bf363; assert_in_epsilon(506.9106409238258, worksheet.charts_bf363, 0.002); end
  def test_charts_bg363; assert_in_epsilon(599.267848785967, worksheet.charts_bg363, 0.002); end
  def test_charts_bh363; assert_in_epsilon(658.5674956470099, worksheet.charts_bh363, 0.002); end
  def test_charts_bi363; assert_in_epsilon(723.7192953583711, worksheet.charts_bi363, 0.002); end
  def test_charts_d364; assert_equal("Agriculture", worksheet.charts_d364); end
  def test_charts_ay364; assert_in_epsilon(2.3668199999999997, worksheet.charts_ay364, 0.002); end
  def test_charts_ba364; assert_in_epsilon(7.8894, worksheet.charts_ba364, 0.002); end
  def test_charts_bb364; assert_in_epsilon(11.339855899466881, worksheet.charts_bb364, 0.002); end
  def test_charts_bc364; assert_in_epsilon(16.117199465438524, worksheet.charts_bc364, 0.002); end
  def test_charts_bd364; assert_in_epsilon(21.568448563930875, worksheet.charts_bd364, 0.002); end
  def test_charts_be364; assert_in_epsilon(30.55027451036736, worksheet.charts_be364, 0.002); end
  def test_charts_bf364; assert_in_epsilon(43.39132800109303, worksheet.charts_bf364, 0.002); end
  def test_charts_bg364; assert_in_epsilon(61.08823159439924, worksheet.charts_bg364, 0.002); end
  def test_charts_bh364; assert_in_epsilon(81.74983400997752, worksheet.charts_bh364, 0.002); end
  def test_charts_bi364; assert_in_epsilon(115.96370196690869, worksheet.charts_bi364, 0.002); end
  def test_charts_d365; assert_equal("Total", worksheet.charts_d365); end
  def test_charts_ay365; assert_in_epsilon(595.686815164825, worksheet.charts_ay365, 0.002); end
  def test_charts_ba365; assert_in_epsilon(792.1907494136481, worksheet.charts_ba365, 0.002); end
  def test_charts_bb365; assert_in_epsilon(1134.1254680412508, worksheet.charts_bb365, 0.002); end
  def test_charts_bc365; assert_in_epsilon(1624.4019219355407, worksheet.charts_bc365, 0.002); end
  def test_charts_bd365; assert_in_epsilon(2266.021197555912, worksheet.charts_bd365, 0.002); end
  def test_charts_be365; assert_in_epsilon(3156.496453551856, worksheet.charts_be365, 0.002); end
  def test_charts_bf365; assert_in_epsilon(3956.5805691904575, worksheet.charts_bf365, 0.002); end
  def test_charts_bg365; assert_in_epsilon(4911.764530672162, worksheet.charts_bg365, 0.002); end
  def test_charts_bh365; assert_in_epsilon(5751.895286061223, worksheet.charts_bh365, 0.002); end
  def test_charts_bi365; assert_in_epsilon(6698.568659252277, worksheet.charts_bi365, 0.002); end
  def test_intermediate_output_b2; assert_equal("Energy source / use charts", worksheet.intermediate_output_b2); end
  def test_intermediate_output_h3; assert_equal("Historic data:", worksheet.intermediate_output_h3); end
  def test_intermediate_output_ay3; assert_equal("2052 Calculator calculations", worksheet.intermediate_output_ay3); end
  def test_intermediate_output_d4; assert_equal("TWh / year", worksheet.intermediate_output_d4); end
  def test_intermediate_output_f4; assert_equal("2007 (Consistent)", worksheet.intermediate_output_f4); end
  def test_intermediate_output_h4; assert_in_epsilon(1970.0, worksheet.intermediate_output_h4, 0.002); end
  def test_intermediate_output_i4; assert_in_epsilon(1971.0, worksheet.intermediate_output_i4, 0.002); end
  def test_intermediate_output_j4; assert_in_epsilon(1972.0, worksheet.intermediate_output_j4, 0.002); end
  def test_intermediate_output_k4; assert_in_epsilon(1973.0, worksheet.intermediate_output_k4, 0.002); end
  def test_intermediate_output_l4; assert_in_epsilon(1974.0, worksheet.intermediate_output_l4, 0.002); end
  def test_intermediate_output_m4; assert_in_epsilon(1975.0, worksheet.intermediate_output_m4, 0.002); end
  def test_intermediate_output_n4; assert_in_epsilon(1976.0, worksheet.intermediate_output_n4, 0.002); end
  def test_intermediate_output_o4; assert_in_epsilon(1977.0, worksheet.intermediate_output_o4, 0.002); end
  def test_intermediate_output_p4; assert_in_epsilon(1978.0, worksheet.intermediate_output_p4, 0.002); end
  def test_intermediate_output_q4; assert_in_epsilon(1979.0, worksheet.intermediate_output_q4, 0.002); end
  def test_intermediate_output_r4; assert_in_epsilon(1980.0, worksheet.intermediate_output_r4, 0.002); end
  def test_intermediate_output_s4; assert_in_epsilon(1981.0, worksheet.intermediate_output_s4, 0.002); end
  def test_intermediate_output_t4; assert_in_epsilon(1982.0, worksheet.intermediate_output_t4, 0.002); end
  def test_intermediate_output_u4; assert_in_epsilon(1983.0, worksheet.intermediate_output_u4, 0.002); end
  def test_intermediate_output_v4; assert_in_epsilon(1984.0, worksheet.intermediate_output_v4, 0.002); end
  def test_intermediate_output_w4; assert_in_epsilon(1985.0, worksheet.intermediate_output_w4, 0.002); end
  def test_intermediate_output_x4; assert_in_epsilon(1986.0, worksheet.intermediate_output_x4, 0.002); end
  def test_intermediate_output_y4; assert_in_epsilon(1987.0, worksheet.intermediate_output_y4, 0.002); end
  def test_intermediate_output_z4; assert_in_epsilon(1988.0, worksheet.intermediate_output_z4, 0.002); end
  def test_intermediate_output_aa4; assert_in_epsilon(1989.0, worksheet.intermediate_output_aa4, 0.002); end
  def test_intermediate_output_ab4; assert_in_epsilon(1990.0, worksheet.intermediate_output_ab4, 0.002); end
  def test_intermediate_output_ac4; assert_in_epsilon(1991.0, worksheet.intermediate_output_ac4, 0.002); end
  def test_intermediate_output_ad4; assert_in_epsilon(1992.0, worksheet.intermediate_output_ad4, 0.002); end
  def test_intermediate_output_ae4; assert_in_epsilon(1993.0, worksheet.intermediate_output_ae4, 0.002); end
  def test_intermediate_output_af4; assert_in_epsilon(1994.0, worksheet.intermediate_output_af4, 0.002); end
  def test_intermediate_output_ag4; assert_in_epsilon(1995.0, worksheet.intermediate_output_ag4, 0.002); end
  def test_intermediate_output_ah4; assert_in_epsilon(1996.0, worksheet.intermediate_output_ah4, 0.002); end
  def test_intermediate_output_ai4; assert_in_epsilon(1997.0, worksheet.intermediate_output_ai4, 0.002); end
  def test_intermediate_output_aj4; assert_in_epsilon(1998.0, worksheet.intermediate_output_aj4, 0.002); end
  def test_intermediate_output_ak4; assert_in_epsilon(1999.0, worksheet.intermediate_output_ak4, 0.002); end
  def test_intermediate_output_al4; assert_in_epsilon(2000.0, worksheet.intermediate_output_al4, 0.002); end
  def test_intermediate_output_am4; assert_in_epsilon(2001.0, worksheet.intermediate_output_am4, 0.002); end
  def test_intermediate_output_an4; assert_in_epsilon(2002.0, worksheet.intermediate_output_an4, 0.002); end
  def test_intermediate_output_ao4; assert_in_epsilon(2003.0, worksheet.intermediate_output_ao4, 0.002); end
  def test_intermediate_output_ap4; assert_in_epsilon(2004.0, worksheet.intermediate_output_ap4, 0.002); end
  def test_intermediate_output_aq4; assert_in_epsilon(2005.0, worksheet.intermediate_output_aq4, 0.002); end
  def test_intermediate_output_ar4; assert_in_epsilon(2006.0, worksheet.intermediate_output_ar4, 0.002); end
  def test_intermediate_output_as4; assert_in_epsilon(2007.0, worksheet.intermediate_output_as4, 0.002); end
  def test_intermediate_output_at4; assert_in_epsilon(2008.0, worksheet.intermediate_output_at4, 0.002); end
  def test_intermediate_output_au4; assert_in_epsilon(2009.0, worksheet.intermediate_output_au4, 0.002); end
  def test_intermediate_output_av4; assert_in_epsilon(2010.0, worksheet.intermediate_output_av4, 0.002); end
  def test_intermediate_output_aw4; assert_equal("Source:", worksheet.intermediate_output_aw4); end
  def test_intermediate_output_ay4; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay4, 0.002); end
  def test_intermediate_output_ba4; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba4, 0.002); end
  def test_intermediate_output_bb4; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb4, 0.002); end
  def test_intermediate_output_bc4; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc4, 0.002); end
  def test_intermediate_output_bd4; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd4, 0.002); end
  def test_intermediate_output_be4; assert_in_epsilon(2032.0, worksheet.intermediate_output_be4, 0.002); end
  def test_intermediate_output_bf4; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf4, 0.002); end
  def test_intermediate_output_bg4; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg4, 0.002); end
  def test_intermediate_output_bh4; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh4, 0.002); end
  def test_intermediate_output_bi4; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi4, 0.002); end
  def test_intermediate_output_c6; assert_equal("Use", worksheet.intermediate_output_c6); end
  def test_intermediate_output_c7; assert_equal("L.01", worksheet.intermediate_output_c7); end
  def test_intermediate_output_d7; assert_equal("Domestic Lighting & appliances", worksheet.intermediate_output_d7); end
  def test_intermediate_output_ay7; assert_in_epsilon(125.22829189364668, worksheet.intermediate_output_ay7, 0.002); end
  def test_intermediate_output_ba7; assert_in_epsilon(169.69505456493178, worksheet.intermediate_output_ba7, 0.002); end
  def test_intermediate_output_bb7; assert_in_epsilon(300.04431466291476, worksheet.intermediate_output_bb7, 0.002); end
  def test_intermediate_output_bc7; assert_in_epsilon(492.814427536887, worksheet.intermediate_output_bc7, 0.002); end
  def test_intermediate_output_bd7; assert_in_epsilon(765.5110630105391, worksheet.intermediate_output_bd7, 0.002); end
  def test_intermediate_output_be7; assert_in_epsilon(1159.8318853695678, worksheet.intermediate_output_be7, 0.002); end
  def test_intermediate_output_bf7; assert_in_epsilon(1453.7842020047071, worksheet.intermediate_output_bf7, 0.002); end
  def test_intermediate_output_bg7; assert_in_epsilon(1804.4491932933804, worksheet.intermediate_output_bg7, 0.002); end
  def test_intermediate_output_bh7; assert_in_epsilon(2204.4681998125216, worksheet.intermediate_output_bh7, 0.002); end
  def test_intermediate_output_bi7; assert_in_epsilon(2671.845508898626, worksheet.intermediate_output_bi7, 0.002); end
  def test_intermediate_output_c8; assert_equal("L.02", worksheet.intermediate_output_c8); end
  def test_intermediate_output_d8; assert_equal("Commercial Lighting & Appliances", worksheet.intermediate_output_d8); end
  def test_intermediate_output_ay8; assert_in_epsilon(69.8373540220934, worksheet.intermediate_output_ay8, 0.002); end
  def test_intermediate_output_ba8; assert_in_epsilon(69.8373540220934, worksheet.intermediate_output_ba8, 0.002); end
  def test_intermediate_output_bb8; assert_in_epsilon(115.42859864757057, worksheet.intermediate_output_bb8, 0.002); end
  def test_intermediate_output_bc8; assert_in_epsilon(190.8011495057212, worksheet.intermediate_output_bc8, 0.002); end
  def test_intermediate_output_bd8; assert_in_epsilon(315.42107081978503, worksheet.intermediate_output_bd8, 0.002); end
  def test_intermediate_output_be8; assert_in_epsilon(521.4861715117739, worksheet.intermediate_output_be8, 0.002); end
  def test_intermediate_output_bf8; assert_in_epsilon(689.6753068284789, worksheet.intermediate_output_bf8, 0.002); end
  def test_intermediate_output_bg8; assert_in_epsilon(912.1086134845236, worksheet.intermediate_output_bg8, 0.002); end
  def test_intermediate_output_bh8; assert_in_epsilon(970.5584977769698, worksheet.intermediate_output_bh8, 0.002); end
  def test_intermediate_output_bi8; assert_in_epsilon(1032.7539765340366, worksheet.intermediate_output_bi8, 0.002); end
  def test_intermediate_output_c9; assert_equal("L.00", worksheet.intermediate_output_c9); end
  def test_intermediate_output_d9; assert_equal("Lighting & Appliances", worksheet.intermediate_output_d9); end
  def test_intermediate_output_ay9; assert_in_epsilon(195.04686356435622, worksheet.intermediate_output_ay9, 0.002); end
  def test_intermediate_output_ba9; assert_in_epsilon(239.51357277241706, worksheet.intermediate_output_ba9, 0.002); end
  def test_intermediate_output_bb9; assert_in_epsilon(415.43937846394886, worksheet.intermediate_output_bb9, 0.002); end
  def test_intermediate_output_bc9; assert_in_epsilon(683.5547821491623, worksheet.intermediate_output_bc9, 0.002); end
  def test_intermediate_output_bd9; assert_in_epsilon(1080.8218906568982, worksheet.intermediate_output_bd9, 0.002); end
  def test_intermediate_output_be9; assert_in_epsilon(1681.1144958506338, worksheet.intermediate_output_be9, 0.002); end
  def test_intermediate_output_bf9; assert_in_epsilon(2143.1893083636123, worksheet.intermediate_output_bf9, 0.002); end
  def test_intermediate_output_bg9; assert_in_epsilon(2716.199095849808, worksheet.intermediate_output_bg9, 0.002); end
  def test_intermediate_output_bh9; assert_in_epsilon(3174.6434844524338, worksheet.intermediate_output_bh9, 0.002); end
  def test_intermediate_output_bi9; assert_in_epsilon(3704.190039735324, worksheet.intermediate_output_bi9, 0.002); end
  def test_intermediate_output_c10; assert_equal("I.01", worksheet.intermediate_output_c10); end
  def test_intermediate_output_d10; assert_equal("Industry", worksheet.intermediate_output_d10); end
  def test_intermediate_output_ay10; assert_in_epsilon(1615.7381002510185, worksheet.intermediate_output_ay10, 0.002); end
  def test_intermediate_output_ba10; assert_in_epsilon(2278.799158074687, worksheet.intermediate_output_ba10, 0.002); end
  def test_intermediate_output_bb10; assert_in_epsilon(3188.0989682873605, worksheet.intermediate_output_bb10, 0.002); end
  def test_intermediate_output_bc10; assert_in_epsilon(4295.46144772437, worksheet.intermediate_output_bc10, 0.002); end
  def test_intermediate_output_bd10; assert_in_epsilon(5520.882023743753, worksheet.intermediate_output_bd10, 0.002); end
  def test_intermediate_output_be10; assert_in_epsilon(6883.469231943255, worksheet.intermediate_output_be10, 0.002); end
  def test_intermediate_output_bf10; assert_in_epsilon(8404.590855504402, worksheet.intermediate_output_bf10, 0.002); end
  def test_intermediate_output_bg10; assert_in_epsilon(9897.385275988245, worksheet.intermediate_output_bg10, 0.002); end
  def test_intermediate_output_bh10; assert_in_epsilon(11326.434333202775, worksheet.intermediate_output_bh10, 0.002); end
  def test_intermediate_output_bi10; assert_in_epsilon(12793.271831310853, worksheet.intermediate_output_bi10, 0.002); end
  def test_intermediate_output_c11; assert_equal("T.01", worksheet.intermediate_output_c11); end
  def test_intermediate_output_d11; assert_equal("Road transport", worksheet.intermediate_output_d11); end
  def test_intermediate_output_ay11; assert_in_epsilon(787.0615564662562, worksheet.intermediate_output_ay11, 0.002); end
  def test_intermediate_output_ba11; assert_in_epsilon(787.0615564662562, worksheet.intermediate_output_ba11, 0.002); end
  def test_intermediate_output_bb11; assert_in_epsilon(1183.500350591845, worksheet.intermediate_output_bb11, 0.002); end
  def test_intermediate_output_bc11; assert_in_epsilon(1717.793821639037, worksheet.intermediate_output_bc11, 0.002); end
  def test_intermediate_output_bd11; assert_in_epsilon(2376.528180609568, worksheet.intermediate_output_bd11, 0.002); end
  def test_intermediate_output_be11; assert_in_epsilon(3187.97529291315, worksheet.intermediate_output_be11, 0.002); end
  def test_intermediate_output_bf11; assert_in_epsilon(4145.418452527569, worksheet.intermediate_output_bf11, 0.002); end
  def test_intermediate_output_bg11; assert_in_epsilon(5054.437916655155, worksheet.intermediate_output_bg11, 0.002); end
  def test_intermediate_output_bh11; assert_in_epsilon(6055.4105178031705, worksheet.intermediate_output_bh11, 0.002); end
  def test_intermediate_output_bi11; assert_in_epsilon(7174.158194519209, worksheet.intermediate_output_bi11, 0.002); end
  def test_intermediate_output_c12; assert_equal("T.02", worksheet.intermediate_output_c12); end
  def test_intermediate_output_d12; assert_equal("Rail transport", worksheet.intermediate_output_d12); end
  def test_intermediate_output_ay12; assert_in_epsilon(40.53243900000001, worksheet.intermediate_output_ay12, 0.002); end
  def test_intermediate_output_ba12; assert_in_epsilon(40.53243900000001, worksheet.intermediate_output_ba12, 0.002); end
  def test_intermediate_output_bb12; assert_in_epsilon(51.88964051493581, worksheet.intermediate_output_bb12, 0.002); end
  def test_intermediate_output_bc12; assert_in_epsilon(64.64605506410759, worksheet.intermediate_output_bc12, 0.002); end
  def test_intermediate_output_bd12; assert_in_epsilon(78.30303774005515, worksheet.intermediate_output_bd12, 0.002); end
  def test_intermediate_output_be12; assert_in_epsilon(93.68497787331091, worksheet.intermediate_output_be12, 0.002); end
  def test_intermediate_output_bf12; assert_in_epsilon(110.98195843630529, worksheet.intermediate_output_bf12, 0.002); end
  def test_intermediate_output_bg12; assert_in_epsilon(119.53006725946128, worksheet.intermediate_output_bg12, 0.002); end
  def test_intermediate_output_bh12; assert_in_epsilon(128.80789870764113, worksheet.intermediate_output_bh12, 0.002); end
  def test_intermediate_output_bi12; assert_in_epsilon(137.98743134823923, worksheet.intermediate_output_bi12, 0.002); end
  def test_intermediate_output_c13; assert_equal("T.03", worksheet.intermediate_output_c13); end
  def test_intermediate_output_d13; assert_equal("Domestic aviation", worksheet.intermediate_output_d13); end
  def test_intermediate_output_ay13; assert_in_epsilon(20.27846236417185, worksheet.intermediate_output_ay13, 0.002); end
  def test_intermediate_output_ba13; assert_in_epsilon(20.27846236417185, worksheet.intermediate_output_ba13, 0.002); end
  def test_intermediate_output_bb13; assert_in_epsilon(36.12439727059617, worksheet.intermediate_output_bb13, 0.002); end
  def test_intermediate_output_bc13; assert_in_epsilon(59.13722696428688, worksheet.intermediate_output_bc13, 0.002); end
  def test_intermediate_output_bd13; assert_in_epsilon(88.31718655798512, worksheet.intermediate_output_bd13, 0.002); end
  def test_intermediate_output_be13; assert_in_epsilon(124.7495741974252, worksheet.intermediate_output_be13, 0.002); end
  def test_intermediate_output_bf13; assert_in_epsilon(167.86358992348687, worksheet.intermediate_output_bf13, 0.002); end
  def test_intermediate_output_bg13; assert_in_epsilon(213.5112081062995, worksheet.intermediate_output_bg13, 0.002); end
  def test_intermediate_output_bh13; assert_in_epsilon(264.9470788803346, worksheet.intermediate_output_bh13, 0.002); end
  def test_intermediate_output_bi13; assert_in_epsilon(324.82761580889445, worksheet.intermediate_output_bi13, 0.002); end
  def test_intermediate_output_c14; assert_equal("T.00", worksheet.intermediate_output_c14); end
  def test_intermediate_output_d14; assert_equal("Transport", worksheet.intermediate_output_d14); end
  def test_intermediate_output_ay14; assert_in_epsilon(847.8724578304282, worksheet.intermediate_output_ay14, 0.002); end
  def test_intermediate_output_ba14; assert_in_epsilon(847.8724578304282, worksheet.intermediate_output_ba14, 0.002); end
  def test_intermediate_output_bb14; assert_in_epsilon(1271.514388377377, worksheet.intermediate_output_bb14, 0.002); end
  def test_intermediate_output_bc14; assert_in_epsilon(1841.5771036674314, worksheet.intermediate_output_bc14, 0.002); end
  def test_intermediate_output_bd14; assert_in_epsilon(2543.1484049076084, worksheet.intermediate_output_bd14, 0.002); end
  def test_intermediate_output_be14; assert_in_epsilon(3406.409844983886, worksheet.intermediate_output_be14, 0.002); end
  def test_intermediate_output_bf14; assert_in_epsilon(4424.26400088736, worksheet.intermediate_output_bf14, 0.002); end
  def test_intermediate_output_bg14; assert_in_epsilon(5387.479192020916, worksheet.intermediate_output_bg14, 0.002); end
  def test_intermediate_output_bh14; assert_in_epsilon(6449.165495391147, worksheet.intermediate_output_bh14, 0.002); end
  def test_intermediate_output_bi14; assert_in_epsilon(7636.973241676344, worksheet.intermediate_output_bi14, 0.002); end
  def test_intermediate_output_c15; assert_equal("S.01", worksheet.intermediate_output_c15); end
  def test_intermediate_output_d15; assert_equal("Green Building Design & Envelope Savings", worksheet.intermediate_output_d15); end
  def test_intermediate_output_ay15; assert_in_delta(-0.01878235138385134, worksheet.intermediate_output_ay15, 0.002); end
  def test_intermediate_output_ba15; assert_in_delta(-0.018835814608099886, worksheet.intermediate_output_ba15, 0.002); end
  def test_intermediate_output_bb15; assert_in_delta(-0.033534846536453375, worksheet.intermediate_output_bb15, 0.002); end
  def test_intermediate_output_bc15; assert_in_delta(-0.060794893445987486, worksheet.intermediate_output_bc15, 0.002); end
  def test_intermediate_output_bd15; assert_in_delta(-0.11024317342605544, worksheet.intermediate_output_bd15, 0.002); end
  def test_intermediate_output_be15; assert_in_delta(-0.20356103070805628, worksheet.intermediate_output_be15, 0.002); end
  def test_intermediate_output_bf15; assert_in_delta(-0.2702004695738901, worksheet.intermediate_output_bf15, 0.002); end
  def test_intermediate_output_bg15; assert_in_delta(-0.35871092809590743, worksheet.intermediate_output_bg15, 0.002); end
  def test_intermediate_output_bh15; assert_in_delta(-0.38321313705787546, worksheet.intermediate_output_bh15, 0.002); end
  def test_intermediate_output_bi15; assert_in_delta(-0.4094456973387999, worksheet.intermediate_output_bi15, 0.002); end
  def test_intermediate_output_c16; assert_equal("D.01", worksheet.intermediate_output_c16); end
  def test_intermediate_output_d16; assert_equal("Agriculture", worksheet.intermediate_output_d16); end
  def test_intermediate_output_ay16; assert_in_epsilon(177.82856075231598, worksheet.intermediate_output_ay16, 0.002); end
  def test_intermediate_output_ba16; assert_in_epsilon(237.20689383625, worksheet.intermediate_output_ba16, 0.002); end
  def test_intermediate_output_bb16; assert_in_epsilon(328.2852405896393, worksheet.intermediate_output_bb16, 0.002); end
  def test_intermediate_output_bc16; assert_in_epsilon(453.517720920971, worksheet.intermediate_output_bc16, 0.002); end
  def test_intermediate_output_bd16; assert_in_epsilon(591.3849918091486, worksheet.intermediate_output_bd16, 0.002); end
  def test_intermediate_output_be16; assert_in_epsilon(750.1024018576557, worksheet.intermediate_output_be16, 0.002); end
  def test_intermediate_output_bf16; assert_in_epsilon(850.2884275248466, worksheet.intermediate_output_bf16, 0.002); end
  def test_intermediate_output_bg16; assert_in_epsilon(969.308783186821, worksheet.intermediate_output_bg16, 0.002); end
  def test_intermediate_output_bh16; assert_in_epsilon(1047.8059052018175, worksheet.intermediate_output_bh16, 0.002); end
  def test_intermediate_output_bi16; assert_in_epsilon(1134.4954568667354, worksheet.intermediate_output_bi16, 0.002); end
  def test_intermediate_output_c17; assert_equal("G.01", worksheet.intermediate_output_c17); end
  def test_intermediate_output_d17; assert_equal("Telecom", worksheet.intermediate_output_d17); end
  def test_intermediate_output_ay17; assert_in_epsilon(13.886920800000002, worksheet.intermediate_output_ay17, 0.002); end
  def test_intermediate_output_ba17; assert_in_epsilon(46.289736000000005, worksheet.intermediate_output_ba17, 0.002); end
  def test_intermediate_output_bb17; assert_in_epsilon(56.32828546867533, worksheet.intermediate_output_bb17, 0.002); end
  def test_intermediate_output_bc17; assert_in_epsilon(69.88742920482616, worksheet.intermediate_output_bc17, 0.002); end
  def test_intermediate_output_bd17; assert_in_epsilon(91.82174403114745, worksheet.intermediate_output_bd17, 0.002); end
  def test_intermediate_output_be17; assert_in_epsilon(113.34304438852058, worksheet.intermediate_output_be17, 0.002); end
  def test_intermediate_output_bf17; assert_in_epsilon(132.65855225480934, worksheet.intermediate_output_bf17, 0.002); end
  def test_intermediate_output_bg17; assert_in_epsilon(161.3497827672023, worksheet.intermediate_output_bg17, 0.002); end
  def test_intermediate_output_bh17; assert_in_epsilon(209.69496501458093, worksheet.intermediate_output_bh17, 0.002); end
  def test_intermediate_output_bi17; assert_in_epsilon(297.4563156170363, worksheet.intermediate_output_bi17, 0.002); end
  def test_intermediate_output_c18; assert_equal("M.01", worksheet.intermediate_output_c18); end
  def test_intermediate_output_d18; assert_equal("Household Cooking", worksheet.intermediate_output_d18); end
  def test_intermediate_output_ay18; assert_in_epsilon(1045.8611113960574, worksheet.intermediate_output_ay18, 0.002); end
  def test_intermediate_output_ba18; assert_in_epsilon(1153.7282449630281, worksheet.intermediate_output_ba18, 0.002); end
  def test_intermediate_output_bb18; assert_in_epsilon(1148.4989388784084, worksheet.intermediate_output_bb18, 0.002); end
  def test_intermediate_output_bc18; assert_in_epsilon(1155.9568110410034, worksheet.intermediate_output_bc18, 0.002); end
  def test_intermediate_output_bd18; assert_in_epsilon(1156.4277437769356, worksheet.intermediate_output_bd18, 0.002); end
  def test_intermediate_output_be18; assert_in_epsilon(1145.5431763602155, worksheet.intermediate_output_be18, 0.002); end
  def test_intermediate_output_bf18; assert_in_epsilon(1128.6766748639811, worksheet.intermediate_output_bf18, 0.002); end
  def test_intermediate_output_bg18; assert_in_epsilon(1099.7850738372154, worksheet.intermediate_output_bg18, 0.002); end
  def test_intermediate_output_bh18; assert_in_epsilon(1069.2095057928398, worksheet.intermediate_output_bh18, 0.002); end
  def test_intermediate_output_bi18; assert_in_epsilon(1079.9753438946816, worksheet.intermediate_output_bi18, 0.002); end
  def test_intermediate_output_c19; assert_equal("M.02", worksheet.intermediate_output_c19); end
  def test_intermediate_output_d19; assert_equal("Commercial Cooking", worksheet.intermediate_output_d19); end
  def test_intermediate_output_ay19; assert_in_epsilon(42.63668783708186, worksheet.intermediate_output_ay19, 0.002); end
  def test_intermediate_output_ba19; assert_in_epsilon(64.76722458582496, worksheet.intermediate_output_ba19, 0.002); end
  def test_intermediate_output_bb19; assert_in_epsilon(96.64390987736526, worksheet.intermediate_output_bb19, 0.002); end
  def test_intermediate_output_bc19; assert_in_epsilon(143.41278923679616, worksheet.intermediate_output_bc19, 0.002); end
  def test_intermediate_output_bd19; assert_in_epsilon(210.74579320156334, worksheet.intermediate_output_bd19, 0.002); end
  def test_intermediate_output_be19; assert_in_epsilon(308.34342741085425, worksheet.intermediate_output_be19, 0.002); end
  def test_intermediate_output_bf19; assert_in_epsilon(412.6330612460542, worksheet.intermediate_output_bf19, 0.002); end
  def test_intermediate_output_bg19; assert_in_epsilon(552.1961167228573, worksheet.intermediate_output_bg19, 0.002); end
  def test_intermediate_output_bh19; assert_in_epsilon(738.9629672499229, worksheet.intermediate_output_bh19, 0.002); end
  def test_intermediate_output_bi19; assert_in_epsilon(988.8991436730385, worksheet.intermediate_output_bi19, 0.002); end
  def test_intermediate_output_c20; assert_equal("M.00", worksheet.intermediate_output_c20); end
  def test_intermediate_output_d20; assert_equal("Cooking", worksheet.intermediate_output_d20); end
  def test_intermediate_output_ay20; assert_in_epsilon(1088.4977992331392, worksheet.intermediate_output_ay20, 0.002); end
  def test_intermediate_output_ba20; assert_in_epsilon(1218.4954695488532, worksheet.intermediate_output_ba20, 0.002); end
  def test_intermediate_output_bb20; assert_in_epsilon(1245.1428487557737, worksheet.intermediate_output_bb20, 0.002); end
  def test_intermediate_output_bc20; assert_in_epsilon(1299.3696002777997, worksheet.intermediate_output_bc20, 0.002); end
  def test_intermediate_output_bd20; assert_in_epsilon(1367.173536978499, worksheet.intermediate_output_bd20, 0.002); end
  def test_intermediate_output_be20; assert_in_epsilon(1453.8866037710698, worksheet.intermediate_output_be20, 0.002); end
  def test_intermediate_output_bf20; assert_in_epsilon(1541.3097361100354, worksheet.intermediate_output_bf20, 0.002); end
  def test_intermediate_output_bg20; assert_in_epsilon(1651.9811905600727, worksheet.intermediate_output_bg20, 0.002); end
  def test_intermediate_output_bh20; assert_in_epsilon(1808.1724730427627, worksheet.intermediate_output_bh20, 0.002); end
  def test_intermediate_output_bi20; assert_in_epsilon(2068.8744875677203, worksheet.intermediate_output_bi20, 0.002); end
  def test_intermediate_output_d21; assert_equal("Scenario Demand", worksheet.intermediate_output_d21); end
  def test_intermediate_output_ay21; assert_in_epsilon(3938.870702431258, worksheet.intermediate_output_ay21, 0.002); end
  def test_intermediate_output_ba21; assert_in_epsilon(4868.177288062636, worksheet.intermediate_output_ba21, 0.002); end
  def test_intermediate_output_bb21; assert_in_epsilon(6504.809109942775, worksheet.intermediate_output_bb21, 0.002); end
  def test_intermediate_output_bc21; assert_in_epsilon(8643.36808394456, worksheet.intermediate_output_bc21, 0.002); end
  def test_intermediate_output_bd21; assert_in_epsilon(11195.232592127055, worksheet.intermediate_output_bd21, 0.002); end
  def test_intermediate_output_be21; assert_in_epsilon(14288.32562279502, worksheet.intermediate_output_be21, 0.002); end
  def test_intermediate_output_bf21; assert_in_epsilon(17496.300880645067, worksheet.intermediate_output_bf21, 0.002); end
  def test_intermediate_output_bg21; assert_in_epsilon(20783.703320373068, worksheet.intermediate_output_bg21, 0.002); end
  def test_intermediate_output_bh21; assert_in_epsilon(24015.916656305515, worksheet.intermediate_output_bh21, 0.002); end
  def test_intermediate_output_bi21; assert_in_epsilon(27635.26137277401, worksheet.intermediate_output_bi21, 0.002); end
  def test_intermediate_output_b22; assert_equal("Last updated Feb 13 2014", worksheet.intermediate_output_b22); end
  def test_intermediate_output_d22; assert_equal("Do-nothing Scenario", worksheet.intermediate_output_d22); end
  def test_intermediate_output_ay22; assert_in_epsilon(3938.870702431258, worksheet.intermediate_output_ay22, 0.002); end
  def test_intermediate_output_ba22; assert_in_epsilon(4868.177288062636, worksheet.intermediate_output_ba22, 0.002); end
  def test_intermediate_output_bb22; assert_in_epsilon(6504.809109942775, worksheet.intermediate_output_bb22, 0.002); end
  def test_intermediate_output_bc22; assert_in_epsilon(8643.36808394456, worksheet.intermediate_output_bc22, 0.002); end
  def test_intermediate_output_bd22; assert_in_epsilon(11195.232592127055, worksheet.intermediate_output_bd22, 0.002); end
  def test_intermediate_output_be22; assert_in_epsilon(14288.32562279502, worksheet.intermediate_output_be22, 0.002); end
  def test_intermediate_output_bf22; assert_in_epsilon(17496.300880645067, worksheet.intermediate_output_bf22, 0.002); end
  def test_intermediate_output_bg22; assert_in_epsilon(20783.703320373068, worksheet.intermediate_output_bg22, 0.002); end
  def test_intermediate_output_bh22; assert_in_epsilon(24015.916656305515, worksheet.intermediate_output_bh22, 0.002); end
  def test_intermediate_output_bi22; assert_in_epsilon(27635.26137277401, worksheet.intermediate_output_bi22, 0.002); end
  def test_intermediate_output_c25; assert_equal("Source", worksheet.intermediate_output_c25); end
  def test_intermediate_output_c26; assert_equal("N.01", worksheet.intermediate_output_c26); end
  def test_intermediate_output_d26; assert_equal("Nuclear fission", worksheet.intermediate_output_d26); end
  def test_intermediate_output_ay26; assert_in_epsilon(80.94774857142859, worksheet.intermediate_output_ay26, 0.002); end
  def test_intermediate_output_ba26; assert_in_epsilon(93.77115428571429, worksheet.intermediate_output_ba26, 0.002); end
  def test_intermediate_output_bb26; assert_in_epsilon(199.9649828571429, worksheet.intermediate_output_bb26, 0.002); end
  def test_intermediate_output_bc26; assert_in_epsilon(193.55328000000003, worksheet.intermediate_output_bc26, 0.002); end
  def test_intermediate_output_bd26; assert_in_epsilon(193.55328000000003, worksheet.intermediate_output_bd26, 0.002); end
  def test_intermediate_output_be26; assert_in_epsilon(189.54596571428576, worksheet.intermediate_output_be26, 0.002); end
  def test_intermediate_output_bf26; assert_in_epsilon(180.72987428571432, worksheet.intermediate_output_bf26, 0.002); end
  def test_intermediate_output_bg26; assert_in_epsilon(176.3218285714286, worksheet.intermediate_output_bg26, 0.002); end
  def test_intermediate_output_bh26; assert_in_epsilon(167.50573714285716, worksheet.intermediate_output_bh26, 0.002); end
  def test_intermediate_output_bi26; assert_in_epsilon(167.50573714285716, worksheet.intermediate_output_bi26, 0.002); end
  def test_intermediate_output_c27; assert_equal("R.01", worksheet.intermediate_output_c27); end
  def test_intermediate_output_d27; assert_equal("Solar", worksheet.intermediate_output_d27); end
  def test_intermediate_output_ay27; assert_in_delta(0.0, (worksheet.intermediate_output_ay27||0), 0.002); end
  def test_intermediate_output_ba27; assert_in_epsilon(1.56727314, worksheet.intermediate_output_ba27, 0.002); end
  def test_intermediate_output_bb27; assert_in_epsilon(10.911534564022219, worksheet.intermediate_output_bb27, 0.002); end
  def test_intermediate_output_bc27; assert_in_epsilon(27.26546309941403, worksheet.intermediate_output_bc27, 0.002); end
  def test_intermediate_output_bd27; assert_in_epsilon(48.89299422565567, worksheet.intermediate_output_bd27, 0.002); end
  def test_intermediate_output_be27; assert_in_epsilon(74.07697845643895, worksheet.intermediate_output_be27, 0.002); end
  def test_intermediate_output_bf27; assert_in_epsilon(96.03124385430904, worksheet.intermediate_output_bf27, 0.002); end
  def test_intermediate_output_bg27; assert_in_epsilon(108.31259745899473, worksheet.intermediate_output_bg27, 0.002); end
  def test_intermediate_output_bh27; assert_in_epsilon(106.27845543771349, worksheet.intermediate_output_bh27, 0.002); end
  def test_intermediate_output_bi27; assert_in_epsilon(92.93002046477042, worksheet.intermediate_output_bi27, 0.002); end
  def test_intermediate_output_c28; assert_equal("R.02", worksheet.intermediate_output_c28); end
  def test_intermediate_output_d28; assert_equal("Wind", worksheet.intermediate_output_d28); end
  def test_intermediate_output_ay28; assert_in_epsilon(12.437183268, worksheet.intermediate_output_ay28, 0.002); end
  def test_intermediate_output_ba28; assert_in_epsilon(18.7222492332, worksheet.intermediate_output_ba28, 0.002); end
  def test_intermediate_output_bb28; assert_in_epsilon(36.6048892332, worksheet.intermediate_output_bb28, 0.002); end
  def test_intermediate_output_bc28; assert_in_epsilon(59.9662792332, worksheet.intermediate_output_bc28, 0.002); end
  def test_intermediate_output_bd28; assert_in_epsilon(84.3357592332, worksheet.intermediate_output_bd28, 0.002); end
  def test_intermediate_output_be28; assert_in_epsilon(115.49888923319999, worksheet.intermediate_output_be28, 0.002); end
  def test_intermediate_output_bf28; assert_in_epsilon(136.9861259652, worksheet.intermediate_output_bf28, 0.002); end
  def test_intermediate_output_bg28; assert_in_epsilon(151.03817999999998, worksheet.intermediate_output_bg28, 0.002); end
  def test_intermediate_output_bh28; assert_in_epsilon(161.16290999999998, worksheet.intermediate_output_bh28, 0.002); end
  def test_intermediate_output_bi28; assert_in_epsilon(161.95184999999998, worksheet.intermediate_output_bi28, 0.002); end
  def test_intermediate_output_c29; assert_equal("R.03", worksheet.intermediate_output_c29); end
  def test_intermediate_output_d29; assert_equal("Tidal", worksheet.intermediate_output_d29); end
  def test_intermediate_output_ay29; assert_in_delta(0.0, (worksheet.intermediate_output_ay29||0), 0.002); end
  def test_intermediate_output_ba29; assert_in_delta(0.0, (worksheet.intermediate_output_ba29||0), 0.002); end
  def test_intermediate_output_bb29; assert_in_delta(0.0, (worksheet.intermediate_output_bb29||0), 0.002); end
  def test_intermediate_output_bc29; assert_in_delta(0.0, (worksheet.intermediate_output_bc29||0), 0.002); end
  def test_intermediate_output_bd29; assert_in_delta(0.0, (worksheet.intermediate_output_bd29||0), 0.002); end
  def test_intermediate_output_be29; assert_in_delta(0.0, (worksheet.intermediate_output_be29||0), 0.002); end
  def test_intermediate_output_bf29; assert_in_delta(0.0, (worksheet.intermediate_output_bf29||0), 0.002); end
  def test_intermediate_output_bg29; assert_in_delta(0.0, (worksheet.intermediate_output_bg29||0), 0.002); end
  def test_intermediate_output_bh29; assert_in_delta(0.0, (worksheet.intermediate_output_bh29||0), 0.002); end
  def test_intermediate_output_bi29; assert_in_delta(0.0, (worksheet.intermediate_output_bi29||0), 0.002); end
  def test_intermediate_output_c30; assert_equal("R.04", worksheet.intermediate_output_c30); end
  def test_intermediate_output_d30; assert_equal("Wave", worksheet.intermediate_output_d30); end
  def test_intermediate_output_ay30; assert_in_delta(0.0, (worksheet.intermediate_output_ay30||0), 0.002); end
  def test_intermediate_output_ba30; assert_in_delta(0.0, (worksheet.intermediate_output_ba30||0), 0.002); end
  def test_intermediate_output_bb30; assert_in_delta(0.0, (worksheet.intermediate_output_bb30||0), 0.002); end
  def test_intermediate_output_bc30; assert_in_delta(0.0, (worksheet.intermediate_output_bc30||0), 0.002); end
  def test_intermediate_output_bd30; assert_in_delta(0.0, (worksheet.intermediate_output_bd30||0), 0.002); end
  def test_intermediate_output_be30; assert_in_delta(0.0, (worksheet.intermediate_output_be30||0), 0.002); end
  def test_intermediate_output_bf30; assert_in_delta(0.0, (worksheet.intermediate_output_bf30||0), 0.002); end
  def test_intermediate_output_bg30; assert_in_delta(0.0, (worksheet.intermediate_output_bg30||0), 0.002); end
  def test_intermediate_output_bh30; assert_in_delta(0.0, (worksheet.intermediate_output_bh30||0), 0.002); end
  def test_intermediate_output_bi30; assert_in_delta(0.0, (worksheet.intermediate_output_bi30||0), 0.002); end
  def test_intermediate_output_c31; assert_equal("R.05", worksheet.intermediate_output_c31); end
  def test_intermediate_output_d31; assert_equal("Geothermal", worksheet.intermediate_output_d31); end
  def test_intermediate_output_ay31; assert_in_delta(0.0, (worksheet.intermediate_output_ay31||0), 0.002); end
  def test_intermediate_output_ba31; assert_in_delta(0.0, (worksheet.intermediate_output_ba31||0), 0.002); end
  def test_intermediate_output_bb31; assert_in_delta(0.0, (worksheet.intermediate_output_bb31||0), 0.002); end
  def test_intermediate_output_bc31; assert_in_delta(0.0, (worksheet.intermediate_output_bc31||0), 0.002); end
  def test_intermediate_output_bd31; assert_in_delta(0.0, (worksheet.intermediate_output_bd31||0), 0.002); end
  def test_intermediate_output_be31; assert_in_delta(0.0, (worksheet.intermediate_output_be31||0), 0.002); end
  def test_intermediate_output_bf31; assert_in_delta(0.0, (worksheet.intermediate_output_bf31||0), 0.002); end
  def test_intermediate_output_bg31; assert_in_delta(0.0, (worksheet.intermediate_output_bg31||0), 0.002); end
  def test_intermediate_output_bh31; assert_in_delta(0.0, (worksheet.intermediate_output_bh31||0), 0.002); end
  def test_intermediate_output_bi31; assert_in_delta(0.0, (worksheet.intermediate_output_bi31||0), 0.002); end
  def test_intermediate_output_c32; assert_equal("R.06", worksheet.intermediate_output_c32); end
  def test_intermediate_output_d32; assert_equal("Hydro", worksheet.intermediate_output_d32); end
  def test_intermediate_output_ay32; assert_in_epsilon(128.510594388, worksheet.intermediate_output_ay32, 0.002); end
  def test_intermediate_output_ba32; assert_in_epsilon(155.84385898800002, worksheet.intermediate_output_ba32, 0.002); end
  def test_intermediate_output_bb32; assert_in_epsilon(189.41763898800005, worksheet.intermediate_output_bb32, 0.002); end
  def test_intermediate_output_bc32; assert_in_epsilon(195.75107398800003, worksheet.intermediate_output_bc32, 0.002); end
  def test_intermediate_output_bd32; assert_in_epsilon(199.56428398800003, worksheet.intermediate_output_bd32, 0.002); end
  def test_intermediate_output_be32; assert_in_epsilon(203.46515398800005, worksheet.intermediate_output_be32, 0.002); end
  def test_intermediate_output_bf32; assert_in_epsilon(205.43750398800003, worksheet.intermediate_output_bf32, 0.002); end
  def test_intermediate_output_bg32; assert_in_epsilon(205.71585955200004, worksheet.intermediate_output_bg32, 0.002); end
  def test_intermediate_output_bh32; assert_in_epsilon(206.60431118400004, worksheet.intermediate_output_bh32, 0.002); end
  def test_intermediate_output_bi32; assert_in_epsilon(207.19601618400003, worksheet.intermediate_output_bi32, 0.002); end
  def test_intermediate_output_c33; assert_equal("Y.02", worksheet.intermediate_output_c33); end
  def test_intermediate_output_d33; assert_equal("Electricity oversupply (imports)", worksheet.intermediate_output_d33); end
  def test_intermediate_output_ay33; assert_in_delta(1.0, worksheet.intermediate_output_ay33, 0.002); end
  def test_intermediate_output_ba33; assert_in_epsilon(-1.4639708854524542, worksheet.intermediate_output_ba33, 0.002); end
  def test_intermediate_output_bb33; assert_in_epsilon(14.000000000000455, worksheet.intermediate_output_bb33, 0.002); end
  def test_intermediate_output_bc33; assert_in_epsilon(21.000000000000227, worksheet.intermediate_output_bc33, 0.002); end
  def test_intermediate_output_bd33; assert_in_epsilon(30.999999999999545, worksheet.intermediate_output_bd33, 0.002); end
  def test_intermediate_output_be33; assert_in_epsilon(39.999999999999545, worksheet.intermediate_output_be33, 0.002); end
  def test_intermediate_output_bf33; assert_in_epsilon(49.0, worksheet.intermediate_output_bf33, 0.002); end
  def test_intermediate_output_bg33; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bg33, 0.002); end
  def test_intermediate_output_bh33; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bh33, 0.002); end
  def test_intermediate_output_bi33; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bi33, 0.002); end
  def test_intermediate_output_d34; assert_equal("Renewables and Clean Energy", worksheet.intermediate_output_d34); end
  def test_intermediate_output_ay34; assert_in_epsilon(221.89552622742858, worksheet.intermediate_output_ay34, 0.002); end
  def test_intermediate_output_ba34; assert_in_epsilon(269.9045356469143, worksheet.intermediate_output_ba34, 0.002); end
  def test_intermediate_output_bb34; assert_in_epsilon(436.8990456423652, worksheet.intermediate_output_bb34, 0.002); end
  def test_intermediate_output_bc34; assert_in_epsilon(476.5360963206141, worksheet.intermediate_output_bc34, 0.002); end
  def test_intermediate_output_bd34; assert_in_epsilon(526.3463174468558, worksheet.intermediate_output_bd34, 0.002); end
  def test_intermediate_output_be34; assert_in_epsilon(582.5869873919248, worksheet.intermediate_output_be34, 0.002); end
  def test_intermediate_output_bf34; assert_in_epsilon(619.1847480932233, worksheet.intermediate_output_bf34, 0.002); end
  def test_intermediate_output_bg34; assert_in_epsilon(641.3884655824234, worksheet.intermediate_output_bg34, 0.002); end
  def test_intermediate_output_bh34; assert_in_epsilon(641.5514137645707, worksheet.intermediate_output_bh34, 0.002); end
  def test_intermediate_output_bi34; assert_in_epsilon(629.5836237916276, worksheet.intermediate_output_bi34, 0.002); end
  def test_intermediate_output_d35; assert_equal("Primary electricity, solar, marine, and net imports", worksheet.intermediate_output_d35); end
  def test_intermediate_output_ay35; assert_in_epsilon(222.89552622742858, worksheet.intermediate_output_ay35, 0.002); end
  def test_intermediate_output_ba35; assert_in_epsilon(268.44056476146187, worksheet.intermediate_output_ba35, 0.002); end
  def test_intermediate_output_bb35; assert_in_epsilon(450.89904564236565, worksheet.intermediate_output_bb35, 0.002); end
  def test_intermediate_output_bc35; assert_in_epsilon(497.5360963206143, worksheet.intermediate_output_bc35, 0.002); end
  def test_intermediate_output_bd35; assert_in_epsilon(557.3463174468553, worksheet.intermediate_output_bd35, 0.002); end
  def test_intermediate_output_be35; assert_in_epsilon(622.5869873919244, worksheet.intermediate_output_be35, 0.002); end
  def test_intermediate_output_bf35; assert_in_epsilon(668.1847480932233, worksheet.intermediate_output_bf35, 0.002); end
  def test_intermediate_output_bg35; assert_in_epsilon(696.3884655824243, worksheet.intermediate_output_bg35, 0.002); end
  def test_intermediate_output_bh35; assert_in_epsilon(696.5514137645716, worksheet.intermediate_output_bh35, 0.002); end
  def test_intermediate_output_bi35; assert_in_epsilon(684.5836237916285, worksheet.intermediate_output_bi35, 0.002); end
  def test_intermediate_output_c36; assert_equal("R.07", worksheet.intermediate_output_c36); end
  def test_intermediate_output_d36; assert_equal("Environmental heat", worksheet.intermediate_output_d36); end
  def test_intermediate_output_ay36; assert_in_delta(0.0, (worksheet.intermediate_output_ay36||0), 0.002); end
  def test_intermediate_output_ba36; assert_in_delta(0.0, (worksheet.intermediate_output_ba36||0), 0.002); end
  def test_intermediate_output_bb36; assert_in_delta(0.0, (worksheet.intermediate_output_bb36||0), 0.002); end
  def test_intermediate_output_bc36; assert_in_delta(0.0, (worksheet.intermediate_output_bc36||0), 0.002); end
  def test_intermediate_output_bd36; assert_in_delta(0.0, (worksheet.intermediate_output_bd36||0), 0.002); end
  def test_intermediate_output_be36; assert_in_delta(0.0, (worksheet.intermediate_output_be36||0), 0.002); end
  def test_intermediate_output_bf36; assert_in_delta(0.0, (worksheet.intermediate_output_bf36||0), 0.002); end
  def test_intermediate_output_bg36; assert_in_delta(0.0, (worksheet.intermediate_output_bg36||0), 0.002); end
  def test_intermediate_output_bh36; assert_in_delta(0.0, (worksheet.intermediate_output_bh36||0), 0.002); end
  def test_intermediate_output_bi36; assert_in_delta(0.0, (worksheet.intermediate_output_bi36||0), 0.002); end
  def test_intermediate_output_c37; assert_equal("W.01", worksheet.intermediate_output_c37); end
  def test_intermediate_output_d37; assert_equal("Waste", worksheet.intermediate_output_d37); end
  def test_intermediate_output_ay37; assert_in_epsilon(946.4113333333333, worksheet.intermediate_output_ay37, 0.002); end
  def test_intermediate_output_ba37; assert_in_epsilon(958.7155777777778, worksheet.intermediate_output_ba37, 0.002); end
  def test_intermediate_output_bb37; assert_in_epsilon(961.6526955832342, worksheet.intermediate_output_bb37, 0.002); end
  def test_intermediate_output_bc37; assert_in_epsilon(965.3605542966875, worksheet.intermediate_output_bc37, 0.002); end
  def test_intermediate_output_bd37; assert_in_epsilon(969.9978337885142, worksheet.intermediate_output_bd37, 0.002); end
  def test_intermediate_output_be37; assert_in_epsilon(975.8397409255858, worksheet.intermediate_output_be37, 0.002); end
  def test_intermediate_output_bf37; assert_in_epsilon(982.3016210975981, worksheet.intermediate_output_bf37, 0.002); end
  def test_intermediate_output_bg37; assert_in_epsilon(986.6705282141768, worksheet.intermediate_output_bg37, 0.002); end
  def test_intermediate_output_bh37; assert_in_epsilon(992.2289379145778, worksheet.intermediate_output_bh37, 0.002); end
  def test_intermediate_output_bi37; assert_in_epsilon(999.8502492075899, worksheet.intermediate_output_bi37, 0.002); end
  def test_intermediate_output_c38; assert_equal("A.01", worksheet.intermediate_output_c38); end
  def test_intermediate_output_d38; assert_equal("Agriculture", worksheet.intermediate_output_d38); end
  def test_intermediate_output_ay38; assert_in_delta(0.0, (worksheet.intermediate_output_ay38||0), 0.002); end
  def test_intermediate_output_ba38; assert_in_delta(0.13142242804166665, worksheet.intermediate_output_ba38, 0.002); end
  def test_intermediate_output_bb38; assert_in_delta(0.21232334500000016, worksheet.intermediate_output_bb38, 0.002); end
  def test_intermediate_output_bc38; assert_in_delta(0.3059177875, worksheet.intermediate_output_bc38, 0.002); end
  def test_intermediate_output_bd38; assert_in_delta(0.41826750874999996, worksheet.intermediate_output_bd38, 0.002); end
  def test_intermediate_output_be38; assert_in_delta(0.5158911875, worksheet.intermediate_output_be38, 0.002); end
  def test_intermediate_output_bf38; assert_in_delta(0.6305569291666666, worksheet.intermediate_output_bf38, 0.002); end
  def test_intermediate_output_bg38; assert_in_delta(0.7922778229166667, worksheet.intermediate_output_bg38, 0.002); end
  def test_intermediate_output_bh38; assert_in_delta(0.9055961145833333, worksheet.intermediate_output_bh38, 0.002); end
  def test_intermediate_output_bi38; assert_in_epsilon(1.01891440625, worksheet.intermediate_output_bi38, 0.002); end
  def test_intermediate_output_c39; assert_equal("Y.01", worksheet.intermediate_output_c39); end
  def test_intermediate_output_d39; assert_equal("Biomass oversupply (imports)", worksheet.intermediate_output_d39); end
  def test_intermediate_output_ay39; assert_in_delta(0.0, (worksheet.intermediate_output_ay39||0), 0.002); end
  def test_intermediate_output_ba39; assert_in_delta(0.0, (worksheet.intermediate_output_ba39||0), 0.002); end
  def test_intermediate_output_bb39; assert_in_delta(0.0, (worksheet.intermediate_output_bb39||0), 0.002); end
  def test_intermediate_output_bc39; assert_in_delta(0.0, (worksheet.intermediate_output_bc39||0), 0.002); end
  def test_intermediate_output_bd39; assert_in_delta(0.0, (worksheet.intermediate_output_bd39||0), 0.002); end
  def test_intermediate_output_be39; assert_in_delta(0.0, (worksheet.intermediate_output_be39||0), 0.002); end
  def test_intermediate_output_bf39; assert_in_delta(0.0, (worksheet.intermediate_output_bf39||0), 0.002); end
  def test_intermediate_output_bg39; assert_in_delta(0.0, (worksheet.intermediate_output_bg39||0), 0.002); end
  def test_intermediate_output_bh39; assert_in_delta(0.0, (worksheet.intermediate_output_bh39||0), 0.002); end
  def test_intermediate_output_bi39; assert_in_delta(0.0, (worksheet.intermediate_output_bi39||0), 0.002); end
  def test_intermediate_output_d40; assert_equal("Agriculture/waste", worksheet.intermediate_output_d40); end
  def test_intermediate_output_ay40; assert_in_epsilon(946.4113333333333, worksheet.intermediate_output_ay40, 0.002); end
  def test_intermediate_output_ba40; assert_in_epsilon(958.8470002058194, worksheet.intermediate_output_ba40, 0.002); end
  def test_intermediate_output_bb40; assert_in_epsilon(961.8650189282341, worksheet.intermediate_output_bb40, 0.002); end
  def test_intermediate_output_bc40; assert_in_epsilon(965.6664720841875, worksheet.intermediate_output_bc40, 0.002); end
  def test_intermediate_output_bd40; assert_in_epsilon(970.4161012972642, worksheet.intermediate_output_bd40, 0.002); end
  def test_intermediate_output_be40; assert_in_epsilon(976.3556321130858, worksheet.intermediate_output_be40, 0.002); end
  def test_intermediate_output_bf40; assert_in_epsilon(982.9321780267647, worksheet.intermediate_output_bf40, 0.002); end
  def test_intermediate_output_bg40; assert_in_epsilon(987.4628060370934, worksheet.intermediate_output_bg40, 0.002); end
  def test_intermediate_output_bh40; assert_in_epsilon(993.1345340291612, worksheet.intermediate_output_bh40, 0.002); end
  def test_intermediate_output_bi40; assert_in_epsilon(1000.8691636138399, worksheet.intermediate_output_bi40, 0.002); end
  def test_intermediate_output_c41; assert_equal("Y.04", worksheet.intermediate_output_c41); end
  def test_intermediate_output_d41; assert_equal("Coal oversupply (imports)", worksheet.intermediate_output_d41); end
  def test_intermediate_output_ay41; assert_in_epsilon(312.87744559290513, worksheet.intermediate_output_ay41, 0.002); end
  def test_intermediate_output_ba41; assert_in_epsilon(526.8956907848014, worksheet.intermediate_output_ba41, 0.002); end
  def test_intermediate_output_bb41; assert_in_epsilon(1319.3124738576794, worksheet.intermediate_output_bb41, 0.002); end
  def test_intermediate_output_bc41; assert_in_epsilon(3014.730522878498, worksheet.intermediate_output_bc41, 0.002); end
  def test_intermediate_output_bd41; assert_in_epsilon(5379.582453613374, worksheet.intermediate_output_bd41, 0.002); end
  def test_intermediate_output_be41; assert_in_epsilon(8802.568575656194, worksheet.intermediate_output_be41, 0.002); end
  def test_intermediate_output_bf41; assert_in_epsilon(11942.655541869855, worksheet.intermediate_output_bf41, 0.002); end
  def test_intermediate_output_bg41; assert_in_epsilon(16105.085873409915, worksheet.intermediate_output_bg41, 0.002); end
  def test_intermediate_output_bh41; assert_in_epsilon(19783.852472013532, worksheet.intermediate_output_bh41, 0.002); end
  def test_intermediate_output_bi41; assert_in_epsilon(23759.648675014454, worksheet.intermediate_output_bi41, 0.002); end
  def test_intermediate_output_c42; assert_equal("Q.01", worksheet.intermediate_output_c42); end
  def test_intermediate_output_d42; assert_equal("Coal reserves", worksheet.intermediate_output_d42); end
  def test_intermediate_output_ay42; assert_in_epsilon(2003.3688000000002, worksheet.intermediate_output_ay42, 0.002); end
  def test_intermediate_output_ba42; assert_in_epsilon(2704.3935, worksheet.intermediate_output_ba42, 0.002); end
  def test_intermediate_output_bb42; assert_in_epsilon(3143.1914134327285, worksheet.intermediate_output_bb42, 0.002); end
  def test_intermediate_output_bc42; assert_in_epsilon(3584.150763898312, worksheet.intermediate_output_bc42, 0.002); end
  def test_intermediate_output_bd42; assert_in_epsilon(3874.5049279836685, worksheet.intermediate_output_bd42, 0.002); end
  def test_intermediate_output_be42; assert_in_epsilon(3958.482454759453, worksheet.intermediate_output_be42, 0.002); end
  def test_intermediate_output_bf42; assert_in_epsilon(4025.571481185473, worksheet.intermediate_output_bf42, 0.002); end
  def test_intermediate_output_bg42; assert_in_epsilon(3406.602207191723, worksheet.intermediate_output_bg42, 0.002); end
  def test_intermediate_output_bh42; assert_in_epsilon(2878.2636796999973, worksheet.intermediate_output_bh42, 0.002); end
  def test_intermediate_output_bi42; assert_in_epsilon(2435.1118288080042, worksheet.intermediate_output_bi42, 0.002); end
  def test_intermediate_output_d43; assert_equal("Coal", worksheet.intermediate_output_d43); end
  def test_intermediate_output_ay43; assert_in_epsilon(2316.2462455929053, worksheet.intermediate_output_ay43, 0.002); end
  def test_intermediate_output_ba43; assert_in_epsilon(3231.2891907848016, worksheet.intermediate_output_ba43, 0.002); end
  def test_intermediate_output_bb43; assert_in_epsilon(4462.503887290408, worksheet.intermediate_output_bb43, 0.002); end
  def test_intermediate_output_bc43; assert_in_epsilon(6598.88128677681, worksheet.intermediate_output_bc43, 0.002); end
  def test_intermediate_output_bd43; assert_in_epsilon(9254.087381597043, worksheet.intermediate_output_bd43, 0.002); end
  def test_intermediate_output_be43; assert_in_epsilon(12761.051030415647, worksheet.intermediate_output_be43, 0.002); end
  def test_intermediate_output_bf43; assert_in_epsilon(15968.22702305533, worksheet.intermediate_output_bf43, 0.002); end
  def test_intermediate_output_bg43; assert_in_epsilon(19511.688080601638, worksheet.intermediate_output_bg43, 0.002); end
  def test_intermediate_output_bh43; assert_in_epsilon(22662.11615171353, worksheet.intermediate_output_bh43, 0.002); end
  def test_intermediate_output_bi43; assert_in_epsilon(26194.760503822457, worksheet.intermediate_output_bi43, 0.002); end
  def test_intermediate_output_c44; assert_equal("Q.02", worksheet.intermediate_output_c44); end
  def test_intermediate_output_d44; assert_equal("Oil reserves", worksheet.intermediate_output_d44); end
  def test_intermediate_output_ay44; assert_in_epsilon(395.28044, worksheet.intermediate_output_ay44, 0.002); end
  def test_intermediate_output_ba44; assert_in_epsilon(442.9866999999999, worksheet.intermediate_output_ba44, 0.002); end
  def test_intermediate_output_bb44; assert_in_epsilon(480.4207945988, worksheet.intermediate_output_bb44, 0.002); end
  def test_intermediate_output_bc44; assert_in_epsilon(406.8218875356273, worksheet.intermediate_output_bc44, 0.002); end
  def test_intermediate_output_bd44; assert_in_epsilon(404.6927124317743, worksheet.intermediate_output_bd44, 0.002); end
  def test_intermediate_output_be44; assert_in_epsilon(402.83638767071136, worksheet.intermediate_output_be44, 0.002); end
  def test_intermediate_output_bf44; assert_in_epsilon(401.68501767071086, worksheet.intermediate_output_bf44, 0.002); end
  def test_intermediate_output_bg44; assert_in_epsilon(401.1302468506092, worksheet.intermediate_output_bg44, 0.002); end
  def test_intermediate_output_bh44; assert_in_epsilon(401.18988105870324, worksheet.intermediate_output_bh44, 0.002); end
  def test_intermediate_output_bi44; assert_in_epsilon(401.88812295573837, worksheet.intermediate_output_bi44, 0.002); end
  def test_intermediate_output_c45; assert_equal("Y.05", worksheet.intermediate_output_c45); end
  def test_intermediate_output_d45; assert_equal("Oil and petroleum products oversupply (imports)", worksheet.intermediate_output_d45); end
  def test_intermediate_output_ay45; assert_in_epsilon(1235.4943240445418, worksheet.intermediate_output_ay45, 0.002); end
  def test_intermediate_output_ba45; assert_in_epsilon(1459.1773716311466, worksheet.intermediate_output_ba45, 0.002); end
  def test_intermediate_output_bb45; assert_in_epsilon(2094.1308465841576, worksheet.intermediate_output_bb45, 0.002); end
  def test_intermediate_output_bc45; assert_in_epsilon(3065.9673559076937, worksheet.intermediate_output_bc45, 0.002); end
  def test_intermediate_output_bd45; assert_in_epsilon(4157.631767599084, worksheet.intermediate_output_bd45, 0.002); end
  def test_intermediate_output_be45; assert_in_epsilon(5448.054666446535, worksheet.intermediate_output_be45, 0.002); end
  def test_intermediate_output_bf45; assert_in_epsilon(6933.9942488753495, worksheet.intermediate_output_bf45, 0.002); end
  def test_intermediate_output_bg45; assert_in_epsilon(8427.225528478948, worksheet.intermediate_output_bg45, 0.002); end
  def test_intermediate_output_bh45; assert_in_epsilon(10106.26043154715, worksheet.intermediate_output_bh45, 0.002); end
  def test_intermediate_output_bi45; assert_in_epsilon(12020.741898724571, worksheet.intermediate_output_bi45, 0.002); end
  def test_intermediate_output_d46; assert_equal("Oil and petroleum products", worksheet.intermediate_output_d46); end
  def test_intermediate_output_ay46; assert_in_epsilon(1630.7747640445418, worksheet.intermediate_output_ay46, 0.002); end
  def test_intermediate_output_ba46; assert_in_epsilon(1902.1640716311465, worksheet.intermediate_output_ba46, 0.002); end
  def test_intermediate_output_bb46; assert_in_epsilon(2574.5516411829576, worksheet.intermediate_output_bb46, 0.002); end
  def test_intermediate_output_bc46; assert_in_epsilon(3472.789243443321, worksheet.intermediate_output_bc46, 0.002); end
  def test_intermediate_output_bd46; assert_in_epsilon(4562.3244800308585, worksheet.intermediate_output_bd46, 0.002); end
  def test_intermediate_output_be46; assert_in_epsilon(5850.891054117246, worksheet.intermediate_output_be46, 0.002); end
  def test_intermediate_output_bf46; assert_in_epsilon(7335.679266546061, worksheet.intermediate_output_bf46, 0.002); end
  def test_intermediate_output_bg46; assert_in_epsilon(8828.355775329557, worksheet.intermediate_output_bg46, 0.002); end
  def test_intermediate_output_bh46; assert_in_epsilon(10507.450312605853, worksheet.intermediate_output_bh46, 0.002); end
  def test_intermediate_output_bi46; assert_in_epsilon(12422.63002168031, worksheet.intermediate_output_bi46, 0.002); end
  def test_intermediate_output_c47; assert_equal("Y.06", worksheet.intermediate_output_c47); end
  def test_intermediate_output_d47; assert_equal("Gas oversupply (imports)", worksheet.intermediate_output_d47); end
  def test_intermediate_output_ay47; assert_in_epsilon(134.32821625762193, worksheet.intermediate_output_ay47, 0.002); end
  def test_intermediate_output_ba47; assert_in_epsilon(132.0559696218025, worksheet.intermediate_output_ba47, 0.002); end
  def test_intermediate_output_bb47; assert_in_epsilon(414.231003015371, worksheet.intermediate_output_bb47, 0.002); end
  def test_intermediate_output_bc47; assert_in_epsilon(540.7635700654292, worksheet.intermediate_output_bc47, 0.002); end
  def test_intermediate_output_bd47; assert_in_epsilon(673.6005422237332, worksheet.intermediate_output_bd47, 0.002); end
  def test_intermediate_output_be47; assert_in_epsilon(830.478053007228, worksheet.intermediate_output_be47, 0.002); end
  def test_intermediate_output_bf47; assert_in_epsilon(1027.9601614841856, worksheet.intermediate_output_bf47, 0.002); end
  def test_intermediate_output_bg47; assert_in_epsilon(1246.6262326346414, worksheet.intermediate_output_bg47, 0.002); end
  def test_intermediate_output_bh47; assert_in_epsilon(1483.7758959320668, worksheet.intermediate_output_bh47, 0.002); end
  def test_intermediate_output_bi47; assert_in_epsilon(1774.0609355299016, worksheet.intermediate_output_bi47, 0.002); end
  def test_intermediate_output_c48; assert_equal("Q.03", worksheet.intermediate_output_c48); end
  def test_intermediate_output_d48; assert_equal("Gas reserves", worksheet.intermediate_output_d48); end
  def test_intermediate_output_ay48; assert_in_epsilon(296.5420125, worksheet.intermediate_output_ay48, 0.002); end
  def test_intermediate_output_ba48; assert_in_epsilon(449.1920925, worksheet.intermediate_output_ba48, 0.002); end
  def test_intermediate_output_bb48; assert_in_epsilon(507.092611005, worksheet.intermediate_output_bb48, 0.002); end
  def test_intermediate_output_bc48; assert_in_epsilon(548.56099701, worksheet.intermediate_output_bc48, 0.002); end
  def test_intermediate_output_bd48; assert_in_epsilon(586.573218056151, worksheet.intermediate_output_bd48, 0.002); end
  def test_intermediate_output_be48; assert_in_epsilon(641.5415598915608, worksheet.intermediate_output_be48, 0.002); end
  def test_intermediate_output_bf48; assert_in_epsilon(680.5418754437976, worksheet.intermediate_output_bf48, 0.002); end
  def test_intermediate_output_bg48; assert_in_epsilon(722.9297284085899, worksheet.intermediate_output_bg48, 0.002); end
  def test_intermediate_output_bh48; assert_in_epsilon(769.0713331120461, worksheet.intermediate_output_bh48, 0.002); end
  def test_intermediate_output_bi48; assert_in_epsilon(803.223, worksheet.intermediate_output_bi48, 0.002); end
  def test_intermediate_output_d49; assert_equal("Natural gas", worksheet.intermediate_output_d49); end
  def test_intermediate_output_ay49; assert_in_epsilon(430.87022875762193, worksheet.intermediate_output_ay49, 0.002); end
  def test_intermediate_output_ba49; assert_in_epsilon(581.2480621218025, worksheet.intermediate_output_ba49, 0.002); end
  def test_intermediate_output_bb49; assert_in_epsilon(921.323614020371, worksheet.intermediate_output_bb49, 0.002); end
  def test_intermediate_output_bc49; assert_in_epsilon(1089.3245670754293, worksheet.intermediate_output_bc49, 0.002); end
  def test_intermediate_output_bd49; assert_in_epsilon(1260.1737602798842, worksheet.intermediate_output_bd49, 0.002); end
  def test_intermediate_output_be49; assert_in_epsilon(1472.0196128987889, worksheet.intermediate_output_be49, 0.002); end
  def test_intermediate_output_bf49; assert_in_epsilon(1708.5020369279832, worksheet.intermediate_output_bf49, 0.002); end
  def test_intermediate_output_bg49; assert_in_epsilon(1969.5559610432313, worksheet.intermediate_output_bg49, 0.002); end
  def test_intermediate_output_bh49; assert_in_epsilon(2252.8472290441127, worksheet.intermediate_output_bh49, 0.002); end
  def test_intermediate_output_bi49; assert_in_epsilon(2577.2839355299016, worksheet.intermediate_output_bi49, 0.002); end
  def test_intermediate_output_d50; assert_equal("Total Primary Supply", worksheet.intermediate_output_d50); end
  def test_intermediate_output_ay50; assert_in_epsilon(5547.19809795583, worksheet.intermediate_output_ay50, 0.002); end
  def test_intermediate_output_ba50; assert_in_epsilon(6941.988889505033, worksheet.intermediate_output_ba50, 0.002); end
  def test_intermediate_output_bb50; assert_in_epsilon(9371.143207064337, worksheet.intermediate_output_bb50, 0.002); end
  def test_intermediate_output_bc50; assert_in_epsilon(12624.197665700363, worksheet.intermediate_output_bc50, 0.002); end
  def test_intermediate_output_bd50; assert_in_epsilon(16604.348040651905, worksheet.intermediate_output_bd50, 0.002); end
  def test_intermediate_output_be50; assert_in_epsilon(21682.904316936692, worksheet.intermediate_output_be50, 0.002); end
  def test_intermediate_output_bf50; assert_in_epsilon(26663.52525264936, worksheet.intermediate_output_bf50, 0.002); end
  def test_intermediate_output_bg50; assert_in_epsilon(31993.451088593945, worksheet.intermediate_output_bg50, 0.002); end
  def test_intermediate_output_bh50; assert_in_epsilon(37112.09964115723, worksheet.intermediate_output_bh50, 0.002); end
  def test_intermediate_output_bi50; assert_in_epsilon(42880.12724843814, worksheet.intermediate_output_bi50, 0.002); end
  def test_intermediate_output_bi51; assert_in_epsilon(25.831401956890446, worksheet.intermediate_output_bi51, 0.002); end
  def test_intermediate_output_bk51; assert_in_epsilon(2.0, worksheet.intermediate_output_bk51, 0.002); end
  def test_intermediate_output_d52; assert_equal("Do-nothing Scenario", worksheet.intermediate_output_d52); end
  def test_intermediate_output_ay52; assert_in_epsilon(5547.19809795583, worksheet.intermediate_output_ay52, 0.002); end
  def test_intermediate_output_ba52; assert_in_epsilon(6941.988889505033, worksheet.intermediate_output_ba52, 0.002); end
  def test_intermediate_output_bb52; assert_in_epsilon(9371.143207064337, worksheet.intermediate_output_bb52, 0.002); end
  def test_intermediate_output_bc52; assert_in_epsilon(12624.197665700363, worksheet.intermediate_output_bc52, 0.002); end
  def test_intermediate_output_bd52; assert_in_epsilon(16604.348040651905, worksheet.intermediate_output_bd52, 0.002); end
  def test_intermediate_output_be52; assert_in_epsilon(21682.904316936692, worksheet.intermediate_output_be52, 0.002); end
  def test_intermediate_output_bf52; assert_in_epsilon(26663.52525264936, worksheet.intermediate_output_bf52, 0.002); end
  def test_intermediate_output_bg52; assert_in_epsilon(31993.451088593945, worksheet.intermediate_output_bg52, 0.002); end
  def test_intermediate_output_bh52; assert_in_epsilon(37112.09964115723, worksheet.intermediate_output_bh52, 0.002); end
  def test_intermediate_output_bi52; assert_in_epsilon(42880.12724843814, worksheet.intermediate_output_bi52, 0.002); end
  def test_intermediate_output_ba53; assert_in_delta(0.22719382347657568, worksheet.intermediate_output_ba53, 0.002); end
  def test_intermediate_output_bb53; assert_in_delta(0.4496042397174595, worksheet.intermediate_output_bb53, 0.002); end
  def test_intermediate_output_bc53; assert_in_delta(0.49642098086270786, worksheet.intermediate_output_bc53, 0.002); end
  def test_intermediate_output_bd53; assert_in_delta(0.5345298906034409, worksheet.intermediate_output_bd53, 0.002); end
  def test_intermediate_output_be53; assert_in_delta(0.5641759428543218, worksheet.intermediate_output_be53, 0.002); end
  def test_intermediate_output_bf53; assert_in_delta(0.6016733602100565, worksheet.intermediate_output_bf53, 0.002); end
  def test_intermediate_output_bg53; assert_in_delta(0.632947860986052, worksheet.intermediate_output_bg53, 0.002); end
  def test_intermediate_output_bh53; assert_in_delta(0.6586225096859478, worksheet.intermediate_output_bh53, 0.002); end
  def test_intermediate_output_c54; assert_equal("Conversion losses, distribution, and own use", worksheet.intermediate_output_c54); end
  def test_intermediate_output_c55; assert_equal("X.01", worksheet.intermediate_output_c55); end
  def test_intermediate_output_d55; assert_equal("Conversion losses", worksheet.intermediate_output_d55); end
  def test_intermediate_output_ay55; assert_in_epsilon(1204.9134654632253, worksheet.intermediate_output_ay55, 0.002); end
  def test_intermediate_output_ba55; assert_in_epsilon(1579.2388199991456, worksheet.intermediate_output_ba55, 0.002); end
  def test_intermediate_output_bb55; assert_in_epsilon(2180.433815229489, worksheet.intermediate_output_bb55, 0.002); end
  def test_intermediate_output_bc55; assert_in_epsilon(3079.5412457745238, worksheet.intermediate_output_bc55, 0.002); end
  def test_intermediate_output_bd55; assert_in_epsilon(4249.725940107733, worksheet.intermediate_output_bd55, 0.002); end
  def test_intermediate_output_be55; assert_in_epsilon(5898.406758064146, worksheet.intermediate_output_be55, 0.002); end
  def test_intermediate_output_bf55; assert_in_epsilon(7362.289097160079, worksheet.intermediate_output_bf55, 0.002); end
  def test_intermediate_output_bg55; assert_in_epsilon(9098.904128366234, worksheet.intermediate_output_bg55, 0.002); end
  def test_intermediate_output_bh55; assert_in_epsilon(10674.171674764264, worksheet.intermediate_output_bh55, 0.002); end
  def test_intermediate_output_bi55; assert_in_epsilon(12459.036820757248, worksheet.intermediate_output_bi55, 0.002); end
  def test_intermediate_output_c56; assert_equal("X.02", worksheet.intermediate_output_c56); end
  def test_intermediate_output_d56; assert_equal("Distribution losses and own use", worksheet.intermediate_output_d56); end
  def test_intermediate_output_ay56; assert_in_epsilon(403.4139300613481, worksheet.intermediate_output_ay56, 0.002); end
  def test_intermediate_output_ba56; assert_in_epsilon(494.5727814432508, worksheet.intermediate_output_ba56, 0.002); end
  def test_intermediate_output_bb56; assert_in_epsilon(685.9002818920725, worksheet.intermediate_output_bb56, 0.002); end
  def test_intermediate_output_bc56; assert_in_epsilon(901.2883359812784, worksheet.intermediate_output_bc56, 0.002); end
  def test_intermediate_output_bd56; assert_in_epsilon(1159.3895084171183, worksheet.intermediate_output_bd56, 0.002); end
  def test_intermediate_output_be56; assert_in_epsilon(1496.1719360775237, worksheet.intermediate_output_be56, 0.002); end
  def test_intermediate_output_bf56; assert_in_epsilon(1804.9352748442138, worksheet.intermediate_output_bf56, 0.002); end
  def test_intermediate_output_bg56; assert_in_epsilon(2110.8436398546423, worksheet.intermediate_output_bg56, 0.002); end
  def test_intermediate_output_bh56; assert_in_epsilon(2422.011310087451, worksheet.intermediate_output_bh56, 0.002); end
  def test_intermediate_output_bi56; assert_in_epsilon(2785.8290549068834, worksheet.intermediate_output_bi56, 0.002); end
  def test_intermediate_output_d57; assert_equal("Supply net of losses", worksheet.intermediate_output_d57); end
  def test_intermediate_output_ay57; assert_in_epsilon(3938.870702431257, worksheet.intermediate_output_ay57, 0.002); end
  def test_intermediate_output_ba57; assert_in_epsilon(4868.177288062636, worksheet.intermediate_output_ba57, 0.002); end
  def test_intermediate_output_bb57; assert_in_epsilon(6504.809109942775, worksheet.intermediate_output_bb57, 0.002); end
  def test_intermediate_output_bc57; assert_in_epsilon(8643.368083944562, worksheet.intermediate_output_bc57, 0.002); end
  def test_intermediate_output_bd57; assert_in_epsilon(11195.232592127053, worksheet.intermediate_output_bd57, 0.002); end
  def test_intermediate_output_be57; assert_in_epsilon(14288.325622795022, worksheet.intermediate_output_be57, 0.002); end
  def test_intermediate_output_bf57; assert_in_epsilon(17496.300880645067, worksheet.intermediate_output_bf57, 0.002); end
  def test_intermediate_output_bg57; assert_in_epsilon(20783.703320373068, worksheet.intermediate_output_bg57, 0.002); end
  def test_intermediate_output_bh57; assert_in_epsilon(24015.91665630551, worksheet.intermediate_output_bh57, 0.002); end
  def test_intermediate_output_bi57; assert_in_epsilon(27635.26137277401, worksheet.intermediate_output_bi57, 0.002); end
  def test_intermediate_output_c59; assert_equal("Net Consumption of Hydrocarbons excluding bio energy", worksheet.intermediate_output_c59); end
  def test_intermediate_output_c60; assert_equal("V.03", worksheet.intermediate_output_c60); end
  def test_intermediate_output_d60; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_d60); end
  def test_intermediate_output_ay60; assert_in_epsilon(3253.479801148461, worksheet.intermediate_output_ay60, 0.002); end
  def test_intermediate_output_ba60; assert_in_epsilon(4179.698990784802, worksheet.intermediate_output_ba60, 0.002); end
  def test_intermediate_output_bb60; assert_in_epsilon(5410.008801938036, worksheet.intermediate_output_bb60, 0.002); end
  def test_intermediate_output_bc60; assert_in_epsilon(7545.521153499874, worksheet.intermediate_output_bc60, 0.002); end
  def test_intermediate_output_bd60; assert_in_epsilon(10199.902437794315, worksheet.intermediate_output_bd60, 0.002); end
  def test_intermediate_output_be60; assert_in_epsilon(13706.081917472606, worksheet.intermediate_output_be60, 0.002); end
  def test_intermediate_output_bf60; assert_in_epsilon(16912.514790400215, worksheet.intermediate_output_bf60, 0.002); end
  def test_intermediate_output_bg60; assert_in_epsilon(20451.66153060164, worksheet.intermediate_output_bg60, 0.002); end
  def test_intermediate_output_bh60; assert_in_epsilon(23597.21687671353, worksheet.intermediate_output_bh60, 0.002); end
  def test_intermediate_output_bi60; assert_in_epsilon(27124.988503822457, worksheet.intermediate_output_bi60, 0.002); end
  def test_intermediate_output_c61; assert_equal("V.04", worksheet.intermediate_output_c61); end
  def test_intermediate_output_d61; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_d61); end
  def test_intermediate_output_ay61; assert_in_epsilon(1524.0885645276092, worksheet.intermediate_output_ay61, 0.002); end
  def test_intermediate_output_ba61; assert_in_epsilon(1777.8548538590196, worksheet.intermediate_output_ba61, 0.002); end
  def test_intermediate_output_bb61; assert_in_epsilon(2409.13711675689, worksheet.intermediate_output_bb61, 0.002); end
  def test_intermediate_output_bc61; assert_in_epsilon(3252.237773584372, worksheet.intermediate_output_bc61, 0.002); end
  def test_intermediate_output_bd61; assert_in_epsilon(4275.029204889995, worksheet.intermediate_output_bd61, 0.002); end
  def test_intermediate_output_be61; assert_in_epsilon(5484.980492206201, worksheet.intermediate_output_be61, 0.002); end
  def test_intermediate_output_bf61; assert_in_epsilon(6879.587389666815, worksheet.intermediate_output_bf61, 0.002); end
  def test_intermediate_output_bg61; assert_in_epsilon(8283.082582078518, worksheet.intermediate_output_bg61, 0.002); end
  def test_intermediate_output_bh61; assert_in_epsilon(9862.490281373503, worksheet.intermediate_output_bh61, 0.002); end
  def test_intermediate_output_bi61; assert_in_epsilon(11664.591533638724, worksheet.intermediate_output_bi61, 0.002); end
  def test_intermediate_output_c62; assert_equal("V.05", worksheet.intermediate_output_c62); end
  def test_intermediate_output_d62; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_d62); end
  def test_intermediate_output_ay62; assert_in_epsilon(383.84754191484035, worksheet.intermediate_output_ay62, 0.002); end
  def test_intermediate_output_ba62; assert_in_epsilon(515.7388752749973, worksheet.intermediate_output_ba62, 0.002); end
  def test_intermediate_output_bb62; assert_in_epsilon(812.4969853800327, worksheet.intermediate_output_bb62, 0.002); end
  def test_intermediate_output_bc62; assert_in_epsilon(959.6250095341898, worksheet.intermediate_output_bc62, 0.002); end
  def test_intermediate_output_bd62; assert_in_epsilon(1109.2297642530393, worksheet.intermediate_output_bd62, 0.002); end
  def test_intermediate_output_be62; assert_in_epsilon(1294.4837880279324, worksheet.intermediate_output_be62, 0.002); end
  def test_intermediate_output_bf62; assert_in_epsilon(1500.4859816334385, worksheet.intermediate_output_bf62, 0.002); end
  def test_intermediate_output_bg62; assert_in_epsilon(1727.8639214150958, worksheet.intermediate_output_bg62, 0.002); end
  def test_intermediate_output_bh62; assert_in_epsilon(1974.588139255765, worksheet.intermediate_output_bh62, 0.002); end
  def test_intermediate_output_bi62; assert_in_epsilon(2257.100695354515, worksheet.intermediate_output_bi62, 0.002); end
  def test_intermediate_output_c64; assert_equal("Energy Security Tables", worksheet.intermediate_output_c64); end
  def test_intermediate_output_ay64; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay64, 0.002); end
  def test_intermediate_output_ba64; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba64, 0.002); end
  def test_intermediate_output_bb64; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb64, 0.002); end
  def test_intermediate_output_bc64; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc64, 0.002); end
  def test_intermediate_output_bd64; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd64, 0.002); end
  def test_intermediate_output_be64; assert_in_epsilon(2032.0, worksheet.intermediate_output_be64, 0.002); end
  def test_intermediate_output_bf64; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf64, 0.002); end
  def test_intermediate_output_bg64; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg64, 0.002); end
  def test_intermediate_output_bh64; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh64, 0.002); end
  def test_intermediate_output_bi64; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi64, 0.002); end
  def test_intermediate_output_d65; assert_equal("Coal Imports", worksheet.intermediate_output_d65); end
  def test_intermediate_output_ay65; assert_in_delta(0.13507952627584974, worksheet.intermediate_output_ay65, 0.002); end
  def test_intermediate_output_ba65; assert_in_delta(0.16306051847276204, worksheet.intermediate_output_ba65, 0.002); end
  def test_intermediate_output_bb65; assert_in_delta(0.29564399430893357, worksheet.intermediate_output_bb65, 0.002); end
  def test_intermediate_output_bc65; assert_in_delta(0.4568547897534656, worksheet.intermediate_output_bc65, 0.002); end
  def test_intermediate_output_bd65; assert_in_delta(0.5813196084912029, worksheet.intermediate_output_bd65, 0.002); end
  def test_intermediate_output_be65; assert_in_delta(0.6897996532319706, worksheet.intermediate_output_be65, 0.002); end
  def test_intermediate_output_bf65; assert_in_delta(0.7479011617649691, worksheet.intermediate_output_bf65, 0.002); end
  def test_intermediate_output_bg65; assert_in_delta(0.8254070999331657, worksheet.intermediate_output_bg65, 0.002); end
  def test_intermediate_output_bh65; assert_in_delta(0.8729922810195125, worksheet.intermediate_output_bh65, 0.002); end
  def test_intermediate_output_bi65; assert_in_delta(0.9070382098567895, worksheet.intermediate_output_bi65, 0.002); end
  def test_intermediate_output_d66; assert_equal("Oil Imports", worksheet.intermediate_output_d66); end
  def test_intermediate_output_ay66; assert_in_delta(0.7576118733775037, worksheet.intermediate_output_ay66, 0.002); end
  def test_intermediate_output_ba66; assert_in_delta(0.7671143585315806, worksheet.intermediate_output_ba66, 0.002); end
  def test_intermediate_output_bb66; assert_in_delta(0.8133963262131126, worksheet.intermediate_output_bb66, 0.002); end
  def test_intermediate_output_bc66; assert_in_delta(0.8828544265092639, worksheet.intermediate_output_bc66, 0.002); end
  def test_intermediate_output_bd66; assert_in_delta(0.9112968149891353, worksheet.intermediate_output_bd66, 0.002); end
  def test_intermediate_output_be66; assert_in_delta(0.9311495661182688, worksheet.intermediate_output_be66, 0.002); end
  def test_intermediate_output_bf66; assert_in_delta(0.9452422873090196, worksheet.intermediate_output_bf66, 0.002); end
  def test_intermediate_output_bg66; assert_in_delta(0.9545634252788555, worksheet.intermediate_output_bg66, 0.002); end
  def test_intermediate_output_bh66; assert_in_delta(0.961818531696753, worksheet.intermediate_output_bh66, 0.002); end
  def test_intermediate_output_bi66; assert_in_delta(0.9676487086668158, worksheet.intermediate_output_bi66, 0.002); end
  def test_intermediate_output_bk66; assert_in_delta(0.27419354838709675, worksheet.intermediate_output_bk66, 0.002); end
  def test_intermediate_output_d67; assert_equal("Gas Imports", worksheet.intermediate_output_d67); end
  def test_intermediate_output_ay67; assert_in_delta(0.34995200330714565, worksheet.intermediate_output_ay67, 0.002); end
  def test_intermediate_output_ba67; assert_in_delta(0.22719382347657568, worksheet.intermediate_output_ba67, 0.002); end
  def test_intermediate_output_bb67; assert_in_delta(0.4496042397174595, worksheet.intermediate_output_bb67, 0.002); end
  def test_intermediate_output_bc67; assert_in_delta(0.49642098086270786, worksheet.intermediate_output_bc67, 0.002); end
  def test_intermediate_output_bd67; assert_in_delta(0.5345298906034409, worksheet.intermediate_output_bd67, 0.002); end
  def test_intermediate_output_be67; assert_in_delta(0.5641759428543218, worksheet.intermediate_output_be67, 0.002); end
  def test_intermediate_output_bf67; assert_in_delta(0.6016733602100565, worksheet.intermediate_output_bf67, 0.002); end
  def test_intermediate_output_bg67; assert_in_delta(0.632947860986052, worksheet.intermediate_output_bg67, 0.002); end
  def test_intermediate_output_bh67; assert_in_delta(0.6586225096859478, worksheet.intermediate_output_bh67, 0.002); end
  def test_intermediate_output_bi67; assert_in_delta(0.6883451648741784, worksheet.intermediate_output_bi67, 0.002); end
  def test_intermediate_output_d68; assert_equal("Overall", worksheet.intermediate_output_d68); end
  def test_intermediate_output_ay68; assert_in_delta(0.3063088138104771, worksheet.intermediate_output_ay68, 0.002); end
  def test_intermediate_output_ba68; assert_in_delta(0.3051184704775254, worksheet.intermediate_output_ba68, 0.002); end
  def test_intermediate_output_bb68; assert_in_delta(0.40845329527903873, worksheet.intermediate_output_bb68, 0.002); end
  def test_intermediate_output_bc68; assert_in_delta(0.5245055269406919, worksheet.intermediate_output_bc68, 0.002); end
  def test_intermediate_output_bd68; assert_in_delta(0.6149482496053067, worksheet.intermediate_output_bd68, 0.002); end
  def test_intermediate_output_be68; assert_in_delta(0.695529578264568, worksheet.intermediate_output_be68, 0.002); end
  def test_intermediate_output_bf68; assert_in_delta(0.746510814441223, worksheet.intermediate_output_bf68, 0.002); end
  def test_intermediate_output_bg68; assert_in_delta(0.8057567019931153, worksheet.intermediate_output_bg68, 0.002); end
  def test_intermediate_output_bh68; assert_in_delta(0.8453816707449013, worksheet.intermediate_output_bh68, 0.002); end
  def test_intermediate_output_bi68; assert_in_delta(0.8758008410676253, worksheet.intermediate_output_bi68, 0.002); end
  def test_intermediate_output_d69; assert_equal("Coal Imports", worksheet.intermediate_output_d69); end
  def test_intermediate_output_ay69; assert_in_delta(0.13507952627584974, worksheet.intermediate_output_ay69, 0.002); end
  def test_intermediate_output_ba69; assert_in_delta(0.16306051847276204, worksheet.intermediate_output_ba69, 0.002); end
  def test_intermediate_output_bb69; assert_in_delta(0.29564399430893357, worksheet.intermediate_output_bb69, 0.002); end
  def test_intermediate_output_bc69; assert_in_delta(0.4568547897534656, worksheet.intermediate_output_bc69, 0.002); end
  def test_intermediate_output_bd69; assert_in_delta(0.5813196084912029, worksheet.intermediate_output_bd69, 0.002); end
  def test_intermediate_output_be69; assert_in_delta(0.6897996532319706, worksheet.intermediate_output_be69, 0.002); end
  def test_intermediate_output_bf69; assert_in_delta(0.7479011617649691, worksheet.intermediate_output_bf69, 0.002); end
  def test_intermediate_output_bg69; assert_in_delta(0.8254070999331657, worksheet.intermediate_output_bg69, 0.002); end
  def test_intermediate_output_bh69; assert_in_delta(0.8729922810195125, worksheet.intermediate_output_bh69, 0.002); end
  def test_intermediate_output_bi69; assert_in_delta(0.9070382098567895, worksheet.intermediate_output_bi69, 0.002); end
  def test_intermediate_output_d70; assert_equal("Oil Imports", worksheet.intermediate_output_d70); end
  def test_intermediate_output_ay70; assert_in_delta(0.7576118733775037, worksheet.intermediate_output_ay70, 0.002); end
  def test_intermediate_output_ba70; assert_in_delta(0.7671143585315806, worksheet.intermediate_output_ba70, 0.002); end
  def test_intermediate_output_bb70; assert_in_delta(0.8133963262131126, worksheet.intermediate_output_bb70, 0.002); end
  def test_intermediate_output_bc70; assert_in_delta(0.8828544265092639, worksheet.intermediate_output_bc70, 0.002); end
  def test_intermediate_output_bd70; assert_in_delta(0.9112968149891353, worksheet.intermediate_output_bd70, 0.002); end
  def test_intermediate_output_be70; assert_in_delta(0.9311495661182688, worksheet.intermediate_output_be70, 0.002); end
  def test_intermediate_output_bf70; assert_in_delta(0.9452422873090196, worksheet.intermediate_output_bf70, 0.002); end
  def test_intermediate_output_bg70; assert_in_delta(0.9545634252788555, worksheet.intermediate_output_bg70, 0.002); end
  def test_intermediate_output_bh70; assert_in_delta(0.961818531696753, worksheet.intermediate_output_bh70, 0.002); end
  def test_intermediate_output_bi70; assert_in_delta(0.9676487086668158, worksheet.intermediate_output_bi70, 0.002); end
  def test_intermediate_output_bk70; assert_in_delta(0.27419354838709675, worksheet.intermediate_output_bk70, 0.002); end
  def test_intermediate_output_d71; assert_equal("Gas Imports", worksheet.intermediate_output_d71); end
  def test_intermediate_output_ay71; assert_in_delta(0.34995200330714565, worksheet.intermediate_output_ay71, 0.002); end
  def test_intermediate_output_ba71; assert_in_delta(0.25605199831288433, worksheet.intermediate_output_ba71, 0.002); end
  def test_intermediate_output_bb71; assert_in_delta(0.5098246645452118, worksheet.intermediate_output_bb71, 0.002); end
  def test_intermediate_output_bc71; assert_in_delta(0.5635155031317082, worksheet.intermediate_output_bc71, 0.002); end
  def test_intermediate_output_bd71; assert_in_delta(0.6072687227946314, worksheet.intermediate_output_bd71, 0.002); end
  def test_intermediate_output_be71; assert_in_delta(0.6415515286386174, worksheet.intermediate_output_be71, 0.002); end
  def test_intermediate_output_bf71; assert_in_delta(0.6850848152310904, worksheet.intermediate_output_bf71, 0.002); end
  def test_intermediate_output_bg71; assert_in_delta(0.7214840342367195, worksheet.intermediate_output_bg71, 0.002); end
  def test_intermediate_output_bh71; assert_in_delta(0.7514356368469383, worksheet.intermediate_output_bh71, 0.002); end
  def test_intermediate_output_bi71; assert_in_delta(0.7859910455839259, worksheet.intermediate_output_bi71, 0.002); end
  def test_intermediate_output_d72; assert_equal("Overall Import Dependence", worksheet.intermediate_output_d72); end
  def test_intermediate_output_ay72; assert_in_delta(0.3063088138104771, worksheet.intermediate_output_ay72, 0.002); end
  def test_intermediate_output_ba72; assert_in_delta(0.3075347460531512, worksheet.intermediate_output_ba72, 0.002); end
  def test_intermediate_output_bb72; assert_in_delta(0.414373864222892, worksheet.intermediate_output_bb72, 0.002); end
  def test_intermediate_output_bc72; assert_in_delta(0.5302950205274716, worksheet.intermediate_output_bc72, 0.002); end
  def test_intermediate_output_bd72; assert_in_delta(0.6204687052989794, worksheet.intermediate_output_bd72, 0.002); end
  def test_intermediate_output_be72; assert_in_delta(0.7007824898749857, worksheet.intermediate_output_be72, 0.002); end
  def test_intermediate_output_bf72; assert_in_delta(0.7518555180937307, worksheet.intermediate_output_bf72, 0.002); end
  def test_intermediate_output_bg72; assert_in_delta(0.8112070970539963, worksheet.intermediate_output_bg72, 0.002); end
  def test_intermediate_output_bh72; assert_in_delta(0.8510157846421295, worksheet.intermediate_output_bh72, 0.002); end
  def test_intermediate_output_bi72; assert_in_delta(0.8816697872642127, worksheet.intermediate_output_bi72, 0.002); end
  def test_intermediate_output_c73; assert_equal("Supply / demand not accounted for", worksheet.intermediate_output_c73); end
  def test_intermediate_output_c75; assert_equal("C.01", worksheet.intermediate_output_c75); end
  def test_intermediate_output_d75; assert_equal("Coal indigenous production", worksheet.intermediate_output_d75); end
  def test_intermediate_output_ay75; assert_in_delta(0.0, (worksheet.intermediate_output_ay75||0), 0.002); end
  def test_intermediate_output_ba75; assert_in_delta(0.0, (worksheet.intermediate_output_ba75||0), 0.002); end
  def test_intermediate_output_bb75; assert_in_delta(0.0, (worksheet.intermediate_output_bb75||0), 0.002); end
  def test_intermediate_output_bc75; assert_in_delta(0.0, (worksheet.intermediate_output_bc75||0), 0.002); end
  def test_intermediate_output_bd75; assert_in_delta(0.0, (worksheet.intermediate_output_bd75||0), 0.002); end
  def test_intermediate_output_be75; assert_in_delta(0.0, (worksheet.intermediate_output_be75||0), 0.002); end
  def test_intermediate_output_bf75; assert_in_delta(0.0, (worksheet.intermediate_output_bf75||0), 0.002); end
  def test_intermediate_output_bg75; assert_in_delta(0.0, (worksheet.intermediate_output_bg75||0), 0.002); end
  def test_intermediate_output_bh75; assert_in_delta(0.0, (worksheet.intermediate_output_bh75||0), 0.002); end
  def test_intermediate_output_bi75; assert_in_delta(0.0, (worksheet.intermediate_output_bi75||0), 0.002); end
  def test_intermediate_output_c76; assert_equal("C.02", worksheet.intermediate_output_c76); end
  def test_intermediate_output_d76; assert_equal("Oil and petroleum products", worksheet.intermediate_output_d76); end
  def test_intermediate_output_ay76; assert_in_delta(0.0, (worksheet.intermediate_output_ay76||0), 0.002); end
  def test_intermediate_output_ba76; assert_in_delta(0.0, (worksheet.intermediate_output_ba76||0), 0.002); end
  def test_intermediate_output_bb76; assert_in_delta(0.0, (worksheet.intermediate_output_bb76||0), 0.002); end
  def test_intermediate_output_bc76; assert_in_delta(0.0, (worksheet.intermediate_output_bc76||0), 0.002); end
  def test_intermediate_output_bd76; assert_in_delta(0.0, (worksheet.intermediate_output_bd76||0), 0.002); end
  def test_intermediate_output_be76; assert_in_delta(0.0, (worksheet.intermediate_output_be76||0), 0.002); end
  def test_intermediate_output_bf76; assert_in_delta(0.0, (worksheet.intermediate_output_bf76||0), 0.002); end
  def test_intermediate_output_bg76; assert_in_delta(0.0, (worksheet.intermediate_output_bg76||0), 0.002); end
  def test_intermediate_output_bh76; assert_in_delta(5.684341886080801e-13, worksheet.intermediate_output_bh76, 0.002); end
  def test_intermediate_output_bi76; assert_in_delta(-7.958078640513122e-13, worksheet.intermediate_output_bi76, 0.002); end
  def test_intermediate_output_c77; assert_equal("C.03", worksheet.intermediate_output_c77); end
  def test_intermediate_output_d77; assert_equal("Natural gas", worksheet.intermediate_output_d77); end
  def test_intermediate_output_ay77; assert_in_delta(0.0, (worksheet.intermediate_output_ay77||0), 0.002); end
  def test_intermediate_output_ba77; assert_in_delta(0.0, (worksheet.intermediate_output_ba77||0), 0.002); end
  def test_intermediate_output_bb77; assert_in_delta(0.0, (worksheet.intermediate_output_bb77||0), 0.002); end
  def test_intermediate_output_bc77; assert_in_delta(0.0, (worksheet.intermediate_output_bc77||0), 0.002); end
  def test_intermediate_output_bd77; assert_in_delta(0.0, (worksheet.intermediate_output_bd77||0), 0.002); end
  def test_intermediate_output_be77; assert_in_delta(0.0, (worksheet.intermediate_output_be77||0), 0.002); end
  def test_intermediate_output_bf77; assert_in_delta(0.0, (worksheet.intermediate_output_bf77||0), 0.002); end
  def test_intermediate_output_bg77; assert_in_delta(0.0, (worksheet.intermediate_output_bg77||0), 0.002); end
  def test_intermediate_output_bh77; assert_in_delta(0.0, (worksheet.intermediate_output_bh77||0), 0.002); end
  def test_intermediate_output_bi77; assert_in_delta(0.0, (worksheet.intermediate_output_bi77||0), 0.002); end
  def test_intermediate_output_c78; assert_equal("V.03", worksheet.intermediate_output_c78); end
  def test_intermediate_output_d78; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_d78); end
  def test_intermediate_output_ay78; assert_in_delta(0.0, (worksheet.intermediate_output_ay78||0), 0.002); end
  def test_intermediate_output_ba78; assert_in_delta(0.0, (worksheet.intermediate_output_ba78||0), 0.002); end
  def test_intermediate_output_bb78; assert_in_delta(0.0, (worksheet.intermediate_output_bb78||0), 0.002); end
  def test_intermediate_output_bc78; assert_in_delta(0.0, (worksheet.intermediate_output_bc78||0), 0.002); end
  def test_intermediate_output_bd78; assert_in_delta(0.0, (worksheet.intermediate_output_bd78||0), 0.002); end
  def test_intermediate_output_be78; assert_in_delta(0.0, (worksheet.intermediate_output_be78||0), 0.002); end
  def test_intermediate_output_bf78; assert_in_delta(0.0, (worksheet.intermediate_output_bf78||0), 0.002); end
  def test_intermediate_output_bg78; assert_in_delta(0.0, (worksheet.intermediate_output_bg78||0), 0.002); end
  def test_intermediate_output_bh78; assert_in_delta(0.0, (worksheet.intermediate_output_bh78||0), 0.002); end
  def test_intermediate_output_bi78; assert_in_delta(0.0, (worksheet.intermediate_output_bi78||0), 0.002); end
  def test_intermediate_output_c79; assert_equal("V.04", worksheet.intermediate_output_c79); end
  def test_intermediate_output_d79; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_d79); end
  def test_intermediate_output_ay79; assert_in_delta(0.0, (worksheet.intermediate_output_ay79||0), 0.002); end
  def test_intermediate_output_ba79; assert_in_delta(0.0, (worksheet.intermediate_output_ba79||0), 0.002); end
  def test_intermediate_output_bb79; assert_in_delta(0.0, (worksheet.intermediate_output_bb79||0), 0.002); end
  def test_intermediate_output_bc79; assert_in_delta(0.0, (worksheet.intermediate_output_bc79||0), 0.002); end
  def test_intermediate_output_bd79; assert_in_delta(0.0, (worksheet.intermediate_output_bd79||0), 0.002); end
  def test_intermediate_output_be79; assert_in_delta(0.0, (worksheet.intermediate_output_be79||0), 0.002); end
  def test_intermediate_output_bf79; assert_in_delta(0.0, (worksheet.intermediate_output_bf79||0), 0.002); end
  def test_intermediate_output_bg79; assert_in_delta(0.0, (worksheet.intermediate_output_bg79||0), 0.002); end
  def test_intermediate_output_bh79; assert_in_delta(0.0, (worksheet.intermediate_output_bh79||0), 0.002); end
  def test_intermediate_output_bi79; assert_in_delta(0.0, (worksheet.intermediate_output_bi79||0), 0.002); end
  def test_intermediate_output_c80; assert_equal("V.05", worksheet.intermediate_output_c80); end
  def test_intermediate_output_d80; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_d80); end
  def test_intermediate_output_ay80; assert_in_delta(0.0, (worksheet.intermediate_output_ay80||0), 0.002); end
  def test_intermediate_output_ba80; assert_in_delta(0.0, (worksheet.intermediate_output_ba80||0), 0.002); end
  def test_intermediate_output_bb80; assert_in_delta(0.0, (worksheet.intermediate_output_bb80||0), 0.002); end
  def test_intermediate_output_bc80; assert_in_delta(0.0, (worksheet.intermediate_output_bc80||0), 0.002); end
  def test_intermediate_output_bd80; assert_in_delta(0.0, (worksheet.intermediate_output_bd80||0), 0.002); end
  def test_intermediate_output_be80; assert_in_delta(0.0, (worksheet.intermediate_output_be80||0), 0.002); end
  def test_intermediate_output_bf80; assert_in_delta(0.0, (worksheet.intermediate_output_bf80||0), 0.002); end
  def test_intermediate_output_bg80; assert_in_delta(0.0, (worksheet.intermediate_output_bg80||0), 0.002); end
  def test_intermediate_output_bh80; assert_in_delta(0.0, (worksheet.intermediate_output_bh80||0), 0.002); end
  def test_intermediate_output_bi80; assert_in_delta(0.0, (worksheet.intermediate_output_bi80||0), 0.002); end
  def test_intermediate_output_c81; assert_equal("V.06", worksheet.intermediate_output_c81); end
  def test_intermediate_output_d81; assert_equal("Solid Biomass Hydrocarbons", worksheet.intermediate_output_d81); end
  def test_intermediate_output_ay81; assert_in_delta(0.0, (worksheet.intermediate_output_ay81||0), 0.002); end
  def test_intermediate_output_ba81; assert_in_delta(0.0, (worksheet.intermediate_output_ba81||0), 0.002); end
  def test_intermediate_output_bb81; assert_in_delta(0.0, (worksheet.intermediate_output_bb81||0), 0.002); end
  def test_intermediate_output_bc81; assert_in_delta(0.0, (worksheet.intermediate_output_bc81||0), 0.002); end
  def test_intermediate_output_bd81; assert_in_delta(0.0, (worksheet.intermediate_output_bd81||0), 0.002); end
  def test_intermediate_output_be81; assert_in_delta(0.0, (worksheet.intermediate_output_be81||0), 0.002); end
  def test_intermediate_output_bf81; assert_in_delta(0.0, (worksheet.intermediate_output_bf81||0), 0.002); end
  def test_intermediate_output_bg81; assert_in_delta(0.0, (worksheet.intermediate_output_bg81||0), 0.002); end
  def test_intermediate_output_bh81; assert_in_delta(0.0, (worksheet.intermediate_output_bh81||0), 0.002); end
  def test_intermediate_output_bi81; assert_in_delta(0.0, (worksheet.intermediate_output_bi81||0), 0.002); end
  def test_intermediate_output_c82; assert_equal("V.08", worksheet.intermediate_output_c82); end
  def test_intermediate_output_d82; assert_equal("Edible biomass", worksheet.intermediate_output_d82); end
  def test_intermediate_output_ay82; assert_in_delta(0.0, (worksheet.intermediate_output_ay82||0), 0.002); end
  def test_intermediate_output_ba82; assert_in_delta(0.0, (worksheet.intermediate_output_ba82||0), 0.002); end
  def test_intermediate_output_bb82; assert_in_delta(0.0, (worksheet.intermediate_output_bb82||0), 0.002); end
  def test_intermediate_output_bc82; assert_in_delta(0.0, (worksheet.intermediate_output_bc82||0), 0.002); end
  def test_intermediate_output_bd82; assert_in_delta(0.0, (worksheet.intermediate_output_bd82||0), 0.002); end
  def test_intermediate_output_be82; assert_in_delta(0.0, (worksheet.intermediate_output_be82||0), 0.002); end
  def test_intermediate_output_bf82; assert_in_delta(0.0, (worksheet.intermediate_output_bf82||0), 0.002); end
  def test_intermediate_output_bg82; assert_in_delta(0.0, (worksheet.intermediate_output_bg82||0), 0.002); end
  def test_intermediate_output_bh82; assert_in_delta(0.0, (worksheet.intermediate_output_bh82||0), 0.002); end
  def test_intermediate_output_bi82; assert_in_delta(0.0, (worksheet.intermediate_output_bi82||0), 0.002); end
  def test_intermediate_output_c83; assert_equal("V.07", worksheet.intermediate_output_c83); end
  def test_intermediate_output_d83; assert_equal(" Gaseous Biomass Hydrocarbons", worksheet.intermediate_output_d83); end
  def test_intermediate_output_ay83; assert_in_delta(0.0, (worksheet.intermediate_output_ay83||0), 0.002); end
  def test_intermediate_output_ba83; assert_in_delta(0.0, (worksheet.intermediate_output_ba83||0), 0.002); end
  def test_intermediate_output_bb83; assert_in_delta(0.0, (worksheet.intermediate_output_bb83||0), 0.002); end
  def test_intermediate_output_bc83; assert_in_delta(0.0, (worksheet.intermediate_output_bc83||0), 0.002); end
  def test_intermediate_output_bd83; assert_in_delta(0.0, (worksheet.intermediate_output_bd83||0), 0.002); end
  def test_intermediate_output_be83; assert_in_delta(0.0, (worksheet.intermediate_output_be83||0), 0.002); end
  def test_intermediate_output_bf83; assert_in_delta(0.0, (worksheet.intermediate_output_bf83||0), 0.002); end
  def test_intermediate_output_bg83; assert_in_delta(0.0, (worksheet.intermediate_output_bg83||0), 0.002); end
  def test_intermediate_output_bh83; assert_in_delta(0.0, (worksheet.intermediate_output_bh83||0), 0.002); end
  def test_intermediate_output_bi83; assert_in_delta(0.0, (worksheet.intermediate_output_bi83||0), 0.002); end
  def test_intermediate_output_c84; assert_equal("V.09", worksheet.intermediate_output_c84); end
  def test_intermediate_output_d84; assert_equal("Dry biomass and waste", worksheet.intermediate_output_d84); end
  def test_intermediate_output_ay84; assert_in_delta(0.0, (worksheet.intermediate_output_ay84||0), 0.002); end
  def test_intermediate_output_ba84; assert_in_delta(0.0, (worksheet.intermediate_output_ba84||0), 0.002); end
  def test_intermediate_output_bb84; assert_in_delta(0.0, (worksheet.intermediate_output_bb84||0), 0.002); end
  def test_intermediate_output_bc84; assert_in_delta(0.0, (worksheet.intermediate_output_bc84||0), 0.002); end
  def test_intermediate_output_bd84; assert_in_delta(0.0, (worksheet.intermediate_output_bd84||0), 0.002); end
  def test_intermediate_output_be84; assert_in_delta(0.0, (worksheet.intermediate_output_be84||0), 0.002); end
  def test_intermediate_output_bf84; assert_in_delta(0.0, (worksheet.intermediate_output_bf84||0), 0.002); end
  def test_intermediate_output_bg84; assert_in_delta(0.0, (worksheet.intermediate_output_bg84||0), 0.002); end
  def test_intermediate_output_bh84; assert_in_delta(0.0, (worksheet.intermediate_output_bh84||0), 0.002); end
  def test_intermediate_output_bi84; assert_in_delta(0.0, (worksheet.intermediate_output_bi84||0), 0.002); end
  def test_intermediate_output_c85; assert_equal("V.10", worksheet.intermediate_output_c85); end
  def test_intermediate_output_d85; assert_equal("Wet biomass and waste", worksheet.intermediate_output_d85); end
  def test_intermediate_output_ay85; assert_in_delta(0.0, (worksheet.intermediate_output_ay85||0), 0.002); end
  def test_intermediate_output_ba85; assert_in_delta(0.0, (worksheet.intermediate_output_ba85||0), 0.002); end
  def test_intermediate_output_bb85; assert_in_delta(0.0, (worksheet.intermediate_output_bb85||0), 0.002); end
  def test_intermediate_output_bc85; assert_in_delta(0.0, (worksheet.intermediate_output_bc85||0), 0.002); end
  def test_intermediate_output_bd85; assert_in_delta(0.0, (worksheet.intermediate_output_bd85||0), 0.002); end
  def test_intermediate_output_be85; assert_in_delta(0.0, (worksheet.intermediate_output_be85||0), 0.002); end
  def test_intermediate_output_bf85; assert_in_delta(0.0, (worksheet.intermediate_output_bf85||0), 0.002); end
  def test_intermediate_output_bg85; assert_in_delta(0.0, (worksheet.intermediate_output_bg85||0), 0.002); end
  def test_intermediate_output_bh85; assert_in_delta(0.0, (worksheet.intermediate_output_bh85||0), 0.002); end
  def test_intermediate_output_bi85; assert_in_delta(1.7763568394002505e-15, worksheet.intermediate_output_bi85, 0.002); end
  def test_intermediate_output_c86; assert_equal("V.11", worksheet.intermediate_output_c86); end
  def test_intermediate_output_d86; assert_equal("Off Grid Renewables", worksheet.intermediate_output_d86); end
  def test_intermediate_output_ay86; assert_in_delta(0.0, (worksheet.intermediate_output_ay86||0), 0.002); end
  def test_intermediate_output_ba86; assert_in_delta(0.0, (worksheet.intermediate_output_ba86||0), 0.002); end
  def test_intermediate_output_bb86; assert_in_delta(0.0, (worksheet.intermediate_output_bb86||0), 0.002); end
  def test_intermediate_output_bc86; assert_in_delta(0.0, (worksheet.intermediate_output_bc86||0), 0.002); end
  def test_intermediate_output_bd86; assert_in_delta(0.0, (worksheet.intermediate_output_bd86||0), 0.002); end
  def test_intermediate_output_be86; assert_in_delta(0.0, (worksheet.intermediate_output_be86||0), 0.002); end
  def test_intermediate_output_bf86; assert_in_delta(0.0, (worksheet.intermediate_output_bf86||0), 0.002); end
  def test_intermediate_output_bg86; assert_in_delta(0.0, (worksheet.intermediate_output_bg86||0), 0.002); end
  def test_intermediate_output_bh86; assert_in_delta(0.0, (worksheet.intermediate_output_bh86||0), 0.002); end
  def test_intermediate_output_bi86; assert_in_delta(0.0, (worksheet.intermediate_output_bi86||0), 0.002); end
  def test_intermediate_output_c87; assert_equal("V.12", worksheet.intermediate_output_c87); end
  def test_intermediate_output_d87; assert_equal("H2", worksheet.intermediate_output_d87); end
  def test_intermediate_output_ay87; assert_in_delta(0.0, (worksheet.intermediate_output_ay87||0), 0.002); end
  def test_intermediate_output_ba87; assert_in_delta(0.0, (worksheet.intermediate_output_ba87||0), 0.002); end
  def test_intermediate_output_bb87; assert_in_delta(0.0, (worksheet.intermediate_output_bb87||0), 0.002); end
  def test_intermediate_output_bc87; assert_in_delta(0.0, (worksheet.intermediate_output_bc87||0), 0.002); end
  def test_intermediate_output_bd87; assert_in_delta(0.0, (worksheet.intermediate_output_bd87||0), 0.002); end
  def test_intermediate_output_be87; assert_in_delta(0.0, (worksheet.intermediate_output_be87||0), 0.002); end
  def test_intermediate_output_bf87; assert_in_delta(0.0, (worksheet.intermediate_output_bf87||0), 0.002); end
  def test_intermediate_output_bg87; assert_in_delta(0.0, (worksheet.intermediate_output_bg87||0), 0.002); end
  def test_intermediate_output_bh87; assert_in_delta(0.0, (worksheet.intermediate_output_bh87||0), 0.002); end
  def test_intermediate_output_bi87; assert_in_delta(0.0, (worksheet.intermediate_output_bi87||0), 0.002); end
  def test_intermediate_output_c88; assert_equal("V.13", worksheet.intermediate_output_c88); end
  def test_intermediate_output_d88; assert_equal("Energy crops (second generation)", worksheet.intermediate_output_d88); end
  def test_intermediate_output_ay88; assert_in_delta(0.0, (worksheet.intermediate_output_ay88||0), 0.002); end
  def test_intermediate_output_ba88; assert_in_delta(0.0, (worksheet.intermediate_output_ba88||0), 0.002); end
  def test_intermediate_output_bb88; assert_in_delta(0.0, (worksheet.intermediate_output_bb88||0), 0.002); end
  def test_intermediate_output_bc88; assert_in_delta(0.0, (worksheet.intermediate_output_bc88||0), 0.002); end
  def test_intermediate_output_bd88; assert_in_delta(0.0, (worksheet.intermediate_output_bd88||0), 0.002); end
  def test_intermediate_output_be88; assert_in_delta(0.0, (worksheet.intermediate_output_be88||0), 0.002); end
  def test_intermediate_output_bf88; assert_in_delta(0.0, (worksheet.intermediate_output_bf88||0), 0.002); end
  def test_intermediate_output_bg88; assert_in_delta(0.0, (worksheet.intermediate_output_bg88||0), 0.002); end
  def test_intermediate_output_bh88; assert_in_delta(0.0, (worksheet.intermediate_output_bh88||0), 0.002); end
  def test_intermediate_output_bi88; assert_in_delta(0.0, (worksheet.intermediate_output_bi88||0), 0.002); end
  def test_intermediate_output_d89; assert_equal("Total unnaccounted supply / demand", worksheet.intermediate_output_d89); end
  def test_intermediate_output_ay89; assert_in_delta(0.0, (worksheet.intermediate_output_ay89||0), 0.002); end
  def test_intermediate_output_ba89; assert_in_delta(0.0, (worksheet.intermediate_output_ba89||0), 0.002); end
  def test_intermediate_output_bb89; assert_in_delta(0.0, (worksheet.intermediate_output_bb89||0), 0.002); end
  def test_intermediate_output_bc89; assert_in_delta(0.0, (worksheet.intermediate_output_bc89||0), 0.002); end
  def test_intermediate_output_bd89; assert_in_delta(0.0, (worksheet.intermediate_output_bd89||0), 0.002); end
  def test_intermediate_output_be89; assert_in_delta(0.0, (worksheet.intermediate_output_be89||0), 0.002); end
  def test_intermediate_output_bf89; assert_in_delta(0.0, (worksheet.intermediate_output_bf89||0), 0.002); end
  def test_intermediate_output_bg89; assert_in_delta(0.0, (worksheet.intermediate_output_bg89||0), 0.002); end
  def test_intermediate_output_bh89; assert_in_delta(5.684341886080801e-13, worksheet.intermediate_output_bh89, 0.002); end
  def test_intermediate_output_bi89; assert_in_delta(-7.94031507211912e-13, worksheet.intermediate_output_bi89, 0.002); end
  def test_intermediate_output_d91; assert_equal("Supply, Demand, and Unaccounted supply", worksheet.intermediate_output_d91); end
  def test_intermediate_output_ay91; assert_in_delta(9.094947017729282e-13, worksheet.intermediate_output_ay91, 0.002); end
  def test_intermediate_output_ba91; assert_in_delta(0.0, (worksheet.intermediate_output_ba91||0), 0.002); end
  def test_intermediate_output_bb91; assert_in_delta(0.0, (worksheet.intermediate_output_bb91||0), 0.002); end
  def test_intermediate_output_bc91; assert_in_delta(-1.8189894035458565e-12, worksheet.intermediate_output_bc91, 0.002); end
  def test_intermediate_output_bd91; assert_in_delta(1.8189894035458565e-12, worksheet.intermediate_output_bd91, 0.002); end
  def test_intermediate_output_be91; assert_in_delta(-1.8189894035458565e-12, worksheet.intermediate_output_be91, 0.002); end
  def test_intermediate_output_bf91; assert_in_delta(0.0, (worksheet.intermediate_output_bf91||0), 0.002); end
  def test_intermediate_output_bg91; assert_in_delta(0.0, (worksheet.intermediate_output_bg91||0), 0.002); end
  def test_intermediate_output_bh91; assert_in_delta(4.206412995699793e-12, worksheet.intermediate_output_bh91, 0.002); end
  def test_intermediate_output_bi91; assert_in_delta(-7.94031507211912e-13, worksheet.intermediate_output_bi91, 0.002); end
  def test_intermediate_output_b93; assert_equal("Electricity grid (net of distribution losses)", worksheet.intermediate_output_b93); end
  def test_intermediate_output_c95; assert_equal("V.01", worksheet.intermediate_output_c95); end
  def test_intermediate_output_d95; assert_equal("Electricity (delivered to end user)", worksheet.intermediate_output_d95); end
  def test_intermediate_output_ay95; assert_in_epsilon(-595.686815164825, worksheet.intermediate_output_ay95, 0.002); end
  def test_intermediate_output_ba95; assert_in_epsilon(-792.1907494136481, worksheet.intermediate_output_ba95, 0.002); end
  def test_intermediate_output_bb95; assert_in_epsilon(-1134.1254680412508, worksheet.intermediate_output_bb95, 0.002); end
  def test_intermediate_output_bc95; assert_in_epsilon(-1624.4019219355403, worksheet.intermediate_output_bc95, 0.002); end
  def test_intermediate_output_bd95; assert_in_epsilon(-2266.021197555912, worksheet.intermediate_output_bd95, 0.002); end
  def test_intermediate_output_be95; assert_in_epsilon(-3156.496453551856, worksheet.intermediate_output_be95, 0.002); end
  def test_intermediate_output_bf95; assert_in_epsilon(-3956.5805691904575, worksheet.intermediate_output_bf95, 0.002); end
  def test_intermediate_output_bg95; assert_in_epsilon(-4911.764530672162, worksheet.intermediate_output_bg95, 0.002); end
  def test_intermediate_output_bh95; assert_in_epsilon(-5751.895286061222, worksheet.intermediate_output_bh95, 0.002); end
  def test_intermediate_output_bi95; assert_in_epsilon(-6698.568659252276, worksheet.intermediate_output_bi95, 0.002); end
  def test_intermediate_output_bj95; assert_equal("REFERENCED", worksheet.intermediate_output_bj95); end
  def test_intermediate_output_c96; assert_equal("V.02", worksheet.intermediate_output_c96); end
  def test_intermediate_output_d96; assert_equal("Electricity (supplied to grid)", worksheet.intermediate_output_d96); end
  def test_intermediate_output_ay96; assert_in_epsilon(595.686815164825, worksheet.intermediate_output_ay96, 0.002); end
  def test_intermediate_output_ba96; assert_in_epsilon(792.1907494136481, worksheet.intermediate_output_ba96, 0.002); end
  def test_intermediate_output_bb96; assert_in_epsilon(1134.1254680412508, worksheet.intermediate_output_bb96, 0.002); end
  def test_intermediate_output_bc96; assert_in_epsilon(1624.4019219355403, worksheet.intermediate_output_bc96, 0.002); end
  def test_intermediate_output_bd96; assert_in_epsilon(2266.021197555912, worksheet.intermediate_output_bd96, 0.002); end
  def test_intermediate_output_be96; assert_in_epsilon(3156.496453551856, worksheet.intermediate_output_be96, 0.002); end
  def test_intermediate_output_bf96; assert_in_epsilon(3956.5805691904575, worksheet.intermediate_output_bf96, 0.002); end
  def test_intermediate_output_bg96; assert_in_epsilon(4911.764530672162, worksheet.intermediate_output_bg96, 0.002); end
  def test_intermediate_output_bh96; assert_in_epsilon(5751.895286061222, worksheet.intermediate_output_bh96, 0.002); end
  def test_intermediate_output_bi96; assert_in_epsilon(6698.568659252276, worksheet.intermediate_output_bi96, 0.002); end
  def test_intermediate_output_d97; assert_equal("Total electricity grid", worksheet.intermediate_output_d97); end
  def test_intermediate_output_ay97; assert_in_delta(0.0, (worksheet.intermediate_output_ay97||0), 0.002); end
  def test_intermediate_output_ba97; assert_in_delta(0.0, (worksheet.intermediate_output_ba97||0), 0.002); end
  def test_intermediate_output_bb97; assert_in_delta(0.0, (worksheet.intermediate_output_bb97||0), 0.002); end
  def test_intermediate_output_bc97; assert_in_delta(0.0, (worksheet.intermediate_output_bc97||0), 0.002); end
  def test_intermediate_output_bd97; assert_in_delta(0.0, (worksheet.intermediate_output_bd97||0), 0.002); end
  def test_intermediate_output_be97; assert_in_delta(0.0, (worksheet.intermediate_output_be97||0), 0.002); end
  def test_intermediate_output_bf97; assert_in_delta(0.0, (worksheet.intermediate_output_bf97||0), 0.002); end
  def test_intermediate_output_bg97; assert_in_delta(0.0, (worksheet.intermediate_output_bg97||0), 0.002); end
  def test_intermediate_output_bh97; assert_in_delta(0.0, (worksheet.intermediate_output_bh97||0), 0.002); end
  def test_intermediate_output_bi97; assert_in_delta(0.0, (worksheet.intermediate_output_bi97||0), 0.002); end
  def test_intermediate_output_c99; assert_equal("V.02", worksheet.intermediate_output_c99); end
  def test_intermediate_output_d99; assert_equal("Losses", worksheet.intermediate_output_d99); end
  def test_intermediate_output_ay99; assert_in_epsilon(-195.082885040704, worksheet.intermediate_output_ay99, 0.002); end
  def test_intermediate_output_ba99; assert_in_epsilon(-232.5030151881474, worksheet.intermediate_output_ba99, 0.002); end
  def test_intermediate_output_bb99; assert_in_epsilon(-310.6571608680854, worksheet.intermediate_output_bb99, 0.002); end
  def test_intermediate_output_bc99; assert_in_epsilon(-419.89951518444514, worksheet.intermediate_output_bc99, 0.002); end
  def test_intermediate_output_bd99; assert_in_epsilon(-551.7121990567612, worksheet.intermediate_output_bd99, 0.002); end
  def test_intermediate_output_be99; assert_in_epsilon(-726.4150919284571, worksheet.intermediate_output_be99, 0.002); end
  def test_intermediate_output_bf99; assert_in_epsilon(-862.8753960093786, worksheet.intermediate_output_bf99, 0.002); end
  def test_intermediate_output_bg99; assert_in_epsilon(-978.3476298652677, worksheet.intermediate_output_bg99, 0.002); end
  def test_intermediate_output_bh99; assert_in_epsilon(-1091.0371471514245, worksheet.intermediate_output_bh99, 0.002); end
  def test_intermediate_output_bi99; assert_in_epsilon(-1230.420544663678, worksheet.intermediate_output_bi99, 0.002); end
  def test_intermediate_output_d100; assert_equal("Demand (for charting)", worksheet.intermediate_output_d100); end
  def test_intermediate_output_ay100; assert_in_epsilon(790.769700205529, worksheet.intermediate_output_ay100, 0.002); end
  def test_intermediate_output_ba100; assert_in_epsilon(1024.6937646017955, worksheet.intermediate_output_ba100, 0.002); end
  def test_intermediate_output_bb100; assert_in_epsilon(1444.7826289093362, worksheet.intermediate_output_bb100, 0.002); end
  def test_intermediate_output_bc100; assert_in_epsilon(2044.3014371199854, worksheet.intermediate_output_bc100, 0.002); end
  def test_intermediate_output_bd100; assert_in_epsilon(2817.733396612673, worksheet.intermediate_output_bd100, 0.002); end
  def test_intermediate_output_be100; assert_in_epsilon(3882.911545480313, worksheet.intermediate_output_be100, 0.002); end
  def test_intermediate_output_bf100; assert_in_epsilon(4819.455965199836, worksheet.intermediate_output_bf100, 0.002); end
  def test_intermediate_output_bg100; assert_in_epsilon(5890.11216053743, worksheet.intermediate_output_bg100, 0.002); end
  def test_intermediate_output_bh100; assert_in_epsilon(6842.932433212646, worksheet.intermediate_output_bh100, 0.002); end
  def test_intermediate_output_bi100; assert_in_epsilon(7928.989203915954, worksheet.intermediate_output_bi100, 0.002); end
  def test_intermediate_output_d101; assert_equal("Dummy for charting", worksheet.intermediate_output_d101); end
  def test_intermediate_output_ay101; assert_in_epsilon(790.769700205529, worksheet.intermediate_output_ay101, 0.002); end
  def test_intermediate_output_ba101; assert_in_epsilon(1030.1577354872481, worksheet.intermediate_output_ba101, 0.002); end
  def test_intermediate_output_bb101; assert_in_epsilon(1444.782628909336, worksheet.intermediate_output_bb101, 0.002); end
  def test_intermediate_output_bc101; assert_in_epsilon(2044.3014371199852, worksheet.intermediate_output_bc101, 0.002); end
  def test_intermediate_output_bd101; assert_in_epsilon(2817.7333966126735, worksheet.intermediate_output_bd101, 0.002); end
  def test_intermediate_output_be101; assert_in_epsilon(3882.9115454803136, worksheet.intermediate_output_be101, 0.002); end
  def test_intermediate_output_bf101; assert_in_epsilon(4819.455965199836, worksheet.intermediate_output_bf101, 0.002); end
  def test_intermediate_output_bg101; assert_in_epsilon(5890.112160537429, worksheet.intermediate_output_bg101, 0.002); end
  def test_intermediate_output_bh101; assert_in_epsilon(6842.932433212645, worksheet.intermediate_output_bh101, 0.002); end
  def test_intermediate_output_bi101; assert_in_epsilon(7928.989203915953, worksheet.intermediate_output_bi101, 0.002); end
  def test_intermediate_output_c104; assert_equal("Z.01", worksheet.intermediate_output_c104); end
  def test_intermediate_output_d104; assert_equal("Unallocated", worksheet.intermediate_output_d104); end
  def test_intermediate_output_ay104; assert_in_delta(0.0, (worksheet.intermediate_output_ay104||0), 0.002); end
  def test_intermediate_output_ba104; assert_in_delta(0.0, (worksheet.intermediate_output_ba104||0), 0.002); end
  def test_intermediate_output_bb104; assert_in_delta(0.0, (worksheet.intermediate_output_bb104||0), 0.002); end
  def test_intermediate_output_bc104; assert_in_delta(0.0, (worksheet.intermediate_output_bc104||0), 0.002); end
  def test_intermediate_output_bd104; assert_in_delta(0.0, (worksheet.intermediate_output_bd104||0), 0.002); end
  def test_intermediate_output_be104; assert_in_delta(0.0, (worksheet.intermediate_output_be104||0), 0.002); end
  def test_intermediate_output_bf104; assert_in_delta(0.0, (worksheet.intermediate_output_bf104||0), 0.002); end
  def test_intermediate_output_bg104; assert_in_delta(0.0, (worksheet.intermediate_output_bg104||0), 0.002); end
  def test_intermediate_output_bh104; assert_in_delta(0.0, (worksheet.intermediate_output_bh104||0), 0.002); end
  def test_intermediate_output_bi104; assert_in_delta(0.0, (worksheet.intermediate_output_bi104||0), 0.002); end
  def test_intermediate_output_d106; assert_equal("Net balance (should be zero!)", worksheet.intermediate_output_d106); end
  def test_intermediate_output_ay106; assert_in_delta(9.094947017729282e-13, worksheet.intermediate_output_ay106, 0.002); end
  def test_intermediate_output_ba106; assert_in_delta(0.0, (worksheet.intermediate_output_ba106||0), 0.002); end
  def test_intermediate_output_bb106; assert_in_delta(0.0, (worksheet.intermediate_output_bb106||0), 0.002); end
  def test_intermediate_output_bc106; assert_in_delta(-1.8189894035458565e-12, worksheet.intermediate_output_bc106, 0.002); end
  def test_intermediate_output_bd106; assert_in_delta(1.8189894035458565e-12, worksheet.intermediate_output_bd106, 0.002); end
  def test_intermediate_output_be106; assert_in_delta(-1.8189894035458565e-12, worksheet.intermediate_output_be106, 0.002); end
  def test_intermediate_output_bf106; assert_in_delta(0.0, (worksheet.intermediate_output_bf106||0), 0.002); end
  def test_intermediate_output_bg106; assert_in_delta(0.0, (worksheet.intermediate_output_bg106||0), 0.002); end
  def test_intermediate_output_bh106; assert_in_delta(4.206412995699793e-12, worksheet.intermediate_output_bh106, 0.002); end
  def test_intermediate_output_bi106; assert_in_delta(-7.94031507211912e-13, worksheet.intermediate_output_bi106, 0.002); end
  def test_intermediate_output_b108; assert_equal("Electricity Generation", worksheet.intermediate_output_b108); end
  def test_intermediate_output_c110; assert_equal("V.02", worksheet.intermediate_output_c110); end
  def test_intermediate_output_d110; assert_equal("TWh/year", worksheet.intermediate_output_d110); end
  def test_intermediate_output_ay110; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay110, 0.002); end
  def test_intermediate_output_ba110; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba110, 0.002); end
  def test_intermediate_output_bb110; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb110, 0.002); end
  def test_intermediate_output_bc110; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc110, 0.002); end
  def test_intermediate_output_bd110; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd110, 0.002); end
  def test_intermediate_output_be110; assert_in_epsilon(2032.0, worksheet.intermediate_output_be110, 0.002); end
  def test_intermediate_output_bf110; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf110, 0.002); end
  def test_intermediate_output_bg110; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg110, 0.002); end
  def test_intermediate_output_bh110; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh110, 0.002); end
  def test_intermediate_output_bi110; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi110, 0.002); end
  def test_intermediate_output_c111; assert_equal("I.a", worksheet.intermediate_output_c111); end
  def test_intermediate_output_d111; assert_equal("Gas Power Stations", worksheet.intermediate_output_d111); end
  def test_intermediate_output_ah111; assert_in_epsilon(221.2, worksheet.intermediate_output_ah111, 0.002); end
  def test_intermediate_output_ai111; assert_in_epsilon(214.6, worksheet.intermediate_output_ai111, 0.002); end
  def test_intermediate_output_aj111; assert_in_epsilon(221.2, worksheet.intermediate_output_aj111, 0.002); end
  def test_intermediate_output_ak111; assert_in_epsilon(226.3, worksheet.intermediate_output_ak111, 0.002); end
  def test_intermediate_output_al111; assert_in_epsilon(241.6, worksheet.intermediate_output_al111, 0.002); end
  def test_intermediate_output_am111; assert_in_epsilon(248.5, worksheet.intermediate_output_am111, 0.002); end
  def test_intermediate_output_an111; assert_in_epsilon(250.7, worksheet.intermediate_output_an111, 0.002); end
  def test_intermediate_output_ao111; assert_in_epsilon(258.7, worksheet.intermediate_output_ao111, 0.002); end
  def test_intermediate_output_ap111; assert_in_epsilon(262.6, worksheet.intermediate_output_ap111, 0.002); end
  def test_intermediate_output_aq111; assert_in_epsilon(264.2, worksheet.intermediate_output_aq111, 0.002); end
  def test_intermediate_output_ar111; assert_in_epsilon(267.6, worksheet.intermediate_output_ar111, 0.002); end
  def test_intermediate_output_as111; assert_in_epsilon(276.5, worksheet.intermediate_output_as111, 0.002); end
  def test_intermediate_output_at111; assert_in_epsilon(279.3, worksheet.intermediate_output_at111, 0.002); end
  def test_intermediate_output_au111; assert_in_epsilon(250.1, worksheet.intermediate_output_au111, 0.002); end
  def test_intermediate_output_av111; assert_in_epsilon(263.1, worksheet.intermediate_output_av111, 0.002); end
  def test_intermediate_output_aw111; assert_equal("Dukes 5.6 sum of generation - used on works for coal, oil gas and renewables", worksheet.intermediate_output_aw111); end
  def test_intermediate_output_ay111; assert_in_epsilon(64.0088375976, worksheet.intermediate_output_ay111, 0.002); end
  def test_intermediate_output_ba111; assert_in_epsilon(96.596143677, worksheet.intermediate_output_ba111, 0.002); end
  def test_intermediate_output_bb111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bb111, 0.002); end
  def test_intermediate_output_bc111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bc111, 0.002); end
  def test_intermediate_output_bd111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bd111, 0.002); end
  def test_intermediate_output_be111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_be111, 0.002); end
  def test_intermediate_output_bf111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bf111, 0.002); end
  def test_intermediate_output_bg111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bg111, 0.002); end
  def test_intermediate_output_bh111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bh111, 0.002); end
  def test_intermediate_output_bi111; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bi111, 0.002); end
  def test_intermediate_output_c112; assert_equal("I.b", worksheet.intermediate_output_c112); end
  def test_intermediate_output_d112; assert_equal("Coal power stations", worksheet.intermediate_output_d112); end
  def test_intermediate_output_ay112; assert_in_epsilon(489.68979840000003, worksheet.intermediate_output_ay112, 0.002); end
  def test_intermediate_output_ba112; assert_in_epsilon(710.8628564490481, worksheet.intermediate_output_ba112, 0.002); end
  def test_intermediate_output_bb112; assert_in_epsilon(987.4332245612816, worksheet.intermediate_output_bb112, 0.002); end
  def test_intermediate_output_bc112; assert_in_epsilon(936.0569741896016, worksheet.intermediate_output_bc112, 0.002); end
  def test_intermediate_output_bd112; assert_in_epsilon(857.5049884456017, worksheet.intermediate_output_bd112, 0.002); end
  def test_intermediate_output_be112; assert_in_epsilon(774.0835247656017, worksheet.intermediate_output_be112, 0.002); end
  def test_intermediate_output_bf112; assert_in_epsilon(711.6980002492061, worksheet.intermediate_output_bf112, 0.002); end
  def test_intermediate_output_bg112; assert_in_epsilon(631.661702789206, worksheet.intermediate_output_bg112, 0.002); end
  def test_intermediate_output_bh112; assert_in_epsilon(563.1204539812059, worksheet.intermediate_output_bh112, 0.002); end
  def test_intermediate_output_bi112; assert_in_epsilon(336.94328475400596, worksheet.intermediate_output_bi112, 0.002); end
  def test_intermediate_output_c113; assert_equal("I.c", worksheet.intermediate_output_c113); end
  def test_intermediate_output_d113; assert_equal("Carbon Capture Storage (CCS)", worksheet.intermediate_output_d113); end
  def test_intermediate_output_ay113; assert_in_delta(0.0, (worksheet.intermediate_output_ay113||0), 0.002); end
  def test_intermediate_output_ba113; assert_in_delta(0.0, (worksheet.intermediate_output_ba113||0), 0.002); end
  def test_intermediate_output_bb113; assert_in_delta(0.0, (worksheet.intermediate_output_bb113||0), 0.002); end
  def test_intermediate_output_bc113; assert_in_delta(0.0, (worksheet.intermediate_output_bc113||0), 0.002); end
  def test_intermediate_output_bd113; assert_in_delta(0.0, (worksheet.intermediate_output_bd113||0), 0.002); end
  def test_intermediate_output_be113; assert_in_epsilon(2.577204, worksheet.intermediate_output_be113, 0.002); end
  def test_intermediate_output_bf113; assert_in_epsilon(6.1362000000000005, worksheet.intermediate_output_bf113, 0.002); end
  def test_intermediate_output_bg113; assert_in_epsilon(14.358708, worksheet.intermediate_output_bg113, 0.002); end
  def test_intermediate_output_bh113; assert_in_epsilon(19.513116000000004, worksheet.intermediate_output_bh113, 0.002); end
  def test_intermediate_output_bi113; assert_in_epsilon(27.244728000000002, worksheet.intermediate_output_bi113, 0.002); end
  def test_intermediate_output_c114; assert_equal("I.d", worksheet.intermediate_output_c114); end
  def test_intermediate_output_d114; assert_equal("Electricity Balancing Requirement", worksheet.intermediate_output_d114); end
  def test_intermediate_output_ah114; assert_in_epsilon(221.2, worksheet.intermediate_output_ah114, 0.002); end
  def test_intermediate_output_ai114; assert_in_epsilon(214.6, worksheet.intermediate_output_ai114, 0.002); end
  def test_intermediate_output_aj114; assert_in_epsilon(221.2, worksheet.intermediate_output_aj114, 0.002); end
  def test_intermediate_output_ak114; assert_in_epsilon(226.3, worksheet.intermediate_output_ak114, 0.002); end
  def test_intermediate_output_al114; assert_in_epsilon(241.6, worksheet.intermediate_output_al114, 0.002); end
  def test_intermediate_output_am114; assert_in_epsilon(248.5, worksheet.intermediate_output_am114, 0.002); end
  def test_intermediate_output_an114; assert_in_epsilon(250.7, worksheet.intermediate_output_an114, 0.002); end
  def test_intermediate_output_ao114; assert_in_epsilon(258.7, worksheet.intermediate_output_ao114, 0.002); end
  def test_intermediate_output_ap114; assert_in_epsilon(262.6, worksheet.intermediate_output_ap114, 0.002); end
  def test_intermediate_output_aq114; assert_in_epsilon(264.2, worksheet.intermediate_output_aq114, 0.002); end
  def test_intermediate_output_ar114; assert_in_epsilon(267.6, worksheet.intermediate_output_ar114, 0.002); end
  def test_intermediate_output_as114; assert_in_epsilon(276.5, worksheet.intermediate_output_as114, 0.002); end
  def test_intermediate_output_at114; assert_in_epsilon(279.3, worksheet.intermediate_output_at114, 0.002); end
  def test_intermediate_output_au114; assert_in_epsilon(250.1, worksheet.intermediate_output_au114, 0.002); end
  def test_intermediate_output_av114; assert_in_epsilon(263.1, worksheet.intermediate_output_av114, 0.002); end
  def test_intermediate_output_aw114; assert_equal("Sum of above", worksheet.intermediate_output_aw114); end
  def test_intermediate_output_ax114; assert_in_delta(0.0, (worksheet.intermediate_output_ax114||0), 0.002); end
  def test_intermediate_output_ay114; assert_in_epsilon(57.253185663040085, worksheet.intermediate_output_ay114, 0.002); end
  def test_intermediate_output_ba114; assert_in_delta(0.0, (worksheet.intermediate_output_ba114||0), 0.002); end
  def test_intermediate_output_bb114; assert_in_epsilon(15.562100389454372, worksheet.intermediate_output_bb114, 0.002); end
  def test_intermediate_output_bc114; assert_in_epsilon(614.2985882067835, worksheet.intermediate_output_bc114, 0.002); end
  def test_intermediate_output_bd114; assert_in_epsilon(1405.4268384694712, worksheet.intermediate_output_bd114, 0.002); end
  def test_intermediate_output_be114; assert_in_epsilon(2482.302109237112, worksheet.intermediate_output_be114, 0.002); end
  def test_intermediate_output_bf114; assert_in_epsilon(3425.69106697603, worksheet.intermediate_output_bf114, 0.002); end
  def test_intermediate_output_bg114; assert_in_epsilon(4535.840489654824, worksheet.intermediate_output_bg114, 0.002); end
  def test_intermediate_output_bh114; assert_in_epsilon(5546.27905775604, worksheet.intermediate_output_bh114, 0.002); end
  def test_intermediate_output_bi114; assert_in_epsilon(6862.578606936548, worksheet.intermediate_output_bi114, 0.002); end
  def test_intermediate_output_d115; assert_equal("Fossil Fuel Based Electricity", worksheet.intermediate_output_d115); end
  def test_intermediate_output_ay115; assert_in_epsilon(610.9518216606401, worksheet.intermediate_output_ay115, 0.002); end
  def test_intermediate_output_ba115; assert_in_epsilon(807.4590001260481, worksheet.intermediate_output_ba115, 0.002); end
  def test_intermediate_output_bb115; assert_in_epsilon(1112.8558589921358, worksheet.intermediate_output_bb115, 0.002); end
  def test_intermediate_output_bc115; assert_in_epsilon(1660.2160964377852, worksheet.intermediate_output_bc115, 0.002); end
  def test_intermediate_output_bd115; assert_in_epsilon(2372.792360956473, worksheet.intermediate_output_bd115, 0.002); end
  def test_intermediate_output_be115; assert_in_epsilon(3368.8233720441135, worksheet.intermediate_output_be115, 0.002); end
  def test_intermediate_output_bf115; assert_in_epsilon(4253.385801266636, worksheet.intermediate_output_bf115, 0.002); end
  def test_intermediate_output_bg115; assert_in_epsilon(5291.721434485429, worksheet.intermediate_output_bg115, 0.002); end
  def test_intermediate_output_bh115; assert_in_epsilon(6238.773161778646, worksheet.intermediate_output_bh115, 0.002); end
  def test_intermediate_output_bi115; assert_in_epsilon(7336.6271537319535, worksheet.intermediate_output_bi115, 0.002); end
  def test_intermediate_output_c116; assert_equal("II", worksheet.intermediate_output_c116); end
  def test_intermediate_output_d116; assert_equal("Nuclear power", worksheet.intermediate_output_d116); end
  def test_intermediate_output_ay116; assert_in_epsilon(28.331712000000003, worksheet.intermediate_output_ay116, 0.002); end
  def test_intermediate_output_ba116; assert_in_epsilon(32.819904, worksheet.intermediate_output_ba116, 0.002); end
  def test_intermediate_output_bb116; assert_in_epsilon(69.987744, worksheet.intermediate_output_bb116, 0.002); end
  def test_intermediate_output_bc116; assert_in_epsilon(67.74364800000001, worksheet.intermediate_output_bc116, 0.002); end
  def test_intermediate_output_bd116; assert_in_epsilon(67.74364800000001, worksheet.intermediate_output_bd116, 0.002); end
  def test_intermediate_output_be116; assert_in_epsilon(66.34108800000001, worksheet.intermediate_output_be116, 0.002); end
  def test_intermediate_output_bf116; assert_in_epsilon(63.255456, worksheet.intermediate_output_bf116, 0.002); end
  def test_intermediate_output_bg116; assert_in_epsilon(61.71264000000001, worksheet.intermediate_output_bg116, 0.002); end
  def test_intermediate_output_bh116; assert_in_epsilon(58.627008, worksheet.intermediate_output_bh116, 0.002); end
  def test_intermediate_output_bi116; assert_in_epsilon(58.627008, worksheet.intermediate_output_bi116, 0.002); end
  def test_intermediate_output_c117; assert_equal("III", worksheet.intermediate_output_c117); end
  def test_intermediate_output_d117; assert_equal("Hydro Power Generation", worksheet.intermediate_output_d117); end
  def test_intermediate_output_ah117; assert_in_epsilon(85.8, worksheet.intermediate_output_ah117, 0.002); end
  def test_intermediate_output_ai117; assert_in_epsilon(89.3, worksheet.intermediate_output_ai117, 0.002); end
  def test_intermediate_output_aj117; assert_in_epsilon(90.6, worksheet.intermediate_output_aj117, 0.002); end
  def test_intermediate_output_ak117; assert_in_epsilon(87.7, worksheet.intermediate_output_ak117, 0.002); end
  def test_intermediate_output_al117; assert_in_epsilon(78.3, worksheet.intermediate_output_al117, 0.002); end
  def test_intermediate_output_am117; assert_in_epsilon(83.0, worksheet.intermediate_output_am117, 0.002); end
  def test_intermediate_output_an117; assert_in_epsilon(81.1, worksheet.intermediate_output_an117, 0.002); end
  def test_intermediate_output_ao117; assert_in_epsilon(81.9, worksheet.intermediate_output_ao117, 0.002); end
  def test_intermediate_output_ap117; assert_in_epsilon(73.7, worksheet.intermediate_output_ap117, 0.002); end
  def test_intermediate_output_aq117; assert_in_epsilon(75.2, worksheet.intermediate_output_aq117, 0.002); end
  def test_intermediate_output_ar117; assert_in_epsilon(69.2, worksheet.intermediate_output_ar117, 0.002); end
  def test_intermediate_output_as117; assert_in_epsilon(57.2, worksheet.intermediate_output_as117, 0.002); end
  def test_intermediate_output_at117; assert_in_epsilon(47.7, worksheet.intermediate_output_at117, 0.002); end
  def test_intermediate_output_au117; assert_in_epsilon(62.8, worksheet.intermediate_output_au117, 0.002); end
  def test_intermediate_output_av117; assert_in_epsilon(56.5, worksheet.intermediate_output_av117, 0.002); end
  def test_intermediate_output_aw117; assert_equal("Dukes 5.6 Nuclear generation - used on works", worksheet.intermediate_output_aw117); end
  def test_intermediate_output_ay117; assert_in_epsilon(121.49676, worksheet.intermediate_output_ay117, 0.002); end
  def test_intermediate_output_ba117; assert_in_epsilon(143.7624, worksheet.intermediate_output_ba117, 0.002); end
  def test_intermediate_output_bb117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bb117, 0.002); end
  def test_intermediate_output_bc117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bc117, 0.002); end
  def test_intermediate_output_bd117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bd117, 0.002); end
  def test_intermediate_output_be117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_be117, 0.002); end
  def test_intermediate_output_bf117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bf117, 0.002); end
  def test_intermediate_output_bg117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bg117, 0.002); end
  def test_intermediate_output_bh117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bh117, 0.002); end
  def test_intermediate_output_bi117; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bi117, 0.002); end
  def test_intermediate_output_d118; assert_equal("Hydro and Nuclear", worksheet.intermediate_output_d118); end
  def test_intermediate_output_ay118; assert_in_epsilon(149.828472, worksheet.intermediate_output_ay118, 0.002); end
  def test_intermediate_output_ba118; assert_in_epsilon(176.58230400000002, worksheet.intermediate_output_ba118, 0.002); end
  def test_intermediate_output_bb118; assert_in_epsilon(241.80134400000003, worksheet.intermediate_output_bb118, 0.002); end
  def test_intermediate_output_bc118; assert_in_epsilon(239.55724800000004, worksheet.intermediate_output_bc118, 0.002); end
  def test_intermediate_output_bd118; assert_in_epsilon(239.55724800000004, worksheet.intermediate_output_bd118, 0.002); end
  def test_intermediate_output_be118; assert_in_epsilon(238.15468800000005, worksheet.intermediate_output_be118, 0.002); end
  def test_intermediate_output_bf118; assert_in_epsilon(235.06905600000005, worksheet.intermediate_output_bf118, 0.002); end
  def test_intermediate_output_bg118; assert_in_epsilon(233.52624000000003, worksheet.intermediate_output_bg118, 0.002); end
  def test_intermediate_output_bh118; assert_in_epsilon(230.44060800000003, worksheet.intermediate_output_bh118, 0.002); end
  def test_intermediate_output_bi118; assert_in_epsilon(230.44060800000003, worksheet.intermediate_output_bi118, 0.002); end
  def test_intermediate_output_c119; assert_equal("IV.a", worksheet.intermediate_output_c119); end
  def test_intermediate_output_d119; assert_equal("Solar PV", worksheet.intermediate_output_d119); end
  def test_intermediate_output_ar119; assert_in_epsilon(3.6, worksheet.intermediate_output_ar119, 0.002); end
  def test_intermediate_output_as119; assert_in_epsilon(4.5, worksheet.intermediate_output_as119, 0.002); end
  def test_intermediate_output_at119; assert_in_epsilon(5.8, worksheet.intermediate_output_at119, 0.002); end
  def test_intermediate_output_au119; assert_in_epsilon(7.6, worksheet.intermediate_output_au119, 0.002); end
  def test_intermediate_output_av119; assert_in_epsilon(7.1, worksheet.intermediate_output_av119, 0.002); end
  def test_intermediate_output_aw119; assert_equal("Dukes 7.4 Generation Onshore wind", worksheet.intermediate_output_aw119); end
  def test_intermediate_output_ay119; assert_in_delta(0.0, (worksheet.intermediate_output_ay119||0), 0.002); end
  def test_intermediate_output_ba119; assert_in_epsilon(1.56727314, worksheet.intermediate_output_ba119, 0.002); end
  def test_intermediate_output_bb119; assert_in_epsilon(8.272745946, worksheet.intermediate_output_bb119, 0.002); end
  def test_intermediate_output_bc119; assert_in_epsilon(18.558353960999998, worksheet.intermediate_output_bc119, 0.002); end
  def test_intermediate_output_bd119; assert_in_epsilon(32.792269185, worksheet.intermediate_output_bd119, 0.002); end
  def test_intermediate_output_be119; assert_in_epsilon(47.823373215000004, worksheet.intermediate_output_be119, 0.002); end
  def test_intermediate_output_bf119; assert_in_epsilon(60.99299523, worksheet.intermediate_output_bf119, 0.002); end
  def test_intermediate_output_bg119; assert_in_epsilon(69.11991, worksheet.intermediate_output_bg119, 0.002); end
  def test_intermediate_output_bh119; assert_in_epsilon(68.11182, worksheet.intermediate_output_bh119, 0.002); end
  def test_intermediate_output_bi119; assert_in_epsilon(59.6088, worksheet.intermediate_output_bi119, 0.002); end
  def test_intermediate_output_c120; assert_equal("IV.b", worksheet.intermediate_output_c120); end
  def test_intermediate_output_d120; assert_equal("Solar CSP", worksheet.intermediate_output_d120); end
  def test_intermediate_output_ar120; assert_in_delta(0.7, worksheet.intermediate_output_ar120, 0.002); end
  def test_intermediate_output_as120; assert_in_delta(0.8, worksheet.intermediate_output_as120, 0.002); end
  def test_intermediate_output_at120; assert_in_epsilon(1.3, worksheet.intermediate_output_at120, 0.002); end
  def test_intermediate_output_au120; assert_in_epsilon(1.7, worksheet.intermediate_output_au120, 0.002); end
  def test_intermediate_output_av120; assert_in_epsilon(3.0, worksheet.intermediate_output_av120, 0.002); end
  def test_intermediate_output_aw120; assert_equal("Dukes 7.4 Generation Offshore wind", worksheet.intermediate_output_aw120); end
  def test_intermediate_output_ay120; assert_in_delta(0.0, (worksheet.intermediate_output_ay120||0), 0.002); end
  def test_intermediate_output_ba120; assert_in_delta(0.0, (worksheet.intermediate_output_ba120||0), 0.002); end
  def test_intermediate_output_bb120; assert_in_epsilon(2.5246079999999997, worksheet.intermediate_output_bb120, 0.002); end
  def test_intermediate_output_bc120; assert_in_epsilon(8.573148, worksheet.intermediate_output_bc120, 0.002); end
  def test_intermediate_output_bd120; assert_in_epsilon(15.638544, worksheet.intermediate_output_bd120, 0.002); end
  def test_intermediate_output_be120; assert_in_epsilon(25.719444000000003, worksheet.intermediate_output_be120, 0.002); end
  def test_intermediate_output_bf120; assert_in_epsilon(33.784164, worksheet.intermediate_output_bf120, 0.002); end
  def test_intermediate_output_bg120; assert_in_epsilon(37.81652400000001, worksheet.intermediate_output_bg120, 0.002); end
  def test_intermediate_output_bh120; assert_in_epsilon(35.291916, worksheet.intermediate_output_bh120, 0.002); end
  def test_intermediate_output_bi120; assert_in_epsilon(29.243376, worksheet.intermediate_output_bi120, 0.002); end
  def test_intermediate_output_c121; assert_equal("IV.c.1", worksheet.intermediate_output_c121); end
  def test_intermediate_output_d121; assert_equal("Onshore Wind", worksheet.intermediate_output_d121); end
  def test_intermediate_output_ah121; assert_in_epsilon(2.8, worksheet.intermediate_output_ah121, 0.002); end
  def test_intermediate_output_ai121; assert_in_epsilon(3.3, worksheet.intermediate_output_ai121, 0.002); end
  def test_intermediate_output_aj121; assert_in_epsilon(4.2, worksheet.intermediate_output_aj121, 0.002); end
  def test_intermediate_output_ak121; assert_in_epsilon(4.4, worksheet.intermediate_output_ak121, 0.002); end
  def test_intermediate_output_al121; assert_in_epsilon(4.3, worksheet.intermediate_output_al121, 0.002); end
  def test_intermediate_output_am121; assert_in_epsilon(3.2, worksheet.intermediate_output_am121, 0.002); end
  def test_intermediate_output_an121; assert_in_epsilon(3.9, worksheet.intermediate_output_an121, 0.002); end
  def test_intermediate_output_ao121; assert_in_epsilon(2.6, worksheet.intermediate_output_ao121, 0.002); end
  def test_intermediate_output_ap121; assert_in_epsilon(3.9, worksheet.intermediate_output_ap121, 0.002); end
  def test_intermediate_output_aq121; assert_in_epsilon(3.8, worksheet.intermediate_output_aq121, 0.002); end
  def test_intermediate_output_ar121; assert_in_epsilon(3.7, worksheet.intermediate_output_ar121, 0.002); end
  def test_intermediate_output_as121; assert_in_epsilon(4.1, worksheet.intermediate_output_as121, 0.002); end
  def test_intermediate_output_at121; assert_in_epsilon(4.2, worksheet.intermediate_output_at121, 0.002); end
  def test_intermediate_output_au121; assert_in_epsilon(4.3, worksheet.intermediate_output_au121, 0.002); end
  def test_intermediate_output_av121; assert_in_epsilon(2.7, worksheet.intermediate_output_av121, 0.002); end
  def test_intermediate_output_aw121; assert_equal("Dukes 5.6 Hydro - natural flow generation - used on works", worksheet.intermediate_output_aw121); end
  def test_intermediate_output_ay121; assert_in_epsilon(12.437183268, worksheet.intermediate_output_ay121, 0.002); end
  def test_intermediate_output_ba121; assert_in_epsilon(18.7222492332, worksheet.intermediate_output_ba121, 0.002); end
  def test_intermediate_output_bb121; assert_in_epsilon(36.6048892332, worksheet.intermediate_output_bb121, 0.002); end
  def test_intermediate_output_bc121; assert_in_epsilon(58.5198892332, worksheet.intermediate_output_bc121, 0.002); end
  def test_intermediate_output_bd121; assert_in_epsilon(81.31148923319999, worksheet.intermediate_output_bd121, 0.002); end
  def test_intermediate_output_be121; assert_in_epsilon(110.8967392332, worksheet.intermediate_output_be121, 0.002); end
  def test_intermediate_output_bf121; assert_in_epsilon(129.14055596519998, worksheet.intermediate_output_bf121, 0.002); end
  def test_intermediate_output_bg121; assert_in_epsilon(139.86153, worksheet.intermediate_output_bg121, 0.002); end
  def test_intermediate_output_bh121; assert_in_epsilon(148.27688999999998, worksheet.intermediate_output_bh121, 0.002); end
  def test_intermediate_output_bi121; assert_in_epsilon(148.80284999999998, worksheet.intermediate_output_bi121, 0.002); end
  def test_intermediate_output_c122; assert_equal("IV.c.2", worksheet.intermediate_output_c122); end
  def test_intermediate_output_d122; assert_equal("Offshore Wind", worksheet.intermediate_output_d122); end
  def test_intermediate_output_ay122; assert_in_delta(0.0, (worksheet.intermediate_output_ay122||0), 0.002); end
  def test_intermediate_output_ba122; assert_in_delta(0.0, (worksheet.intermediate_output_ba122||0), 0.002); end
  def test_intermediate_output_bb122; assert_in_delta(0.0, (worksheet.intermediate_output_bb122||0), 0.002); end
  def test_intermediate_output_bc122; assert_in_epsilon(1.4463900000000003, worksheet.intermediate_output_bc122, 0.002); end
  def test_intermediate_output_bd122; assert_in_epsilon(3.02427, worksheet.intermediate_output_bd122, 0.002); end
  def test_intermediate_output_be122; assert_in_epsilon(4.602149999999999, worksheet.intermediate_output_be122, 0.002); end
  def test_intermediate_output_bf122; assert_in_epsilon(7.84557, worksheet.intermediate_output_bf122, 0.002); end
  def test_intermediate_output_bg122; assert_in_epsilon(11.176649999999999, worksheet.intermediate_output_bg122, 0.002); end
  def test_intermediate_output_bh122; assert_in_epsilon(12.88602, worksheet.intermediate_output_bh122, 0.002); end
  def test_intermediate_output_bi122; assert_in_epsilon(13.149, worksheet.intermediate_output_bi122, 0.002); end
  def test_intermediate_output_c123; assert_equal("IV.d", worksheet.intermediate_output_c123); end
  def test_intermediate_output_d123; assert_equal("Small Hydro", worksheet.intermediate_output_d123); end
  def test_intermediate_output_ay123; assert_in_epsilon(7.013834388000001, worksheet.intermediate_output_ay123, 0.002); end
  def test_intermediate_output_ba123; assert_in_epsilon(12.081458988000001, worksheet.intermediate_output_ba123, 0.002); end
  def test_intermediate_output_bb123; assert_in_epsilon(17.604038988000003, worksheet.intermediate_output_bb123, 0.002); end
  def test_intermediate_output_bc123; assert_in_epsilon(23.937473988000004, worksheet.intermediate_output_bc123, 0.002); end
  def test_intermediate_output_bd123; assert_in_epsilon(27.750683988000002, worksheet.intermediate_output_bd123, 0.002); end
  def test_intermediate_output_be123; assert_in_epsilon(31.651553988000003, worksheet.intermediate_output_be123, 0.002); end
  def test_intermediate_output_bf123; assert_in_epsilon(33.623903988, worksheet.intermediate_output_bf123, 0.002); end
  def test_intermediate_output_bg123; assert_in_epsilon(33.902259552000004, worksheet.intermediate_output_bg123, 0.002); end
  def test_intermediate_output_bh123; assert_in_epsilon(34.790711183999996, worksheet.intermediate_output_bh123, 0.002); end
  def test_intermediate_output_bi123; assert_in_epsilon(35.38241618399999, worksheet.intermediate_output_bi123, 0.002); end
  def test_intermediate_output_c124; assert_equal("V.a", worksheet.intermediate_output_c124); end
  def test_intermediate_output_d124; assert_equal("Biomass Based Electricity& Biogas", worksheet.intermediate_output_d124); end
  def test_intermediate_output_ay124; assert_in_epsilon(9.538388888888889, worksheet.intermediate_output_ay124, 0.002); end
  def test_intermediate_output_ba124; assert_in_epsilon(9.74545, worksheet.intermediate_output_ba124, 0.002); end
  def test_intermediate_output_bb124; assert_in_epsilon(11.119143750000001, worksheet.intermediate_output_bb124, 0.002); end
  def test_intermediate_output_bc124; assert_in_epsilon(12.4928375, worksheet.intermediate_output_bc124, 0.002); end
  def test_intermediate_output_bd124; assert_in_epsilon(13.866531250000003, worksheet.intermediate_output_bd124, 0.002); end
  def test_intermediate_output_be124; assert_in_epsilon(15.240225000000006, worksheet.intermediate_output_be124, 0.002); end
  def test_intermediate_output_bf124; assert_in_epsilon(16.613918750000003, worksheet.intermediate_output_bf124, 0.002); end
  def test_intermediate_output_bg124; assert_in_epsilon(17.987612500000004, worksheet.intermediate_output_bg124, 0.002); end
  def test_intermediate_output_bh124; assert_in_epsilon(19.361306250000005, worksheet.intermediate_output_bh124, 0.002); end
  def test_intermediate_output_bi124; assert_in_epsilon(20.735000000000003, worksheet.intermediate_output_bi124, 0.002); end
  def test_intermediate_output_c125; assert_equal("VI.a", worksheet.intermediate_output_c125); end
  def test_intermediate_output_d125; assert_equal("Waste to Electricity", worksheet.intermediate_output_d125); end
  def test_intermediate_output_ay125; assert_in_delta(0.0, (worksheet.intermediate_output_ay125||0), 0.002); end
  def test_intermediate_output_ba125; assert_in_delta(0.0, (worksheet.intermediate_output_ba125||0), 0.002); end
  def test_intermediate_output_bb125; assert_in_delta(0.0, (worksheet.intermediate_output_bb125||0), 0.002); end
  def test_intermediate_output_bc125; assert_in_delta(0.0, (worksheet.intermediate_output_bc125||0), 0.002); end
  def test_intermediate_output_bd125; assert_in_delta(0.0, (worksheet.intermediate_output_bd125||0), 0.002); end
  def test_intermediate_output_be125; assert_in_delta(0.0, (worksheet.intermediate_output_be125||0), 0.002); end
  def test_intermediate_output_bf125; assert_in_delta(0.0, (worksheet.intermediate_output_bf125||0), 0.002); end
  def test_intermediate_output_bg125; assert_in_delta(0.0, (worksheet.intermediate_output_bg125||0), 0.002); end
  def test_intermediate_output_bh125; assert_in_delta(0.0, (worksheet.intermediate_output_bh125||0), 0.002); end
  def test_intermediate_output_bi125; assert_in_delta(0.0, (worksheet.intermediate_output_bi125||0), 0.002); end
  def test_intermediate_output_d126; assert_equal("Renewable Based Electricity", worksheet.intermediate_output_d126); end
  def test_intermediate_output_ay126; assert_in_epsilon(28.98940654488889, worksheet.intermediate_output_ay126, 0.002); end
  def test_intermediate_output_ba126; assert_in_epsilon(42.1164313612, worksheet.intermediate_output_ba126, 0.002); end
  def test_intermediate_output_bb126; assert_in_epsilon(76.1254259172, worksheet.intermediate_output_bb126, 0.002); end
  def test_intermediate_output_bc126; assert_in_epsilon(123.5280926822, worksheet.intermediate_output_bc126, 0.002); end
  def test_intermediate_output_bd126; assert_in_epsilon(174.38378765619998, worksheet.intermediate_output_bd126, 0.002); end
  def test_intermediate_output_be126; assert_in_epsilon(235.9334854362, worksheet.intermediate_output_be126, 0.002); end
  def test_intermediate_output_bf126; assert_in_epsilon(282.0011079332, worksheet.intermediate_output_bf126, 0.002); end
  def test_intermediate_output_bg126; assert_in_epsilon(309.864486052, worksheet.intermediate_output_bg126, 0.002); end
  def test_intermediate_output_bh126; assert_in_epsilon(318.7186634339999, worksheet.intermediate_output_bh126, 0.002); end
  def test_intermediate_output_bi126; assert_in_epsilon(306.92144218399994, worksheet.intermediate_output_bi126, 0.002); end
  def test_intermediate_output_c127; assert_equal("VII.a", worksheet.intermediate_output_c127); end
  def test_intermediate_output_d127; assert_equal("Electricity imports", worksheet.intermediate_output_d127); end
  def test_intermediate_output_ar127; assert_in_epsilon(7.9, worksheet.intermediate_output_ar127, 0.002); end
  def test_intermediate_output_as127; assert_in_epsilon(9.4, worksheet.intermediate_output_as127, 0.002); end
  def test_intermediate_output_at127; assert_in_epsilon(11.3, worksheet.intermediate_output_at127, 0.002); end
  def test_intermediate_output_au127; assert_in_epsilon(13.6, worksheet.intermediate_output_au127, 0.002); end
  def test_intermediate_output_av127; assert_in_epsilon(12.9, worksheet.intermediate_output_av127, 0.002); end
  def test_intermediate_output_aw127; assert_equal("Sum of above", worksheet.intermediate_output_aw127); end
  def test_intermediate_output_ay127; assert_in_delta(1.0, worksheet.intermediate_output_ay127, 0.002); end
  def test_intermediate_output_ba127; assert_in_epsilon(4.0, worksheet.intermediate_output_ba127, 0.002); end
  def test_intermediate_output_bb127; assert_in_epsilon(14.0, worksheet.intermediate_output_bb127, 0.002); end
  def test_intermediate_output_bc127; assert_in_epsilon(21.0, worksheet.intermediate_output_bc127, 0.002); end
  def test_intermediate_output_bd127; assert_in_epsilon(31.0, worksheet.intermediate_output_bd127, 0.002); end
  def test_intermediate_output_be127; assert_in_epsilon(40.0, worksheet.intermediate_output_be127, 0.002); end
  def test_intermediate_output_bf127; assert_in_epsilon(49.0, worksheet.intermediate_output_bf127, 0.002); end
  def test_intermediate_output_bg127; assert_in_epsilon(55.0, worksheet.intermediate_output_bg127, 0.002); end
  def test_intermediate_output_bh127; assert_in_epsilon(55.0, worksheet.intermediate_output_bh127, 0.002); end
  def test_intermediate_output_bi127; assert_in_epsilon(55.0, worksheet.intermediate_output_bi127, 0.002); end
  def test_intermediate_output_d129; assert_equal("Total generation supplied to grid", worksheet.intermediate_output_d129); end
  def test_intermediate_output_ar129; assert_in_epsilon(352.2, worksheet.intermediate_output_ar129, 0.002); end
  def test_intermediate_output_as129; assert_in_epsilon(348.4, worksheet.intermediate_output_as129, 0.002); end
  def test_intermediate_output_at129; assert_in_epsilon(349.3, worksheet.intermediate_output_at129, 0.002); end
  def test_intermediate_output_au129; assert_in_epsilon(329.3, worksheet.intermediate_output_au129, 0.002); end
  def test_intermediate_output_av129; assert_in_epsilon(335.1, worksheet.intermediate_output_av129, 0.002); end
  def test_intermediate_output_aw129; assert_equal("Sum of above", worksheet.intermediate_output_aw129); end
  def test_intermediate_output_ay129; assert_in_epsilon(790.769700205529, worksheet.intermediate_output_ay129, 0.002); end
  def test_intermediate_output_ba129; assert_in_epsilon(1030.1577354872481, worksheet.intermediate_output_ba129, 0.002); end
  def test_intermediate_output_bb129; assert_in_epsilon(1444.782628909336, worksheet.intermediate_output_bb129, 0.002); end
  def test_intermediate_output_bc129; assert_in_epsilon(2044.3014371199852, worksheet.intermediate_output_bc129, 0.002); end
  def test_intermediate_output_bd129; assert_in_epsilon(2817.7333966126735, worksheet.intermediate_output_bd129, 0.002); end
  def test_intermediate_output_be129; assert_in_epsilon(3882.9115454803136, worksheet.intermediate_output_be129, 0.002); end
  def test_intermediate_output_bf129; assert_in_epsilon(4819.455965199836, worksheet.intermediate_output_bf129, 0.002); end
  def test_intermediate_output_bg129; assert_in_epsilon(5890.112160537429, worksheet.intermediate_output_bg129, 0.002); end
  def test_intermediate_output_bh129; assert_in_epsilon(6842.932433212645, worksheet.intermediate_output_bh129, 0.002); end
  def test_intermediate_output_bi129; assert_in_epsilon(7928.989203915953, worksheet.intermediate_output_bi129, 0.002); end
  def test_intermediate_output_bk129; assert_in_epsilon(9159.40974857963, worksheet.intermediate_output_bk129, 0.002); end
  def test_intermediate_output_d130; assert_equal("Share of Renewables", worksheet.intermediate_output_d130); end
  def test_intermediate_output_ay130; assert_in_delta(0.03665973359545042, worksheet.intermediate_output_ay130, 0.002); end
  def test_intermediate_output_ba130; assert_in_delta(0.040883478238679244, worksheet.intermediate_output_ba130, 0.002); end
  def test_intermediate_output_bb130; assert_in_delta(0.0526898817815016, worksheet.intermediate_output_bb130, 0.002); end
  def test_intermediate_output_bc130; assert_in_delta(0.06042557640434209, worksheet.intermediate_output_bc130, 0.002); end
  def test_intermediate_output_bd130; assert_in_delta(0.061887965648501284, worksheet.intermediate_output_bd130, 0.002); end
  def test_intermediate_output_be130; assert_in_delta(0.060762003633800306, worksheet.intermediate_output_be130, 0.002); end
  def test_intermediate_output_bf130; assert_in_delta(0.058513058313939166, worksheet.intermediate_output_bf130, 0.002); end
  def test_intermediate_output_bg130; assert_in_delta(0.05260756970436488, worksheet.intermediate_output_bg130, 0.002); end
  def test_intermediate_output_bh130; assert_in_delta(0.046576327699375905, worksheet.intermediate_output_bh130, 0.002); end
  def test_intermediate_output_bi130; assert_in_delta(0.038708772870117945, worksheet.intermediate_output_bi130, 0.002); end
  def test_intermediate_output_d131; assert_equal("Electricity exports", worksheet.intermediate_output_d131); end
  def test_intermediate_output_ax131; assert_in_delta(0.0, (worksheet.intermediate_output_ax131||0), 0.002); end
  def test_intermediate_output_ay131; assert_in_delta(0.0, (worksheet.intermediate_output_ay131||0), 0.002); end
  def test_intermediate_output_ba131; assert_in_epsilon(-5.463970885452454, worksheet.intermediate_output_ba131, 0.002); end
  def test_intermediate_output_bb131; assert_in_delta(4.547473508864641e-13, worksheet.intermediate_output_bb131, 0.002); end
  def test_intermediate_output_bc131; assert_in_delta(2.2737367544323206e-13, worksheet.intermediate_output_bc131, 0.002); end
  def test_intermediate_output_bd131; assert_in_delta(-4.547473508864641e-13, worksheet.intermediate_output_bd131, 0.002); end
  def test_intermediate_output_be131; assert_in_delta(-4.547473508864641e-13, worksheet.intermediate_output_be131, 0.002); end
  def test_intermediate_output_bf131; assert_in_delta(0.0, (worksheet.intermediate_output_bf131||0), 0.002); end
  def test_intermediate_output_bg131; assert_in_delta(9.094947017729282e-13, worksheet.intermediate_output_bg131, 0.002); end
  def test_intermediate_output_bh131; assert_in_delta(9.094947017729282e-13, worksheet.intermediate_output_bh131, 0.002); end
  def test_intermediate_output_bi131; assert_in_delta(9.094947017729282e-13, worksheet.intermediate_output_bi131, 0.002); end
  def test_intermediate_output_bj131; assert_equal("REFERENCED", worksheet.intermediate_output_bj131); end
  def test_intermediate_output_d132; assert_equal("Electricity used in India, before losses", worksheet.intermediate_output_d132); end
  def test_intermediate_output_ax132; assert_in_delta(0.0, (worksheet.intermediate_output_ax132||0), 0.002); end
  def test_intermediate_output_ay132; assert_in_epsilon(790.769700205529, worksheet.intermediate_output_ay132, 0.002); end
  def test_intermediate_output_ba132; assert_in_epsilon(1024.6937646017957, worksheet.intermediate_output_ba132, 0.002); end
  def test_intermediate_output_bb132; assert_in_epsilon(1444.782628909336, worksheet.intermediate_output_bb132, 0.002); end
  def test_intermediate_output_bc132; assert_in_epsilon(2044.3014371199852, worksheet.intermediate_output_bc132, 0.002); end
  def test_intermediate_output_bd132; assert_in_epsilon(2817.733396612673, worksheet.intermediate_output_bd132, 0.002); end
  def test_intermediate_output_be132; assert_in_epsilon(3882.911545480313, worksheet.intermediate_output_be132, 0.002); end
  def test_intermediate_output_bf132; assert_in_epsilon(4819.455965199836, worksheet.intermediate_output_bf132, 0.002); end
  def test_intermediate_output_bg132; assert_in_epsilon(5890.112160537429, worksheet.intermediate_output_bg132, 0.002); end
  def test_intermediate_output_bh132; assert_in_epsilon(6842.932433212645, worksheet.intermediate_output_bh132, 0.002); end
  def test_intermediate_output_bi132; assert_in_epsilon(7928.989203915953, worksheet.intermediate_output_bi132, 0.002); end
  def test_intermediate_output_d134; assert_equal("GW installed capacity", worksheet.intermediate_output_d134); end
  def test_intermediate_output_ay134; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay134, 0.002); end
  def test_intermediate_output_ba134; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba134, 0.002); end
  def test_intermediate_output_bb134; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb134, 0.002); end
  def test_intermediate_output_bc134; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc134, 0.002); end
  def test_intermediate_output_bd134; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd134, 0.002); end
  def test_intermediate_output_be134; assert_in_epsilon(2032.0, worksheet.intermediate_output_be134, 0.002); end
  def test_intermediate_output_bf134; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf134, 0.002); end
  def test_intermediate_output_bg134; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg134, 0.002); end
  def test_intermediate_output_bh134; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh134, 0.002); end
  def test_intermediate_output_bi134; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi134, 0.002); end
  def test_intermediate_output_c135; assert_equal("I.a", worksheet.intermediate_output_c135); end
  def test_intermediate_output_d135; assert_equal("Gas Power Stations", worksheet.intermediate_output_d135); end
  def test_intermediate_output_ar135; assert_in_epsilon(63.6, worksheet.intermediate_output_ar135, 0.002); end
  def test_intermediate_output_as135; assert_in_epsilon(63.6, worksheet.intermediate_output_as135, 0.002); end
  def test_intermediate_output_at135; assert_in_epsilon(63.7, worksheet.intermediate_output_at135, 0.002); end
  def test_intermediate_output_au135; assert_in_epsilon(64.5, worksheet.intermediate_output_au135, 0.002); end
  def test_intermediate_output_av135; assert_in_epsilon(69.3, worksheet.intermediate_output_av135, 0.002); end
  def test_intermediate_output_aw135; assert_equal("Dukes 5.7 Conventional steam stations + Combined cycle gas turbine stations", worksheet.intermediate_output_aw135); end
  def test_intermediate_output_ay135; assert_in_delta(0.0, (worksheet.intermediate_output_ay135||0), 0.002); end
  def test_intermediate_output_ba135; assert_in_epsilon(18.381, worksheet.intermediate_output_ba135, 0.002); end
  def test_intermediate_output_bb135; assert_in_epsilon(20.919, worksheet.intermediate_output_bb135, 0.002); end
  def test_intermediate_output_bc135; assert_in_epsilon(20.919, worksheet.intermediate_output_bc135, 0.002); end
  def test_intermediate_output_bd135; assert_in_epsilon(20.919, worksheet.intermediate_output_bd135, 0.002); end
  def test_intermediate_output_be135; assert_in_epsilon(20.919, worksheet.intermediate_output_be135, 0.002); end
  def test_intermediate_output_bf135; assert_in_epsilon(20.919, worksheet.intermediate_output_bf135, 0.002); end
  def test_intermediate_output_bg135; assert_in_epsilon(20.919, worksheet.intermediate_output_bg135, 0.002); end
  def test_intermediate_output_bh135; assert_in_epsilon(20.919, worksheet.intermediate_output_bh135, 0.002); end
  def test_intermediate_output_bi135; assert_in_epsilon(20.919, worksheet.intermediate_output_bi135, 0.002); end
  def test_intermediate_output_c136; assert_equal("I.b", worksheet.intermediate_output_c136); end
  def test_intermediate_output_d136; assert_equal("Coal power stations", worksheet.intermediate_output_d136); end
  def test_intermediate_output_aw136; assert_equal("no bio in Dukes", worksheet.intermediate_output_aw136); end
  def test_intermediate_output_ay136; assert_in_epsilon(82.0, worksheet.intermediate_output_ay136, 0.002); end
  def test_intermediate_output_ba136; assert_in_epsilon(125.0233, worksheet.intermediate_output_ba136, 0.002); end
  def test_intermediate_output_bb136; assert_in_epsilon(175.2914387382277, worksheet.intermediate_output_bb136, 0.002); end
  def test_intermediate_output_bc136; assert_in_epsilon(165.9236387382277, worksheet.intermediate_output_bc136, 0.002); end
  def test_intermediate_output_bd136; assert_in_epsilon(152.38363873822772, worksheet.intermediate_output_bd136, 0.002); end
  def test_intermediate_output_be136; assert_in_epsilon(137.6836387382277, worksheet.intermediate_output_be136, 0.002); end
  def test_intermediate_output_bf136; assert_in_epsilon(124.9261387382277, worksheet.intermediate_output_bf136, 0.002); end
  def test_intermediate_output_bg136; assert_in_epsilon(109.53513873822772, worksheet.intermediate_output_bg136, 0.002); end
  def test_intermediate_output_bh136; assert_in_epsilon(98.05013873822772, worksheet.intermediate_output_bh136, 0.002); end
  def test_intermediate_output_bi136; assert_in_epsilon(60.15113873822772, worksheet.intermediate_output_bi136, 0.002); end
  def test_intermediate_output_c137; assert_equal("I.c", worksheet.intermediate_output_c137); end
  def test_intermediate_output_d137; assert_equal("Carbon Capture Storage (CCS)", worksheet.intermediate_output_d137); end
  def test_intermediate_output_ay137; assert_in_delta(0.0, (worksheet.intermediate_output_ay137||0), 0.002); end
  def test_intermediate_output_ba137; assert_in_delta(0.0, (worksheet.intermediate_output_ba137||0), 0.002); end
  def test_intermediate_output_bb137; assert_in_delta(0.0, (worksheet.intermediate_output_bb137||0), 0.002); end
  def test_intermediate_output_bc137; assert_in_delta(0.0, (worksheet.intermediate_output_bc137||0), 0.002); end
  def test_intermediate_output_bd137; assert_in_delta(0.0, (worksheet.intermediate_output_bd137||0), 0.002); end
  def test_intermediate_output_be137; assert_in_delta(1.0, worksheet.intermediate_output_be137, 0.002); end
  def test_intermediate_output_bf137; assert_in_epsilon(2.0, worksheet.intermediate_output_bf137, 0.002); end
  def test_intermediate_output_bg137; assert_in_epsilon(5.0, worksheet.intermediate_output_bg137, 0.002); end
  def test_intermediate_output_bh137; assert_in_epsilon(7.0, worksheet.intermediate_output_bh137, 0.002); end
  def test_intermediate_output_bi137; assert_in_epsilon(10.0, worksheet.intermediate_output_bi137, 0.002); end
  def test_intermediate_output_c138; assert_equal("I.d", worksheet.intermediate_output_c138); end
  def test_intermediate_output_d138; assert_equal("Electricity Balancing Requirement", worksheet.intermediate_output_d138); end
  def test_intermediate_output_ay138; assert_in_epsilon(11.506446686594195, worksheet.intermediate_output_ay138, 0.002); end
  def test_intermediate_output_ba138; assert_in_delta(0.0, (worksheet.intermediate_output_ba138||0), 0.002); end
  def test_intermediate_output_bb138; assert_in_epsilon(2.6629193000435274, worksheet.intermediate_output_bb138, 0.002); end
  def test_intermediate_output_bc138; assert_in_epsilon(91.9766024436919, worksheet.intermediate_output_bc138, 0.002); end
  def test_intermediate_output_bd138; assert_in_epsilon(210.42924087282464, worksheet.intermediate_output_bd138, 0.002); end
  def test_intermediate_output_be138; assert_in_epsilon(371.66569910719926, worksheet.intermediate_output_be138, 0.002); end
  def test_intermediate_output_bf138; assert_in_epsilon(512.9157569479853, worksheet.intermediate_output_bf138, 0.002); end
  def test_intermediate_output_bg138; assert_in_epsilon(679.1342280027327, worksheet.intermediate_output_bg138, 0.002); end
  def test_intermediate_output_bh138; assert_in_epsilon(830.4233702150126, worksheet.intermediate_output_bh138, 0.002); end
  def test_intermediate_output_bi138; assert_in_epsilon(1027.5079194164064, worksheet.intermediate_output_bi138, 0.002); end
  def test_intermediate_output_c139; assert_equal("II", worksheet.intermediate_output_c139); end
  def test_intermediate_output_d139; assert_equal("Nuclear power", worksheet.intermediate_output_d139); end
  def test_intermediate_output_ay139; assert_in_epsilon(4.04, worksheet.intermediate_output_ay139, 0.002); end
  def test_intermediate_output_ba139; assert_in_epsilon(4.68, worksheet.intermediate_output_ba139, 0.002); end
  def test_intermediate_output_bb139; assert_in_epsilon(9.98, worksheet.intermediate_output_bb139, 0.002); end
  def test_intermediate_output_bc139; assert_in_epsilon(9.66, worksheet.intermediate_output_bc139, 0.002); end
  def test_intermediate_output_bd139; assert_in_epsilon(9.66, worksheet.intermediate_output_bd139, 0.002); end
  def test_intermediate_output_be139; assert_in_epsilon(9.46, worksheet.intermediate_output_be139, 0.002); end
  def test_intermediate_output_bf139; assert_in_epsilon(9.02, worksheet.intermediate_output_bf139, 0.002); end
  def test_intermediate_output_bg139; assert_in_epsilon(8.8, worksheet.intermediate_output_bg139, 0.002); end
  def test_intermediate_output_bh139; assert_in_epsilon(8.36, worksheet.intermediate_output_bh139, 0.002); end
  def test_intermediate_output_bi139; assert_in_epsilon(8.36, worksheet.intermediate_output_bi139, 0.002); end
  def test_intermediate_output_c140; assert_equal("III", worksheet.intermediate_output_c140); end
  def test_intermediate_output_d140; assert_equal("Hydro Power Generation", worksheet.intermediate_output_d140); end
  def test_intermediate_output_ar140; assert_in_epsilon(11.0, worksheet.intermediate_output_ar140, 0.002); end
  def test_intermediate_output_as140; assert_in_epsilon(11.0, worksheet.intermediate_output_as140, 0.002); end
  def test_intermediate_output_at140; assert_in_epsilon(11.0, worksheet.intermediate_output_at140, 0.002); end
  def test_intermediate_output_au140; assert_in_epsilon(10.9, worksheet.intermediate_output_au140, 0.002); end
  def test_intermediate_output_av140; assert_in_epsilon(10.9, worksheet.intermediate_output_av140, 0.002); end
  def test_intermediate_output_aw140; assert_equal("Dukes  5.7 Nuclear stations", worksheet.intermediate_output_aw140); end
  def test_intermediate_output_ay140; assert_in_epsilon(34.65, worksheet.intermediate_output_ay140, 0.002); end
  def test_intermediate_output_ba140; assert_in_epsilon(41.0, worksheet.intermediate_output_ba140, 0.002); end
  def test_intermediate_output_bb140; assert_in_epsilon(49.0, worksheet.intermediate_output_bb140, 0.002); end
  def test_intermediate_output_bc140; assert_in_epsilon(49.0, worksheet.intermediate_output_bc140, 0.002); end
  def test_intermediate_output_bd140; assert_in_epsilon(49.0, worksheet.intermediate_output_bd140, 0.002); end
  def test_intermediate_output_be140; assert_in_epsilon(49.0, worksheet.intermediate_output_be140, 0.002); end
  def test_intermediate_output_bf140; assert_in_epsilon(49.0, worksheet.intermediate_output_bf140, 0.002); end
  def test_intermediate_output_bg140; assert_in_epsilon(49.0, worksheet.intermediate_output_bg140, 0.002); end
  def test_intermediate_output_bh140; assert_in_epsilon(49.0, worksheet.intermediate_output_bh140, 0.002); end
  def test_intermediate_output_bi140; assert_in_epsilon(49.0, worksheet.intermediate_output_bi140, 0.002); end
  def test_intermediate_output_c141; assert_equal("IV.a", worksheet.intermediate_output_c141); end
  def test_intermediate_output_d141; assert_equal("Solar PV", worksheet.intermediate_output_d141); end
  def test_intermediate_output_aw141; assert_equal("Wind not split in Dukes", worksheet.intermediate_output_aw141); end
  def test_intermediate_output_ay141; assert_in_delta(0.0, (worksheet.intermediate_output_ay141||0), 0.002); end
  def test_intermediate_output_ba141; assert_in_delta(0.9410000000000001, worksheet.intermediate_output_ba141, 0.002); end
  def test_intermediate_output_bb141; assert_in_epsilon(4.941, worksheet.intermediate_output_bb141, 0.002); end
  def test_intermediate_output_bc141; assert_in_epsilon(10.940999999999999, worksheet.intermediate_output_bc141, 0.002); end
  def test_intermediate_output_bd141; assert_in_epsilon(18.941, worksheet.intermediate_output_bd141, 0.002); end
  def test_intermediate_output_be141; assert_in_epsilon(26.941, worksheet.intermediate_output_be141, 0.002); end
  def test_intermediate_output_bf141; assert_in_epsilon(33.941, worksheet.intermediate_output_bf141, 0.002); end
  def test_intermediate_output_bg141; assert_in_epsilon(38.0, worksheet.intermediate_output_bg141, 0.002); end
  def test_intermediate_output_bh141; assert_in_epsilon(37.0, worksheet.intermediate_output_bh141, 0.002); end
  def test_intermediate_output_bi141; assert_in_epsilon(32.0, worksheet.intermediate_output_bi141, 0.002); end
  def test_intermediate_output_c142; assert_equal("IV.b", worksheet.intermediate_output_c142); end
  def test_intermediate_output_d142; assert_equal("Solar CSP", worksheet.intermediate_output_d142); end
  def test_intermediate_output_ay142; assert_in_delta(0.0, (worksheet.intermediate_output_ay142||0), 0.002); end
  def test_intermediate_output_ba142; assert_in_delta(0.0, (worksheet.intermediate_output_ba142||0), 0.002); end
  def test_intermediate_output_bb142; assert_in_delta(1.0, worksheet.intermediate_output_bb142, 0.002); end
  def test_intermediate_output_bc142; assert_in_epsilon(3.0, worksheet.intermediate_output_bc142, 0.002); end
  def test_intermediate_output_bd142; assert_in_epsilon(5.0, worksheet.intermediate_output_bd142, 0.002); end
  def test_intermediate_output_be142; assert_in_epsilon(7.5, worksheet.intermediate_output_be142, 0.002); end
  def test_intermediate_output_bf142; assert_in_epsilon(9.5, worksheet.intermediate_output_bf142, 0.002); end
  def test_intermediate_output_bg142; assert_in_epsilon(10.5, worksheet.intermediate_output_bg142, 0.002); end
  def test_intermediate_output_bh142; assert_in_epsilon(9.5, worksheet.intermediate_output_bh142, 0.002); end
  def test_intermediate_output_bi142; assert_in_epsilon(7.5, worksheet.intermediate_output_bi142, 0.002); end
  def test_intermediate_output_c143; assert_equal("IV.c.1", worksheet.intermediate_output_c143); end
  def test_intermediate_output_d143; assert_equal("Onshore Wind", worksheet.intermediate_output_d143); end
  def test_intermediate_output_ar143; assert_in_epsilon(1.4, worksheet.intermediate_output_ar143, 0.002); end
  def test_intermediate_output_as143; assert_in_epsilon(1.4, worksheet.intermediate_output_as143, 0.002); end
  def test_intermediate_output_at143; assert_in_epsilon(1.5, worksheet.intermediate_output_at143, 0.002); end
  def test_intermediate_output_au143; assert_in_epsilon(1.5, worksheet.intermediate_output_au143, 0.002); end
  def test_intermediate_output_av143; assert_in_epsilon(1.5, worksheet.intermediate_output_av143, 0.002); end
  def test_intermediate_output_aw143; assert_equal("Dukes  5.7 Hydro-electric stations: Natural flow", worksheet.intermediate_output_aw143); end
  def test_intermediate_output_ay143; assert_in_epsilon(7.09399, worksheet.intermediate_output_ay143, 0.002); end
  def test_intermediate_output_ba143; assert_in_epsilon(10.353, worksheet.intermediate_output_ba143, 0.002); end
  def test_intermediate_output_bb143; assert_in_epsilon(18.853, worksheet.intermediate_output_bb143, 0.002); end
  def test_intermediate_output_bc143; assert_in_epsilon(28.853, worksheet.intermediate_output_bc143, 0.002); end
  def test_intermediate_output_bd143; assert_in_epsilon(38.853, worksheet.intermediate_output_bd143, 0.002); end
  def test_intermediate_output_be143; assert_in_epsilon(51.353, worksheet.intermediate_output_be143, 0.002); end
  def test_intermediate_output_bf143; assert_in_epsilon(56.75901, worksheet.intermediate_output_bf143, 0.002); end
  def test_intermediate_output_bg143; assert_in_epsilon(58.5, worksheet.intermediate_output_bg143, 0.002); end
  def test_intermediate_output_bh143; assert_in_epsilon(60.0, worksheet.intermediate_output_bh143, 0.002); end
  def test_intermediate_output_bi143; assert_in_epsilon(58.0, worksheet.intermediate_output_bi143, 0.002); end
  def test_intermediate_output_c144; assert_equal("IV.c.2", worksheet.intermediate_output_c144); end
  def test_intermediate_output_d144; assert_equal("Offshore Wind", worksheet.intermediate_output_d144); end
  def test_intermediate_output_ay144; assert_in_delta(0.0, (worksheet.intermediate_output_ay144||0), 0.002); end
  def test_intermediate_output_ba144; assert_in_delta(0.0, (worksheet.intermediate_output_ba144||0), 0.002); end
  def test_intermediate_output_bb144; assert_in_delta(0.0, (worksheet.intermediate_output_bb144||0), 0.002); end
  def test_intermediate_output_bc144; assert_in_delta(0.5, worksheet.intermediate_output_bc144, 0.002); end
  def test_intermediate_output_bd144; assert_in_delta(1.0, worksheet.intermediate_output_bd144, 0.002); end
  def test_intermediate_output_be144; assert_in_epsilon(1.5, worksheet.intermediate_output_be144, 0.002); end
  def test_intermediate_output_bf144; assert_in_epsilon(2.5, worksheet.intermediate_output_bf144, 0.002); end
  def test_intermediate_output_bg144; assert_in_epsilon(3.5, worksheet.intermediate_output_bg144, 0.002); end
  def test_intermediate_output_bh144; assert_in_epsilon(4.0, worksheet.intermediate_output_bh144, 0.002); end
  def test_intermediate_output_bi144; assert_in_epsilon(4.0, worksheet.intermediate_output_bi144, 0.002); end
  def test_intermediate_output_c145; assert_equal("IV.d", worksheet.intermediate_output_c145); end
  def test_intermediate_output_d145; assert_equal("Small Hydro", worksheet.intermediate_output_d145); end
  def test_intermediate_output_ay145; assert_in_epsilon(1.9756, worksheet.intermediate_output_ay145, 0.002); end
  def test_intermediate_output_ba145; assert_in_epsilon(3.3856, worksheet.intermediate_output_ba145, 0.002); end
  def test_intermediate_output_bb145; assert_in_epsilon(4.8856, worksheet.intermediate_output_bb145, 0.002); end
  def test_intermediate_output_bc145; assert_in_epsilon(6.5856, worksheet.intermediate_output_bc145, 0.002); end
  def test_intermediate_output_bd145; assert_in_epsilon(7.5856, worksheet.intermediate_output_bd145, 0.002); end
  def test_intermediate_output_be145; assert_in_epsilon(8.5856, worksheet.intermediate_output_be145, 0.002); end
  def test_intermediate_output_bf145; assert_in_epsilon(9.0856, worksheet.intermediate_output_bf145, 0.002); end
  def test_intermediate_output_bg145; assert_in_epsilon(8.959999999999999, worksheet.intermediate_output_bg145, 0.002); end
  def test_intermediate_output_bh145; assert_in_epsilon(9.0406, worksheet.intermediate_output_bh145, 0.002); end
  def test_intermediate_output_bi145; assert_in_epsilon(9.0406, worksheet.intermediate_output_bi145, 0.002); end
  def test_intermediate_output_c146; assert_equal("V.a", worksheet.intermediate_output_c146); end
  def test_intermediate_output_d146; assert_equal("Biomass", worksheet.intermediate_output_d146); end
  def test_intermediate_output_ay146; assert_in_epsilon(1.0101398712196108, worksheet.intermediate_output_ay146, 0.002); end
  def test_intermediate_output_ba146; assert_in_epsilon(1.3896660392425277, worksheet.intermediate_output_ba146, 0.002); end
  def test_intermediate_output_bb146; assert_in_epsilon(1.5855498160506503, worksheet.intermediate_output_bb146, 0.002); end
  def test_intermediate_output_bc146; assert_in_epsilon(1.7814335928587721, worksheet.intermediate_output_bc146, 0.002); end
  def test_intermediate_output_bd146; assert_in_epsilon(1.977317369666895, worksheet.intermediate_output_bd146, 0.002); end
  def test_intermediate_output_be146; assert_in_epsilon(2.1732011464750176, worksheet.intermediate_output_be146, 0.002); end
  def test_intermediate_output_bf146; assert_in_epsilon(2.3690849232831392, worksheet.intermediate_output_bf146, 0.002); end
  def test_intermediate_output_bg146; assert_in_epsilon(2.564968700091262, worksheet.intermediate_output_bg146, 0.002); end
  def test_intermediate_output_bh146; assert_in_epsilon(2.7608524768993843, worksheet.intermediate_output_bh146, 0.002); end
  def test_intermediate_output_bi146; assert_in_epsilon(2.9567362537075064, worksheet.intermediate_output_bi146, 0.002); end
  def test_intermediate_output_c147; assert_equal("VI.a", worksheet.intermediate_output_c147); end
  def test_intermediate_output_d147; assert_equal("Waste to Electricity", worksheet.intermediate_output_d147); end
  def test_intermediate_output_aw147; assert_equal("Other renewables not split in Dukes", worksheet.intermediate_output_aw147); end
  def test_intermediate_output_ay147; assert_in_delta(0.0, (worksheet.intermediate_output_ay147||0), 0.002); end
  def test_intermediate_output_ba147; assert_in_delta(0.0, (worksheet.intermediate_output_ba147||0), 0.002); end
  def test_intermediate_output_bb147; assert_in_delta(0.0, (worksheet.intermediate_output_bb147||0), 0.002); end
  def test_intermediate_output_bc147; assert_in_delta(0.0, (worksheet.intermediate_output_bc147||0), 0.002); end
  def test_intermediate_output_bd147; assert_in_delta(0.0, (worksheet.intermediate_output_bd147||0), 0.002); end
  def test_intermediate_output_be147; assert_in_delta(0.0, (worksheet.intermediate_output_be147||0), 0.002); end
  def test_intermediate_output_bf147; assert_in_delta(0.0, (worksheet.intermediate_output_bf147||0), 0.002); end
  def test_intermediate_output_bg147; assert_in_delta(0.0, (worksheet.intermediate_output_bg147||0), 0.002); end
  def test_intermediate_output_bh147; assert_in_delta(0.0, (worksheet.intermediate_output_bh147||0), 0.002); end
  def test_intermediate_output_bi147; assert_in_delta(0.0, (worksheet.intermediate_output_bi147||0), 0.002); end
  def test_intermediate_output_ay148; assert_in_delta(0.0, (worksheet.intermediate_output_ay148||0), 0.002); end
  def test_intermediate_output_ba148; assert_in_delta(0.0, (worksheet.intermediate_output_ba148||0), 0.002); end
  def test_intermediate_output_bb148; assert_in_delta(0.0, (worksheet.intermediate_output_bb148||0), 0.002); end
  def test_intermediate_output_bc148; assert_in_delta(0.0, (worksheet.intermediate_output_bc148||0), 0.002); end
  def test_intermediate_output_bd148; assert_in_delta(0.0, (worksheet.intermediate_output_bd148||0), 0.002); end
  def test_intermediate_output_be148; assert_in_delta(0.0, (worksheet.intermediate_output_be148||0), 0.002); end
  def test_intermediate_output_bf148; assert_in_delta(0.0, (worksheet.intermediate_output_bf148||0), 0.002); end
  def test_intermediate_output_bg148; assert_in_delta(0.0, (worksheet.intermediate_output_bg148||0), 0.002); end
  def test_intermediate_output_bh148; assert_in_delta(0.0, (worksheet.intermediate_output_bh148||0), 0.002); end
  def test_intermediate_output_bi148; assert_in_delta(0.0, (worksheet.intermediate_output_bi148||0), 0.002); end
  def test_intermediate_output_c149; assert_equal("VII.c", worksheet.intermediate_output_c149); end
  def test_intermediate_output_d149; assert_equal("Standby / peaking gas", worksheet.intermediate_output_d149); end
  def test_intermediate_output_ay149; assert_in_delta(0.0, (worksheet.intermediate_output_ay149||0), 0.002); end
  def test_intermediate_output_ba149; assert_in_delta(0.0, (worksheet.intermediate_output_ba149||0), 0.002); end
  def test_intermediate_output_bb149; assert_in_delta(0.0, (worksheet.intermediate_output_bb149||0), 0.002); end
  def test_intermediate_output_bc149; assert_in_delta(0.0, (worksheet.intermediate_output_bc149||0), 0.002); end
  def test_intermediate_output_bd149; assert_in_delta(0.0, (worksheet.intermediate_output_bd149||0), 0.002); end
  def test_intermediate_output_be149; assert_in_delta(0.0, (worksheet.intermediate_output_be149||0), 0.002); end
  def test_intermediate_output_bf149; assert_in_delta(0.0, (worksheet.intermediate_output_bf149||0), 0.002); end
  def test_intermediate_output_bg149; assert_in_delta(0.0, (worksheet.intermediate_output_bg149||0), 0.002); end
  def test_intermediate_output_bh149; assert_in_delta(0.0, (worksheet.intermediate_output_bh149||0), 0.002); end
  def test_intermediate_output_bi149; assert_in_delta(0.0, (worksheet.intermediate_output_bi149||0), 0.002); end
  def test_intermediate_output_d150; assert_equal("Total generation", worksheet.intermediate_output_d150); end
  def test_intermediate_output_ar150; assert_in_epsilon(74.996, worksheet.intermediate_output_ar150, 0.002); end
  def test_intermediate_output_as150; assert_in_epsilon(75.97856007, worksheet.intermediate_output_as150, 0.002); end
  def test_intermediate_output_at150; assert_in_epsilon(76.78237735, worksheet.intermediate_output_at150, 0.002); end
  def test_intermediate_output_au150; assert_in_epsilon(77.67526559, worksheet.intermediate_output_au150, 0.002); end
  def test_intermediate_output_av150; assert_in_epsilon(83.19678575, worksheet.intermediate_output_av150, 0.002); end
  def test_intermediate_output_ay150; assert_in_epsilon(142.2761765578138, worksheet.intermediate_output_ay150, 0.002); end
  def test_intermediate_output_ba150; assert_in_epsilon(186.77256603924258, worksheet.intermediate_output_ba150, 0.002); end
  def test_intermediate_output_bb150; assert_in_epsilon(268.1995078543219, worksheet.intermediate_output_bb150, 0.002); end
  def test_intermediate_output_bc150; assert_in_epsilon(368.2212747747784, worksheet.intermediate_output_bc150, 0.002); end
  def test_intermediate_output_bd150; assert_in_epsilon(494.82979698071927, worksheet.intermediate_output_bd150, 0.002); end
  def test_intermediate_output_be150; assert_in_epsilon(666.8621389919019, worksheet.intermediate_output_be150, 0.002); end
  def test_intermediate_output_bf150; assert_in_epsilon(812.0165906094961, worksheet.intermediate_output_bf150, 0.002); end
  def test_intermediate_output_bg150; assert_in_epsilon(973.4943354410517, worksheet.intermediate_output_bg150, 0.002); end
  def test_intermediate_output_bh150; assert_in_epsilon(1115.1349614301396, worksheet.intermediate_output_bh150, 0.002); end
  def test_intermediate_output_bi150; assert_in_epsilon(1268.5163944083415, worksheet.intermediate_output_bi150, 0.002); end
  def test_intermediate_output_b153; assert_equal("Emissions", worksheet.intermediate_output_b153); end
  def test_intermediate_output_c155; assert_equal("Emissions as % of base year, adjusted so that 2007 matches actuals", worksheet.intermediate_output_c155); end
  def test_intermediate_output_d156; assert_equal("IPCC Sector", worksheet.intermediate_output_d156); end
  def test_intermediate_output_f156; assert_equal("2007 Actuals, GHG Inv.", worksheet.intermediate_output_f156); end
  def test_intermediate_output_ay156; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay156, 0.002); end
  def test_intermediate_output_ba156; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba156, 0.002); end
  def test_intermediate_output_bb156; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb156, 0.002); end
  def test_intermediate_output_bc156; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc156, 0.002); end
  def test_intermediate_output_bd156; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd156, 0.002); end
  def test_intermediate_output_be156; assert_in_epsilon(2032.0, worksheet.intermediate_output_be156, 0.002); end
  def test_intermediate_output_bf156; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf156, 0.002); end
  def test_intermediate_output_bg156; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg156, 0.002); end
  def test_intermediate_output_bh156; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh156, 0.002); end
  def test_intermediate_output_bi156; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi156, 0.002); end
  def test_intermediate_output_c157; assert_equal("1A", worksheet.intermediate_output_c157); end
  def test_intermediate_output_d157; assert_equal("Fuel Combustion", worksheet.intermediate_output_d157); end
  def test_intermediate_output_c158; assert_equal("1B", worksheet.intermediate_output_c158); end
  def test_intermediate_output_d158; assert_equal("Fugitive Emissions from Fuels", worksheet.intermediate_output_d158); end
  def test_intermediate_output_c159; assert_in_delta(1.0, worksheet.intermediate_output_c159, 0.002); end
  def test_intermediate_output_d159; assert_equal("Fuel Combustion", worksheet.intermediate_output_d159); end
  def test_intermediate_output_ab159; assert_in_delta(0.7806685062595154, worksheet.intermediate_output_ab159, 0.002); end
  def test_intermediate_output_ac159; assert_in_delta(0.7930303272365209, worksheet.intermediate_output_ac159, 0.002); end
  def test_intermediate_output_ad159; assert_in_delta(0.7722947449612156, worksheet.intermediate_output_ad159, 0.002); end
  def test_intermediate_output_ae159; assert_in_delta(0.7521930383535008, worksheet.intermediate_output_ae159, 0.002); end
  def test_intermediate_output_af159; assert_in_delta(0.7357869578903378, worksheet.intermediate_output_af159, 0.002); end
  def test_intermediate_output_ag159; assert_in_delta(0.7261890501248855, worksheet.intermediate_output_ag159, 0.002); end
  def test_intermediate_output_ah159; assert_in_delta(0.7518487395897508, worksheet.intermediate_output_ah159, 0.002); end
  def test_intermediate_output_ai159; assert_in_delta(0.7201784237664568, worksheet.intermediate_output_ai159, 0.002); end
  def test_intermediate_output_aj159; assert_in_delta(0.7224617851605658, worksheet.intermediate_output_aj159, 0.002); end
  def test_intermediate_output_ak159; assert_in_delta(0.7081467896293895, worksheet.intermediate_output_ak159, 0.002); end
  def test_intermediate_output_al159; assert_in_delta(0.716552142368414, worksheet.intermediate_output_al159, 0.002); end
  def test_intermediate_output_am159; assert_in_delta(0.7327821540998919, worksheet.intermediate_output_am159, 0.002); end
  def test_intermediate_output_an159; assert_in_delta(0.7115375614693166, worksheet.intermediate_output_an159, 0.002); end
  def test_intermediate_output_ao159; assert_in_delta(0.7193475894079996, worksheet.intermediate_output_ao159, 0.002); end
  def test_intermediate_output_ap159; assert_in_delta(0.7205408426019051, worksheet.intermediate_output_ap159, 0.002); end
  def test_intermediate_output_aq159; assert_in_delta(0.7143203096191257, worksheet.intermediate_output_aq159, 0.002); end
  def test_intermediate_output_ar159; assert_in_delta(0.7122366422020238, worksheet.intermediate_output_ar159, 0.002); end
  def test_intermediate_output_as159; assert_in_delta(0.7004394214256808, worksheet.intermediate_output_as159, 0.002); end
  def test_intermediate_output_at159; assert_in_delta(0.684907687910888, worksheet.intermediate_output_at159, 0.002); end
  def test_intermediate_output_au159; assert_in_delta(0.6244815767662123, worksheet.intermediate_output_au159, 0.002); end
  def test_intermediate_output_av159; assert_in_delta(0.6459379834014715, worksheet.intermediate_output_av159, 0.002); end
  def test_intermediate_output_aw159; assert_equal("Calculated from below", worksheet.intermediate_output_aw159); end
  def test_intermediate_output_c160; assert_in_epsilon(2.0, worksheet.intermediate_output_c160, 0.002); end
  def test_intermediate_output_d160; assert_equal("Industrial Processes", worksheet.intermediate_output_d160); end
  def test_intermediate_output_ab160; assert_in_delta(0.06934348280753405, worksheet.intermediate_output_ab160, 0.002); end
  def test_intermediate_output_ac160; assert_in_delta(0.06720152766763343, worksheet.intermediate_output_ac160, 0.002); end
  def test_intermediate_output_ad160; assert_in_delta(0.0603087404525551, worksheet.intermediate_output_ad160, 0.002); end
  def test_intermediate_output_ae160; assert_in_delta(0.05606951265410359, worksheet.intermediate_output_ae160, 0.002); end
  def test_intermediate_output_af160; assert_in_delta(0.059165018025826376, worksheet.intermediate_output_af160, 0.002); end
  def test_intermediate_output_ag160; assert_in_delta(0.059469343411300474, worksheet.intermediate_output_ag160, 0.002); end
  def test_intermediate_output_ah160; assert_in_delta(0.06173370674717705, worksheet.intermediate_output_ah160, 0.002); end
  def test_intermediate_output_ai160; assert_in_delta(0.06468354007919712, worksheet.intermediate_output_ai160, 0.002); end
  def test_intermediate_output_aj160; assert_in_delta(0.06269330586412453, worksheet.intermediate_output_aj160, 0.002); end
  def test_intermediate_output_ak160; assert_in_delta(0.041484572634347024, worksheet.intermediate_output_ak160, 0.002); end
  def test_intermediate_output_al160; assert_in_delta(0.04056607560811837, worksheet.intermediate_output_al160, 0.002); end
  def test_intermediate_output_am160; assert_in_delta(0.03853728872195278, worksheet.intermediate_output_am160, 0.002); end
  def test_intermediate_output_an160; assert_in_delta(0.03608416208929206, worksheet.intermediate_output_an160, 0.002); end
  def test_intermediate_output_ao160; assert_in_delta(0.03845260377410687, worksheet.intermediate_output_ao160, 0.002); end
  def test_intermediate_output_ap160; assert_in_delta(0.03879236532069573, worksheet.intermediate_output_ap160, 0.002); end
  def test_intermediate_output_aq160; assert_in_delta(0.03921145541134658, worksheet.intermediate_output_aq160, 0.002); end
  def test_intermediate_output_ar160; assert_in_delta(0.0383255885918455, worksheet.intermediate_output_ar160, 0.002); end
  def test_intermediate_output_as160; assert_in_delta(0.04048870022214414, worksheet.intermediate_output_as160, 0.002); end
  def test_intermediate_output_at160; assert_in_delta(0.03944535219725577, worksheet.intermediate_output_at160, 0.002); end
  def test_intermediate_output_au160; assert_in_delta(0.03262814293515601, worksheet.intermediate_output_au160, 0.002); end
  def test_intermediate_output_av160; assert_in_delta(0.0343352023525444, worksheet.intermediate_output_av160, 0.002); end
  def test_intermediate_output_aw160; assert_equal("Calculated from below", worksheet.intermediate_output_aw160); end
  def test_intermediate_output_c161; assert_in_epsilon(3.0, worksheet.intermediate_output_c161, 0.002); end
  def test_intermediate_output_d161; assert_equal("Solvent and Other Product Use", worksheet.intermediate_output_d161); end
  def test_intermediate_output_ab161; assert_in_delta(0.0, (worksheet.intermediate_output_ab161||0), 0.002); end
  def test_intermediate_output_ac161; assert_in_delta(0.0, (worksheet.intermediate_output_ac161||0), 0.002); end
  def test_intermediate_output_ad161; assert_in_delta(0.0, (worksheet.intermediate_output_ad161||0), 0.002); end
  def test_intermediate_output_ae161; assert_in_delta(0.0, (worksheet.intermediate_output_ae161||0), 0.002); end
  def test_intermediate_output_af161; assert_in_delta(0.0, (worksheet.intermediate_output_af161||0), 0.002); end
  def test_intermediate_output_ag161; assert_in_delta(0.0, (worksheet.intermediate_output_ag161||0), 0.002); end
  def test_intermediate_output_ah161; assert_in_delta(0.0, (worksheet.intermediate_output_ah161||0), 0.002); end
  def test_intermediate_output_ai161; assert_in_delta(0.0, (worksheet.intermediate_output_ai161||0), 0.002); end
  def test_intermediate_output_aj161; assert_in_delta(0.0, (worksheet.intermediate_output_aj161||0), 0.002); end
  def test_intermediate_output_ak161; assert_in_delta(0.0, (worksheet.intermediate_output_ak161||0), 0.002); end
  def test_intermediate_output_al161; assert_in_delta(0.0, (worksheet.intermediate_output_al161||0), 0.002); end
  def test_intermediate_output_am161; assert_in_delta(0.0, (worksheet.intermediate_output_am161||0), 0.002); end
  def test_intermediate_output_an161; assert_in_delta(0.0, (worksheet.intermediate_output_an161||0), 0.002); end
  def test_intermediate_output_ao161; assert_in_delta(0.0, (worksheet.intermediate_output_ao161||0), 0.002); end
  def test_intermediate_output_ap161; assert_in_delta(0.0, (worksheet.intermediate_output_ap161||0), 0.002); end
  def test_intermediate_output_aq161; assert_in_delta(0.0, (worksheet.intermediate_output_aq161||0), 0.002); end
  def test_intermediate_output_ar161; assert_in_delta(0.0, (worksheet.intermediate_output_ar161||0), 0.002); end
  def test_intermediate_output_as161; assert_in_delta(0.0, (worksheet.intermediate_output_as161||0), 0.002); end
  def test_intermediate_output_at161; assert_in_delta(0.0, (worksheet.intermediate_output_at161||0), 0.002); end
  def test_intermediate_output_au161; assert_in_delta(0.0, (worksheet.intermediate_output_au161||0), 0.002); end
  def test_intermediate_output_av161; assert_in_delta(0.0, (worksheet.intermediate_output_av161||0), 0.002); end
  def test_intermediate_output_aw161; assert_equal("Calculated from below", worksheet.intermediate_output_aw161); end
  def test_intermediate_output_c162; assert_in_epsilon(4.0, worksheet.intermediate_output_c162, 0.002); end
  def test_intermediate_output_d162; assert_equal("Agriculture", worksheet.intermediate_output_d162); end
  def test_intermediate_output_ab162; assert_in_delta(0.07363727056288454, worksheet.intermediate_output_ab162, 0.002); end
  def test_intermediate_output_ac162; assert_in_delta(0.07331066421106627, worksheet.intermediate_output_ac162, 0.002); end
  def test_intermediate_output_ad162; assert_in_delta(0.07307789942306385, worksheet.intermediate_output_ad162, 0.002); end
  def test_intermediate_output_ae162; assert_in_delta(0.07216238312548899, worksheet.intermediate_output_ae162, 0.002); end
  def test_intermediate_output_af162; assert_in_delta(0.07233251461154927, worksheet.intermediate_output_af162, 0.002); end
  def test_intermediate_output_ag162; assert_in_delta(0.07179511657717852, worksheet.intermediate_output_ag162, 0.002); end
  def test_intermediate_output_ah162; assert_in_delta(0.072276188394338, worksheet.intermediate_output_ah162, 0.002); end
  def test_intermediate_output_ai162; assert_in_delta(0.07197048507620002, worksheet.intermediate_output_ai162, 0.002); end
  def test_intermediate_output_aj162; assert_in_delta(0.07115585924578635, worksheet.intermediate_output_aj162, 0.002); end
  def test_intermediate_output_ak162; assert_in_delta(0.07029313970856307, worksheet.intermediate_output_ak162, 0.002); end
  def test_intermediate_output_al162; assert_in_delta(0.0677359702849104, worksheet.intermediate_output_al162, 0.002); end
  def test_intermediate_output_am162; assert_in_delta(0.06415176285396793, worksheet.intermediate_output_am162, 0.002); end
  def test_intermediate_output_an162; assert_in_delta(0.0641319859166509, worksheet.intermediate_output_an162, 0.002); end
  def test_intermediate_output_ao162; assert_in_delta(0.06357803599583314, worksheet.intermediate_output_ao162, 0.002); end
  def test_intermediate_output_ap162; assert_in_delta(0.06391878307434748, worksheet.intermediate_output_ap162, 0.002); end
  def test_intermediate_output_aq162; assert_in_delta(0.06429309279604421, worksheet.intermediate_output_aq162, 0.002); end
  def test_intermediate_output_ar162; assert_in_delta(0.0622039307081389, worksheet.intermediate_output_ar162, 0.002); end
  def test_intermediate_output_as162; assert_in_delta(0.060375061599688654, worksheet.intermediate_output_as162, 0.002); end
  def test_intermediate_output_at162; assert_in_delta(0.059536708630004403, worksheet.intermediate_output_at162, 0.002); end
  def test_intermediate_output_au162; assert_in_delta(0.05866275452204509, worksheet.intermediate_output_au162, 0.002); end
  def test_intermediate_output_av162; assert_in_delta(0.059166189388632114, worksheet.intermediate_output_av162, 0.002); end
  def test_intermediate_output_aw162; assert_equal("Calculated from below", worksheet.intermediate_output_aw162); end
  def test_intermediate_output_c163; assert_in_epsilon(5.0, worksheet.intermediate_output_c163, 0.002); end
  def test_intermediate_output_d163; assert_equal("Land Use, Land-Use Change and Forestry", worksheet.intermediate_output_d163); end
  def test_intermediate_output_ab163; assert_in_delta(0.004985445821672126, worksheet.intermediate_output_ab163, 0.002); end
  def test_intermediate_output_ac163; assert_in_delta(0.00495418767811816, worksheet.intermediate_output_ac163, 0.002); end
  def test_intermediate_output_ad163; assert_in_delta(0.004281499361400791, worksheet.intermediate_output_ad163, 0.002); end
  def test_intermediate_output_ae163; assert_in_delta(0.00285139785334176, worksheet.intermediate_output_ae163, 0.002); end
  def test_intermediate_output_af163; assert_in_delta(0.00262950507244757, worksheet.intermediate_output_af163, 0.002); end
  def test_intermediate_output_ag163; assert_in_delta(0.003157327882574611, worksheet.intermediate_output_ag163, 0.002); end
  def test_intermediate_output_ah163; assert_in_delta(0.0027934494919249478, worksheet.intermediate_output_ah163, 0.002); end
  def test_intermediate_output_ai163; assert_in_delta(0.002458870903568768, worksheet.intermediate_output_ai163, 0.002); end
  def test_intermediate_output_aj163; assert_in_delta(0.0015886960591720714, worksheet.intermediate_output_aj163, 0.002); end
  def test_intermediate_output_ak163; assert_in_delta(0.0013600700980916927, worksheet.intermediate_output_ak163, 0.002); end
  def test_intermediate_output_al163; assert_in_delta(0.000483125457190964, worksheet.intermediate_output_al163, 0.002); end
  def test_intermediate_output_am163; assert_in_delta(-0.00014623827590729024, worksheet.intermediate_output_am163, 0.002); end
  def test_intermediate_output_an163; assert_in_delta(-0.0011968507170436733, worksheet.intermediate_output_an163, 0.002); end
  def test_intermediate_output_ao163; assert_in_delta(-0.0016478975384083344, worksheet.intermediate_output_ao163, 0.002); end
  def test_intermediate_output_ap163; assert_in_delta(-0.0030195909710430914, worksheet.intermediate_output_ap163, 0.002); end
  def test_intermediate_output_aq163; assert_in_delta(-0.0037712994763044764, worksheet.intermediate_output_aq163, 0.002); end
  def test_intermediate_output_ar163; assert_in_delta(-0.003965991265793217, worksheet.intermediate_output_ar163, 0.002); end
  def test_intermediate_output_as163; assert_in_delta(-0.004461209073727321, worksheet.intermediate_output_as163, 0.002); end
  def test_intermediate_output_at163; assert_in_delta(-0.004971900711434677, worksheet.intermediate_output_at163, 0.002); end
  def test_intermediate_output_au163; assert_in_delta(-0.0053886085866594515, worksheet.intermediate_output_au163, 0.002); end
  def test_intermediate_output_av163; assert_in_delta(-0.004920632053361023, worksheet.intermediate_output_av163, 0.002); end
  def test_intermediate_output_aw163; assert_equal("Calculated from below", worksheet.intermediate_output_aw163); end
  def test_intermediate_output_c164; assert_in_epsilon(6.0, worksheet.intermediate_output_c164, 0.002); end
  def test_intermediate_output_d164; assert_equal("Waste", worksheet.intermediate_output_d164); end
  def test_intermediate_output_ab164; assert_in_delta(0.05891518004264519, worksheet.intermediate_output_ab164, 0.002); end
  def test_intermediate_output_ac164; assert_in_delta(0.057763754767127445, worksheet.intermediate_output_ac164, 0.002); end
  def test_intermediate_output_ad164; assert_in_delta(0.05609391726220595, worksheet.intermediate_output_ad164, 0.002); end
  def test_intermediate_output_ae164; assert_in_delta(0.05429662701085268, worksheet.intermediate_output_ae164, 0.002); end
  def test_intermediate_output_af164; assert_in_delta(0.05272999945602901, worksheet.intermediate_output_af164, 0.002); end
  def test_intermediate_output_ag164; assert_in_delta(0.051327979005276206, worksheet.intermediate_output_ag164, 0.002); end
  def test_intermediate_output_ah164; assert_in_delta(0.05000188792374703, worksheet.intermediate_output_ah164, 0.002); end
  def test_intermediate_output_ai164; assert_in_delta(0.046033251120786184, worksheet.intermediate_output_ai164, 0.002); end
  def test_intermediate_output_aj164; assert_in_delta(0.04341790055683726, worksheet.intermediate_output_aj164, 0.002); end
  def test_intermediate_output_ak164; assert_in_delta(0.03992567829435675, worksheet.intermediate_output_ak164, 0.002); end
  def test_intermediate_output_al164; assert_in_delta(0.0376787538212672, worksheet.intermediate_output_al164, 0.002); end
  def test_intermediate_output_am164; assert_in_delta(0.03329698385723431, worksheet.intermediate_output_am164, 0.002); end
  def test_intermediate_output_an164; assert_in_delta(0.030624818715528856, worksheet.intermediate_output_an164, 0.002); end
  def test_intermediate_output_ao164; assert_in_delta(0.026967867591497052, worksheet.intermediate_output_ao164, 0.002); end
  def test_intermediate_output_ap164; assert_in_delta(0.02502124716611989, worksheet.intermediate_output_ap164, 0.002); end
  def test_intermediate_output_aq164; assert_in_delta(0.024379250511532797, worksheet.intermediate_output_aq164, 0.002); end
  def test_intermediate_output_ar164; assert_in_delta(0.02387176955842731, worksheet.intermediate_output_ar164, 0.002); end
  def test_intermediate_output_as164; assert_in_delta(0.023398858470177794, worksheet.intermediate_output_as164, 0.002); end
  def test_intermediate_output_at164; assert_in_delta(0.022682335876657248, worksheet.intermediate_output_at164, 0.002); end
  def test_intermediate_output_au164; assert_in_delta(0.02202450339058717, worksheet.intermediate_output_au164, 0.002); end
  def test_intermediate_output_av164; assert_in_delta(0.02127352929813492, worksheet.intermediate_output_av164, 0.002); end
  def test_intermediate_output_aw164; assert_equal("Calculated from below", worksheet.intermediate_output_aw164); end
  def test_intermediate_output_c165; assert_in_epsilon(7.0, worksheet.intermediate_output_c165, 0.002); end
  def test_intermediate_output_d165; assert_equal("Other", worksheet.intermediate_output_d165); end
  def test_intermediate_output_ab165; assert_in_delta(0.0, (worksheet.intermediate_output_ab165||0), 0.002); end
  def test_intermediate_output_ac165; assert_in_delta(0.0, (worksheet.intermediate_output_ac165||0), 0.002); end
  def test_intermediate_output_ad165; assert_in_delta(0.0, (worksheet.intermediate_output_ad165||0), 0.002); end
  def test_intermediate_output_ae165; assert_in_delta(0.0, (worksheet.intermediate_output_ae165||0), 0.002); end
  def test_intermediate_output_af165; assert_in_delta(0.0, (worksheet.intermediate_output_af165||0), 0.002); end
  def test_intermediate_output_ag165; assert_in_delta(0.0, (worksheet.intermediate_output_ag165||0), 0.002); end
  def test_intermediate_output_ah165; assert_in_delta(0.0, (worksheet.intermediate_output_ah165||0), 0.002); end
  def test_intermediate_output_ai165; assert_in_delta(0.0, (worksheet.intermediate_output_ai165||0), 0.002); end
  def test_intermediate_output_aj165; assert_in_delta(0.0, (worksheet.intermediate_output_aj165||0), 0.002); end
  def test_intermediate_output_ak165; assert_in_delta(0.0, (worksheet.intermediate_output_ak165||0), 0.002); end
  def test_intermediate_output_al165; assert_in_delta(0.0, (worksheet.intermediate_output_al165||0), 0.002); end
  def test_intermediate_output_am165; assert_in_delta(0.0, (worksheet.intermediate_output_am165||0), 0.002); end
  def test_intermediate_output_an165; assert_in_delta(0.0, (worksheet.intermediate_output_an165||0), 0.002); end
  def test_intermediate_output_ao165; assert_in_delta(0.0, (worksheet.intermediate_output_ao165||0), 0.002); end
  def test_intermediate_output_ap165; assert_in_delta(0.0, (worksheet.intermediate_output_ap165||0), 0.002); end
  def test_intermediate_output_aq165; assert_in_delta(0.0, (worksheet.intermediate_output_aq165||0), 0.002); end
  def test_intermediate_output_ar165; assert_in_delta(0.0, (worksheet.intermediate_output_ar165||0), 0.002); end
  def test_intermediate_output_as165; assert_in_delta(0.0, (worksheet.intermediate_output_as165||0), 0.002); end
  def test_intermediate_output_at165; assert_in_delta(0.0, (worksheet.intermediate_output_at165||0), 0.002); end
  def test_intermediate_output_au165; assert_in_delta(0.0, (worksheet.intermediate_output_au165||0), 0.002); end
  def test_intermediate_output_av165; assert_in_delta(0.0, (worksheet.intermediate_output_av165||0), 0.002); end
  def test_intermediate_output_aw165; assert_equal("Calculated from below", worksheet.intermediate_output_aw165); end
  def test_intermediate_output_c166; assert_equal("X1", worksheet.intermediate_output_c166); end
  def test_intermediate_output_d166; assert_equal("International Aviation and Shipping", worksheet.intermediate_output_d166); end
  def test_intermediate_output_ab166; assert_in_delta(0.03173742313345184, worksheet.intermediate_output_ab166, 0.002); end
  def test_intermediate_output_ac166; assert_in_delta(0.03140183401460409, worksheet.intermediate_output_ac166, 0.002); end
  def test_intermediate_output_ad166; assert_in_delta(0.03370064471080534, worksheet.intermediate_output_ad166, 0.002); end
  def test_intermediate_output_ae166; assert_in_delta(0.035080277576749426, worksheet.intermediate_output_ae166, 0.002); end
  def test_intermediate_output_af166; assert_in_delta(0.03498646073499493, worksheet.intermediate_output_af166, 0.002); end
  def test_intermediate_output_ag166; assert_in_delta(0.036854721398015496, worksheet.intermediate_output_ag166, 0.002); end
  def test_intermediate_output_ah166; assert_in_delta(0.03959594009006914, worksheet.intermediate_output_ah166, 0.002); end
  def test_intermediate_output_ai166; assert_in_delta(0.04234839076242477, worksheet.intermediate_output_ai166, 0.002); end
  def test_intermediate_output_aj166; assert_in_delta(0.0462610577268, worksheet.intermediate_output_aj166, 0.002); end
  def test_intermediate_output_ak166; assert_in_delta(0.04546698600105988, worksheet.intermediate_output_ak166, 0.002); end
  def test_intermediate_output_al166; assert_in_delta(0.04815362041282952, worksheet.intermediate_output_al166, 0.002); end
  def test_intermediate_output_am166; assert_in_delta(0.04740754468098375, worksheet.intermediate_output_am166, 0.002); end
  def test_intermediate_output_an166; assert_in_delta(0.044704417121659366, worksheet.intermediate_output_an166, 0.002); end
  def test_intermediate_output_ao166; assert_in_delta(0.046951156639025673, worksheet.intermediate_output_ao166, 0.002); end
  def test_intermediate_output_ap166; assert_in_delta(0.05175599910334371, worksheet.intermediate_output_ap166, 0.002); end
  def test_intermediate_output_aq166; assert_in_delta(0.055831139470604634, worksheet.intermediate_output_aq166, 0.002); end
  def test_intermediate_output_ar166; assert_in_delta(0.059483094928962726, worksheet.intermediate_output_ar166, 0.002); end
  def test_intermediate_output_as166; assert_in_delta(0.05866967429705353, worksheet.intermediate_output_as166, 0.002); end
  def test_intermediate_output_at166; assert_in_delta(0.05902984569716286, worksheet.intermediate_output_at166, 0.002); end
  def test_intermediate_output_au166; assert_in_delta(0.05599899555126166, worksheet.intermediate_output_au166, 0.002); end
  def test_intermediate_output_av166; assert_in_delta(0.05241726883681514, worksheet.intermediate_output_av166, 0.002); end
  def test_intermediate_output_aw166; assert_equal("Calculated from below", worksheet.intermediate_output_aw166); end
  def test_intermediate_output_c167; assert_equal("X2", worksheet.intermediate_output_c167); end
  def test_intermediate_output_d167; assert_equal("Bioenergy credit", worksheet.intermediate_output_d167); end
  def test_intermediate_output_ab167; assert_in_delta(0.0, (worksheet.intermediate_output_ab167||0), 0.002); end
  def test_intermediate_output_ac167; assert_in_delta(0.0, (worksheet.intermediate_output_ac167||0), 0.002); end
  def test_intermediate_output_ad167; assert_in_delta(0.0, (worksheet.intermediate_output_ad167||0), 0.002); end
  def test_intermediate_output_ae167; assert_in_delta(0.0, (worksheet.intermediate_output_ae167||0), 0.002); end
  def test_intermediate_output_af167; assert_in_delta(0.0, (worksheet.intermediate_output_af167||0), 0.002); end
  def test_intermediate_output_ag167; assert_in_delta(0.0, (worksheet.intermediate_output_ag167||0), 0.002); end
  def test_intermediate_output_ah167; assert_in_delta(0.0, (worksheet.intermediate_output_ah167||0), 0.002); end
  def test_intermediate_output_ai167; assert_in_delta(0.0, (worksheet.intermediate_output_ai167||0), 0.002); end
  def test_intermediate_output_aj167; assert_in_delta(0.0, (worksheet.intermediate_output_aj167||0), 0.002); end
  def test_intermediate_output_ak167; assert_in_delta(0.0, (worksheet.intermediate_output_ak167||0), 0.002); end
  def test_intermediate_output_al167; assert_in_delta(0.0, (worksheet.intermediate_output_al167||0), 0.002); end
  def test_intermediate_output_am167; assert_in_delta(0.0, (worksheet.intermediate_output_am167||0), 0.002); end
  def test_intermediate_output_an167; assert_in_delta(0.0, (worksheet.intermediate_output_an167||0), 0.002); end
  def test_intermediate_output_ao167; assert_in_delta(0.0, (worksheet.intermediate_output_ao167||0), 0.002); end
  def test_intermediate_output_ap167; assert_in_delta(0.0, (worksheet.intermediate_output_ap167||0), 0.002); end
  def test_intermediate_output_aq167; assert_in_delta(0.0, (worksheet.intermediate_output_aq167||0), 0.002); end
  def test_intermediate_output_ar167; assert_in_delta(0.0, (worksheet.intermediate_output_ar167||0), 0.002); end
  def test_intermediate_output_as167; assert_in_delta(0.0, (worksheet.intermediate_output_as167||0), 0.002); end
  def test_intermediate_output_at167; assert_in_delta(0.0, (worksheet.intermediate_output_at167||0), 0.002); end
  def test_intermediate_output_au167; assert_in_delta(0.0, (worksheet.intermediate_output_au167||0), 0.002); end
  def test_intermediate_output_av167; assert_in_delta(0.0, (worksheet.intermediate_output_av167||0), 0.002); end
  def test_intermediate_output_aw167; assert_equal("Calculated from below", worksheet.intermediate_output_aw167); end
  def test_intermediate_output_c168; assert_equal("X3", worksheet.intermediate_output_c168); end
  def test_intermediate_output_d168; assert_equal("Carbon capture", worksheet.intermediate_output_d168); end
  def test_intermediate_output_ab168; assert_in_delta(0.0, (worksheet.intermediate_output_ab168||0), 0.002); end
  def test_intermediate_output_ac168; assert_in_delta(0.0, (worksheet.intermediate_output_ac168||0), 0.002); end
  def test_intermediate_output_ad168; assert_in_delta(0.0, (worksheet.intermediate_output_ad168||0), 0.002); end
  def test_intermediate_output_ae168; assert_in_delta(0.0, (worksheet.intermediate_output_ae168||0), 0.002); end
  def test_intermediate_output_af168; assert_in_delta(0.0, (worksheet.intermediate_output_af168||0), 0.002); end
  def test_intermediate_output_ag168; assert_in_delta(0.0, (worksheet.intermediate_output_ag168||0), 0.002); end
  def test_intermediate_output_ah168; assert_in_delta(0.0, (worksheet.intermediate_output_ah168||0), 0.002); end
  def test_intermediate_output_ai168; assert_in_delta(0.0, (worksheet.intermediate_output_ai168||0), 0.002); end
  def test_intermediate_output_aj168; assert_in_delta(0.0, (worksheet.intermediate_output_aj168||0), 0.002); end
  def test_intermediate_output_ak168; assert_in_delta(0.0, (worksheet.intermediate_output_ak168||0), 0.002); end
  def test_intermediate_output_al168; assert_in_delta(0.0, (worksheet.intermediate_output_al168||0), 0.002); end
  def test_intermediate_output_am168; assert_in_delta(0.0, (worksheet.intermediate_output_am168||0), 0.002); end
  def test_intermediate_output_an168; assert_in_delta(0.0, (worksheet.intermediate_output_an168||0), 0.002); end
  def test_intermediate_output_ao168; assert_in_delta(0.0, (worksheet.intermediate_output_ao168||0), 0.002); end
  def test_intermediate_output_ap168; assert_in_delta(0.0, (worksheet.intermediate_output_ap168||0), 0.002); end
  def test_intermediate_output_aq168; assert_in_delta(0.0, (worksheet.intermediate_output_aq168||0), 0.002); end
  def test_intermediate_output_ar168; assert_in_delta(0.0, (worksheet.intermediate_output_ar168||0), 0.002); end
  def test_intermediate_output_as168; assert_in_delta(0.0, (worksheet.intermediate_output_as168||0), 0.002); end
  def test_intermediate_output_at168; assert_in_delta(0.0, (worksheet.intermediate_output_at168||0), 0.002); end
  def test_intermediate_output_au168; assert_in_delta(0.0, (worksheet.intermediate_output_au168||0), 0.002); end
  def test_intermediate_output_av168; assert_in_delta(0.0, (worksheet.intermediate_output_av168||0), 0.002); end
  def test_intermediate_output_aw168; assert_equal("Calculated from below", worksheet.intermediate_output_aw168); end
  def test_intermediate_output_d169; assert_equal("Total", worksheet.intermediate_output_d169); end
  def test_intermediate_output_ab169; assert_in_epsilon(1.019287308627703, worksheet.intermediate_output_ab169, 0.002); end
  def test_intermediate_output_ac169; assert_in_epsilon(1.0276622955750703, worksheet.intermediate_output_ac169, 0.002); end
  def test_intermediate_output_ad169; assert_in_delta(0.9997574461712466, worksheet.intermediate_output_ad169, 0.002); end
  def test_intermediate_output_ae169; assert_in_delta(0.9726532365740373, worksheet.intermediate_output_ae169, 0.002); end
  def test_intermediate_output_af169; assert_in_delta(0.9576304557911849, worksheet.intermediate_output_af169, 0.002); end
  def test_intermediate_output_ag169; assert_in_delta(0.9487935383992309, worksheet.intermediate_output_ag169, 0.002); end
  def test_intermediate_output_ah169; assert_in_delta(0.9782499122370071, worksheet.intermediate_output_ah169, 0.002); end
  def test_intermediate_output_ai169; assert_in_delta(0.9476729617086337, worksheet.intermediate_output_ai169, 0.002); end
  def test_intermediate_output_aj169; assert_in_delta(0.947578604613286, worksheet.intermediate_output_aj169, 0.002); end
  def test_intermediate_output_ak169; assert_in_delta(0.906677236365808, worksheet.intermediate_output_ak169, 0.002); end
  def test_intermediate_output_al169; assert_in_delta(0.9111696879527305, worksheet.intermediate_output_al169, 0.002); end
  def test_intermediate_output_am169; assert_in_delta(0.9160294959381233, worksheet.intermediate_output_am169, 0.002); end
  def test_intermediate_output_an169; assert_in_delta(0.8858860945954042, worksheet.intermediate_output_an169, 0.002); end
  def test_intermediate_output_ao169; assert_in_delta(0.893649355870054, worksheet.intermediate_output_ao169, 0.002); end
  def test_intermediate_output_ap169; assert_in_delta(0.8970096462953688, worksheet.intermediate_output_ap169, 0.002); end
  def test_intermediate_output_aq169; assert_in_delta(0.8942639483323495, worksheet.intermediate_output_aq169, 0.002); end
  def test_intermediate_output_ar169; assert_in_delta(0.892155034723605, worksheet.intermediate_output_ar169, 0.002); end
  def test_intermediate_output_as169; assert_in_delta(0.8789105069410176, worksheet.intermediate_output_as169, 0.002); end
  def test_intermediate_output_at169; assert_in_delta(0.8606300296005335, worksheet.intermediate_output_at169, 0.002); end
  def test_intermediate_output_au169; assert_in_delta(0.7884073645786027, worksheet.intermediate_output_au169, 0.002); end
  def test_intermediate_output_av169; assert_in_delta(0.8082095412242372, worksheet.intermediate_output_av169, 0.002); end
  def test_intermediate_output_aw169; assert_equal("Calculated from below", worksheet.intermediate_output_aw169); end
  def test_intermediate_output_c171; assert_equal("Excluding international bunkers", worksheet.intermediate_output_c171); end
  def test_intermediate_output_e173; assert_equal("Adjustment factor:", worksheet.intermediate_output_e173); end
  def test_intermediate_output_c175; assert_equal("Emissions by sector", worksheet.intermediate_output_c175); end
  def test_intermediate_output_f175; assert_equal("Sector", worksheet.intermediate_output_f175); end
  def test_intermediate_output_ay175; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay175, 0.002); end
  def test_intermediate_output_ba175; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba175, 0.002); end
  def test_intermediate_output_bb175; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb175, 0.002); end
  def test_intermediate_output_bc175; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc175, 0.002); end
  def test_intermediate_output_bd175; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd175, 0.002); end
  def test_intermediate_output_be175; assert_in_epsilon(2032.0, worksheet.intermediate_output_be175, 0.002); end
  def test_intermediate_output_bf175; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf175, 0.002); end
  def test_intermediate_output_bg175; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg175, 0.002); end
  def test_intermediate_output_bh175; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh175, 0.002); end
  def test_intermediate_output_bi175; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi175, 0.002); end
  def test_intermediate_output_c176; assert_equal("I", worksheet.intermediate_output_c176); end
  def test_intermediate_output_f176; assert_equal("Hydrocarbon fuel power generation", worksheet.intermediate_output_f176); end
  def test_intermediate_output_ay176; assert_in_epsilon(595.066185196456, worksheet.intermediate_output_ay176, 0.002); end
  def test_intermediate_output_ba176; assert_in_epsilon(784.1692596552164, worksheet.intermediate_output_ba176, 0.002); end
  def test_intermediate_output_bb176; assert_in_epsilon(1077.349471293409, worksheet.intermediate_output_bb176, 0.002); end
  def test_intermediate_output_bc176; assert_in_epsilon(1588.270202042137, worksheet.intermediate_output_bc176, 0.002); end
  def test_intermediate_output_bd176; assert_in_epsilon(2251.699064797336, worksheet.intermediate_output_bd176, 0.002); end
  def test_intermediate_output_be176; assert_in_epsilon(3180.5599379801783, worksheet.intermediate_output_be176, 0.002); end
  def test_intermediate_output_bf176; assert_in_epsilon(4005.6498956084715, worksheet.intermediate_output_bf176, 0.002); end
  def test_intermediate_output_bg176; assert_in_epsilon(4971.713715104918, worksheet.intermediate_output_bg176, 0.002); end
  def test_intermediate_output_bh176; assert_in_epsilon(5854.081712294084, worksheet.intermediate_output_bh176, 0.002); end
  def test_intermediate_output_bi176; assert_in_epsilon(6857.239724694424, worksheet.intermediate_output_bi176, 0.002); end
  def test_intermediate_output_c177; assert_equal("II", worksheet.intermediate_output_c177); end
  def test_intermediate_output_f177; assert_equal("Nuclear power generation", worksheet.intermediate_output_f177); end
  def test_intermediate_output_ay177; assert_in_delta(0.0, (worksheet.intermediate_output_ay177||0), 0.002); end
  def test_intermediate_output_ba177; assert_in_delta(0.0, (worksheet.intermediate_output_ba177||0), 0.002); end
  def test_intermediate_output_bb177; assert_in_delta(0.0, (worksheet.intermediate_output_bb177||0), 0.002); end
  def test_intermediate_output_bc177; assert_in_delta(0.0, (worksheet.intermediate_output_bc177||0), 0.002); end
  def test_intermediate_output_bd177; assert_in_delta(0.0, (worksheet.intermediate_output_bd177||0), 0.002); end
  def test_intermediate_output_be177; assert_in_delta(0.0, (worksheet.intermediate_output_be177||0), 0.002); end
  def test_intermediate_output_bf177; assert_in_delta(0.0, (worksheet.intermediate_output_bf177||0), 0.002); end
  def test_intermediate_output_bg177; assert_in_delta(0.0, (worksheet.intermediate_output_bg177||0), 0.002); end
  def test_intermediate_output_bh177; assert_in_delta(0.0, (worksheet.intermediate_output_bh177||0), 0.002); end
  def test_intermediate_output_bi177; assert_in_delta(0.0, (worksheet.intermediate_output_bi177||0), 0.002); end
  def test_intermediate_output_c178; assert_equal("III", worksheet.intermediate_output_c178); end
  def test_intermediate_output_f178; assert_equal("Hydro Electric Power Generation", worksheet.intermediate_output_f178); end
  def test_intermediate_output_ay178; assert_in_delta(0.0, (worksheet.intermediate_output_ay178||0), 0.002); end
  def test_intermediate_output_ba178; assert_in_delta(0.0, (worksheet.intermediate_output_ba178||0), 0.002); end
  def test_intermediate_output_bb178; assert_in_delta(0.0, (worksheet.intermediate_output_bb178||0), 0.002); end
  def test_intermediate_output_bc178; assert_in_delta(0.0, (worksheet.intermediate_output_bc178||0), 0.002); end
  def test_intermediate_output_bd178; assert_in_delta(0.0, (worksheet.intermediate_output_bd178||0), 0.002); end
  def test_intermediate_output_be178; assert_in_delta(0.0, (worksheet.intermediate_output_be178||0), 0.002); end
  def test_intermediate_output_bf178; assert_in_delta(0.0, (worksheet.intermediate_output_bf178||0), 0.002); end
  def test_intermediate_output_bg178; assert_in_delta(0.0, (worksheet.intermediate_output_bg178||0), 0.002); end
  def test_intermediate_output_bh178; assert_in_delta(0.0, (worksheet.intermediate_output_bh178||0), 0.002); end
  def test_intermediate_output_bi178; assert_in_delta(0.0, (worksheet.intermediate_output_bi178||0), 0.002); end
  def test_intermediate_output_c179; assert_equal("IV", worksheet.intermediate_output_c179); end
  def test_intermediate_output_f179; assert_equal("National  renewable power generation", worksheet.intermediate_output_f179); end
  def test_intermediate_output_ay179; assert_in_delta(0.0, (worksheet.intermediate_output_ay179||0), 0.002); end
  def test_intermediate_output_ba179; assert_in_delta(0.0, (worksheet.intermediate_output_ba179||0), 0.002); end
  def test_intermediate_output_bb179; assert_in_delta(0.0, (worksheet.intermediate_output_bb179||0), 0.002); end
  def test_intermediate_output_bc179; assert_in_delta(0.0, (worksheet.intermediate_output_bc179||0), 0.002); end
  def test_intermediate_output_bd179; assert_in_delta(0.0, (worksheet.intermediate_output_bd179||0), 0.002); end
  def test_intermediate_output_be179; assert_in_delta(0.0, (worksheet.intermediate_output_be179||0), 0.002); end
  def test_intermediate_output_bf179; assert_in_delta(0.0, (worksheet.intermediate_output_bf179||0), 0.002); end
  def test_intermediate_output_bg179; assert_in_delta(0.0, (worksheet.intermediate_output_bg179||0), 0.002); end
  def test_intermediate_output_bh179; assert_in_delta(0.0, (worksheet.intermediate_output_bh179||0), 0.002); end
  def test_intermediate_output_bi179; assert_in_delta(0.0, (worksheet.intermediate_output_bi179||0), 0.002); end
  def test_intermediate_output_c180; assert_equal("V", worksheet.intermediate_output_c180); end
  def test_intermediate_output_f180; assert_equal("Bioenergy", worksheet.intermediate_output_f180); end
  def test_intermediate_output_ay180; assert_in_epsilon(-313.89366247877757, worksheet.intermediate_output_ay180, 0.002); end
  def test_intermediate_output_ba180; assert_in_epsilon(-317.7448860440523, worksheet.intermediate_output_ba180, 0.002); end
  def test_intermediate_output_bb180; assert_in_epsilon(-316.49941332858305, worksheet.intermediate_output_bb180, 0.002); end
  def test_intermediate_output_bc180; assert_in_epsilon(-315.466103215882, worksheet.intermediate_output_bc180, 0.002); end
  def test_intermediate_output_bd180; assert_in_epsilon(-314.6889283958385, worksheet.intermediate_output_bd180, 0.002); end
  def test_intermediate_output_be180; assert_in_epsilon(-314.23239533992523, worksheet.intermediate_output_be180, 0.002); end
  def test_intermediate_output_bf180; assert_in_epsilon(-313.9948136135167, worksheet.intermediate_output_bf180, 0.002); end
  def test_intermediate_output_bg180; assert_in_epsilon(-312.9238842074715, worksheet.intermediate_output_bg180, 0.002); end
  def test_intermediate_output_bh180; assert_in_epsilon(-312.1117917799598, worksheet.intermediate_output_bh180, 0.002); end
  def test_intermediate_output_bi180; assert_in_epsilon(-311.8492675268365, worksheet.intermediate_output_bi180, 0.002); end
  def test_intermediate_output_c181; assert_equal("VI", worksheet.intermediate_output_c181); end
  def test_intermediate_output_f181; assert_equal("Waste", worksheet.intermediate_output_f181); end
  def test_intermediate_output_ay181; assert_in_delta(0.0, (worksheet.intermediate_output_ay181||0), 0.002); end
  def test_intermediate_output_ba181; assert_in_delta(0.0, (worksheet.intermediate_output_ba181||0), 0.002); end
  def test_intermediate_output_bb181; assert_in_delta(0.0, (worksheet.intermediate_output_bb181||0), 0.002); end
  def test_intermediate_output_bc181; assert_in_delta(0.0, (worksheet.intermediate_output_bc181||0), 0.002); end
  def test_intermediate_output_bd181; assert_in_delta(0.0, (worksheet.intermediate_output_bd181||0), 0.002); end
  def test_intermediate_output_be181; assert_in_delta(0.0, (worksheet.intermediate_output_be181||0), 0.002); end
  def test_intermediate_output_bf181; assert_in_delta(0.0, (worksheet.intermediate_output_bf181||0), 0.002); end
  def test_intermediate_output_bg181; assert_in_delta(0.0, (worksheet.intermediate_output_bg181||0), 0.002); end
  def test_intermediate_output_bh181; assert_in_delta(0.0, (worksheet.intermediate_output_bh181||0), 0.002); end
  def test_intermediate_output_bi181; assert_in_delta(0.0, (worksheet.intermediate_output_bi181||0), 0.002); end
  def test_intermediate_output_c182; assert_equal("VII", worksheet.intermediate_output_c182); end
  def test_intermediate_output_f182; assert_equal("Electricity distribution, storage, and balancing", worksheet.intermediate_output_f182); end
  def test_intermediate_output_ay182; assert_in_delta(0.0, (worksheet.intermediate_output_ay182||0), 0.002); end
  def test_intermediate_output_ba182; assert_in_delta(0.0, (worksheet.intermediate_output_ba182||0), 0.002); end
  def test_intermediate_output_bb182; assert_in_delta(0.0, (worksheet.intermediate_output_bb182||0), 0.002); end
  def test_intermediate_output_bc182; assert_in_delta(0.0, (worksheet.intermediate_output_bc182||0), 0.002); end
  def test_intermediate_output_bd182; assert_in_delta(0.0, (worksheet.intermediate_output_bd182||0), 0.002); end
  def test_intermediate_output_be182; assert_in_delta(0.0, (worksheet.intermediate_output_be182||0), 0.002); end
  def test_intermediate_output_bf182; assert_in_delta(0.0, (worksheet.intermediate_output_bf182||0), 0.002); end
  def test_intermediate_output_bg182; assert_in_delta(0.0, (worksheet.intermediate_output_bg182||0), 0.002); end
  def test_intermediate_output_bh182; assert_in_delta(0.0, (worksheet.intermediate_output_bh182||0), 0.002); end
  def test_intermediate_output_bi182; assert_in_delta(0.0, (worksheet.intermediate_output_bi182||0), 0.002); end
  def test_intermediate_output_c184; assert_equal("IX", worksheet.intermediate_output_c184); end
  def test_intermediate_output_f184; assert_equal("Buildings", worksheet.intermediate_output_f184); end
  def test_intermediate_output_ay184; assert_in_delta(0.0, (worksheet.intermediate_output_ay184||0), 0.002); end
  def test_intermediate_output_ba184; assert_in_delta(0.0, (worksheet.intermediate_output_ba184||0), 0.002); end
  def test_intermediate_output_bb184; assert_in_delta(0.0, (worksheet.intermediate_output_bb184||0), 0.002); end
  def test_intermediate_output_bc184; assert_in_delta(0.0, (worksheet.intermediate_output_bc184||0), 0.002); end
  def test_intermediate_output_bd184; assert_in_delta(0.0, (worksheet.intermediate_output_bd184||0), 0.002); end
  def test_intermediate_output_be184; assert_in_delta(0.0, (worksheet.intermediate_output_be184||0), 0.002); end
  def test_intermediate_output_bf184; assert_in_delta(0.0, (worksheet.intermediate_output_bf184||0), 0.002); end
  def test_intermediate_output_bg184; assert_in_delta(0.0, (worksheet.intermediate_output_bg184||0), 0.002); end
  def test_intermediate_output_bh184; assert_in_delta(0.0, (worksheet.intermediate_output_bh184||0), 0.002); end
  def test_intermediate_output_bi184; assert_in_delta(0.0, (worksheet.intermediate_output_bi184||0), 0.002); end
  def test_intermediate_output_c185; assert_equal("X", worksheet.intermediate_output_c185); end
  def test_intermediate_output_f185; assert_equal("Lighting and appliances", worksheet.intermediate_output_f185); end
  def test_intermediate_output_ay185; assert_in_epsilon(1.9940071140643392, worksheet.intermediate_output_ay185, 0.002); end
  def test_intermediate_output_ba185; assert_in_epsilon(1.8329576632390179, worksheet.intermediate_output_ba185, 0.002); end
  def test_intermediate_output_bb185; assert_in_epsilon(1.5593969490007227, worksheet.intermediate_output_bb185, 0.002); end
  def test_intermediate_output_bc185; assert_in_epsilon(1.2520757241189449, worksheet.intermediate_output_bc185, 0.002); end
  def test_intermediate_output_bd185; assert_in_delta(0.8996038731343545, worksheet.intermediate_output_bd185, 0.002); end
  def test_intermediate_output_be185; assert_in_delta(0.5120681719392735, worksheet.intermediate_output_be185, 0.002); end
  def test_intermediate_output_bf185; assert_in_delta(0.4107672861857, worksheet.intermediate_output_bf185, 0.002); end
  def test_intermediate_output_bg185; assert_in_delta(0.28960362076092644, worksheet.intermediate_output_bg185, 0.002); end
  def test_intermediate_output_bh185; assert_in_delta(0.1532084355621472, worksheet.intermediate_output_bh185, 0.002); end
  def test_intermediate_output_bi185; assert_in_delta(0.0, (worksheet.intermediate_output_bi185||0), 0.002); end
  def test_intermediate_output_c186; assert_equal("XI", worksheet.intermediate_output_c186); end
  def test_intermediate_output_f186; assert_equal("Industry", worksheet.intermediate_output_f186); end
  def test_intermediate_output_ay186; assert_in_epsilon(658.6277670769695, worksheet.intermediate_output_ay186, 0.002); end
  def test_intermediate_output_ba186; assert_in_epsilon(982.2829495753456, worksheet.intermediate_output_ba186, 0.002); end
  def test_intermediate_output_bb186; assert_in_epsilon(1349.3894359322871, worksheet.intermediate_output_bb186, 0.002); end
  def test_intermediate_output_bc186; assert_in_epsilon(1929.0188707797681, worksheet.intermediate_output_bc186, 0.002); end
  def test_intermediate_output_bd186; assert_in_epsilon(2590.0593835301593, worksheet.intermediate_output_bd186, 0.002); end
  def test_intermediate_output_be186; assert_in_epsilon(3324.2857122614537, worksheet.intermediate_output_be186, 0.002); end
  def test_intermediate_output_bf186; assert_in_epsilon(4109.830520443181, worksheet.intermediate_output_bf186, 0.002); end
  def test_intermediate_output_bg186; assert_in_epsilon(4854.804351102837, worksheet.intermediate_output_bg186, 0.002); end
  def test_intermediate_output_bh186; assert_in_epsilon(5532.528044278746, worksheet.intermediate_output_bh186, 0.002); end
  def test_intermediate_output_bi186; assert_in_epsilon(6218.3944071584465, worksheet.intermediate_output_bi186, 0.002); end
  def test_intermediate_output_c187; assert_equal("XII", worksheet.intermediate_output_c187); end
  def test_intermediate_output_f187; assert_equal("Transport", worksheet.intermediate_output_f187); end
  def test_intermediate_output_ay187; assert_in_epsilon(221.70597052391258, worksheet.intermediate_output_ay187, 0.002); end
  def test_intermediate_output_ba187; assert_in_epsilon(221.7059705239126, worksheet.intermediate_output_ba187, 0.002); end
  def test_intermediate_output_bb187; assert_in_epsilon(332.7234144635943, worksheet.intermediate_output_bb187, 0.002); end
  def test_intermediate_output_bc187; assert_in_epsilon(482.09772029926546, worksheet.intermediate_output_bc187, 0.002); end
  def test_intermediate_output_bd187; assert_in_epsilon(665.9782307957221, worksheet.intermediate_output_bd187, 0.002); end
  def test_intermediate_output_be187; assert_in_epsilon(892.1918472973097, worksheet.intermediate_output_be187, 0.002); end
  def test_intermediate_output_bf187; assert_in_epsilon(1159.1376075927294, worksheet.intermediate_output_bf187, 0.002); end
  def test_intermediate_output_bg187; assert_in_epsilon(1412.0431685443764, worksheet.intermediate_output_bg187, 0.002); end
  def test_intermediate_output_bh187; assert_in_epsilon(1690.8391897791685, worksheet.intermediate_output_bh187, 0.002); end
  def test_intermediate_output_bi187; assert_in_epsilon(2002.9666465322869, worksheet.intermediate_output_bi187, 0.002); end
  def test_intermediate_output_c188; assert_equal("XIII", worksheet.intermediate_output_c188); end
  def test_intermediate_output_f188; assert_equal("Cooking", worksheet.intermediate_output_f188); end
  def test_intermediate_output_ay188; assert_in_epsilon(10.704467295035755, worksheet.intermediate_output_ay188, 0.002); end
  def test_intermediate_output_ba188; assert_in_epsilon(16.26088882133183, worksheet.intermediate_output_ba188, 0.002); end
  def test_intermediate_output_bb188; assert_in_epsilon(24.23950354390121, worksheet.intermediate_output_bb188, 0.002); end
  def test_intermediate_output_bc188; assert_in_epsilon(35.93346095018956, worksheet.intermediate_output_bc188, 0.002); end
  def test_intermediate_output_bd188; assert_in_epsilon(52.75136645346924, worksheet.intermediate_output_bd188, 0.002); end
  def test_intermediate_output_be188; assert_in_epsilon(195.39740644307, worksheet.intermediate_output_be188, 0.002); end
  def test_intermediate_output_bf188; assert_in_epsilon(103.07922847908272, worksheet.intermediate_output_bf188, 0.002); end
  def test_intermediate_output_bg188; assert_in_epsilon(137.80633413788036, worksheet.intermediate_output_bg188, 0.002); end
  def test_intermediate_output_bh188; assert_in_epsilon(184.23361666422136, worksheet.intermediate_output_bh188, 0.002); end
  def test_intermediate_output_bi188; assert_in_epsilon(246.3033097633579, worksheet.intermediate_output_bi188, 0.002); end
  def test_intermediate_output_c189; assert_equal("XIV", worksheet.intermediate_output_c189); end
  def test_intermediate_output_f189; assert_equal("Agriculture", worksheet.intermediate_output_f189); end
  def test_intermediate_output_ay189; assert_in_epsilon(20.879036754401042, worksheet.intermediate_output_ay189, 0.002); end
  def test_intermediate_output_ba189; assert_in_epsilon(27.03601947205911, worksheet.intermediate_output_ba189, 0.002); end
  def test_intermediate_output_bb189; assert_in_epsilon(37.21072446431117, worksheet.intermediate_output_bb189, 0.002); end
  def test_intermediate_output_bc189; assert_in_epsilon(50.99549576692747, worksheet.intermediate_output_bc189, 0.002); end
  def test_intermediate_output_bd189; assert_in_epsilon(68.18646924899116, worksheet.intermediate_output_bd189, 0.002); end
  def test_intermediate_output_be189; assert_in_epsilon(85.70490968198598, worksheet.intermediate_output_be189, 0.002); end
  def test_intermediate_output_bf189; assert_in_epsilon(91.58709321034966, worksheet.intermediate_output_bf189, 0.002); end
  def test_intermediate_output_bg189; assert_in_epsilon(98.6987943689982, worksheet.intermediate_output_bg189, 0.002); end
  def test_intermediate_output_bh189; assert_in_epsilon(103.819221533879, worksheet.intermediate_output_bh189, 0.002); end
  def test_intermediate_output_bi189; assert_in_epsilon(109.56385666370986, worksheet.intermediate_output_bi189, 0.002); end
  def test_intermediate_output_c190; assert_equal("XV", worksheet.intermediate_output_c190); end
  def test_intermediate_output_f190; assert_equal("Fossil fuel production", worksheet.intermediate_output_f190); end
  def test_intermediate_output_ay190; assert_in_delta(0.0, (worksheet.intermediate_output_ay190||0), 0.002); end
  def test_intermediate_output_ba190; assert_in_delta(0.0, (worksheet.intermediate_output_ba190||0), 0.002); end
  def test_intermediate_output_bb190; assert_in_delta(0.0, (worksheet.intermediate_output_bb190||0), 0.002); end
  def test_intermediate_output_bc190; assert_in_delta(0.0, (worksheet.intermediate_output_bc190||0), 0.002); end
  def test_intermediate_output_bd190; assert_in_delta(0.0, (worksheet.intermediate_output_bd190||0), 0.002); end
  def test_intermediate_output_be190; assert_in_delta(0.0, (worksheet.intermediate_output_be190||0), 0.002); end
  def test_intermediate_output_bf190; assert_in_delta(0.0, (worksheet.intermediate_output_bf190||0), 0.002); end
  def test_intermediate_output_bg190; assert_in_delta(0.0, (worksheet.intermediate_output_bg190||0), 0.002); end
  def test_intermediate_output_bh190; assert_in_delta(0.0, (worksheet.intermediate_output_bh190||0), 0.002); end
  def test_intermediate_output_bi190; assert_in_delta(0.0, (worksheet.intermediate_output_bi190||0), 0.002); end
  def test_intermediate_output_c191; assert_equal("XVI", worksheet.intermediate_output_c191); end
  def test_intermediate_output_f191; assert_equal("Telecom", worksheet.intermediate_output_f191); end
  def test_intermediate_output_ay191; assert_in_epsilon(3.072687246913156, worksheet.intermediate_output_ay191, 0.002); end
  def test_intermediate_output_ba191; assert_in_epsilon(10.242290823043852, worksheet.intermediate_output_ba191, 0.002); end
  def test_intermediate_output_bb191; assert_in_epsilon(11.96903871423729, worksheet.intermediate_output_bb191, 0.002); end
  def test_intermediate_output_bc191; assert_in_epsilon(14.306079552899408, worksheet.intermediate_output_bc191, 0.002); end
  def test_intermediate_output_bd191; assert_in_epsilon(18.61496448419535, worksheet.intermediate_output_bd191, 0.002); end
  def test_intermediate_output_be191; assert_in_epsilon(21.940344281262913, worksheet.intermediate_output_be191, 0.002); end
  def test_intermediate_output_bf191; assert_in_epsilon(23.475215746381874, worksheet.intermediate_output_bf191, 0.002); end
  def test_intermediate_output_bg191; assert_in_epsilon(26.375105132264267, worksheet.intermediate_output_bg191, 0.002); end
  def test_intermediate_output_bh191; assert_in_epsilon(33.35927916427278, worksheet.intermediate_output_bh191, 0.002); end
  def test_intermediate_output_bi191; assert_in_epsilon(47.3207750656043, worksheet.intermediate_output_bi191, 0.002); end
  def test_intermediate_output_c192; assert_equal("XVII", worksheet.intermediate_output_c192); end
  def test_intermediate_output_f192; assert_equal("Transfer", worksheet.intermediate_output_f192); end
  def test_intermediate_output_ay192; assert_in_delta(0.0, (worksheet.intermediate_output_ay192||0), 0.002); end
  def test_intermediate_output_ba192; assert_in_delta(0.0, (worksheet.intermediate_output_ba192||0), 0.002); end
  def test_intermediate_output_bb192; assert_in_delta(0.0, (worksheet.intermediate_output_bb192||0), 0.002); end
  def test_intermediate_output_bc192; assert_in_delta(0.0, (worksheet.intermediate_output_bc192||0), 0.002); end
  def test_intermediate_output_bd192; assert_in_delta(0.0, (worksheet.intermediate_output_bd192||0), 0.002); end
  def test_intermediate_output_be192; assert_in_delta(0.0, (worksheet.intermediate_output_be192||0), 0.002); end
  def test_intermediate_output_bf192; assert_in_delta(0.0, (worksheet.intermediate_output_bf192||0), 0.002); end
  def test_intermediate_output_bg192; assert_in_delta(0.0, (worksheet.intermediate_output_bg192||0), 0.002); end
  def test_intermediate_output_bh192; assert_in_delta(0.0, (worksheet.intermediate_output_bh192||0), 0.002); end
  def test_intermediate_output_bi192; assert_in_delta(0.0, (worksheet.intermediate_output_bi192||0), 0.002); end
  def test_intermediate_output_f193; assert_equal("Total", worksheet.intermediate_output_f193); end
  def test_intermediate_output_ay193; assert_in_epsilon(1198.1564587289747, worksheet.intermediate_output_ay193, 0.002); end
  def test_intermediate_output_ba193; assert_in_epsilon(1725.785450490096, worksheet.intermediate_output_ba193, 0.002); end
  def test_intermediate_output_bb193; assert_in_epsilon(2517.9415720321576, worksheet.intermediate_output_bb193, 0.002); end
  def test_intermediate_output_bc193; assert_in_epsilon(3786.407801899424, worksheet.intermediate_output_bc193, 0.002); end
  def test_intermediate_output_bd193; assert_in_epsilon(5333.500154787168, worksheet.intermediate_output_bd193, 0.002); end
  def test_intermediate_output_be193; assert_in_epsilon(7386.359830777274, worksheet.intermediate_output_be193, 0.002); end
  def test_intermediate_output_bf193; assert_in_epsilon(9179.175514752866, worksheet.intermediate_output_bf193, 0.002); end
  def test_intermediate_output_bg193; assert_in_epsilon(11188.807187804565, worksheet.intermediate_output_bg193, 0.002); end
  def test_intermediate_output_bh193; assert_in_epsilon(13086.902480369974, worksheet.intermediate_output_bh193, 0.002); end
  def test_intermediate_output_bi193; assert_in_epsilon(15169.93945235099, worksheet.intermediate_output_bi193, 0.002); end
  def test_intermediate_output_f194; assert_equal("Emissions in the time period (up to and including year above)", worksheet.intermediate_output_f194); end
  def test_intermediate_output_ba194; assert_in_epsilon(8349.722534248316, worksheet.intermediate_output_ba194, 0.002); end
  def test_intermediate_output_bb194; assert_in_epsilon(11005.395617076665, worksheet.intermediate_output_bb194, 0.002); end
  def test_intermediate_output_bc194; assert_in_epsilon(16395.10654976259, worksheet.intermediate_output_bc194, 0.002); end
  def test_intermediate_output_bd194; assert_in_epsilon(23573.316068160355, worksheet.intermediate_output_bd194, 0.002); end
  def test_intermediate_output_be194; assert_in_epsilon(32826.079801906155, worksheet.intermediate_output_be194, 0.002); end
  def test_intermediate_output_bf194; assert_in_epsilon(42310.24620581315, worksheet.intermediate_output_bf194, 0.002); end
  def test_intermediate_output_bg194; assert_in_epsilon(51924.77259291943, worksheet.intermediate_output_bg194, 0.002); end
  def test_intermediate_output_bh194; assert_in_epsilon(61638.32181671905, worksheet.intermediate_output_bh194, 0.002); end
  def test_intermediate_output_bi194; assert_in_epsilon(71683.62331779292, worksheet.intermediate_output_bi194, 0.002); end
  def test_intermediate_output_bj194; assert_equal("REFERENCED - All costs", worksheet.intermediate_output_bj194); end
  def test_intermediate_output_c195; assert_equal("Modelled emissions", worksheet.intermediate_output_c195); end
  def test_intermediate_output_f195; assert_equal("Cumulative emissions", worksheet.intermediate_output_f195); end
  def test_intermediate_output_ba195; assert_in_epsilon(8349.722534248316, worksheet.intermediate_output_ba195, 0.002); end
  def test_intermediate_output_bb195; assert_in_epsilon(19355.118151324983, worksheet.intermediate_output_bb195, 0.002); end
  def test_intermediate_output_bc195; assert_in_epsilon(35750.22470108757, worksheet.intermediate_output_bc195, 0.002); end
  def test_intermediate_output_bd195; assert_in_epsilon(59323.54076924793, worksheet.intermediate_output_bd195, 0.002); end
  def test_intermediate_output_be195; assert_in_epsilon(92149.62057115408, worksheet.intermediate_output_be195, 0.002); end
  def test_intermediate_output_bf195; assert_in_epsilon(134459.86677696725, worksheet.intermediate_output_bf195, 0.002); end
  def test_intermediate_output_bg195; assert_in_epsilon(186384.63936988666, worksheet.intermediate_output_bg195, 0.002); end
  def test_intermediate_output_bh195; assert_in_epsilon(248022.9611866057, worksheet.intermediate_output_bh195, 0.002); end
  def test_intermediate_output_bi195; assert_in_epsilon(319706.58450439863, worksheet.intermediate_output_bi195, 0.002); end
  def test_intermediate_output_d197; assert_equal("IPCC Sector", worksheet.intermediate_output_d197); end
  def test_intermediate_output_f197; assert_equal("Actuals, GHG Inv.", worksheet.intermediate_output_f197); end
  def test_intermediate_output_ab197; assert_in_epsilon(1990.0, worksheet.intermediate_output_ab197, 0.002); end
  def test_intermediate_output_ac197; assert_in_epsilon(1991.0, worksheet.intermediate_output_ac197, 0.002); end
  def test_intermediate_output_ad197; assert_in_epsilon(1992.0, worksheet.intermediate_output_ad197, 0.002); end
  def test_intermediate_output_ae197; assert_in_epsilon(1993.0, worksheet.intermediate_output_ae197, 0.002); end
  def test_intermediate_output_af197; assert_in_epsilon(1994.0, worksheet.intermediate_output_af197, 0.002); end
  def test_intermediate_output_ag197; assert_in_epsilon(1995.0, worksheet.intermediate_output_ag197, 0.002); end
  def test_intermediate_output_ah197; assert_in_epsilon(1996.0, worksheet.intermediate_output_ah197, 0.002); end
  def test_intermediate_output_ai197; assert_in_epsilon(1997.0, worksheet.intermediate_output_ai197, 0.002); end
  def test_intermediate_output_aj197; assert_in_epsilon(1998.0, worksheet.intermediate_output_aj197, 0.002); end
  def test_intermediate_output_ak197; assert_in_epsilon(1999.0, worksheet.intermediate_output_ak197, 0.002); end
  def test_intermediate_output_al197; assert_in_epsilon(2000.0, worksheet.intermediate_output_al197, 0.002); end
  def test_intermediate_output_am197; assert_in_epsilon(2001.0, worksheet.intermediate_output_am197, 0.002); end
  def test_intermediate_output_an197; assert_in_epsilon(2002.0, worksheet.intermediate_output_an197, 0.002); end
  def test_intermediate_output_ao197; assert_in_epsilon(2003.0, worksheet.intermediate_output_ao197, 0.002); end
  def test_intermediate_output_ap197; assert_in_epsilon(2004.0, worksheet.intermediate_output_ap197, 0.002); end
  def test_intermediate_output_aq197; assert_in_epsilon(2005.0, worksheet.intermediate_output_aq197, 0.002); end
  def test_intermediate_output_ar197; assert_in_epsilon(2006.0, worksheet.intermediate_output_ar197, 0.002); end
  def test_intermediate_output_as197; assert_in_epsilon(2007.0, worksheet.intermediate_output_as197, 0.002); end
  def test_intermediate_output_at197; assert_in_epsilon(2008.0, worksheet.intermediate_output_at197, 0.002); end
  def test_intermediate_output_au197; assert_in_epsilon(2009.0, worksheet.intermediate_output_au197, 0.002); end
  def test_intermediate_output_av197; assert_in_epsilon(2010.0, worksheet.intermediate_output_av197, 0.002); end
  def test_intermediate_output_bi197; assert_equal("Mt CO2e", worksheet.intermediate_output_bi197); end
  def test_intermediate_output_c198; assert_equal("1A", worksheet.intermediate_output_c198); end
  def test_intermediate_output_d198; assert_equal("Fuel Combustion", worksheet.intermediate_output_d198); end
  def test_intermediate_output_ab198; assert_in_epsilon(574.3209547083816, worksheet.intermediate_output_ab198, 0.002); end
  def test_intermediate_output_ac198; assert_in_epsilon(584.0743742824582, worksheet.intermediate_output_ac198, 0.002); end
  def test_intermediate_output_ad198; assert_in_epsilon(567.775629804286, worksheet.intermediate_output_ad198, 0.002); end
  def test_intermediate_output_ae198; assert_in_epsilon(553.3375369132328, worksheet.intermediate_output_ae198, 0.002); end
  def test_intermediate_output_af198; assert_in_epsilon(546.2326953595707, worksheet.intermediate_output_af198, 0.002); end
  def test_intermediate_output_ag198; assert_in_epsilon(536.0203388339339, worksheet.intermediate_output_ag198, 0.002); end
  def test_intermediate_output_ah198; assert_in_epsilon(556.6263616262188, worksheet.intermediate_output_ah198, 0.002); end
  def test_intermediate_output_ai198; assert_in_epsilon(534.7489129925543, worksheet.intermediate_output_ai198, 0.002); end
  def test_intermediate_output_aj198; assert_in_epsilon(538.7547344689547, worksheet.intermediate_output_aj198, 0.002); end
  def test_intermediate_output_ak198; assert_in_epsilon(530.6656631394994, worksheet.intermediate_output_ak198, 0.002); end
  def test_intermediate_output_al198; assert_in_epsilon(539.0004989586873, worksheet.intermediate_output_al198, 0.002); end
  def test_intermediate_output_am198; assert_in_epsilon(552.1914120311419, worksheet.intermediate_output_am198, 0.002); end
  def test_intermediate_output_an198; assert_in_epsilon(536.2169387908792, worksheet.intermediate_output_an198, 0.002); end
  def test_intermediate_output_ao198; assert_in_epsilon(545.6418260281304, worksheet.intermediate_output_ao198, 0.002); end
  def test_intermediate_output_ap198; assert_in_epsilon(546.9152625041492, worksheet.intermediate_output_ap198, 0.002); end
  def test_intermediate_output_aq198; assert_in_epsilon(542.8024086774741, worksheet.intermediate_output_aq198, 0.002); end
  def test_intermediate_output_ar198; assert_in_epsilon(542.6566863260153, worksheet.intermediate_output_ar198, 0.002); end
  def test_intermediate_output_as198; assert_in_epsilon(534.0257455298923, worksheet.intermediate_output_as198, 0.002); end
  def test_intermediate_output_at198; assert_in_epsilon(522.9479251564137, worksheet.intermediate_output_at198, 0.002); end
  def test_intermediate_output_au198; assert_in_epsilon(475.60178758150977, worksheet.intermediate_output_au198, 0.002); end
  def test_intermediate_output_av198; assert_in_epsilon(492.7502706136072, worksheet.intermediate_output_av198, 0.002); end
  def test_intermediate_output_aw198; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw198); end
  def test_intermediate_output_ay198; assert_in_epsilon(1179.6635504223545, worksheet.intermediate_output_ay198, 0.002); end
  def test_intermediate_output_ba198; assert_in_epsilon(1542.1465709234317, worksheet.intermediate_output_ba198, 0.002); end
  def test_intermediate_output_bb198; assert_in_epsilon(2147.77722868036, worksheet.intermediate_output_bb198, 0.002); end
  def test_intermediate_output_bc198; assert_in_epsilon(3123.058390172522, worksheet.intermediate_output_bc198, 0.002); end
  def test_intermediate_output_bd198; assert_in_epsilon(4334.544426933733, worksheet.intermediate_output_bd198, 0.002); end
  def test_intermediate_output_be198; assert_in_epsilon(6022.499243527791, worksheet.intermediate_output_be198, 0.002); end
  def test_intermediate_output_bf198; assert_in_epsilon(7426.760288043572, worksheet.intermediate_output_bf198, 0.002); end
  def test_intermediate_output_bg198; assert_in_epsilon(9076.997271680259, worksheet.intermediate_output_bg198, 0.002); end
  def test_intermediate_output_bh198; assert_in_epsilon(10640.051843338957, worksheet.intermediate_output_bh198, 0.002); end
  def test_intermediate_output_bi198; assert_in_epsilon(12381.649261916114, worksheet.intermediate_output_bi198, 0.002); end
  def test_intermediate_output_c199; assert_equal("1B", worksheet.intermediate_output_c199); end
  def test_intermediate_output_d199; assert_equal("Fugitive Emissions from Fuels", worksheet.intermediate_output_d199); end
  def test_intermediate_output_ab199; assert_in_epsilon(35.28336958104466, worksheet.intermediate_output_ab199, 0.002); end
  def test_intermediate_output_ac199; assert_in_epsilon(35.182983866091305, worksheet.intermediate_output_ac199, 0.002); end
  def test_intermediate_output_ad199; assert_in_epsilon(35.289835728726885, worksheet.intermediate_output_ad199, 0.002); end
  def test_intermediate_output_ae199; assert_in_epsilon(34.03101350740516, worksheet.intermediate_output_ae199, 0.002); end
  def test_intermediate_output_af199; assert_in_epsilon(28.32476108866633, worksheet.intermediate_output_af199, 0.002); end
  def test_intermediate_output_ag199; assert_in_epsilon(31.042353791967415, worksheet.intermediate_output_ag199, 0.002); end
  def test_intermediate_output_ah199; assert_in_epsilon(30.473334583513346, worksheet.intermediate_output_ah199, 0.002); end
  def test_intermediate_output_ai199; assert_in_epsilon(27.620233281205483, worksheet.intermediate_output_ai199, 0.002); end
  def test_intermediate_output_aj199; assert_in_epsilon(25.397431061510737, worksheet.intermediate_output_aj199, 0.002); end
  def test_intermediate_output_ak199; assert_in_epsilon(22.308283841071088, worksheet.intermediate_output_ak199, 0.002); end
  def test_intermediate_output_al199; assert_in_epsilon(20.536975736659553, worksheet.intermediate_output_al199, 0.002); end
  def test_intermediate_output_am199; assert_in_epsilon(20.019669009851356, worksheet.intermediate_output_am199, 0.002); end
  def test_intermediate_output_an199; assert_in_epsilon(19.40477630089951, worksheet.intermediate_output_an199, 0.002); end
  def test_intermediate_output_ao199; assert_in_epsilon(16.07854267407026, worksheet.intermediate_output_ao199, 0.002); end
  def test_intermediate_output_ap199; assert_in_epsilon(15.736887486965456, worksheet.intermediate_output_ap199, 0.002); end
  def test_intermediate_output_aq199; assert_in_epsilon(14.992284178784804, worksheet.intermediate_output_aq199, 0.002); end
  def test_intermediate_output_ar199; assert_in_epsilon(13.51092325781543, worksheet.intermediate_output_ar199, 0.002); end
  def test_intermediate_output_as199; assert_in_epsilon(12.929712235090694, worksheet.intermediate_output_as199, 0.002); end
  def test_intermediate_output_at199; assert_in_epsilon(11.879194090477329, worksheet.intermediate_output_at199, 0.002); end
  def test_intermediate_output_au199; assert_in_epsilon(12.040107260360204, worksheet.intermediate_output_au199, 0.002); end
  def test_intermediate_output_av199; assert_in_epsilon(11.646390385331518, worksheet.intermediate_output_av199, 0.002); end
  def test_intermediate_output_aw199; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw199); end
  def test_intermediate_output_ay199; assert_in_delta(0.0, (worksheet.intermediate_output_ay199||0), 0.002); end
  def test_intermediate_output_ba199; assert_in_delta(0.0, (worksheet.intermediate_output_ba199||0), 0.002); end
  def test_intermediate_output_bb199; assert_in_delta(0.0, (worksheet.intermediate_output_bb199||0), 0.002); end
  def test_intermediate_output_bc199; assert_in_delta(0.0, (worksheet.intermediate_output_bc199||0), 0.002); end
  def test_intermediate_output_bd199; assert_in_delta(0.0, (worksheet.intermediate_output_bd199||0), 0.002); end
  def test_intermediate_output_be199; assert_in_delta(0.0, (worksheet.intermediate_output_be199||0), 0.002); end
  def test_intermediate_output_bf199; assert_in_delta(0.0, (worksheet.intermediate_output_bf199||0), 0.002); end
  def test_intermediate_output_bg199; assert_in_delta(0.0, (worksheet.intermediate_output_bg199||0), 0.002); end
  def test_intermediate_output_bh199; assert_in_delta(0.0, (worksheet.intermediate_output_bh199||0), 0.002); end
  def test_intermediate_output_bi199; assert_in_delta(0.0, (worksheet.intermediate_output_bi199||0), 0.002); end
  def test_intermediate_output_c200; assert_in_delta(1.0, worksheet.intermediate_output_c200, 0.002); end
  def test_intermediate_output_d200; assert_equal("Fuel Combustion", worksheet.intermediate_output_d200); end
  def test_intermediate_output_ab200; assert_in_epsilon(609.6043242894262, worksheet.intermediate_output_ab200, 0.002); end
  def test_intermediate_output_ac200; assert_in_epsilon(619.2573581485495, worksheet.intermediate_output_ac200, 0.002); end
  def test_intermediate_output_ad200; assert_in_epsilon(603.065465533013, worksheet.intermediate_output_ad200, 0.002); end
  def test_intermediate_output_ae200; assert_in_epsilon(587.368550420638, worksheet.intermediate_output_ae200, 0.002); end
  def test_intermediate_output_af200; assert_in_epsilon(574.5574564482371, worksheet.intermediate_output_af200, 0.002); end
  def test_intermediate_output_ag200; assert_in_epsilon(567.0626926259013, worksheet.intermediate_output_ag200, 0.002); end
  def test_intermediate_output_ah200; assert_in_epsilon(587.0996962097321, worksheet.intermediate_output_ah200, 0.002); end
  def test_intermediate_output_ai200; assert_in_epsilon(562.3691462737597, worksheet.intermediate_output_ai200, 0.002); end
  def test_intermediate_output_aj200; assert_in_epsilon(564.1521655304655, worksheet.intermediate_output_aj200, 0.002); end
  def test_intermediate_output_ak200; assert_in_epsilon(552.9739469805704, worksheet.intermediate_output_ak200, 0.002); end
  def test_intermediate_output_al200; assert_in_epsilon(559.5374746953468, worksheet.intermediate_output_al200, 0.002); end
  def test_intermediate_output_am200; assert_in_epsilon(572.2110810409933, worksheet.intermediate_output_am200, 0.002); end
  def test_intermediate_output_an200; assert_in_epsilon(555.6217150917786, worksheet.intermediate_output_an200, 0.002); end
  def test_intermediate_output_ao200; assert_in_epsilon(561.7203687022006, worksheet.intermediate_output_ao200, 0.002); end
  def test_intermediate_output_ap200; assert_in_epsilon(562.6521499911145, worksheet.intermediate_output_ap200, 0.002); end
  def test_intermediate_output_aq200; assert_in_epsilon(557.794692856259, worksheet.intermediate_output_aq200, 0.002); end
  def test_intermediate_output_ar200; assert_in_epsilon(556.1676095838308, worksheet.intermediate_output_ar200, 0.002); end
  def test_intermediate_output_as200; assert_in_epsilon(546.9554577649831, worksheet.intermediate_output_as200, 0.002); end
  def test_intermediate_output_at200; assert_in_epsilon(534.827119246891, worksheet.intermediate_output_at200, 0.002); end
  def test_intermediate_output_au200; assert_in_epsilon(487.64189484186994, worksheet.intermediate_output_au200, 0.002); end
  def test_intermediate_output_av200; assert_in_epsilon(504.39666099893867, worksheet.intermediate_output_av200, 0.002); end
  def test_intermediate_output_aw200; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw200); end
  def test_intermediate_output_ay200; assert_in_epsilon(1179.6635504223545, worksheet.intermediate_output_ay200, 0.002); end
  def test_intermediate_output_ba200; assert_in_epsilon(1542.1465709234317, worksheet.intermediate_output_ba200, 0.002); end
  def test_intermediate_output_bb200; assert_in_epsilon(2147.77722868036, worksheet.intermediate_output_bb200, 0.002); end
  def test_intermediate_output_bc200; assert_in_epsilon(3123.058390172522, worksheet.intermediate_output_bc200, 0.002); end
  def test_intermediate_output_bd200; assert_in_epsilon(4334.544426933733, worksheet.intermediate_output_bd200, 0.002); end
  def test_intermediate_output_be200; assert_in_epsilon(6022.499243527791, worksheet.intermediate_output_be200, 0.002); end
  def test_intermediate_output_bf200; assert_in_epsilon(7426.760288043572, worksheet.intermediate_output_bf200, 0.002); end
  def test_intermediate_output_bg200; assert_in_epsilon(9076.997271680259, worksheet.intermediate_output_bg200, 0.002); end
  def test_intermediate_output_bh200; assert_in_epsilon(10640.051843338957, worksheet.intermediate_output_bh200, 0.002); end
  def test_intermediate_output_bi200; assert_in_epsilon(12381.649261916114, worksheet.intermediate_output_bi200, 0.002); end
  def test_intermediate_output_c201; assert_in_epsilon(2.0, worksheet.intermediate_output_c201, 0.002); end
  def test_intermediate_output_d201; assert_equal("Industrial Processes", worksheet.intermediate_output_d201); end
  def test_intermediate_output_ab201; assert_in_epsilon(54.14857476869939, worksheet.intermediate_output_ab201, 0.002); end
  def test_intermediate_output_ac201; assert_in_epsilon(52.4759760853303, worksheet.intermediate_output_ac201, 0.002); end
  def test_intermediate_output_ad201; assert_in_epsilon(47.09357259520948, worksheet.intermediate_output_ad201, 0.002); end
  def test_intermediate_output_ae201; assert_in_epsilon(43.78326664990354, worksheet.intermediate_output_ae201, 0.002); end
  def test_intermediate_output_af201; assert_in_epsilon(46.200468631708674, worksheet.intermediate_output_af201, 0.002); end
  def test_intermediate_output_ag201; assert_in_epsilon(46.43810864086563, worksheet.intermediate_output_ag201, 0.002); end
  def test_intermediate_output_ah201; assert_in_epsilon(48.20629279360756, worksheet.intermediate_output_ah201, 0.002); end
  def test_intermediate_output_ai201; assert_in_epsilon(50.50974315789668, worksheet.intermediate_output_ai201, 0.002); end
  def test_intermediate_output_aj201; assert_in_epsilon(48.95561951370075, worksheet.intermediate_output_aj201, 0.002); end
  def test_intermediate_output_ak201; assert_in_epsilon(32.39425526510215, worksheet.intermediate_output_ak201, 0.002); end
  def test_intermediate_output_al201; assert_in_epsilon(31.67702412980407, worksheet.intermediate_output_al201, 0.002); end
  def test_intermediate_output_am201; assert_in_epsilon(30.092795678224793, worksheet.intermediate_output_am201, 0.002); end
  def test_intermediate_output_an201; assert_in_epsilon(28.177211033386556, worksheet.intermediate_output_an201, 0.002); end
  def test_intermediate_output_ao201; assert_in_epsilon(30.02666734078687, worksheet.intermediate_output_ao201, 0.002); end
  def test_intermediate_output_ap201; assert_in_epsilon(30.291978553378527, worksheet.intermediate_output_ap201, 0.002); end
  def test_intermediate_output_aq201; assert_in_epsilon(30.61923542294498, worksheet.intermediate_output_aq201, 0.002); end
  def test_intermediate_output_ar201; assert_in_epsilon(29.927484392152323, worksheet.intermediate_output_ar201, 0.002); end
  def test_intermediate_output_as201; assert_in_epsilon(31.616603644661854, worksheet.intermediate_output_as201, 0.002); end
  def test_intermediate_output_at201; assert_in_epsilon(30.80187951705711, worksheet.intermediate_output_at201, 0.002); end
  def test_intermediate_output_au201; assert_in_epsilon(25.47849294203823, worksheet.intermediate_output_au201, 0.002); end
  def test_intermediate_output_av201; assert_in_epsilon(26.811492537019994, worksheet.intermediate_output_av201, 0.002); end
  def test_intermediate_output_aw201; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw201); end
  def test_intermediate_output_ay201; assert_in_delta(0.0, (worksheet.intermediate_output_ay201||0), 0.002); end
  def test_intermediate_output_ba201; assert_in_delta(0.0, (worksheet.intermediate_output_ba201||0), 0.002); end
  def test_intermediate_output_bb201; assert_in_delta(0.0, (worksheet.intermediate_output_bb201||0), 0.002); end
  def test_intermediate_output_bc201; assert_in_delta(0.0, (worksheet.intermediate_output_bc201||0), 0.002); end
  def test_intermediate_output_bd201; assert_in_delta(0.0, (worksheet.intermediate_output_bd201||0), 0.002); end
  def test_intermediate_output_be201; assert_in_delta(0.0, (worksheet.intermediate_output_be201||0), 0.002); end
  def test_intermediate_output_bf201; assert_in_delta(0.0, (worksheet.intermediate_output_bf201||0), 0.002); end
  def test_intermediate_output_bg201; assert_in_delta(0.0, (worksheet.intermediate_output_bg201||0), 0.002); end
  def test_intermediate_output_bh201; assert_in_delta(0.0, (worksheet.intermediate_output_bh201||0), 0.002); end
  def test_intermediate_output_bi201; assert_in_delta(0.0, (worksheet.intermediate_output_bi201||0), 0.002); end
  def test_intermediate_output_c202; assert_in_epsilon(3.0, worksheet.intermediate_output_c202, 0.002); end
  def test_intermediate_output_d202; assert_equal("Solvent and Other Product Use", worksheet.intermediate_output_d202); end
  def test_intermediate_output_ab202; assert_equal("NE,NO", worksheet.intermediate_output_ab202); end
  def test_intermediate_output_ac202; assert_equal("NE,NO", worksheet.intermediate_output_ac202); end
  def test_intermediate_output_ad202; assert_equal("NE,NO", worksheet.intermediate_output_ad202); end
  def test_intermediate_output_ae202; assert_equal("NE,NO", worksheet.intermediate_output_ae202); end
  def test_intermediate_output_af202; assert_equal("NE,NO", worksheet.intermediate_output_af202); end
  def test_intermediate_output_ag202; assert_equal("NE,NO", worksheet.intermediate_output_ag202); end
  def test_intermediate_output_ah202; assert_equal("NE,NO", worksheet.intermediate_output_ah202); end
  def test_intermediate_output_ai202; assert_equal("NE,NO", worksheet.intermediate_output_ai202); end
  def test_intermediate_output_aj202; assert_equal("NE,NO", worksheet.intermediate_output_aj202); end
  def test_intermediate_output_ak202; assert_equal("NE,NO", worksheet.intermediate_output_ak202); end
  def test_intermediate_output_al202; assert_equal("NE,NO", worksheet.intermediate_output_al202); end
  def test_intermediate_output_am202; assert_equal("NE,NO", worksheet.intermediate_output_am202); end
  def test_intermediate_output_an202; assert_equal("NE,NO", worksheet.intermediate_output_an202); end
  def test_intermediate_output_ao202; assert_equal("NE,NO", worksheet.intermediate_output_ao202); end
  def test_intermediate_output_ap202; assert_equal("NE,NO", worksheet.intermediate_output_ap202); end
  def test_intermediate_output_aq202; assert_equal("NE,NO", worksheet.intermediate_output_aq202); end
  def test_intermediate_output_ar202; assert_equal("NE,NO", worksheet.intermediate_output_ar202); end
  def test_intermediate_output_as202; assert_equal("NE,NO", worksheet.intermediate_output_as202); end
  def test_intermediate_output_at202; assert_equal("NE,NO", worksheet.intermediate_output_at202); end
  def test_intermediate_output_au202; assert_equal("NE,NO", worksheet.intermediate_output_au202); end
  def test_intermediate_output_av202; assert_equal("NE,NO", worksheet.intermediate_output_av202); end
  def test_intermediate_output_aw202; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw202); end
  def test_intermediate_output_ay202; assert_in_delta(0.0, (worksheet.intermediate_output_ay202||0), 0.002); end
  def test_intermediate_output_ba202; assert_in_delta(0.0, (worksheet.intermediate_output_ba202||0), 0.002); end
  def test_intermediate_output_bb202; assert_in_delta(0.0, (worksheet.intermediate_output_bb202||0), 0.002); end
  def test_intermediate_output_bc202; assert_in_delta(0.0, (worksheet.intermediate_output_bc202||0), 0.002); end
  def test_intermediate_output_bd202; assert_in_delta(0.0, (worksheet.intermediate_output_bd202||0), 0.002); end
  def test_intermediate_output_be202; assert_in_delta(0.0, (worksheet.intermediate_output_be202||0), 0.002); end
  def test_intermediate_output_bf202; assert_in_delta(0.0, (worksheet.intermediate_output_bf202||0), 0.002); end
  def test_intermediate_output_bg202; assert_in_delta(0.0, (worksheet.intermediate_output_bg202||0), 0.002); end
  def test_intermediate_output_bh202; assert_in_delta(0.0, (worksheet.intermediate_output_bh202||0), 0.002); end
  def test_intermediate_output_bi202; assert_in_delta(0.0, (worksheet.intermediate_output_bi202||0), 0.002); end
  def test_intermediate_output_c203; assert_in_epsilon(4.0, worksheet.intermediate_output_c203, 0.002); end
  def test_intermediate_output_d203; assert_equal("Agriculture", worksheet.intermediate_output_d203); end
  def test_intermediate_output_ab203; assert_in_epsilon(57.50148520668305, worksheet.intermediate_output_ab203, 0.002); end
  def test_intermediate_output_ac203; assert_in_epsilon(57.24644655351287, worksheet.intermediate_output_ac203, 0.002); end
  def test_intermediate_output_ad203; assert_in_epsilon(57.06468640798265, worksheet.intermediate_output_ad203, 0.002); end
  def test_intermediate_output_ae203; assert_in_epsilon(56.34978284842551, worksheet.intermediate_output_ae203, 0.002); end
  def test_intermediate_output_af203; assert_in_epsilon(56.48263422998958, worksheet.intermediate_output_af203, 0.002); end
  def test_intermediate_output_ag203; assert_in_epsilon(56.062993674503744, worksheet.intermediate_output_ag203, 0.002); end
  def test_intermediate_output_ah203; assert_in_epsilon(56.43865050923289, worksheet.intermediate_output_ah203, 0.002); end
  def test_intermediate_output_ai203; assert_in_epsilon(56.199934507252166, worksheet.intermediate_output_ai203, 0.002); end
  def test_intermediate_output_aj203; assert_in_epsilon(55.56381376596924, worksheet.intermediate_output_aj203, 0.002); end
  def test_intermediate_output_ak203; assert_in_epsilon(54.89013786342752, worksheet.intermediate_output_ak203, 0.002); end
  def test_intermediate_output_al203; assert_in_epsilon(52.89330883023328, worksheet.intermediate_output_al203, 0.002); end
  def test_intermediate_output_am203; assert_in_epsilon(50.09449175034138, worksheet.intermediate_output_am203, 0.002); end
  def test_intermediate_output_an203; assert_in_epsilon(50.07904843936754, worksheet.intermediate_output_an203, 0.002); end
  def test_intermediate_output_ao203; assert_in_epsilon(49.64648293369818, worksheet.intermediate_output_ao203, 0.002); end
  def test_intermediate_output_ap203; assert_in_epsilon(49.91256372328529, worksheet.intermediate_output_ap203, 0.002); end
  def test_intermediate_output_aq203; assert_in_epsilon(50.204852733460946, worksheet.intermediate_output_aq203, 0.002); end
  def test_intermediate_output_ar203; assert_in_epsilon(48.57347881134549, worksheet.intermediate_output_ar203, 0.002); end
  def test_intermediate_output_as203; assert_in_epsilon(47.14536110436577, worksheet.intermediate_output_as203, 0.002); end
  def test_intermediate_output_at203; assert_in_epsilon(46.49071243914793, worksheet.intermediate_output_at203, 0.002); end
  def test_intermediate_output_au203; assert_in_epsilon(45.80826374399665, worksheet.intermediate_output_au203, 0.002); end
  def test_intermediate_output_av203; assert_in_epsilon(46.20138331934621, worksheet.intermediate_output_av203, 0.002); end
  def test_intermediate_output_aw203; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw203); end
  def test_intermediate_output_ay203; assert_in_delta(0.0, (worksheet.intermediate_output_ay203||0), 0.002); end
  def test_intermediate_output_ba203; assert_in_delta(0.0, (worksheet.intermediate_output_ba203||0), 0.002); end
  def test_intermediate_output_bb203; assert_in_delta(0.0, (worksheet.intermediate_output_bb203||0), 0.002); end
  def test_intermediate_output_bc203; assert_in_delta(0.0, (worksheet.intermediate_output_bc203||0), 0.002); end
  def test_intermediate_output_bd203; assert_in_delta(0.0, (worksheet.intermediate_output_bd203||0), 0.002); end
  def test_intermediate_output_be203; assert_in_delta(0.0, (worksheet.intermediate_output_be203||0), 0.002); end
  def test_intermediate_output_bf203; assert_in_delta(0.0, (worksheet.intermediate_output_bf203||0), 0.002); end
  def test_intermediate_output_bg203; assert_in_delta(0.0, (worksheet.intermediate_output_bg203||0), 0.002); end
  def test_intermediate_output_bh203; assert_in_delta(0.0, (worksheet.intermediate_output_bh203||0), 0.002); end
  def test_intermediate_output_bi203; assert_in_delta(0.0, (worksheet.intermediate_output_bi203||0), 0.002); end
  def test_intermediate_output_c204; assert_in_epsilon(5.0, worksheet.intermediate_output_c204, 0.002); end
  def test_intermediate_output_d204; assert_equal("Land Use, Land-Use Change and Forestry", worksheet.intermediate_output_d204); end
  def test_intermediate_output_ab204; assert_in_epsilon(3.893008757281268, worksheet.intermediate_output_ab204, 0.002); end
  def test_intermediate_output_ac204; assert_in_epsilon(3.8686000622628693, worksheet.intermediate_output_ac204, 0.002); end
  def test_intermediate_output_ad204; assert_in_epsilon(3.343314741436101, worksheet.intermediate_output_ad204, 0.002); end
  def test_intermediate_output_ae204; assert_in_epsilon(2.2265845845315693, worksheet.intermediate_output_ae204, 0.002); end
  def test_intermediate_output_af204; assert_in_epsilon(2.0533141148288525, worksheet.intermediate_output_af204, 0.002); end
  def test_intermediate_output_ag204; assert_in_epsilon(2.4654776194817205, worksheet.intermediate_output_ag204, 0.002); end
  def test_intermediate_output_ah204; assert_in_epsilon(2.1813341723246857, worksheet.intermediate_output_ah204, 0.002); end
  def test_intermediate_output_ai204; assert_in_epsilon(1.920070200944781, worksheet.intermediate_output_ai204, 0.002); end
  def test_intermediate_output_aj204; assert_in_epsilon(1.2405726372813575, worksheet.intermediate_output_aj204, 0.002); end
  def test_intermediate_output_ak204; assert_in_epsilon(1.0620443971872269, worksheet.intermediate_output_ak204, 0.002); end
  def test_intermediate_output_al204; assert_in_delta(0.37726047037436505, worksheet.intermediate_output_al204, 0.002); end
  def test_intermediate_output_am204; assert_in_delta(-0.11419377707044237, worksheet.intermediate_output_am204, 0.002); end
  def test_intermediate_output_an204; assert_in_delta(-0.9345905038933172, worksheet.intermediate_output_an204, 0.002); end
  def test_intermediate_output_ao204; assert_in_epsilon(-1.2868015775516333, worksheet.intermediate_output_ao204, 0.002); end
  def test_intermediate_output_ap204; assert_in_epsilon(-2.35792234318885, worksheet.intermediate_output_ap204, 0.002); end
  def test_intermediate_output_aq204; assert_in_epsilon(-2.9449125339525444, worksheet.intermediate_output_aq204, 0.002); end
  def test_intermediate_output_ar204; assert_in_epsilon(-3.09694243630463, worksheet.intermediate_output_ar204, 0.002); end
  def test_intermediate_output_as204; assert_in_epsilon(-3.483645518036744, worksheet.intermediate_output_as204, 0.002); end
  def test_intermediate_output_at204; assert_in_epsilon(-3.882431722717277, worksheet.intermediate_output_at204, 0.002); end
  def test_intermediate_output_au204; assert_in_epsilon(-4.20782838040957, worksheet.intermediate_output_au204, 0.002); end
  def test_intermediate_output_av204; assert_in_epsilon(-3.8423973221854, worksheet.intermediate_output_av204, 0.002); end
  def test_intermediate_output_aw204; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw204); end
  def test_intermediate_output_ay204; assert_in_delta(0.0, (worksheet.intermediate_output_ay204||0), 0.002); end
  def test_intermediate_output_ba204; assert_in_delta(0.0, (worksheet.intermediate_output_ba204||0), 0.002); end
  def test_intermediate_output_bb204; assert_in_delta(0.0, (worksheet.intermediate_output_bb204||0), 0.002); end
  def test_intermediate_output_bc204; assert_in_delta(0.0, (worksheet.intermediate_output_bc204||0), 0.002); end
  def test_intermediate_output_bd204; assert_in_delta(0.0, (worksheet.intermediate_output_bd204||0), 0.002); end
  def test_intermediate_output_be204; assert_in_delta(0.0, (worksheet.intermediate_output_be204||0), 0.002); end
  def test_intermediate_output_bf204; assert_in_delta(0.0, (worksheet.intermediate_output_bf204||0), 0.002); end
  def test_intermediate_output_bg204; assert_in_delta(0.0, (worksheet.intermediate_output_bg204||0), 0.002); end
  def test_intermediate_output_bh204; assert_in_delta(0.0, (worksheet.intermediate_output_bh204||0), 0.002); end
  def test_intermediate_output_bi204; assert_in_delta(0.0, (worksheet.intermediate_output_bi204||0), 0.002); end
  def test_intermediate_output_c205; assert_in_epsilon(6.0, worksheet.intermediate_output_c205, 0.002); end
  def test_intermediate_output_d205; assert_equal("Waste", worksheet.intermediate_output_d205); end
  def test_intermediate_output_ab205; assert_in_epsilon(46.005376459169604, worksheet.intermediate_output_ab205, 0.002); end
  def test_intermediate_output_ac205; assert_in_epsilon(45.10625753555002, worksheet.intermediate_output_ac205, 0.002); end
  def test_intermediate_output_ad205; assert_in_epsilon(43.802323592142784, worksheet.intermediate_output_ad205, 0.002); end
  def test_intermediate_output_ae205; assert_in_epsilon(42.39886501728903, worksheet.intermediate_output_ae205, 0.002); end
  def test_intermediate_output_af205; assert_in_epsilon(41.17552511781319, worksheet.intermediate_output_af205, 0.002); end
  def test_intermediate_output_ag205; assert_in_epsilon(40.080722749499124, worksheet.intermediate_output_ag205, 0.002); end
  def test_intermediate_output_ah205; assert_in_epsilon(39.045211708359346, worksheet.intermediate_output_ah205, 0.002); end
  def test_intermediate_output_ai205; assert_in_epsilon(35.94620343888157, worksheet.intermediate_output_ai205, 0.002); end
  def test_intermediate_output_aj205; assert_in_epsilon(33.90394222233129, worksheet.intermediate_output_aj205, 0.002); end
  def test_intermediate_output_ak205; assert_in_epsilon(31.176954037822373, worksheet.intermediate_output_ak205, 0.002); end
  def test_intermediate_output_al205; assert_in_epsilon(29.422387452691304, worksheet.intermediate_output_al205, 0.002); end
  def test_intermediate_output_am205; assert_in_epsilon(26.000773929539882, worksheet.intermediate_output_am205, 0.002); end
  def test_intermediate_output_an205; assert_in_epsilon(23.914147643814456, worksheet.intermediate_output_an205, 0.002); end
  def test_intermediate_output_ao205; assert_in_epsilon(21.05852685080172, worksheet.intermediate_output_ao205, 0.002); end
  def test_intermediate_output_ap205; assert_in_epsilon(19.538460113710165, worksheet.intermediate_output_ap205, 0.002); end
  def test_intermediate_output_aq205; assert_in_epsilon(19.03714113686196, worksheet.intermediate_output_aq205, 0.002); end
  def test_intermediate_output_ar205; assert_in_epsilon(18.640862074715724, worksheet.intermediate_output_ar205, 0.002); end
  def test_intermediate_output_as205; assert_in_epsilon(18.27157774713009, worksheet.intermediate_output_as205, 0.002); end
  def test_intermediate_output_at205; assert_in_epsilon(17.712063346383925, worksheet.intermediate_output_at205, 0.002); end
  def test_intermediate_output_au205; assert_in_epsilon(17.198378568592883, worksheet.intermediate_output_au205, 0.002); end
  def test_intermediate_output_av205; assert_in_epsilon(16.61196186224757, worksheet.intermediate_output_av205, 0.002); end
  def test_intermediate_output_aw205; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw205); end
  def test_intermediate_output_ay205; assert_in_delta(0.0, (worksheet.intermediate_output_ay205||0), 0.002); end
  def test_intermediate_output_ba205; assert_in_delta(0.0, (worksheet.intermediate_output_ba205||0), 0.002); end
  def test_intermediate_output_bb205; assert_in_delta(0.0, (worksheet.intermediate_output_bb205||0), 0.002); end
  def test_intermediate_output_bc205; assert_in_delta(0.0, (worksheet.intermediate_output_bc205||0), 0.002); end
  def test_intermediate_output_bd205; assert_in_delta(0.0, (worksheet.intermediate_output_bd205||0), 0.002); end
  def test_intermediate_output_be205; assert_in_delta(0.0, (worksheet.intermediate_output_be205||0), 0.002); end
  def test_intermediate_output_bf205; assert_in_delta(0.0, (worksheet.intermediate_output_bf205||0), 0.002); end
  def test_intermediate_output_bg205; assert_in_delta(0.0, (worksheet.intermediate_output_bg205||0), 0.002); end
  def test_intermediate_output_bh205; assert_in_delta(0.0, (worksheet.intermediate_output_bh205||0), 0.002); end
  def test_intermediate_output_bi205; assert_in_delta(0.0, (worksheet.intermediate_output_bi205||0), 0.002); end
  def test_intermediate_output_c206; assert_in_epsilon(7.0, worksheet.intermediate_output_c206, 0.002); end
  def test_intermediate_output_d206; assert_equal("Other", worksheet.intermediate_output_d206); end
  def test_intermediate_output_ab206; assert_equal("NA", worksheet.intermediate_output_ab206); end
  def test_intermediate_output_ac206; assert_equal("NA", worksheet.intermediate_output_ac206); end
  def test_intermediate_output_ad206; assert_equal("NA", worksheet.intermediate_output_ad206); end
  def test_intermediate_output_ae206; assert_equal("NA", worksheet.intermediate_output_ae206); end
  def test_intermediate_output_af206; assert_equal("NA", worksheet.intermediate_output_af206); end
  def test_intermediate_output_ag206; assert_equal("NA", worksheet.intermediate_output_ag206); end
  def test_intermediate_output_ah206; assert_equal("NA", worksheet.intermediate_output_ah206); end
  def test_intermediate_output_ai206; assert_equal("NA", worksheet.intermediate_output_ai206); end
  def test_intermediate_output_aj206; assert_equal("NA", worksheet.intermediate_output_aj206); end
  def test_intermediate_output_ak206; assert_equal("NA", worksheet.intermediate_output_ak206); end
  def test_intermediate_output_al206; assert_equal("NA", worksheet.intermediate_output_al206); end
  def test_intermediate_output_am206; assert_equal("NA", worksheet.intermediate_output_am206); end
  def test_intermediate_output_an206; assert_equal("NA", worksheet.intermediate_output_an206); end
  def test_intermediate_output_ao206; assert_equal("NA", worksheet.intermediate_output_ao206); end
  def test_intermediate_output_ap206; assert_equal("NA", worksheet.intermediate_output_ap206); end
  def test_intermediate_output_aq206; assert_equal("NA", worksheet.intermediate_output_aq206); end
  def test_intermediate_output_ar206; assert_equal("NA", worksheet.intermediate_output_ar206); end
  def test_intermediate_output_as206; assert_equal("NA", worksheet.intermediate_output_as206); end
  def test_intermediate_output_at206; assert_equal("NA", worksheet.intermediate_output_at206); end
  def test_intermediate_output_au206; assert_equal("NA", worksheet.intermediate_output_au206); end
  def test_intermediate_output_av206; assert_equal("NA", worksheet.intermediate_output_av206); end
  def test_intermediate_output_aw206; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw206); end
  def test_intermediate_output_ay206; assert_in_delta(0.0, (worksheet.intermediate_output_ay206||0), 0.002); end
  def test_intermediate_output_ba206; assert_in_delta(0.0, (worksheet.intermediate_output_ba206||0), 0.002); end
  def test_intermediate_output_bb206; assert_in_delta(0.0, (worksheet.intermediate_output_bb206||0), 0.002); end
  def test_intermediate_output_bc206; assert_in_delta(0.0, (worksheet.intermediate_output_bc206||0), 0.002); end
  def test_intermediate_output_bd206; assert_in_delta(0.0, (worksheet.intermediate_output_bd206||0), 0.002); end
  def test_intermediate_output_be206; assert_in_delta(0.0, (worksheet.intermediate_output_be206||0), 0.002); end
  def test_intermediate_output_bf206; assert_in_delta(0.0, (worksheet.intermediate_output_bf206||0), 0.002); end
  def test_intermediate_output_bg206; assert_in_delta(0.0, (worksheet.intermediate_output_bg206||0), 0.002); end
  def test_intermediate_output_bh206; assert_in_delta(0.0, (worksheet.intermediate_output_bh206||0), 0.002); end
  def test_intermediate_output_bi206; assert_in_delta(0.0, (worksheet.intermediate_output_bi206||0), 0.002); end
  def test_intermediate_output_c207; assert_equal("X1", worksheet.intermediate_output_c207); end
  def test_intermediate_output_d207; assert_equal("International Aviation and Shipping", worksheet.intermediate_output_d207); end
  def test_intermediate_output_ab207; assert_in_delta(0.0, (worksheet.intermediate_output_ab207||0), 0.002); end
  def test_intermediate_output_ac207; assert_in_delta(0.0, (worksheet.intermediate_output_ac207||0), 0.002); end
  def test_intermediate_output_ad207; assert_in_delta(0.0, (worksheet.intermediate_output_ad207||0), 0.002); end
  def test_intermediate_output_ae207; assert_in_delta(0.0, (worksheet.intermediate_output_ae207||0), 0.002); end
  def test_intermediate_output_af207; assert_in_delta(0.0, (worksheet.intermediate_output_af207||0), 0.002); end
  def test_intermediate_output_ag207; assert_in_delta(0.0, (worksheet.intermediate_output_ag207||0), 0.002); end
  def test_intermediate_output_ah207; assert_in_delta(0.0, (worksheet.intermediate_output_ah207||0), 0.002); end
  def test_intermediate_output_ai207; assert_in_delta(0.0, (worksheet.intermediate_output_ai207||0), 0.002); end
  def test_intermediate_output_aj207; assert_in_delta(0.0, (worksheet.intermediate_output_aj207||0), 0.002); end
  def test_intermediate_output_ak207; assert_in_delta(0.0, (worksheet.intermediate_output_ak207||0), 0.002); end
  def test_intermediate_output_al207; assert_in_delta(0.0, (worksheet.intermediate_output_al207||0), 0.002); end
  def test_intermediate_output_am207; assert_in_delta(0.0, (worksheet.intermediate_output_am207||0), 0.002); end
  def test_intermediate_output_an207; assert_in_delta(0.0, (worksheet.intermediate_output_an207||0), 0.002); end
  def test_intermediate_output_ao207; assert_in_delta(0.0, (worksheet.intermediate_output_ao207||0), 0.002); end
  def test_intermediate_output_ap207; assert_in_delta(0.0, (worksheet.intermediate_output_ap207||0), 0.002); end
  def test_intermediate_output_aq207; assert_in_delta(0.0, (worksheet.intermediate_output_aq207||0), 0.002); end
  def test_intermediate_output_ar207; assert_in_delta(0.0, (worksheet.intermediate_output_ar207||0), 0.002); end
  def test_intermediate_output_aw207; assert_equal("Calculation", worksheet.intermediate_output_aw207); end
  def test_intermediate_output_ay207; assert_in_delta(0.0, (worksheet.intermediate_output_ay207||0), 0.002); end
  def test_intermediate_output_ba207; assert_in_delta(0.0, (worksheet.intermediate_output_ba207||0), 0.002); end
  def test_intermediate_output_bb207; assert_in_delta(0.0, (worksheet.intermediate_output_bb207||0), 0.002); end
  def test_intermediate_output_bc207; assert_in_delta(0.0, (worksheet.intermediate_output_bc207||0), 0.002); end
  def test_intermediate_output_bd207; assert_in_delta(0.0, (worksheet.intermediate_output_bd207||0), 0.002); end
  def test_intermediate_output_be207; assert_in_delta(0.0, (worksheet.intermediate_output_be207||0), 0.002); end
  def test_intermediate_output_bf207; assert_in_delta(0.0, (worksheet.intermediate_output_bf207||0), 0.002); end
  def test_intermediate_output_bg207; assert_in_delta(0.0, (worksheet.intermediate_output_bg207||0), 0.002); end
  def test_intermediate_output_bh207; assert_in_delta(0.0, (worksheet.intermediate_output_bh207||0), 0.002); end
  def test_intermediate_output_bi207; assert_in_delta(0.0, (worksheet.intermediate_output_bi207||0), 0.002); end
  def test_intermediate_output_c208; assert_equal("X2", worksheet.intermediate_output_c208); end
  def test_intermediate_output_d208; assert_equal("Bioenergy credit", worksheet.intermediate_output_d208); end
  def test_intermediate_output_ab208; assert_in_delta(0.0, (worksheet.intermediate_output_ab208||0), 0.002); end
  def test_intermediate_output_ac208; assert_in_delta(0.0, (worksheet.intermediate_output_ac208||0), 0.002); end
  def test_intermediate_output_ad208; assert_in_delta(0.0, (worksheet.intermediate_output_ad208||0), 0.002); end
  def test_intermediate_output_ae208; assert_in_delta(0.0, (worksheet.intermediate_output_ae208||0), 0.002); end
  def test_intermediate_output_af208; assert_in_delta(0.0, (worksheet.intermediate_output_af208||0), 0.002); end
  def test_intermediate_output_ag208; assert_in_delta(0.0, (worksheet.intermediate_output_ag208||0), 0.002); end
  def test_intermediate_output_ah208; assert_in_delta(0.0, (worksheet.intermediate_output_ah208||0), 0.002); end
  def test_intermediate_output_ai208; assert_in_delta(0.0, (worksheet.intermediate_output_ai208||0), 0.002); end
  def test_intermediate_output_aj208; assert_in_delta(0.0, (worksheet.intermediate_output_aj208||0), 0.002); end
  def test_intermediate_output_ak208; assert_in_delta(0.0, (worksheet.intermediate_output_ak208||0), 0.002); end
  def test_intermediate_output_al208; assert_in_delta(0.0, (worksheet.intermediate_output_al208||0), 0.002); end
  def test_intermediate_output_am208; assert_in_delta(0.0, (worksheet.intermediate_output_am208||0), 0.002); end
  def test_intermediate_output_an208; assert_in_delta(0.0, (worksheet.intermediate_output_an208||0), 0.002); end
  def test_intermediate_output_ao208; assert_in_delta(0.0, (worksheet.intermediate_output_ao208||0), 0.002); end
  def test_intermediate_output_ap208; assert_in_delta(0.0, (worksheet.intermediate_output_ap208||0), 0.002); end
  def test_intermediate_output_aq208; assert_in_delta(0.0, (worksheet.intermediate_output_aq208||0), 0.002); end
  def test_intermediate_output_ar208; assert_in_delta(0.0, (worksheet.intermediate_output_ar208||0), 0.002); end
  def test_intermediate_output_as208; assert_in_delta(0.0, (worksheet.intermediate_output_as208||0), 0.002); end
  def test_intermediate_output_at208; assert_in_delta(0.0, (worksheet.intermediate_output_at208||0), 0.002); end
  def test_intermediate_output_au208; assert_in_delta(0.0, (worksheet.intermediate_output_au208||0), 0.002); end
  def test_intermediate_output_av208; assert_in_delta(0.0, (worksheet.intermediate_output_av208||0), 0.002); end
  def test_intermediate_output_aw208; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw208); end
  def test_intermediate_output_ay208; assert_in_delta(0.0, (worksheet.intermediate_output_ay208||0), 0.002); end
  def test_intermediate_output_ba208; assert_in_delta(0.0, (worksheet.intermediate_output_ba208||0), 0.002); end
  def test_intermediate_output_bb208; assert_in_delta(0.0, (worksheet.intermediate_output_bb208||0), 0.002); end
  def test_intermediate_output_bc208; assert_in_delta(0.0, (worksheet.intermediate_output_bc208||0), 0.002); end
  def test_intermediate_output_bd208; assert_in_delta(0.0, (worksheet.intermediate_output_bd208||0), 0.002); end
  def test_intermediate_output_be208; assert_in_delta(0.0, (worksheet.intermediate_output_be208||0), 0.002); end
  def test_intermediate_output_bf208; assert_in_delta(0.0, (worksheet.intermediate_output_bf208||0), 0.002); end
  def test_intermediate_output_bg208; assert_in_delta(0.0, (worksheet.intermediate_output_bg208||0), 0.002); end
  def test_intermediate_output_bh208; assert_in_delta(0.0, (worksheet.intermediate_output_bh208||0), 0.002); end
  def test_intermediate_output_bi208; assert_in_delta(0.0, (worksheet.intermediate_output_bi208||0), 0.002); end
  def test_intermediate_output_c209; assert_equal("X3", worksheet.intermediate_output_c209); end
  def test_intermediate_output_d209; assert_equal("Carbon capture", worksheet.intermediate_output_d209); end
  def test_intermediate_output_ab209; assert_in_delta(0.0, (worksheet.intermediate_output_ab209||0), 0.002); end
  def test_intermediate_output_ac209; assert_in_delta(0.0, (worksheet.intermediate_output_ac209||0), 0.002); end
  def test_intermediate_output_ad209; assert_in_delta(0.0, (worksheet.intermediate_output_ad209||0), 0.002); end
  def test_intermediate_output_ae209; assert_in_delta(0.0, (worksheet.intermediate_output_ae209||0), 0.002); end
  def test_intermediate_output_af209; assert_in_delta(0.0, (worksheet.intermediate_output_af209||0), 0.002); end
  def test_intermediate_output_ag209; assert_in_delta(0.0, (worksheet.intermediate_output_ag209||0), 0.002); end
  def test_intermediate_output_ah209; assert_in_delta(0.0, (worksheet.intermediate_output_ah209||0), 0.002); end
  def test_intermediate_output_ai209; assert_in_delta(0.0, (worksheet.intermediate_output_ai209||0), 0.002); end
  def test_intermediate_output_aj209; assert_in_delta(0.0, (worksheet.intermediate_output_aj209||0), 0.002); end
  def test_intermediate_output_ak209; assert_in_delta(0.0, (worksheet.intermediate_output_ak209||0), 0.002); end
  def test_intermediate_output_al209; assert_in_delta(0.0, (worksheet.intermediate_output_al209||0), 0.002); end
  def test_intermediate_output_am209; assert_in_delta(0.0, (worksheet.intermediate_output_am209||0), 0.002); end
  def test_intermediate_output_an209; assert_in_delta(0.0, (worksheet.intermediate_output_an209||0), 0.002); end
  def test_intermediate_output_ao209; assert_in_delta(0.0, (worksheet.intermediate_output_ao209||0), 0.002); end
  def test_intermediate_output_ap209; assert_in_delta(0.0, (worksheet.intermediate_output_ap209||0), 0.002); end
  def test_intermediate_output_aq209; assert_in_delta(0.0, (worksheet.intermediate_output_aq209||0), 0.002); end
  def test_intermediate_output_ar209; assert_in_delta(0.0, (worksheet.intermediate_output_ar209||0), 0.002); end
  def test_intermediate_output_as209; assert_in_delta(0.0, (worksheet.intermediate_output_as209||0), 0.002); end
  def test_intermediate_output_at209; assert_in_delta(0.0, (worksheet.intermediate_output_at209||0), 0.002); end
  def test_intermediate_output_au209; assert_in_delta(0.0, (worksheet.intermediate_output_au209||0), 0.002); end
  def test_intermediate_output_av209; assert_in_delta(0.0, (worksheet.intermediate_output_av209||0), 0.002); end
  def test_intermediate_output_aw209; assert_equal("UNFCCC Inventory Submissions 2012 [GBR-2012-2010-v1.2.xls] Summary2 'SUMMARY REPORT FOR CO2 EQUIVALENT EMISSIONS' - http://unfccc.int/national_reports/annex_i_ghg_inventories/national_inventories_submissions/items/6598.php", worksheet.intermediate_output_aw209); end
  def test_intermediate_output_ay209; assert_in_delta(0.0, (worksheet.intermediate_output_ay209||0), 0.002); end
  def test_intermediate_output_ba209; assert_in_delta(0.0, (worksheet.intermediate_output_ba209||0), 0.002); end
  def test_intermediate_output_bb209; assert_in_delta(0.0, (worksheet.intermediate_output_bb209||0), 0.002); end
  def test_intermediate_output_bc209; assert_in_delta(0.0, (worksheet.intermediate_output_bc209||0), 0.002); end
  def test_intermediate_output_bd209; assert_in_delta(0.0, (worksheet.intermediate_output_bd209||0), 0.002); end
  def test_intermediate_output_be209; assert_in_epsilon(-5.990217822580646, worksheet.intermediate_output_be209, 0.002); end
  def test_intermediate_output_bf209; assert_in_epsilon(-11.98043564516129, worksheet.intermediate_output_bf209, 0.002); end
  def test_intermediate_output_bg209; assert_in_epsilon(-29.04348035190616, worksheet.intermediate_output_bg209, 0.002); end
  def test_intermediate_output_bh209; assert_in_epsilon(-40.660872492668624, worksheet.intermediate_output_bh209, 0.002); end
  def test_intermediate_output_bi209; assert_in_epsilon(-56.37852068311195, worksheet.intermediate_output_bi209, 0.002); end
  def test_intermediate_output_d210; assert_equal("Total", worksheet.intermediate_output_d210); end
  def test_intermediate_output_ab210; assert_in_epsilon(795.9357218212427, worksheet.intermediate_output_ab210, 0.002); end
  def test_intermediate_output_ac210; assert_in_epsilon(802.4755376560646, worksheet.intermediate_output_ac210, 0.002); end
  def test_intermediate_output_ad210; assert_in_epsilon(780.6853453672503, worksheet.intermediate_output_ad210, 0.002); end
  def test_intermediate_output_ae210; assert_in_epsilon(759.520352486888, worksheet.intermediate_output_ae210, 0.002); end
  def test_intermediate_output_af210; assert_in_epsilon(747.789442305871, worksheet.intermediate_output_af210, 0.002); end
  def test_intermediate_output_ag210; assert_in_epsilon(740.8889166508336, worksheet.intermediate_output_ag210, 0.002); end
  def test_intermediate_output_ah210; assert_in_epsilon(763.8906551933961, worksheet.intermediate_output_ah210, 0.002); end
  def test_intermediate_output_ai210; assert_in_epsilon(740.013886608237, worksheet.intermediate_output_ai210, 0.002); end
  def test_intermediate_output_aj210; assert_in_epsilon(739.9402055350414, worksheet.intermediate_output_aj210, 0.002); end
  def test_intermediate_output_ak210; assert_in_epsilon(708.0013598494589, worksheet.intermediate_output_ak210, 0.002); end
  def test_intermediate_output_al210; assert_in_epsilon(711.5094018571616, worksheet.intermediate_output_al210, 0.002); end
  def test_intermediate_output_am210; assert_in_epsilon(715.304303200507, worksheet.intermediate_output_am210, 0.002); end
  def test_intermediate_output_an210; assert_in_epsilon(691.7660822271035, worksheet.intermediate_output_an210, 0.002); end
  def test_intermediate_output_ao210; assert_in_epsilon(697.8282169304625, worksheet.intermediate_output_ao210, 0.002); end
  def test_intermediate_output_ap210; assert_in_epsilon(700.4521828746699, worksheet.intermediate_output_ap210, 0.002); end
  def test_intermediate_output_aq210; assert_in_epsilon(698.3081366655189, worksheet.intermediate_output_aq210, 0.002); end
  def test_intermediate_output_ar210; assert_in_epsilon(696.6613392795155, worksheet.intermediate_output_ar210, 0.002); end
  def test_intermediate_output_ay210; assert_in_epsilon(1179.6635504223545, worksheet.intermediate_output_ay210, 0.002); end
  def test_intermediate_output_ba210; assert_in_epsilon(1542.1465709234317, worksheet.intermediate_output_ba210, 0.002); end
  def test_intermediate_output_bb210; assert_in_epsilon(2147.77722868036, worksheet.intermediate_output_bb210, 0.002); end
  def test_intermediate_output_bc210; assert_in_epsilon(3123.058390172522, worksheet.intermediate_output_bc210, 0.002); end
  def test_intermediate_output_bd210; assert_in_epsilon(4334.544426933733, worksheet.intermediate_output_bd210, 0.002); end
  def test_intermediate_output_be210; assert_in_epsilon(6016.509025705211, worksheet.intermediate_output_be210, 0.002); end
  def test_intermediate_output_bf210; assert_in_epsilon(7414.77985239841, worksheet.intermediate_output_bf210, 0.002); end
  def test_intermediate_output_bg210; assert_in_epsilon(9047.953791328353, worksheet.intermediate_output_bg210, 0.002); end
  def test_intermediate_output_bh210; assert_in_epsilon(10599.390970846289, worksheet.intermediate_output_bh210, 0.002); end
  def test_intermediate_output_bi210; assert_in_epsilon(12325.270741233002, worksheet.intermediate_output_bi210, 0.002); end
  def test_intermediate_output_bj210; assert_equal("REFERENCED - All costs", worksheet.intermediate_output_bj210); end
  def test_intermediate_output_b215; assert_equal("Bio-energy - Production and Use", worksheet.intermediate_output_b215); end
  def test_intermediate_output_b217; assert_equal("Production", worksheet.intermediate_output_b217); end
  def test_intermediate_output_c219; assert_equal("Domestic", worksheet.intermediate_output_c219); end
  def test_intermediate_output_ay219; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay219, 0.002); end
  def test_intermediate_output_ba219; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba219, 0.002); end
  def test_intermediate_output_bb219; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb219, 0.002); end
  def test_intermediate_output_bc219; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc219, 0.002); end
  def test_intermediate_output_bd219; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd219, 0.002); end
  def test_intermediate_output_be219; assert_in_epsilon(2032.0, worksheet.intermediate_output_be219, 0.002); end
  def test_intermediate_output_bf219; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf219, 0.002); end
  def test_intermediate_output_bg219; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg219, 0.002); end
  def test_intermediate_output_bh219; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh219, 0.002); end
  def test_intermediate_output_bi219; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi219, 0.002); end
  def test_intermediate_output_c220; assert_equal("V.a", worksheet.intermediate_output_c220); end
  def test_intermediate_output_d220; assert_equal("V.03", worksheet.intermediate_output_d220); end
  def test_intermediate_output_e220; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_e220); end
  def test_intermediate_output_aj220; assert_in_epsilon(11.2811, worksheet.intermediate_output_aj220, 0.002); end
  def test_intermediate_output_ak220; assert_in_epsilon(11.5128859, worksheet.intermediate_output_ak220, 0.002); end
  def test_intermediate_output_al220; assert_in_epsilon(9.9829594, worksheet.intermediate_output_al220, 0.002); end
  def test_intermediate_output_am220; assert_in_epsilon(10.7253023, worksheet.intermediate_output_am220, 0.002); end
  def test_intermediate_output_an220; assert_in_epsilon(11.7831671, worksheet.intermediate_output_an220, 0.002); end
  def test_intermediate_output_ao220; assert_in_epsilon(11.9234249, worksheet.intermediate_output_ao220, 0.002); end
  def test_intermediate_output_ap220; assert_in_epsilon(8.2292717, worksheet.intermediate_output_ap220, 0.002); end
  def test_intermediate_output_aq220; assert_in_epsilon(13.56519449, worksheet.intermediate_output_aq220, 0.002); end
  def test_intermediate_output_ar220; assert_in_epsilon(13.10799238, worksheet.intermediate_output_ar220, 0.002); end
  def test_intermediate_output_as220; assert_in_epsilon(14.11044992, worksheet.intermediate_output_as220, 0.002); end
  def test_intermediate_output_at220; assert_in_epsilon(15.68101481, worksheet.intermediate_output_at220, 0.002); end
  def test_intermediate_output_au220; assert_in_epsilon(18.7866056, worksheet.intermediate_output_au220, 0.002); end
  def test_intermediate_output_av220; assert_in_epsilon(19.95985165, worksheet.intermediate_output_av220, 0.002); end
  def test_intermediate_output_aw220; assert_equal("DUKES - Commodity balances, production of wood waste, wood, poultry litter, meal and bone, and farm waste, and straw, SRC, and other plant-based biomass ", worksheet.intermediate_output_aw220); end
  def test_intermediate_output_c221; assert_equal("V.a", worksheet.intermediate_output_c221); end
  def test_intermediate_output_d221; assert_equal("V.04", worksheet.intermediate_output_d221); end
  def test_intermediate_output_e221; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_e221); end
  def test_intermediate_output_aj221; assert_in_delta(0.0, (worksheet.intermediate_output_aj221||0), 0.002); end
  def test_intermediate_output_ak221; assert_in_delta(0.0, (worksheet.intermediate_output_ak221||0), 0.002); end
  def test_intermediate_output_al221; assert_in_delta(0.0, (worksheet.intermediate_output_al221||0), 0.002); end
  def test_intermediate_output_am221; assert_in_delta(0.0, (worksheet.intermediate_output_am221||0), 0.002); end
  def test_intermediate_output_an221; assert_in_delta(0.0, (worksheet.intermediate_output_an221||0), 0.002); end
  def test_intermediate_output_ao221; assert_in_delta(0.0, (worksheet.intermediate_output_ao221||0), 0.002); end
  def test_intermediate_output_ap221; assert_in_delta(0.0, (worksheet.intermediate_output_ap221||0), 0.002); end
  def test_intermediate_output_aq221; assert_in_delta(0.09313615, worksheet.intermediate_output_aq221, 0.002); end
  def test_intermediate_output_ar221; assert_in_epsilon(2.691796244, worksheet.intermediate_output_ar221, 0.002); end
  def test_intermediate_output_as221; assert_in_epsilon(4.599912358, worksheet.intermediate_output_as221, 0.002); end
  def test_intermediate_output_at221; assert_in_epsilon(3.516727083, worksheet.intermediate_output_at221, 0.002); end
  def test_intermediate_output_au221; assert_in_epsilon(2.629156279, worksheet.intermediate_output_au221, 0.002); end
  def test_intermediate_output_av221; assert_in_epsilon(3.539047787, worksheet.intermediate_output_av221, 0.002); end
  def test_intermediate_output_aw221; assert_equal("DUKES - Commodity balances, production of liquid biofuels", worksheet.intermediate_output_aw221); end
  def test_intermediate_output_c222; assert_equal("V.a", worksheet.intermediate_output_c222); end
  def test_intermediate_output_d222; assert_equal("V.05", worksheet.intermediate_output_d222); end
  def test_intermediate_output_e222; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_e222); end
  def test_intermediate_output_aj222; assert_in_epsilon(4.679912, worksheet.intermediate_output_aj222, 0.002); end
  def test_intermediate_output_ak222; assert_in_epsilon(6.65236, worksheet.intermediate_output_ak222, 0.002); end
  def test_intermediate_output_al222; assert_in_epsilon(8.5030419, worksheet.intermediate_output_al222, 0.002); end
  def test_intermediate_output_am222; assert_in_epsilon(9.7205866, worksheet.intermediate_output_am222, 0.002); end
  def test_intermediate_output_an222; assert_in_epsilon(10.375123, worksheet.intermediate_output_an222, 0.002); end
  def test_intermediate_output_ao222; assert_in_epsilon(12.654603, worksheet.intermediate_output_ao222, 0.002); end
  def test_intermediate_output_ap222; assert_in_epsilon(17.4844257, worksheet.intermediate_output_ap222, 0.002); end
  def test_intermediate_output_aq222; assert_in_epsilon(18.91593462, worksheet.intermediate_output_aq222, 0.002); end
  def test_intermediate_output_ar222; assert_in_epsilon(19.24482717, worksheet.intermediate_output_ar222, 0.002); end
  def test_intermediate_output_as222; assert_in_epsilon(20.29461125, worksheet.intermediate_output_as222, 0.002); end
  def test_intermediate_output_at222; assert_in_epsilon(20.91263605, worksheet.intermediate_output_at222, 0.002); end
  def test_intermediate_output_au222; assert_in_epsilon(21.92331406, worksheet.intermediate_output_au222, 0.002); end
  def test_intermediate_output_av222; assert_in_epsilon(22.89564828, worksheet.intermediate_output_av222, 0.002); end
  def test_intermediate_output_aw222; assert_equal("DUKES - Commodity balances, production of sewage gas and landfill gas", worksheet.intermediate_output_aw222); end
  def test_intermediate_output_ay222; assert_in_epsilon(9.177777777777777, worksheet.intermediate_output_ay222, 0.002); end
  def test_intermediate_output_ba222; assert_in_epsilon(10.305777777777783, worksheet.intermediate_output_ba222, 0.002); end
  def test_intermediate_output_bb222; assert_in_epsilon(11.34601666666667, worksheet.intermediate_output_bb222, 0.002); end
  def test_intermediate_output_bc222; assert_in_epsilon(12.38625555555556, worksheet.intermediate_output_bc222, 0.002); end
  def test_intermediate_output_bd222; assert_in_epsilon(13.426494444444447, worksheet.intermediate_output_bd222, 0.002); end
  def test_intermediate_output_be222; assert_in_epsilon(14.466733333333337, worksheet.intermediate_output_be222, 0.002); end
  def test_intermediate_output_bf222; assert_in_epsilon(14.832036478670412, worksheet.intermediate_output_bf222, 0.002); end
  def test_intermediate_output_bg222; assert_in_epsilon(15.206563986198885, worksheet.intermediate_output_bg222, 0.002); end
  def test_intermediate_output_bh222; assert_in_epsilon(15.590548782623422, worksheet.intermediate_output_bh222, 0.002); end
  def test_intermediate_output_bi222; assert_in_epsilon(15.984229676339865, worksheet.intermediate_output_bi222, 0.002); end
  def test_intermediate_output_c224; assert_equal("Domestic", worksheet.intermediate_output_c224); end
  def test_intermediate_output_c225; assert_equal("V.b", worksheet.intermediate_output_c225); end
  def test_intermediate_output_d225; assert_equal("V.03", worksheet.intermediate_output_d225); end
  def test_intermediate_output_e225; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_e225); end
  def test_intermediate_output_aj225; assert_in_delta(0.0, (worksheet.intermediate_output_aj225||0), 0.002); end
  def test_intermediate_output_ak225; assert_in_delta(0.0, (worksheet.intermediate_output_ak225||0), 0.002); end
  def test_intermediate_output_al225; assert_in_delta(0.0, (worksheet.intermediate_output_al225||0), 0.002); end
  def test_intermediate_output_am225; assert_in_delta(0.0, (worksheet.intermediate_output_am225||0), 0.002); end
  def test_intermediate_output_an225; assert_in_delta(0.0, (worksheet.intermediate_output_an225||0), 0.002); end
  def test_intermediate_output_ao225; assert_in_epsilon(1.2843009, worksheet.intermediate_output_ao225, 0.002); end
  def test_intermediate_output_ap225; assert_in_epsilon(4.67526, worksheet.intermediate_output_ap225, 0.002); end
  def test_intermediate_output_aq225; assert_in_epsilon(4.89331583, worksheet.intermediate_output_aq225, 0.002); end
  def test_intermediate_output_ar225; assert_in_epsilon(5.78000326, worksheet.intermediate_output_ar225, 0.002); end
  def test_intermediate_output_as225; assert_in_epsilon(4.398455251, worksheet.intermediate_output_as225, 0.002); end
  def test_intermediate_output_at225; assert_in_epsilon(5.033138643, worksheet.intermediate_output_at225, 0.002); end
  def test_intermediate_output_au225; assert_in_epsilon(4.917245238, worksheet.intermediate_output_au225, 0.002); end
  def test_intermediate_output_av225; assert_in_epsilon(8.756573386, worksheet.intermediate_output_av225, 0.002); end
  def test_intermediate_output_aw225; assert_equal("DUKES - Commodity balances, imports of wood waste, wood, poultry litter, meal and bone, and farm waste, and straw, SRC, and other plant-based biomass ", worksheet.intermediate_output_aw225); end
  def test_intermediate_output_c226; assert_equal("V.b", worksheet.intermediate_output_c226); end
  def test_intermediate_output_d226; assert_equal("V.04", worksheet.intermediate_output_d226); end
  def test_intermediate_output_e226; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_e226); end
  def test_intermediate_output_aj226; assert_in_delta(0.0, (worksheet.intermediate_output_aj226||0), 0.002); end
  def test_intermediate_output_ak226; assert_in_delta(0.0, (worksheet.intermediate_output_ak226||0), 0.002); end
  def test_intermediate_output_al226; assert_in_delta(0.0, (worksheet.intermediate_output_al226||0), 0.002); end
  def test_intermediate_output_am226; assert_in_delta(0.0, (worksheet.intermediate_output_am226||0), 0.002); end
  def test_intermediate_output_an226; assert_in_delta(0.0, (worksheet.intermediate_output_an226||0), 0.002); end
  def test_intermediate_output_ao226; assert_in_delta(0.0, (worksheet.intermediate_output_ao226||0), 0.002); end
  def test_intermediate_output_ap226; assert_in_delta(0.0, (worksheet.intermediate_output_ap226||0), 0.002); end
  def test_intermediate_output_aq226; assert_in_delta(0.768079488, worksheet.intermediate_output_aq226, 0.002); end
  def test_intermediate_output_ar226; assert_in_delta(0.621433135, worksheet.intermediate_output_ar226, 0.002); end
  def test_intermediate_output_as226; assert_in_delta(0.883831113, worksheet.intermediate_output_as226, 0.002); end
  def test_intermediate_output_at226; assert_in_epsilon(6.362225731, worksheet.intermediate_output_at226, 0.002); end
  def test_intermediate_output_au226; assert_in_epsilon(9.448472566, worksheet.intermediate_output_au226, 0.002); end
  def test_intermediate_output_av226; assert_in_epsilon(11.52719409, worksheet.intermediate_output_av226, 0.002); end
  def test_intermediate_output_aw226; assert_equal("DUKES - Commodity balances, imports of liquid biofuels", worksheet.intermediate_output_aw226); end
  def test_intermediate_output_ay226; assert_in_delta(0.0, (worksheet.intermediate_output_ay226||0), 0.002); end
  def test_intermediate_output_ba226; assert_in_delta(0.13142242804166665, worksheet.intermediate_output_ba226, 0.002); end
  def test_intermediate_output_bb226; assert_in_epsilon(3.0140876139388606, worksheet.intermediate_output_bb226, 0.002); end
  def test_intermediate_output_bc226; assert_in_epsilon(6.640349805567526, worksheet.intermediate_output_bc226, 0.002); end
  def test_intermediate_output_bd226; assert_in_epsilon(11.174550655547504, worksheet.intermediate_output_bd226, 0.002); end
  def test_intermediate_output_be226; assert_in_epsilon(16.858011722794185, worksheet.intermediate_output_be226, 0.002); end
  def test_intermediate_output_bf226; assert_in_epsilon(23.81237420320716, worksheet.intermediate_output_bf226, 0.002); end
  def test_intermediate_output_bg226; assert_in_epsilon(32.28279205089418, worksheet.intermediate_output_bg226, 0.002); end
  def test_intermediate_output_bh226; assert_in_epsilon(42.4432602465375, worksheet.intermediate_output_bh226, 0.002); end
  def test_intermediate_output_bi226; assert_in_epsilon(54.65693393750001, worksheet.intermediate_output_bi226, 0.002); end
  def test_intermediate_output_c227; assert_equal("V.b", worksheet.intermediate_output_c227); end
  def test_intermediate_output_d227; assert_equal("V.05", worksheet.intermediate_output_d227); end
  def test_intermediate_output_e227; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_e227); end
  def test_intermediate_output_aj227; assert_in_delta(0.0, (worksheet.intermediate_output_aj227||0), 0.002); end
  def test_intermediate_output_ak227; assert_in_delta(0.0, (worksheet.intermediate_output_ak227||0), 0.002); end
  def test_intermediate_output_al227; assert_in_delta(0.0, (worksheet.intermediate_output_al227||0), 0.002); end
  def test_intermediate_output_am227; assert_in_delta(0.0, (worksheet.intermediate_output_am227||0), 0.002); end
  def test_intermediate_output_an227; assert_in_delta(0.0, (worksheet.intermediate_output_an227||0), 0.002); end
  def test_intermediate_output_ao227; assert_in_delta(0.0, (worksheet.intermediate_output_ao227||0), 0.002); end
  def test_intermediate_output_ap227; assert_in_delta(0.0, (worksheet.intermediate_output_ap227||0), 0.002); end
  def test_intermediate_output_aq227; assert_in_delta(0.0, (worksheet.intermediate_output_aq227||0), 0.002); end
  def test_intermediate_output_ar227; assert_in_delta(0.0, (worksheet.intermediate_output_ar227||0), 0.002); end
  def test_intermediate_output_as227; assert_in_delta(0.0, (worksheet.intermediate_output_as227||0), 0.002); end
  def test_intermediate_output_at227; assert_in_delta(0.0, (worksheet.intermediate_output_at227||0), 0.002); end
  def test_intermediate_output_au227; assert_in_delta(0.0, (worksheet.intermediate_output_au227||0), 0.002); end
  def test_intermediate_output_av227; assert_in_delta(0.0, (worksheet.intermediate_output_av227||0), 0.002); end
  def test_intermediate_output_aw227; assert_equal("DUKES - Commodity balances, imports of sewage gas and landfill gas", worksheet.intermediate_output_aw227); end
  def test_intermediate_output_c229; assert_equal("Domestic", worksheet.intermediate_output_c229); end
  def test_intermediate_output_c230; assert_equal("V.e", worksheet.intermediate_output_c230); end
  def test_intermediate_output_d230; assert_equal("V.03", worksheet.intermediate_output_d230); end
  def test_intermediate_output_e230; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_e230); end
  def test_intermediate_output_aj230; assert_in_epsilon(11.2811, worksheet.intermediate_output_aj230, 0.002); end
  def test_intermediate_output_ak230; assert_in_epsilon(11.5128859, worksheet.intermediate_output_ak230, 0.002); end
  def test_intermediate_output_al230; assert_in_epsilon(9.9829594, worksheet.intermediate_output_al230, 0.002); end
  def test_intermediate_output_am230; assert_in_epsilon(10.7253023, worksheet.intermediate_output_am230, 0.002); end
  def test_intermediate_output_an230; assert_in_epsilon(11.7831671, worksheet.intermediate_output_an230, 0.002); end
  def test_intermediate_output_ao230; assert_in_epsilon(13.2077258, worksheet.intermediate_output_ao230, 0.002); end
  def test_intermediate_output_ap230; assert_in_epsilon(12.9045317, worksheet.intermediate_output_ap230, 0.002); end
  def test_intermediate_output_aq230; assert_in_epsilon(18.45851032, worksheet.intermediate_output_aq230, 0.002); end
  def test_intermediate_output_ar230; assert_in_epsilon(18.88799564, worksheet.intermediate_output_ar230, 0.002); end
  def test_intermediate_output_as230; assert_in_epsilon(18.50890517, worksheet.intermediate_output_as230, 0.002); end
  def test_intermediate_output_at230; assert_in_epsilon(20.71415345, worksheet.intermediate_output_at230, 0.002); end
  def test_intermediate_output_au230; assert_in_epsilon(23.70385084, worksheet.intermediate_output_au230, 0.002); end
  def test_intermediate_output_av230; assert_in_epsilon(28.71642504, worksheet.intermediate_output_av230, 0.002); end
  def test_intermediate_output_aw230; assert_equal("Calculation", worksheet.intermediate_output_aw230); end
  def test_intermediate_output_ay230; assert_in_epsilon(937.2335555555555, worksheet.intermediate_output_ay230, 0.002); end
  def test_intermediate_output_ba230; assert_in_epsilon(948.4098, worksheet.intermediate_output_ba230, 0.002); end
  def test_intermediate_output_bb230; assert_in_epsilon(947.5049146476287, worksheet.intermediate_output_bb230, 0.002); end
  def test_intermediate_output_bc230; assert_in_epsilon(946.6398667230644, worksheet.intermediate_output_bc230, 0.002); end
  def test_intermediate_output_bd230; assert_in_epsilon(945.8150561972723, worksheet.intermediate_output_bd230, 0.002); end
  def test_intermediate_output_be230; assert_in_epsilon(945.0308870569582, worksheet.intermediate_output_be230, 0.002); end
  def test_intermediate_output_bf230; assert_in_epsilon(944.2877673448872, worksheet.intermediate_output_bf230, 0.002); end
  def test_intermediate_output_bg230; assert_in_epsilon(939.9734500000004, worksheet.intermediate_output_bg230, 0.002); end
  def test_intermediate_output_bh230; assert_in_epsilon(935.1007250000002, worksheet.intermediate_output_bh230, 0.002); end
  def test_intermediate_output_bi230; assert_in_epsilon(930.2280000000001, worksheet.intermediate_output_bi230, 0.002); end
  def test_intermediate_output_c231; assert_equal("V.e", worksheet.intermediate_output_c231); end
  def test_intermediate_output_d231; assert_equal("V.04", worksheet.intermediate_output_d231); end
  def test_intermediate_output_e231; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_e231); end
  def test_intermediate_output_aj231; assert_in_delta(0.0, (worksheet.intermediate_output_aj231||0), 0.002); end
  def test_intermediate_output_ak231; assert_in_delta(0.0, (worksheet.intermediate_output_ak231||0), 0.002); end
  def test_intermediate_output_al231; assert_in_delta(0.0, (worksheet.intermediate_output_al231||0), 0.002); end
  def test_intermediate_output_am231; assert_in_delta(0.0, (worksheet.intermediate_output_am231||0), 0.002); end
  def test_intermediate_output_an231; assert_in_delta(0.0, (worksheet.intermediate_output_an231||0), 0.002); end
  def test_intermediate_output_ao231; assert_in_delta(0.0, (worksheet.intermediate_output_ao231||0), 0.002); end
  def test_intermediate_output_ap231; assert_in_delta(0.0, (worksheet.intermediate_output_ap231||0), 0.002); end
  def test_intermediate_output_aq231; assert_in_delta(0.861215638, worksheet.intermediate_output_aq231, 0.002); end
  def test_intermediate_output_ar231; assert_in_epsilon(3.313229379, worksheet.intermediate_output_ar231, 0.002); end
  def test_intermediate_output_as231; assert_in_epsilon(5.483743472, worksheet.intermediate_output_as231, 0.002); end
  def test_intermediate_output_at231; assert_in_epsilon(9.878952814, worksheet.intermediate_output_at231, 0.002); end
  def test_intermediate_output_au231; assert_in_epsilon(12.07762885, worksheet.intermediate_output_au231, 0.002); end
  def test_intermediate_output_av231; assert_in_epsilon(15.06624188, worksheet.intermediate_output_av231, 0.002); end
  def test_intermediate_output_aw231; assert_equal("Calculation", worksheet.intermediate_output_aw231); end
  def test_intermediate_output_c232; assert_equal("V.e", worksheet.intermediate_output_c232); end
  def test_intermediate_output_d232; assert_equal("V.05", worksheet.intermediate_output_d232); end
  def test_intermediate_output_e232; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_e232); end
  def test_intermediate_output_aj232; assert_in_epsilon(4.679912, worksheet.intermediate_output_aj232, 0.002); end
  def test_intermediate_output_ak232; assert_in_epsilon(6.65236, worksheet.intermediate_output_ak232, 0.002); end
  def test_intermediate_output_al232; assert_in_epsilon(8.5030419, worksheet.intermediate_output_al232, 0.002); end
  def test_intermediate_output_am232; assert_in_epsilon(9.7205866, worksheet.intermediate_output_am232, 0.002); end
  def test_intermediate_output_an232; assert_in_epsilon(10.375123, worksheet.intermediate_output_an232, 0.002); end
  def test_intermediate_output_ao232; assert_in_epsilon(12.654603, worksheet.intermediate_output_ao232, 0.002); end
  def test_intermediate_output_ap232; assert_in_epsilon(17.4844257, worksheet.intermediate_output_ap232, 0.002); end
  def test_intermediate_output_aq232; assert_in_epsilon(18.91593462, worksheet.intermediate_output_aq232, 0.002); end
  def test_intermediate_output_ar232; assert_in_epsilon(19.24482717, worksheet.intermediate_output_ar232, 0.002); end
  def test_intermediate_output_as232; assert_in_epsilon(20.29461125, worksheet.intermediate_output_as232, 0.002); end
  def test_intermediate_output_at232; assert_in_epsilon(20.91263605, worksheet.intermediate_output_at232, 0.002); end
  def test_intermediate_output_au232; assert_in_epsilon(21.92331406, worksheet.intermediate_output_au232, 0.002); end
  def test_intermediate_output_av232; assert_in_epsilon(22.89564828, worksheet.intermediate_output_av232, 0.002); end
  def test_intermediate_output_aw232; assert_equal("Calculation", worksheet.intermediate_output_aw232); end
  def test_intermediate_output_c234; assert_equal("Domestic Production from Waste", worksheet.intermediate_output_c234); end
  def test_intermediate_output_c235; assert_equal("VI.a", worksheet.intermediate_output_c235); end
  def test_intermediate_output_d235; assert_equal("V.03", worksheet.intermediate_output_d235); end
  def test_intermediate_output_e235; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_e235); end
  def test_intermediate_output_aj235; assert_in_epsilon(11.2811, worksheet.intermediate_output_aj235, 0.002); end
  def test_intermediate_output_ak235; assert_in_epsilon(11.5128859, worksheet.intermediate_output_ak235, 0.002); end
  def test_intermediate_output_al235; assert_in_epsilon(9.9829594, worksheet.intermediate_output_al235, 0.002); end
  def test_intermediate_output_am235; assert_in_epsilon(10.7253023, worksheet.intermediate_output_am235, 0.002); end
  def test_intermediate_output_an235; assert_in_epsilon(11.7831671, worksheet.intermediate_output_an235, 0.002); end
  def test_intermediate_output_ao235; assert_in_epsilon(13.2077258, worksheet.intermediate_output_ao235, 0.002); end
  def test_intermediate_output_ap235; assert_in_epsilon(12.9045317, worksheet.intermediate_output_ap235, 0.002); end
  def test_intermediate_output_aq235; assert_in_epsilon(18.45851032, worksheet.intermediate_output_aq235, 0.002); end
  def test_intermediate_output_ar235; assert_in_epsilon(18.88799564, worksheet.intermediate_output_ar235, 0.002); end
  def test_intermediate_output_as235; assert_in_epsilon(18.50890517, worksheet.intermediate_output_as235, 0.002); end
  def test_intermediate_output_at235; assert_in_epsilon(20.71415345, worksheet.intermediate_output_at235, 0.002); end
  def test_intermediate_output_au235; assert_in_epsilon(23.70385084, worksheet.intermediate_output_au235, 0.002); end
  def test_intermediate_output_av235; assert_in_epsilon(28.71642504, worksheet.intermediate_output_av235, 0.002); end
  def test_intermediate_output_aw235; assert_equal("Calculation", worksheet.intermediate_output_aw235); end
  def test_intermediate_output_ay235; assert_in_delta(0.0, (worksheet.intermediate_output_ay235||0), 0.002); end
  def test_intermediate_output_ba235; assert_in_delta(0.0, (worksheet.intermediate_output_ba235||0), 0.002); end
  def test_intermediate_output_bb235; assert_in_delta(0.0, (worksheet.intermediate_output_bb235||0), 0.002); end
  def test_intermediate_output_bc235; assert_in_delta(0.0, (worksheet.intermediate_output_bc235||0), 0.002); end
  def test_intermediate_output_bd235; assert_in_delta(0.0, (worksheet.intermediate_output_bd235||0), 0.002); end
  def test_intermediate_output_be235; assert_in_delta(0.0, (worksheet.intermediate_output_be235||0), 0.002); end
  def test_intermediate_output_bf235; assert_in_delta(0.0, (worksheet.intermediate_output_bf235||0), 0.002); end
  def test_intermediate_output_bg235; assert_in_delta(0.0, (worksheet.intermediate_output_bg235||0), 0.002); end
  def test_intermediate_output_bh235; assert_in_delta(0.0, (worksheet.intermediate_output_bh235||0), 0.002); end
  def test_intermediate_output_bi235; assert_in_delta(0.0, (worksheet.intermediate_output_bi235||0), 0.002); end
  def test_intermediate_output_c236; assert_equal("VI.a", worksheet.intermediate_output_c236); end
  def test_intermediate_output_d236; assert_equal("V.04", worksheet.intermediate_output_d236); end
  def test_intermediate_output_e236; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_e236); end
  def test_intermediate_output_aj236; assert_in_delta(0.0, (worksheet.intermediate_output_aj236||0), 0.002); end
  def test_intermediate_output_ak236; assert_in_delta(0.0, (worksheet.intermediate_output_ak236||0), 0.002); end
  def test_intermediate_output_al236; assert_in_delta(0.0, (worksheet.intermediate_output_al236||0), 0.002); end
  def test_intermediate_output_am236; assert_in_delta(0.0, (worksheet.intermediate_output_am236||0), 0.002); end
  def test_intermediate_output_an236; assert_in_delta(0.0, (worksheet.intermediate_output_an236||0), 0.002); end
  def test_intermediate_output_ao236; assert_in_delta(0.0, (worksheet.intermediate_output_ao236||0), 0.002); end
  def test_intermediate_output_ap236; assert_in_delta(0.0, (worksheet.intermediate_output_ap236||0), 0.002); end
  def test_intermediate_output_aq236; assert_in_delta(0.861215638, worksheet.intermediate_output_aq236, 0.002); end
  def test_intermediate_output_ar236; assert_in_epsilon(3.313229379, worksheet.intermediate_output_ar236, 0.002); end
  def test_intermediate_output_as236; assert_in_epsilon(5.483743472, worksheet.intermediate_output_as236, 0.002); end
  def test_intermediate_output_at236; assert_in_epsilon(9.878952814, worksheet.intermediate_output_at236, 0.002); end
  def test_intermediate_output_au236; assert_in_epsilon(12.07762885, worksheet.intermediate_output_au236, 0.002); end
  def test_intermediate_output_av236; assert_in_epsilon(15.06624188, worksheet.intermediate_output_av236, 0.002); end
  def test_intermediate_output_aw236; assert_equal("Calculation", worksheet.intermediate_output_aw236); end
  def test_intermediate_output_c237; assert_equal("VI.a", worksheet.intermediate_output_c237); end
  def test_intermediate_output_d237; assert_equal("V.05", worksheet.intermediate_output_d237); end
  def test_intermediate_output_e237; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_e237); end
  def test_intermediate_output_aj237; assert_in_epsilon(4.679912, worksheet.intermediate_output_aj237, 0.002); end
  def test_intermediate_output_ak237; assert_in_epsilon(6.65236, worksheet.intermediate_output_ak237, 0.002); end
  def test_intermediate_output_al237; assert_in_epsilon(8.5030419, worksheet.intermediate_output_al237, 0.002); end
  def test_intermediate_output_am237; assert_in_epsilon(9.7205866, worksheet.intermediate_output_am237, 0.002); end
  def test_intermediate_output_an237; assert_in_epsilon(10.375123, worksheet.intermediate_output_an237, 0.002); end
  def test_intermediate_output_ao237; assert_in_epsilon(12.654603, worksheet.intermediate_output_ao237, 0.002); end
  def test_intermediate_output_ap237; assert_in_epsilon(17.4844257, worksheet.intermediate_output_ap237, 0.002); end
  def test_intermediate_output_aq237; assert_in_epsilon(18.91593462, worksheet.intermediate_output_aq237, 0.002); end
  def test_intermediate_output_ar237; assert_in_epsilon(19.24482717, worksheet.intermediate_output_ar237, 0.002); end
  def test_intermediate_output_as237; assert_in_epsilon(20.29461125, worksheet.intermediate_output_as237, 0.002); end
  def test_intermediate_output_at237; assert_in_epsilon(20.91263605, worksheet.intermediate_output_at237, 0.002); end
  def test_intermediate_output_au237; assert_in_epsilon(21.92331406, worksheet.intermediate_output_au237, 0.002); end
  def test_intermediate_output_av237; assert_in_epsilon(22.89564828, worksheet.intermediate_output_av237, 0.002); end
  def test_intermediate_output_aw237; assert_equal("Calculation", worksheet.intermediate_output_aw237); end
  def test_intermediate_output_ay237; assert_in_delta(0.0, (worksheet.intermediate_output_ay237||0), 0.002); end
  def test_intermediate_output_ba237; assert_in_delta(0.0, (worksheet.intermediate_output_ba237||0), 0.002); end
  def test_intermediate_output_bb237; assert_in_delta(0.0, (worksheet.intermediate_output_bb237||0), 0.002); end
  def test_intermediate_output_bc237; assert_in_delta(0.0, (worksheet.intermediate_output_bc237||0), 0.002); end
  def test_intermediate_output_bd237; assert_in_delta(0.0, (worksheet.intermediate_output_bd237||0), 0.002); end
  def test_intermediate_output_be237; assert_in_delta(0.0, (worksheet.intermediate_output_be237||0), 0.002); end
  def test_intermediate_output_bf237; assert_in_delta(0.0, (worksheet.intermediate_output_bf237||0), 0.002); end
  def test_intermediate_output_bg237; assert_in_delta(0.0, (worksheet.intermediate_output_bg237||0), 0.002); end
  def test_intermediate_output_bh237; assert_in_delta(0.0, (worksheet.intermediate_output_bh237||0), 0.002); end
  def test_intermediate_output_bi237; assert_in_delta(0.0, (worksheet.intermediate_output_bi237||0), 0.002); end
  def test_intermediate_output_c239; assert_equal("Total from Bio Energy and Waste", worksheet.intermediate_output_c239); end
  def test_intermediate_output_c240; assert_equal("V", worksheet.intermediate_output_c240); end
  def test_intermediate_output_d240; assert_equal("V.03", worksheet.intermediate_output_d240); end
  def test_intermediate_output_e240; assert_equal("Solid hydrocarbons", worksheet.intermediate_output_e240); end
  def test_intermediate_output_aj240; assert_in_epsilon(11.2811, worksheet.intermediate_output_aj240, 0.002); end
  def test_intermediate_output_ak240; assert_in_epsilon(11.5128859, worksheet.intermediate_output_ak240, 0.002); end
  def test_intermediate_output_al240; assert_in_epsilon(9.9829594, worksheet.intermediate_output_al240, 0.002); end
  def test_intermediate_output_am240; assert_in_epsilon(10.7253023, worksheet.intermediate_output_am240, 0.002); end
  def test_intermediate_output_an240; assert_in_epsilon(11.7831671, worksheet.intermediate_output_an240, 0.002); end
  def test_intermediate_output_ao240; assert_in_epsilon(13.2077258, worksheet.intermediate_output_ao240, 0.002); end
  def test_intermediate_output_ap240; assert_in_epsilon(12.9045317, worksheet.intermediate_output_ap240, 0.002); end
  def test_intermediate_output_aq240; assert_in_epsilon(18.45851032, worksheet.intermediate_output_aq240, 0.002); end
  def test_intermediate_output_ar240; assert_in_epsilon(18.88799564, worksheet.intermediate_output_ar240, 0.002); end
  def test_intermediate_output_as240; assert_in_epsilon(18.50890517, worksheet.intermediate_output_as240, 0.002); end
  def test_intermediate_output_at240; assert_in_epsilon(20.71415345, worksheet.intermediate_output_at240, 0.002); end
  def test_intermediate_output_au240; assert_in_epsilon(23.70385084, worksheet.intermediate_output_au240, 0.002); end
  def test_intermediate_output_av240; assert_in_epsilon(28.71642504, worksheet.intermediate_output_av240, 0.002); end
  def test_intermediate_output_aw240; assert_equal("Calculation", worksheet.intermediate_output_aw240); end
  def test_intermediate_output_ay240; assert_in_epsilon(937.2335555555555, worksheet.intermediate_output_ay240, 0.002); end
  def test_intermediate_output_ba240; assert_in_epsilon(948.4098, worksheet.intermediate_output_ba240, 0.002); end
  def test_intermediate_output_bb240; assert_in_epsilon(947.5049146476287, worksheet.intermediate_output_bb240, 0.002); end
  def test_intermediate_output_bc240; assert_in_epsilon(946.6398667230644, worksheet.intermediate_output_bc240, 0.002); end
  def test_intermediate_output_bd240; assert_in_epsilon(945.8150561972723, worksheet.intermediate_output_bd240, 0.002); end
  def test_intermediate_output_be240; assert_in_epsilon(945.0308870569582, worksheet.intermediate_output_be240, 0.002); end
  def test_intermediate_output_bf240; assert_in_epsilon(944.2877673448872, worksheet.intermediate_output_bf240, 0.002); end
  def test_intermediate_output_bg240; assert_in_epsilon(939.9734500000004, worksheet.intermediate_output_bg240, 0.002); end
  def test_intermediate_output_bh240; assert_in_epsilon(935.1007250000002, worksheet.intermediate_output_bh240, 0.002); end
  def test_intermediate_output_bi240; assert_in_epsilon(930.2280000000001, worksheet.intermediate_output_bi240, 0.002); end
  def test_intermediate_output_c241; assert_equal("V", worksheet.intermediate_output_c241); end
  def test_intermediate_output_d241; assert_equal("V.04", worksheet.intermediate_output_d241); end
  def test_intermediate_output_e241; assert_equal("Liquid hydrocarbons", worksheet.intermediate_output_e241); end
  def test_intermediate_output_aj241; assert_in_delta(0.0, (worksheet.intermediate_output_aj241||0), 0.002); end
  def test_intermediate_output_ak241; assert_in_delta(0.0, (worksheet.intermediate_output_ak241||0), 0.002); end
  def test_intermediate_output_al241; assert_in_delta(0.0, (worksheet.intermediate_output_al241||0), 0.002); end
  def test_intermediate_output_am241; assert_in_delta(0.0, (worksheet.intermediate_output_am241||0), 0.002); end
  def test_intermediate_output_an241; assert_in_delta(0.0, (worksheet.intermediate_output_an241||0), 0.002); end
  def test_intermediate_output_ao241; assert_in_delta(0.0, (worksheet.intermediate_output_ao241||0), 0.002); end
  def test_intermediate_output_ap241; assert_in_delta(0.0, (worksheet.intermediate_output_ap241||0), 0.002); end
  def test_intermediate_output_aq241; assert_in_delta(0.861215638, worksheet.intermediate_output_aq241, 0.002); end
  def test_intermediate_output_ar241; assert_in_epsilon(3.313229379, worksheet.intermediate_output_ar241, 0.002); end
  def test_intermediate_output_as241; assert_in_epsilon(5.483743472, worksheet.intermediate_output_as241, 0.002); end
  def test_intermediate_output_at241; assert_in_epsilon(9.878952814, worksheet.intermediate_output_at241, 0.002); end
  def test_intermediate_output_au241; assert_in_epsilon(12.07762885, worksheet.intermediate_output_au241, 0.002); end
  def test_intermediate_output_av241; assert_in_epsilon(15.06624188, worksheet.intermediate_output_av241, 0.002); end
  def test_intermediate_output_aw241; assert_equal("Calculation", worksheet.intermediate_output_aw241); end
  def test_intermediate_output_ay241; assert_in_delta(0.0, (worksheet.intermediate_output_ay241||0), 0.002); end
  def test_intermediate_output_ba241; assert_in_delta(0.13142242804166665, worksheet.intermediate_output_ba241, 0.002); end
  def test_intermediate_output_bb241; assert_in_epsilon(3.0140876139388606, worksheet.intermediate_output_bb241, 0.002); end
  def test_intermediate_output_bc241; assert_in_epsilon(6.640349805567526, worksheet.intermediate_output_bc241, 0.002); end
  def test_intermediate_output_bd241; assert_in_epsilon(11.174550655547504, worksheet.intermediate_output_bd241, 0.002); end
  def test_intermediate_output_be241; assert_in_epsilon(16.858011722794185, worksheet.intermediate_output_be241, 0.002); end
  def test_intermediate_output_bf241; assert_in_epsilon(23.81237420320716, worksheet.intermediate_output_bf241, 0.002); end
  def test_intermediate_output_bg241; assert_in_epsilon(32.28279205089418, worksheet.intermediate_output_bg241, 0.002); end
  def test_intermediate_output_bh241; assert_in_epsilon(42.4432602465375, worksheet.intermediate_output_bh241, 0.002); end
  def test_intermediate_output_bi241; assert_in_epsilon(54.65693393750001, worksheet.intermediate_output_bi241, 0.002); end
  def test_intermediate_output_c242; assert_equal("V", worksheet.intermediate_output_c242); end
  def test_intermediate_output_d242; assert_equal("V.05", worksheet.intermediate_output_d242); end
  def test_intermediate_output_e242; assert_equal("Gaseous hydrocarbons", worksheet.intermediate_output_e242); end
  def test_intermediate_output_aj242; assert_in_epsilon(4.679912, worksheet.intermediate_output_aj242, 0.002); end
  def test_intermediate_output_ak242; assert_in_epsilon(6.65236, worksheet.intermediate_output_ak242, 0.002); end
  def test_intermediate_output_al242; assert_in_epsilon(8.5030419, worksheet.intermediate_output_al242, 0.002); end
  def test_intermediate_output_am242; assert_in_epsilon(9.7205866, worksheet.intermediate_output_am242, 0.002); end
  def test_intermediate_output_an242; assert_in_epsilon(10.375123, worksheet.intermediate_output_an242, 0.002); end
  def test_intermediate_output_ao242; assert_in_epsilon(12.654603, worksheet.intermediate_output_ao242, 0.002); end
  def test_intermediate_output_ap242; assert_in_epsilon(17.4844257, worksheet.intermediate_output_ap242, 0.002); end
  def test_intermediate_output_aq242; assert_in_epsilon(18.91593462, worksheet.intermediate_output_aq242, 0.002); end
  def test_intermediate_output_ar242; assert_in_epsilon(19.24482717, worksheet.intermediate_output_ar242, 0.002); end
  def test_intermediate_output_as242; assert_in_epsilon(20.29461125, worksheet.intermediate_output_as242, 0.002); end
  def test_intermediate_output_at242; assert_in_epsilon(20.91263605, worksheet.intermediate_output_at242, 0.002); end
  def test_intermediate_output_au242; assert_in_epsilon(21.92331406, worksheet.intermediate_output_au242, 0.002); end
  def test_intermediate_output_av242; assert_in_epsilon(22.89564828, worksheet.intermediate_output_av242, 0.002); end
  def test_intermediate_output_aw242; assert_equal("Calculation", worksheet.intermediate_output_aw242); end
  def test_intermediate_output_ay242; assert_in_epsilon(9.177777777777777, worksheet.intermediate_output_ay242, 0.002); end
  def test_intermediate_output_ba242; assert_in_epsilon(10.305777777777783, worksheet.intermediate_output_ba242, 0.002); end
  def test_intermediate_output_bb242; assert_in_epsilon(11.34601666666667, worksheet.intermediate_output_bb242, 0.002); end
  def test_intermediate_output_bc242; assert_in_epsilon(12.38625555555556, worksheet.intermediate_output_bc242, 0.002); end
  def test_intermediate_output_bd242; assert_in_epsilon(13.426494444444447, worksheet.intermediate_output_bd242, 0.002); end
  def test_intermediate_output_be242; assert_in_epsilon(14.466733333333337, worksheet.intermediate_output_be242, 0.002); end
  def test_intermediate_output_bf242; assert_in_epsilon(14.832036478670412, worksheet.intermediate_output_bf242, 0.002); end
  def test_intermediate_output_bg242; assert_in_epsilon(15.206563986198885, worksheet.intermediate_output_bg242, 0.002); end
  def test_intermediate_output_bh242; assert_in_epsilon(15.590548782623422, worksheet.intermediate_output_bh242, 0.002); end
  def test_intermediate_output_bi242; assert_in_epsilon(15.984229676339865, worksheet.intermediate_output_bi242, 0.002); end
  def test_intermediate_output_ay245; assert_in_delta(1.0, worksheet.intermediate_output_ay245, 0.002); end
  def test_intermediate_output_b246; assert_equal("Primary supply, format for web-based interface", worksheet.intermediate_output_b246); end
  def test_intermediate_output_c248; assert_equal("N.01", worksheet.intermediate_output_c248); end
  def test_intermediate_output_d248; assert_equal("Nuclear fission", worksheet.intermediate_output_d248); end
  def test_intermediate_output_e248; assert_in_delta(0.0, (worksheet.intermediate_output_e248||0), 0.002); end
  def test_intermediate_output_f248; assert_in_delta(0.0, (worksheet.intermediate_output_f248||0), 0.002); end
  def test_intermediate_output_ax248; assert_in_delta(0.0, (worksheet.intermediate_output_ax248||0), 0.002); end
  def test_intermediate_output_ay248; assert_in_epsilon(80.94774857142859, worksheet.intermediate_output_ay248, 0.002); end
  def test_intermediate_output_ba248; assert_in_epsilon(93.77115428571429, worksheet.intermediate_output_ba248, 0.002); end
  def test_intermediate_output_bb248; assert_in_epsilon(199.9649828571429, worksheet.intermediate_output_bb248, 0.002); end
  def test_intermediate_output_bc248; assert_in_epsilon(193.55328000000003, worksheet.intermediate_output_bc248, 0.002); end
  def test_intermediate_output_bd248; assert_in_epsilon(193.55328000000003, worksheet.intermediate_output_bd248, 0.002); end
  def test_intermediate_output_be248; assert_in_epsilon(189.54596571428576, worksheet.intermediate_output_be248, 0.002); end
  def test_intermediate_output_bf248; assert_in_epsilon(180.72987428571432, worksheet.intermediate_output_bf248, 0.002); end
  def test_intermediate_output_bg248; assert_in_epsilon(176.3218285714286, worksheet.intermediate_output_bg248, 0.002); end
  def test_intermediate_output_bh248; assert_in_epsilon(167.50573714285716, worksheet.intermediate_output_bh248, 0.002); end
  def test_intermediate_output_bi248; assert_in_epsilon(167.50573714285716, worksheet.intermediate_output_bi248, 0.002); end
  def test_intermediate_output_c249; assert_equal("R.01", worksheet.intermediate_output_c249); end
  def test_intermediate_output_d249; assert_equal("Solar", worksheet.intermediate_output_d249); end
  def test_intermediate_output_e249; assert_in_delta(0.0, (worksheet.intermediate_output_e249||0), 0.002); end
  def test_intermediate_output_f249; assert_in_delta(0.0, (worksheet.intermediate_output_f249||0), 0.002); end
  def test_intermediate_output_ax249; assert_in_delta(0.0, (worksheet.intermediate_output_ax249||0), 0.002); end
  def test_intermediate_output_ay249; assert_in_delta(0.0, (worksheet.intermediate_output_ay249||0), 0.002); end
  def test_intermediate_output_ba249; assert_in_epsilon(1.56727314, worksheet.intermediate_output_ba249, 0.002); end
  def test_intermediate_output_bb249; assert_in_epsilon(10.911534564022219, worksheet.intermediate_output_bb249, 0.002); end
  def test_intermediate_output_bc249; assert_in_epsilon(27.26546309941403, worksheet.intermediate_output_bc249, 0.002); end
  def test_intermediate_output_bd249; assert_in_epsilon(48.89299422565567, worksheet.intermediate_output_bd249, 0.002); end
  def test_intermediate_output_be249; assert_in_epsilon(74.07697845643895, worksheet.intermediate_output_be249, 0.002); end
  def test_intermediate_output_bf249; assert_in_epsilon(96.03124385430904, worksheet.intermediate_output_bf249, 0.002); end
  def test_intermediate_output_bg249; assert_in_epsilon(108.31259745899473, worksheet.intermediate_output_bg249, 0.002); end
  def test_intermediate_output_bh249; assert_in_epsilon(106.27845543771349, worksheet.intermediate_output_bh249, 0.002); end
  def test_intermediate_output_bi249; assert_in_epsilon(92.93002046477042, worksheet.intermediate_output_bi249, 0.002); end
  def test_intermediate_output_c250; assert_equal("R.02", worksheet.intermediate_output_c250); end
  def test_intermediate_output_d250; assert_equal("Wind", worksheet.intermediate_output_d250); end
  def test_intermediate_output_e250; assert_in_delta(0.0, (worksheet.intermediate_output_e250||0), 0.002); end
  def test_intermediate_output_f250; assert_in_delta(0.0, (worksheet.intermediate_output_f250||0), 0.002); end
  def test_intermediate_output_ax250; assert_in_delta(0.0, (worksheet.intermediate_output_ax250||0), 0.002); end
  def test_intermediate_output_ay250; assert_in_epsilon(12.437183268, worksheet.intermediate_output_ay250, 0.002); end
  def test_intermediate_output_ba250; assert_in_epsilon(18.7222492332, worksheet.intermediate_output_ba250, 0.002); end
  def test_intermediate_output_bb250; assert_in_epsilon(36.6048892332, worksheet.intermediate_output_bb250, 0.002); end
  def test_intermediate_output_bc250; assert_in_epsilon(59.9662792332, worksheet.intermediate_output_bc250, 0.002); end
  def test_intermediate_output_bd250; assert_in_epsilon(84.3357592332, worksheet.intermediate_output_bd250, 0.002); end
  def test_intermediate_output_be250; assert_in_epsilon(115.49888923319999, worksheet.intermediate_output_be250, 0.002); end
  def test_intermediate_output_bf250; assert_in_epsilon(136.9861259652, worksheet.intermediate_output_bf250, 0.002); end
  def test_intermediate_output_bg250; assert_in_epsilon(151.03817999999998, worksheet.intermediate_output_bg250, 0.002); end
  def test_intermediate_output_bh250; assert_in_epsilon(161.16290999999998, worksheet.intermediate_output_bh250, 0.002); end
  def test_intermediate_output_bi250; assert_in_epsilon(161.95184999999998, worksheet.intermediate_output_bi250, 0.002); end
  def test_intermediate_output_c251; assert_equal("R.06", worksheet.intermediate_output_c251); end
  def test_intermediate_output_d251; assert_equal("Hydro", worksheet.intermediate_output_d251); end
  def test_intermediate_output_e251; assert_in_delta(0.0, (worksheet.intermediate_output_e251||0), 0.002); end
  def test_intermediate_output_f251; assert_in_delta(0.0, (worksheet.intermediate_output_f251||0), 0.002); end
  def test_intermediate_output_ax251; assert_in_delta(0.0, (worksheet.intermediate_output_ax251||0), 0.002); end
  def test_intermediate_output_ay251; assert_in_epsilon(128.510594388, worksheet.intermediate_output_ay251, 0.002); end
  def test_intermediate_output_ba251; assert_in_epsilon(155.84385898800002, worksheet.intermediate_output_ba251, 0.002); end
  def test_intermediate_output_bb251; assert_in_epsilon(189.41763898800005, worksheet.intermediate_output_bb251, 0.002); end
  def test_intermediate_output_bc251; assert_in_epsilon(195.75107398800003, worksheet.intermediate_output_bc251, 0.002); end
  def test_intermediate_output_bd251; assert_in_epsilon(199.56428398800003, worksheet.intermediate_output_bd251, 0.002); end
  def test_intermediate_output_be251; assert_in_epsilon(203.46515398800005, worksheet.intermediate_output_be251, 0.002); end
  def test_intermediate_output_bf251; assert_in_epsilon(205.43750398800003, worksheet.intermediate_output_bf251, 0.002); end
  def test_intermediate_output_bg251; assert_in_epsilon(205.71585955200004, worksheet.intermediate_output_bg251, 0.002); end
  def test_intermediate_output_bh251; assert_in_epsilon(206.60431118400004, worksheet.intermediate_output_bh251, 0.002); end
  def test_intermediate_output_bi251; assert_in_epsilon(207.19601618400003, worksheet.intermediate_output_bi251, 0.002); end
  def test_intermediate_output_c252; assert_equal("Y.02", worksheet.intermediate_output_c252); end
  def test_intermediate_output_d252; assert_equal("Electricity oversupply (imports)", worksheet.intermediate_output_d252); end
  def test_intermediate_output_e252; assert_in_delta(0.0, (worksheet.intermediate_output_e252||0), 0.002); end
  def test_intermediate_output_f252; assert_in_delta(0.0, (worksheet.intermediate_output_f252||0), 0.002); end
  def test_intermediate_output_ax252; assert_in_delta(0.0, (worksheet.intermediate_output_ax252||0), 0.002); end
  def test_intermediate_output_ay252; assert_in_delta(1.0, worksheet.intermediate_output_ay252, 0.002); end
  def test_intermediate_output_ba252; assert_in_delta(0.0, (worksheet.intermediate_output_ba252||0), 0.002); end
  def test_intermediate_output_bb252; assert_in_epsilon(14.000000000000455, worksheet.intermediate_output_bb252, 0.002); end
  def test_intermediate_output_bc252; assert_in_epsilon(21.000000000000227, worksheet.intermediate_output_bc252, 0.002); end
  def test_intermediate_output_bd252; assert_in_epsilon(30.999999999999545, worksheet.intermediate_output_bd252, 0.002); end
  def test_intermediate_output_be252; assert_in_epsilon(39.999999999999545, worksheet.intermediate_output_be252, 0.002); end
  def test_intermediate_output_bf252; assert_in_epsilon(49.0, worksheet.intermediate_output_bf252, 0.002); end
  def test_intermediate_output_bg252; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bg252, 0.002); end
  def test_intermediate_output_bh252; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bh252, 0.002); end
  def test_intermediate_output_bi252; assert_in_epsilon(55.00000000000091, worksheet.intermediate_output_bi252, 0.002); end
  def test_intermediate_output_d253; assert_equal("Bio Energy", worksheet.intermediate_output_d253); end
  def test_intermediate_output_e253; assert_in_delta(0.0, (worksheet.intermediate_output_e253||0), 0.002); end
  def test_intermediate_output_f253; assert_in_delta(0.0, (worksheet.intermediate_output_f253||0), 0.002); end
  def test_intermediate_output_ax253; assert_in_delta(0.0, (worksheet.intermediate_output_ax253||0), 0.002); end
  def test_intermediate_output_ay253; assert_in_epsilon(946.4113333333333, worksheet.intermediate_output_ay253, 0.002); end
  def test_intermediate_output_ba253; assert_in_epsilon(958.8470002058194, worksheet.intermediate_output_ba253, 0.002); end
  def test_intermediate_output_bb253; assert_in_epsilon(961.8650189282341, worksheet.intermediate_output_bb253, 0.002); end
  def test_intermediate_output_bc253; assert_in_epsilon(965.6664720841875, worksheet.intermediate_output_bc253, 0.002); end
  def test_intermediate_output_bd253; assert_in_epsilon(970.4161012972642, worksheet.intermediate_output_bd253, 0.002); end
  def test_intermediate_output_be253; assert_in_epsilon(976.3556321130858, worksheet.intermediate_output_be253, 0.002); end
  def test_intermediate_output_bf253; assert_in_epsilon(982.9321780267647, worksheet.intermediate_output_bf253, 0.002); end
  def test_intermediate_output_bg253; assert_in_epsilon(987.4628060370934, worksheet.intermediate_output_bg253, 0.002); end
  def test_intermediate_output_bh253; assert_in_epsilon(993.1345340291612, worksheet.intermediate_output_bh253, 0.002); end
  def test_intermediate_output_bi253; assert_in_epsilon(1000.8691636138399, worksheet.intermediate_output_bi253, 0.002); end
  def test_intermediate_output_d254; assert_equal("Coal", worksheet.intermediate_output_d254); end
  def test_intermediate_output_e254; assert_in_delta(0.0, (worksheet.intermediate_output_e254||0), 0.002); end
  def test_intermediate_output_f254; assert_in_delta(0.0, (worksheet.intermediate_output_f254||0), 0.002); end
  def test_intermediate_output_ax254; assert_in_delta(0.0, (worksheet.intermediate_output_ax254||0), 0.002); end
  def test_intermediate_output_ay254; assert_in_epsilon(2316.2462455929053, worksheet.intermediate_output_ay254, 0.002); end
  def test_intermediate_output_ba254; assert_in_epsilon(3231.2891907848016, worksheet.intermediate_output_ba254, 0.002); end
  def test_intermediate_output_bb254; assert_in_epsilon(4462.503887290408, worksheet.intermediate_output_bb254, 0.002); end
  def test_intermediate_output_bc254; assert_in_epsilon(6598.88128677681, worksheet.intermediate_output_bc254, 0.002); end
  def test_intermediate_output_bd254; assert_in_epsilon(9254.087381597043, worksheet.intermediate_output_bd254, 0.002); end
  def test_intermediate_output_be254; assert_in_epsilon(12761.051030415647, worksheet.intermediate_output_be254, 0.002); end
  def test_intermediate_output_bf254; assert_in_epsilon(15968.22702305533, worksheet.intermediate_output_bf254, 0.002); end
  def test_intermediate_output_bg254; assert_in_epsilon(19511.688080601638, worksheet.intermediate_output_bg254, 0.002); end
  def test_intermediate_output_bh254; assert_in_epsilon(22662.11615171353, worksheet.intermediate_output_bh254, 0.002); end
  def test_intermediate_output_bi254; assert_in_epsilon(26194.760503822457, worksheet.intermediate_output_bi254, 0.002); end
  def test_intermediate_output_d255; assert_equal("Oil", worksheet.intermediate_output_d255); end
  def test_intermediate_output_e255; assert_in_delta(0.0, (worksheet.intermediate_output_e255||0), 0.002); end
  def test_intermediate_output_f255; assert_in_delta(0.0, (worksheet.intermediate_output_f255||0), 0.002); end
  def test_intermediate_output_ax255; assert_in_delta(0.0, (worksheet.intermediate_output_ax255||0), 0.002); end
  def test_intermediate_output_ay255; assert_in_epsilon(1630.7747640445418, worksheet.intermediate_output_ay255, 0.002); end
  def test_intermediate_output_ba255; assert_in_epsilon(1902.1640716311465, worksheet.intermediate_output_ba255, 0.002); end
  def test_intermediate_output_bb255; assert_in_epsilon(2574.5516411829576, worksheet.intermediate_output_bb255, 0.002); end
  def test_intermediate_output_bc255; assert_in_epsilon(3472.789243443321, worksheet.intermediate_output_bc255, 0.002); end
  def test_intermediate_output_bd255; assert_in_epsilon(4562.3244800308585, worksheet.intermediate_output_bd255, 0.002); end
  def test_intermediate_output_be255; assert_in_epsilon(5850.891054117246, worksheet.intermediate_output_be255, 0.002); end
  def test_intermediate_output_bf255; assert_in_epsilon(7335.679266546061, worksheet.intermediate_output_bf255, 0.002); end
  def test_intermediate_output_bg255; assert_in_epsilon(8828.355775329557, worksheet.intermediate_output_bg255, 0.002); end
  def test_intermediate_output_bh255; assert_in_epsilon(10507.450312605853, worksheet.intermediate_output_bh255, 0.002); end
  def test_intermediate_output_bi255; assert_in_epsilon(12422.63002168031, worksheet.intermediate_output_bi255, 0.002); end
  def test_intermediate_output_d256; assert_equal("Natural gas", worksheet.intermediate_output_d256); end
  def test_intermediate_output_e256; assert_in_delta(0.0, (worksheet.intermediate_output_e256||0), 0.002); end
  def test_intermediate_output_f256; assert_in_delta(0.0, (worksheet.intermediate_output_f256||0), 0.002); end
  def test_intermediate_output_ax256; assert_in_delta(0.0, (worksheet.intermediate_output_ax256||0), 0.002); end
  def test_intermediate_output_ay256; assert_in_epsilon(430.87022875762193, worksheet.intermediate_output_ay256, 0.002); end
  def test_intermediate_output_ba256; assert_in_epsilon(581.2480621218025, worksheet.intermediate_output_ba256, 0.002); end
  def test_intermediate_output_bb256; assert_in_epsilon(921.323614020371, worksheet.intermediate_output_bb256, 0.002); end
  def test_intermediate_output_bc256; assert_in_epsilon(1089.3245670754293, worksheet.intermediate_output_bc256, 0.002); end
  def test_intermediate_output_bd256; assert_in_epsilon(1260.1737602798842, worksheet.intermediate_output_bd256, 0.002); end
  def test_intermediate_output_be256; assert_in_epsilon(1472.0196128987889, worksheet.intermediate_output_be256, 0.002); end
  def test_intermediate_output_bf256; assert_in_epsilon(1708.5020369279832, worksheet.intermediate_output_bf256, 0.002); end
  def test_intermediate_output_bg256; assert_in_epsilon(1969.5559610432313, worksheet.intermediate_output_bg256, 0.002); end
  def test_intermediate_output_bh256; assert_in_epsilon(2252.8472290441127, worksheet.intermediate_output_bh256, 0.002); end
  def test_intermediate_output_bi256; assert_in_epsilon(2577.2839355299016, worksheet.intermediate_output_bi256, 0.002); end
  def test_intermediate_output_d257; assert_equal("Renewables and Clean Energy", worksheet.intermediate_output_d257); end
  def test_intermediate_output_ay257; assert_in_epsilon(221.89552622742858, worksheet.intermediate_output_ay257, 0.002); end
  def test_intermediate_output_az257; assert_in_delta(0.0, (worksheet.intermediate_output_az257||0), 0.002); end
  def test_intermediate_output_ba257; assert_in_epsilon(269.9045356469143, worksheet.intermediate_output_ba257, 0.002); end
  def test_intermediate_output_bb257; assert_in_epsilon(436.8990456423652, worksheet.intermediate_output_bb257, 0.002); end
  def test_intermediate_output_bc257; assert_in_epsilon(476.5360963206141, worksheet.intermediate_output_bc257, 0.002); end
  def test_intermediate_output_bd257; assert_in_epsilon(526.3463174468558, worksheet.intermediate_output_bd257, 0.002); end
  def test_intermediate_output_be257; assert_in_epsilon(582.5869873919248, worksheet.intermediate_output_be257, 0.002); end
  def test_intermediate_output_bf257; assert_in_epsilon(619.1847480932233, worksheet.intermediate_output_bf257, 0.002); end
  def test_intermediate_output_bg257; assert_in_epsilon(641.3884655824234, worksheet.intermediate_output_bg257, 0.002); end
  def test_intermediate_output_bh257; assert_in_epsilon(641.5514137645707, worksheet.intermediate_output_bh257, 0.002); end
  def test_intermediate_output_bi257; assert_in_epsilon(629.5836237916276, worksheet.intermediate_output_bi257, 0.002); end
  def test_intermediate_output_d258; assert_equal("Total Primary Supply", worksheet.intermediate_output_d258); end
  def test_intermediate_output_e258; assert_in_delta(0.0, (worksheet.intermediate_output_e258||0), 0.002); end
  def test_intermediate_output_f258; assert_in_delta(0.0, (worksheet.intermediate_output_f258||0), 0.002); end
  def test_intermediate_output_ax258; assert_in_delta(0.0, (worksheet.intermediate_output_ax258||0), 0.002); end
  def test_intermediate_output_ay258; assert_in_epsilon(5547.19809795583, worksheet.intermediate_output_ay258, 0.002); end
  def test_intermediate_output_ba258; assert_in_epsilon(6943.452860390485, worksheet.intermediate_output_ba258, 0.002); end
  def test_intermediate_output_bb258; assert_in_epsilon(9371.143207064337, worksheet.intermediate_output_bb258, 0.002); end
  def test_intermediate_output_bc258; assert_in_epsilon(12624.197665700363, worksheet.intermediate_output_bc258, 0.002); end
  def test_intermediate_output_bd258; assert_in_epsilon(16604.348040651905, worksheet.intermediate_output_bd258, 0.002); end
  def test_intermediate_output_be258; assert_in_epsilon(21682.904316936692, worksheet.intermediate_output_be258, 0.002); end
  def test_intermediate_output_bf258; assert_in_epsilon(26663.52525264936, worksheet.intermediate_output_bf258, 0.002); end
  def test_intermediate_output_bg258; assert_in_epsilon(31993.451088593945, worksheet.intermediate_output_bg258, 0.002); end
  def test_intermediate_output_bh258; assert_in_epsilon(37112.09964115723, worksheet.intermediate_output_bh258, 0.002); end
  def test_intermediate_output_bi258; assert_in_epsilon(42880.12724843814, worksheet.intermediate_output_bi258, 0.002); end
  def test_intermediate_output_d259; assert_equal("Imported Hydrocarbons", worksheet.intermediate_output_d259); end
  def test_intermediate_output_f259; assert_in_delta(0.0, (worksheet.intermediate_output_f259||0), 0.002); end
  def test_intermediate_output_ax259; assert_in_delta(0.0, (worksheet.intermediate_output_ax259||0), 0.002); end
  def test_intermediate_output_ay259; assert_in_epsilon(1764.6477344664975, worksheet.intermediate_output_ay259, 0.002); end
  def test_intermediate_output_ba259; assert_in_epsilon(2211.900186323465, worksheet.intermediate_output_ba259, 0.002); end
  def test_intermediate_output_bb259; assert_in_epsilon(4041.6393063143514, worksheet.intermediate_output_bb259, 0.002); end
  def test_intermediate_output_bc259; assert_in_epsilon(6836.014728851621, worksheet.intermediate_output_bc259, 0.002); end
  def test_intermediate_output_bd259; assert_in_epsilon(10435.36804343619, worksheet.intermediate_output_bd259, 0.002); end
  def test_intermediate_output_be259; assert_in_epsilon(15310.647260824242, worksheet.intermediate_output_be259, 0.002); end
  def test_intermediate_output_bf259; assert_in_epsilon(20134.339826515105, worksheet.intermediate_output_bf259, 0.002); end
  def test_intermediate_output_bg259; assert_in_epsilon(26010.259463094935, worksheet.intermediate_output_bg259, 0.002); end
  def test_intermediate_output_bh259; assert_in_epsilon(31596.394536635606, worksheet.intermediate_output_bh259, 0.002); end
  def test_intermediate_output_bi259; assert_in_epsilon(37776.95724641178, worksheet.intermediate_output_bi259, 0.002); end
  def test_intermediate_output_d260; assert_equal("Primary demand", worksheet.intermediate_output_d260); end
  def test_intermediate_output_ax260; assert_in_delta(0.0, (worksheet.intermediate_output_ax260||0), 0.002); end
  def test_intermediate_output_ay260; assert_in_epsilon(5547.198097955831, worksheet.intermediate_output_ay260, 0.002); end
  def test_intermediate_output_ba260; assert_in_epsilon(6941.988889505033, worksheet.intermediate_output_ba260, 0.002); end
  def test_intermediate_output_bb260; assert_in_epsilon(9371.143207064337, worksheet.intermediate_output_bb260, 0.002); end
  def test_intermediate_output_bc260; assert_in_epsilon(12624.197665700363, worksheet.intermediate_output_bc260, 0.002); end
  def test_intermediate_output_bd260; assert_in_epsilon(16604.34804065191, worksheet.intermediate_output_bd260, 0.002); end
  def test_intermediate_output_be260; assert_in_epsilon(21682.904316936692, worksheet.intermediate_output_be260, 0.002); end
  def test_intermediate_output_bf260; assert_in_epsilon(26663.52525264936, worksheet.intermediate_output_bf260, 0.002); end
  def test_intermediate_output_bg260; assert_in_epsilon(31993.451088593945, worksheet.intermediate_output_bg260, 0.002); end
  def test_intermediate_output_bh260; assert_in_epsilon(37112.099641157234, worksheet.intermediate_output_bh260, 0.002); end
  def test_intermediate_output_bi260; assert_in_epsilon(42880.12724843814, worksheet.intermediate_output_bi260, 0.002); end
  def test_intermediate_output_d261; assert_equal("Do-nothing Scenario", worksheet.intermediate_output_d261); end
  def test_intermediate_output_ay261; assert_in_epsilon(5547.198097955831, worksheet.intermediate_output_ay261, 0.002); end
  def test_intermediate_output_ba261; assert_in_epsilon(6941.988889505033, worksheet.intermediate_output_ba261, 0.002); end
  def test_intermediate_output_bb261; assert_in_epsilon(9371.143207064337, worksheet.intermediate_output_bb261, 0.002); end
  def test_intermediate_output_bc261; assert_in_epsilon(12624.197665700363, worksheet.intermediate_output_bc261, 0.002); end
  def test_intermediate_output_bd261; assert_in_epsilon(16604.34804065191, worksheet.intermediate_output_bd261, 0.002); end
  def test_intermediate_output_be261; assert_in_epsilon(21682.904316936692, worksheet.intermediate_output_be261, 0.002); end
  def test_intermediate_output_bf261; assert_in_epsilon(26663.52525264936, worksheet.intermediate_output_bf261, 0.002); end
  def test_intermediate_output_bg261; assert_in_epsilon(31993.451088593945, worksheet.intermediate_output_bg261, 0.002); end
  def test_intermediate_output_bh261; assert_in_epsilon(37112.099641157234, worksheet.intermediate_output_bh261, 0.002); end
  def test_intermediate_output_bi261; assert_in_epsilon(42880.12724843814, worksheet.intermediate_output_bi261, 0.002); end
  def test_intermediate_output_b267; assert_equal("Electricity, format for web-based interface", worksheet.intermediate_output_b267); end
  def test_intermediate_output_c269; assert_equal("V.01", worksheet.intermediate_output_c269); end
  def test_intermediate_output_ay269; assert_equal("2007", worksheet.intermediate_output_ay269); end
  def test_intermediate_output_ba269; assert_equal("2012", worksheet.intermediate_output_ba269); end
  def test_intermediate_output_bb269; assert_equal("2017", worksheet.intermediate_output_bb269); end
  def test_intermediate_output_bc269; assert_equal("2022", worksheet.intermediate_output_bc269); end
  def test_intermediate_output_bd269; assert_equal("2027", worksheet.intermediate_output_bd269); end
  def test_intermediate_output_be269; assert_equal("2032", worksheet.intermediate_output_be269); end
  def test_intermediate_output_bf269; assert_equal("2037", worksheet.intermediate_output_bf269); end
  def test_intermediate_output_bg269; assert_equal("2042", worksheet.intermediate_output_bg269); end
  def test_intermediate_output_bh269; assert_equal("2047", worksheet.intermediate_output_bh269); end
  def test_intermediate_output_bi269; assert_equal("2052", worksheet.intermediate_output_bi269); end
  def test_intermediate_output_bj269; assert_equal("TWh", worksheet.intermediate_output_bj269); end
  def test_intermediate_output_c271; assert_equal("X.a", worksheet.intermediate_output_c271); end
  def test_intermediate_output_d271; assert_equal("Domestic Lighting & Appliances", worksheet.intermediate_output_d271); end
  def test_intermediate_output_ay271; assert_in_epsilon(117.7523722493629, worksheet.intermediate_output_ay271, 0.002); end
  def test_intermediate_output_ba271; assert_in_epsilon(162.8229405663922, worksheet.intermediate_output_ba271, 0.002); end
  def test_intermediate_output_bb271; assert_in_epsilon(294.1978328715296, worksheet.intermediate_output_bb271, 0.002); end
  def test_intermediate_output_bc271; assert_in_epsilon(488.120152658904, worksheet.intermediate_output_bc271, 0.002); end
  def test_intermediate_output_bd271; assert_in_epsilon(762.138273505526, worksheet.intermediate_output_bd271, 0.002); end
  def test_intermediate_output_be271; assert_in_epsilon(1157.9120424167459, worksheet.intermediate_output_be271, 0.002); end
  def test_intermediate_output_bf271; assert_in_epsilon(1452.2441557318687, worksheet.intermediate_output_bf271, 0.002); end
  def test_intermediate_output_bg271; assert_in_epsilon(1803.3634131162555, worksheet.intermediate_output_bg271, 0.002); end
  def test_intermediate_output_bh271; assert_in_epsilon(2203.893791654689, worksheet.intermediate_output_bh271, 0.002); end
  def test_intermediate_output_bi271; assert_in_epsilon(2671.8455088986316, worksheet.intermediate_output_bi271, 0.002); end
  def test_intermediate_output_c272; assert_equal("X.b", worksheet.intermediate_output_c272); end
  def test_intermediate_output_d272; assert_equal("Commercial Lighting & Appliances", worksheet.intermediate_output_d272); end
  def test_intermediate_output_ay272; assert_in_epsilon(69.81857167070955, worksheet.intermediate_output_ay272, 0.002); end
  def test_intermediate_output_ba272; assert_in_epsilon(69.8185182074853, worksheet.intermediate_output_ba272, 0.002); end
  def test_intermediate_output_bb272; assert_in_epsilon(115.39506380103352, worksheet.intermediate_output_bb272, 0.002); end
  def test_intermediate_output_bc272; assert_in_epsilon(190.7403546122752, worksheet.intermediate_output_bc272, 0.002); end
  def test_intermediate_output_bd272; assert_in_epsilon(315.3108276463584, worksheet.intermediate_output_bd272, 0.002); end
  def test_intermediate_output_be272; assert_in_epsilon(521.2826104810658, worksheet.intermediate_output_be272, 0.002); end
  def test_intermediate_output_bf272; assert_in_epsilon(689.4051063589067, worksheet.intermediate_output_bf272, 0.002); end
  def test_intermediate_output_bg272; assert_in_epsilon(911.749902556425, worksheet.intermediate_output_bg272, 0.002); end
  def test_intermediate_output_bh272; assert_in_epsilon(970.175284639915, worksheet.intermediate_output_bh272, 0.002); end
  def test_intermediate_output_bi272; assert_in_epsilon(1032.3445308366922, worksheet.intermediate_output_bi272, 0.002); end
  def test_intermediate_output_c273; assert_equal("XII.a", worksheet.intermediate_output_c273); end
  def test_intermediate_output_d273; assert_equal("Domestic passenger transport", worksheet.intermediate_output_d273); end
  def test_intermediate_output_ay273; assert_in_epsilon(7.804557892034429, worksheet.intermediate_output_ay273, 0.002); end
  def test_intermediate_output_ba273; assert_in_epsilon(7.804557892034429, worksheet.intermediate_output_ba273, 0.002); end
  def test_intermediate_output_bb273; assert_in_epsilon(9.98120573742474, worksheet.intermediate_output_bb273, 0.002); end
  def test_intermediate_output_bc273; assert_in_epsilon(12.677744583468431, worksheet.intermediate_output_bc273, 0.002); end
  def test_intermediate_output_bd273; assert_in_epsilon(15.183119042462815, worksheet.intermediate_output_bd273, 0.002); end
  def test_intermediate_output_be273; assert_in_epsilon(17.97800145980359, worksheet.intermediate_output_be273, 0.002); end
  def test_intermediate_output_bf273; assert_in_epsilon(20.996398618954622, worksheet.intermediate_output_bf273, 0.002); end
  def test_intermediate_output_bg273; assert_in_epsilon(23.918000610343412, worksheet.intermediate_output_bg273, 0.002); end
  def test_intermediate_output_bh273; assert_in_epsilon(26.47001683994065, worksheet.intermediate_output_bh273, 0.002); end
  def test_intermediate_output_bi273; assert_in_epsilon(28.239990009727272, worksheet.intermediate_output_bi273, 0.002); end
  def test_intermediate_output_c274; assert_equal("XII.b", worksheet.intermediate_output_c274); end
  def test_intermediate_output_d274; assert_equal("Domestic freight", worksheet.intermediate_output_d274); end
  def test_intermediate_output_ay274; assert_in_epsilon(6.371041500000006, worksheet.intermediate_output_ay274, 0.002); end
  def test_intermediate_output_ba274; assert_in_epsilon(6.371041500000006, worksheet.intermediate_output_ba274, 0.002); end
  def test_intermediate_output_bb274; assert_in_epsilon(9.40687970251694, worksheet.intermediate_output_bb274, 0.002); end
  def test_intermediate_output_bc274; assert_in_epsilon(13.140797584316113, worksheet.intermediate_output_bc274, 0.002); end
  def test_intermediate_output_bd274; assert_in_epsilon(17.610110958084224, worksheet.intermediate_output_bd274, 0.002); end
  def test_intermediate_output_be274; assert_in_epsilon(22.892634286083435, worksheet.intermediate_output_be274, 0.002); end
  def test_intermediate_output_bf274; assert_in_epsilon(28.404926019576415, worksheet.intermediate_output_bf274, 0.002); end
  def test_intermediate_output_bg274; assert_in_epsilon(30.876418737637415, worksheet.intermediate_output_bg274, 0.002); end
  def test_intermediate_output_bh274; assert_in_epsilon(33.48478498636817, worksheet.intermediate_output_bh274, 0.002); end
  def test_intermediate_output_bi274; assert_in_epsilon(35.94665822824585, worksheet.intermediate_output_bi274, 0.002); end
  def test_intermediate_output_c275; assert_equal("XIII.a", worksheet.intermediate_output_c275); end
  def test_intermediate_output_d275; assert_equal("Domestic Cooking", worksheet.intermediate_output_d275); end
  def test_intermediate_output_ay275; assert_in_delta(0.30660334104356374, worksheet.intermediate_output_ay275, 0.002); end
  def test_intermediate_output_ba275; assert_in_delta(0.4056812477360954, worksheet.intermediate_output_ba275, 0.002); end
  def test_intermediate_output_bb275; assert_in_epsilon(1.9119107308416539, worksheet.intermediate_output_bb275, 0.002); end
  def test_intermediate_output_bc275; assert_in_epsilon(3.0737404888957927, worksheet.intermediate_output_bc275, 0.002); end
  def test_intermediate_output_bd275; assert_in_epsilon(5.987845305057132, worksheet.intermediate_output_bd275, 0.002); end
  def test_intermediate_output_be275; assert_in_epsilon(10.924338830969084, worksheet.intermediate_output_be275, 0.002); end
  def test_intermediate_output_bf275; assert_in_epsilon(14.605179460099949, worksheet.intermediate_output_bf275, 0.002); end
  def test_intermediate_output_bg275; assert_in_epsilon(19.221420721203312, worksheet.intermediate_output_bg275, 0.002); end
  def test_intermediate_output_bh275; assert_in_epsilon(25.37842895536987, worksheet.intermediate_output_bh275, 0.002); end
  def test_intermediate_output_bi275; assert_in_epsilon(29.2476501509129, worksheet.intermediate_output_bi275, 0.002); end
  def test_intermediate_output_c276; assert_equal("XIII.b", worksheet.intermediate_output_c276); end
  def test_intermediate_output_d276; assert_equal("Commercial Cooking", worksheet.intermediate_output_d276); end
  def test_intermediate_output_ay276; assert_in_delta(0.0, (worksheet.intermediate_output_ay276||0), 0.002); end
  def test_intermediate_output_ba276; assert_in_delta(0.0, (worksheet.intermediate_output_ba276||0), 0.002); end
  def test_intermediate_output_bb276; assert_in_delta(0.0, (worksheet.intermediate_output_bb276||0), 0.002); end
  def test_intermediate_output_bc276; assert_in_delta(0.0, (worksheet.intermediate_output_bc276||0), 0.002); end
  def test_intermediate_output_bd276; assert_in_delta(0.0, (worksheet.intermediate_output_bd276||0), 0.002); end
  def test_intermediate_output_be276; assert_in_delta(0.0, (worksheet.intermediate_output_be276||0), 0.002); end
  def test_intermediate_output_bf276; assert_in_delta(0.0, (worksheet.intermediate_output_bf276||0), 0.002); end
  def test_intermediate_output_bg276; assert_in_delta(0.0, (worksheet.intermediate_output_bg276||0), 0.002); end
  def test_intermediate_output_bh276; assert_in_delta(0.0, (worksheet.intermediate_output_bh276||0), 0.002); end
  def test_intermediate_output_bi276; assert_in_delta(0.0, (worksheet.intermediate_output_bi276||0), 0.002); end
  def test_intermediate_output_c277; assert_equal("XIV", worksheet.intermediate_output_c277); end
  def test_intermediate_output_d277; assert_equal("Agriculture", worksheet.intermediate_output_d277); end
  def test_intermediate_output_ay277; assert_in_epsilon(99.549, worksheet.intermediate_output_ay277, 0.002); end
  def test_intermediate_output_ba277; assert_in_epsilon(135.84360999999998, worksheet.intermediate_output_ba277, 0.002); end
  def test_intermediate_output_bb277; assert_in_epsilon(188.7750131492979, worksheet.intermediate_output_bb277, 0.002); end
  def test_intermediate_output_bc277; assert_in_epsilon(262.3257106793957, worksheet.intermediate_output_bc277, 0.002); end
  def test_intermediate_output_bd277; assert_in_epsilon(335.74068575957824, worksheet.intermediate_output_bd277, 0.002); end
  def test_intermediate_output_be277; assert_in_epsilon(428.7780628500808, worksheet.intermediate_output_be277, 0.002); end
  def test_intermediate_output_bf277; assert_in_epsilon(506.9106409238258, worksheet.intermediate_output_bf277, 0.002); end
  def test_intermediate_output_bg277; assert_in_epsilon(599.267848785967, worksheet.intermediate_output_bg277, 0.002); end
  def test_intermediate_output_bh277; assert_in_epsilon(658.5674956470099, worksheet.intermediate_output_bh277, 0.002); end
  def test_intermediate_output_bi277; assert_in_epsilon(723.7192953583711, worksheet.intermediate_output_bi277, 0.002); end
  def test_intermediate_output_c278; assert_equal("XVI", worksheet.intermediate_output_c278); end
  def test_intermediate_output_d278; assert_equal("Telecom", worksheet.intermediate_output_d278); end
  def test_intermediate_output_ay278; assert_in_epsilon(2.3668199999999997, worksheet.intermediate_output_ay278, 0.002); end
  def test_intermediate_output_ba278; assert_in_epsilon(7.8894, worksheet.intermediate_output_ba278, 0.002); end
  def test_intermediate_output_bb278; assert_in_epsilon(11.339855899466881, worksheet.intermediate_output_bb278, 0.002); end
  def test_intermediate_output_bc278; assert_in_epsilon(16.117199465438524, worksheet.intermediate_output_bc278, 0.002); end
  def test_intermediate_output_bd278; assert_in_epsilon(21.568448563930875, worksheet.intermediate_output_bd278, 0.002); end
  def test_intermediate_output_be278; assert_in_epsilon(30.55027451036736, worksheet.intermediate_output_be278, 0.002); end
  def test_intermediate_output_bf278; assert_in_epsilon(43.39132800109303, worksheet.intermediate_output_bf278, 0.002); end
  def test_intermediate_output_bg278; assert_in_epsilon(61.08823159439924, worksheet.intermediate_output_bg278, 0.002); end
  def test_intermediate_output_bh278; assert_in_epsilon(81.74983400997752, worksheet.intermediate_output_bh278, 0.002); end
  def test_intermediate_output_bi278; assert_in_epsilon(115.96370196690869, worksheet.intermediate_output_bi278, 0.002); end
  def test_intermediate_output_c279; assert_equal("XV.a", worksheet.intermediate_output_c279); end
  def test_intermediate_output_d279; assert_equal("Domestic Gas Production", worksheet.intermediate_output_d279); end
  def test_intermediate_output_ay279; assert_in_delta(0.0, (worksheet.intermediate_output_ay279||0), 0.002); end
  def test_intermediate_output_ba279; assert_in_delta(0.0, (worksheet.intermediate_output_ba279||0), 0.002); end
  def test_intermediate_output_bb279; assert_in_delta(0.0, (worksheet.intermediate_output_bb279||0), 0.002); end
  def test_intermediate_output_bc279; assert_in_delta(0.0, (worksheet.intermediate_output_bc279||0), 0.002); end
  def test_intermediate_output_bd279; assert_in_delta(0.0, (worksheet.intermediate_output_bd279||0), 0.002); end
  def test_intermediate_output_be279; assert_in_delta(0.0, (worksheet.intermediate_output_be279||0), 0.002); end
  def test_intermediate_output_bf279; assert_in_delta(0.0, (worksheet.intermediate_output_bf279||0), 0.002); end
  def test_intermediate_output_bg279; assert_in_delta(0.0, (worksheet.intermediate_output_bg279||0), 0.002); end
  def test_intermediate_output_bh279; assert_in_delta(0.0, (worksheet.intermediate_output_bh279||0), 0.002); end
  def test_intermediate_output_bi279; assert_in_delta(0.0, (worksheet.intermediate_output_bi279||0), 0.002); end
  def test_intermediate_output_c280; assert_equal("XV.b", worksheet.intermediate_output_c280); end
  def test_intermediate_output_d280; assert_equal("Domestic Coal Production", worksheet.intermediate_output_d280); end
  def test_intermediate_output_ay280; assert_in_delta(0.0, (worksheet.intermediate_output_ay280||0), 0.002); end
  def test_intermediate_output_ba280; assert_in_delta(0.0, (worksheet.intermediate_output_ba280||0), 0.002); end
  def test_intermediate_output_bb280; assert_in_delta(0.0, (worksheet.intermediate_output_bb280||0), 0.002); end
  def test_intermediate_output_bc280; assert_in_delta(0.0, (worksheet.intermediate_output_bc280||0), 0.002); end
  def test_intermediate_output_bd280; assert_in_delta(0.0, (worksheet.intermediate_output_bd280||0), 0.002); end
  def test_intermediate_output_be280; assert_in_delta(0.0, (worksheet.intermediate_output_be280||0), 0.002); end
  def test_intermediate_output_bf280; assert_in_delta(0.0, (worksheet.intermediate_output_bf280||0), 0.002); end
  def test_intermediate_output_bg280; assert_in_delta(0.0, (worksheet.intermediate_output_bg280||0), 0.002); end
  def test_intermediate_output_bh280; assert_in_delta(0.0, (worksheet.intermediate_output_bh280||0), 0.002); end
  def test_intermediate_output_bi280; assert_in_delta(0.0, (worksheet.intermediate_output_bi280||0), 0.002); end
  def test_intermediate_output_c281; assert_equal("XV.c", worksheet.intermediate_output_c281); end
  def test_intermediate_output_d281; assert_equal("Domestic Oil Production", worksheet.intermediate_output_d281); end
  def test_intermediate_output_c282; assert_equal("XVII.a", worksheet.intermediate_output_c282); end
  def test_intermediate_output_d282; assert_equal("Fossil Fuel Transfer", worksheet.intermediate_output_d282); end
  def test_intermediate_output_c283; assert_equal("XI", worksheet.intermediate_output_c283); end
  def test_intermediate_output_d283; assert_equal("Industry", worksheet.intermediate_output_d283); end
  def test_intermediate_output_ay283; assert_in_epsilon(291.7178485116746, worksheet.intermediate_output_ay283, 0.002); end
  def test_intermediate_output_ba283; assert_in_epsilon(401.235, worksheet.intermediate_output_ba283, 0.002); end
  def test_intermediate_output_bb283; assert_in_epsilon(503.1177061491396, worksheet.intermediate_output_bb283, 0.002); end
  def test_intermediate_output_bc283; assert_in_epsilon(638.2062218628469, worksheet.intermediate_output_bc283, 0.002); end
  def test_intermediate_output_bd283; assert_in_epsilon(792.4818867749141, worksheet.intermediate_output_bd283, 0.002); end
  def test_intermediate_output_be283; assert_in_epsilon(966.17848871674, worksheet.intermediate_output_be283, 0.002); end
  def test_intermediate_output_bf283; assert_in_epsilon(1200.6228340761327, worksheet.intermediate_output_bf283, 0.002); end
  def test_intermediate_output_bg283; assert_in_epsilon(1462.2792945499318, worksheet.intermediate_output_bg283, 0.002); end
  def test_intermediate_output_bh283; assert_in_epsilon(1752.1756493279522, worksheet.intermediate_output_bh283, 0.002); end
  def test_intermediate_output_bi283; assert_in_epsilon(2061.261323802787, worksheet.intermediate_output_bi283, 0.002); end
  def test_intermediate_output_d285; assert_equal("Total", worksheet.intermediate_output_d285); end
  def test_intermediate_output_ay285; assert_in_epsilon(595.6868151648251, worksheet.intermediate_output_ay285, 0.002); end
  def test_intermediate_output_ba285; assert_in_epsilon(792.1907494136481, worksheet.intermediate_output_ba285, 0.002); end
  def test_intermediate_output_bb285; assert_in_epsilon(1134.1254680412508, worksheet.intermediate_output_bb285, 0.002); end
  def test_intermediate_output_bc285; assert_in_epsilon(1624.4019219355405, worksheet.intermediate_output_bc285, 0.002); end
  def test_intermediate_output_bd285; assert_in_epsilon(2266.021197555912, worksheet.intermediate_output_bd285, 0.002); end
  def test_intermediate_output_be285; assert_in_epsilon(3156.496453551856, worksheet.intermediate_output_be285, 0.002); end
  def test_intermediate_output_bf285; assert_in_epsilon(3956.5805691904575, worksheet.intermediate_output_bf285, 0.002); end
  def test_intermediate_output_bg285; assert_in_epsilon(4911.764530672162, worksheet.intermediate_output_bg285, 0.002); end
  def test_intermediate_output_bh285; assert_in_epsilon(5751.895286061223, worksheet.intermediate_output_bh285, 0.002); end
  def test_intermediate_output_bi285; assert_in_epsilon(6698.568659252276, worksheet.intermediate_output_bi285, 0.002); end
  def test_intermediate_output_d287; assert_equal("Transport", worksheet.intermediate_output_d287); end
  def test_intermediate_output_ay287; assert_in_epsilon(14.175599392034435, worksheet.intermediate_output_ay287, 0.002); end
  def test_intermediate_output_ba287; assert_in_epsilon(14.175599392034435, worksheet.intermediate_output_ba287, 0.002); end
  def test_intermediate_output_bb287; assert_in_epsilon(19.38808543994168, worksheet.intermediate_output_bb287, 0.002); end
  def test_intermediate_output_bc287; assert_in_epsilon(25.818542167784543, worksheet.intermediate_output_bc287, 0.002); end
  def test_intermediate_output_bd287; assert_in_epsilon(32.79323000054704, worksheet.intermediate_output_bd287, 0.002); end
  def test_intermediate_output_be287; assert_in_epsilon(40.87063574588703, worksheet.intermediate_output_be287, 0.002); end
  def test_intermediate_output_bf287; assert_in_epsilon(49.40132463853104, worksheet.intermediate_output_bf287, 0.002); end
  def test_intermediate_output_bg287; assert_in_epsilon(54.79441934798083, worksheet.intermediate_output_bg287, 0.002); end
  def test_intermediate_output_bh287; assert_in_epsilon(59.954801826308824, worksheet.intermediate_output_bh287, 0.002); end
  def test_intermediate_output_bi287; assert_in_epsilon(64.18664823797312, worksheet.intermediate_output_bi287, 0.002); end
  def test_intermediate_output_d288; assert_equal("Industry", worksheet.intermediate_output_d288); end
  def test_intermediate_output_ay288; assert_in_epsilon(291.7178485116746, worksheet.intermediate_output_ay288, 0.002); end
  def test_intermediate_output_ba288; assert_in_epsilon(401.235, worksheet.intermediate_output_ba288, 0.002); end
  def test_intermediate_output_bb288; assert_in_epsilon(503.1177061491396, worksheet.intermediate_output_bb288, 0.002); end
  def test_intermediate_output_bc288; assert_in_epsilon(638.2062218628469, worksheet.intermediate_output_bc288, 0.002); end
  def test_intermediate_output_bd288; assert_in_epsilon(792.4818867749141, worksheet.intermediate_output_bd288, 0.002); end
  def test_intermediate_output_be288; assert_in_epsilon(966.17848871674, worksheet.intermediate_output_be288, 0.002); end
  def test_intermediate_output_bf288; assert_in_epsilon(1200.6228340761327, worksheet.intermediate_output_bf288, 0.002); end
  def test_intermediate_output_bg288; assert_in_epsilon(1462.2792945499318, worksheet.intermediate_output_bg288, 0.002); end
  def test_intermediate_output_bh288; assert_in_epsilon(1752.1756493279522, worksheet.intermediate_output_bh288, 0.002); end
  def test_intermediate_output_bi288; assert_in_epsilon(2061.261323802787, worksheet.intermediate_output_bi288, 0.002); end
  def test_intermediate_output_d289; assert_equal("Cooking", worksheet.intermediate_output_d289); end
  def test_intermediate_output_ay289; assert_in_delta(0.30660334104356374, worksheet.intermediate_output_ay289, 0.002); end
  def test_intermediate_output_ba289; assert_in_delta(0.4056812477360954, worksheet.intermediate_output_ba289, 0.002); end
  def test_intermediate_output_bb289; assert_in_epsilon(1.9119107308416539, worksheet.intermediate_output_bb289, 0.002); end
  def test_intermediate_output_bc289; assert_in_epsilon(3.0737404888957927, worksheet.intermediate_output_bc289, 0.002); end
  def test_intermediate_output_bd289; assert_in_epsilon(5.987845305057132, worksheet.intermediate_output_bd289, 0.002); end
  def test_intermediate_output_be289; assert_in_epsilon(10.924338830969084, worksheet.intermediate_output_be289, 0.002); end
  def test_intermediate_output_bf289; assert_in_epsilon(14.605179460099949, worksheet.intermediate_output_bf289, 0.002); end
  def test_intermediate_output_bg289; assert_in_epsilon(19.221420721203312, worksheet.intermediate_output_bg289, 0.002); end
  def test_intermediate_output_bh289; assert_in_epsilon(25.37842895536987, worksheet.intermediate_output_bh289, 0.002); end
  def test_intermediate_output_bi289; assert_in_epsilon(29.2476501509129, worksheet.intermediate_output_bi289, 0.002); end
  def test_intermediate_output_d290; assert_equal("Lighting & appliances", worksheet.intermediate_output_d290); end
  def test_intermediate_output_ay290; assert_in_epsilon(187.57094392007247, worksheet.intermediate_output_ay290, 0.002); end
  def test_intermediate_output_ba290; assert_in_epsilon(232.6414587738775, worksheet.intermediate_output_ba290, 0.002); end
  def test_intermediate_output_bb290; assert_in_epsilon(409.59289667256314, worksheet.intermediate_output_bb290, 0.002); end
  def test_intermediate_output_bc290; assert_in_epsilon(678.8605072711791, worksheet.intermediate_output_bc290, 0.002); end
  def test_intermediate_output_bd290; assert_in_epsilon(1077.4491011518844, worksheet.intermediate_output_bd290, 0.002); end
  def test_intermediate_output_be290; assert_in_epsilon(1679.1946528978117, worksheet.intermediate_output_be290, 0.002); end
  def test_intermediate_output_bf290; assert_in_epsilon(2141.649262090775, worksheet.intermediate_output_bf290, 0.002); end
  def test_intermediate_output_bg290; assert_in_epsilon(2715.1133156726805, worksheet.intermediate_output_bg290, 0.002); end
  def test_intermediate_output_bh290; assert_in_epsilon(3174.0690762946037, worksheet.intermediate_output_bh290, 0.002); end
  def test_intermediate_output_bi290; assert_in_epsilon(3704.190039735324, worksheet.intermediate_output_bi290, 0.002); end
  def test_intermediate_output_d291; assert_equal("Telecom", worksheet.intermediate_output_d291); end
  def test_intermediate_output_ay291; assert_in_epsilon(99.549, worksheet.intermediate_output_ay291, 0.002); end
  def test_intermediate_output_ba291; assert_in_epsilon(135.84360999999998, worksheet.intermediate_output_ba291, 0.002); end
  def test_intermediate_output_bb291; assert_in_epsilon(188.7750131492979, worksheet.intermediate_output_bb291, 0.002); end
  def test_intermediate_output_bc291; assert_in_epsilon(262.3257106793957, worksheet.intermediate_output_bc291, 0.002); end
  def test_intermediate_output_bd291; assert_in_epsilon(335.74068575957824, worksheet.intermediate_output_bd291, 0.002); end
  def test_intermediate_output_be291; assert_in_epsilon(428.7780628500808, worksheet.intermediate_output_be291, 0.002); end
  def test_intermediate_output_bf291; assert_in_epsilon(506.9106409238258, worksheet.intermediate_output_bf291, 0.002); end
  def test_intermediate_output_bg291; assert_in_epsilon(599.267848785967, worksheet.intermediate_output_bg291, 0.002); end
  def test_intermediate_output_bh291; assert_in_epsilon(658.5674956470099, worksheet.intermediate_output_bh291, 0.002); end
  def test_intermediate_output_bi291; assert_in_epsilon(723.7192953583711, worksheet.intermediate_output_bi291, 0.002); end
  def test_intermediate_output_d292; assert_equal("Agriculture", worksheet.intermediate_output_d292); end
  def test_intermediate_output_ay292; assert_in_epsilon(2.3668199999999997, worksheet.intermediate_output_ay292, 0.002); end
  def test_intermediate_output_ba292; assert_in_epsilon(7.8894, worksheet.intermediate_output_ba292, 0.002); end
  def test_intermediate_output_bb292; assert_in_epsilon(11.339855899466881, worksheet.intermediate_output_bb292, 0.002); end
  def test_intermediate_output_bc292; assert_in_epsilon(16.117199465438524, worksheet.intermediate_output_bc292, 0.002); end
  def test_intermediate_output_bd292; assert_in_epsilon(21.568448563930875, worksheet.intermediate_output_bd292, 0.002); end
  def test_intermediate_output_be292; assert_in_epsilon(30.55027451036736, worksheet.intermediate_output_be292, 0.002); end
  def test_intermediate_output_bf292; assert_in_epsilon(43.39132800109303, worksheet.intermediate_output_bf292, 0.002); end
  def test_intermediate_output_bg292; assert_in_epsilon(61.08823159439924, worksheet.intermediate_output_bg292, 0.002); end
  def test_intermediate_output_bh292; assert_in_epsilon(81.74983400997752, worksheet.intermediate_output_bh292, 0.002); end
  def test_intermediate_output_bi292; assert_in_epsilon(115.96370196690869, worksheet.intermediate_output_bi292, 0.002); end
  def test_intermediate_output_d293; assert_equal("Total", worksheet.intermediate_output_d293); end
  def test_intermediate_output_ay293; assert_in_epsilon(595.686815164825, worksheet.intermediate_output_ay293, 0.002); end
  def test_intermediate_output_ba293; assert_in_epsilon(792.1907494136481, worksheet.intermediate_output_ba293, 0.002); end
  def test_intermediate_output_bb293; assert_in_epsilon(1134.1254680412508, worksheet.intermediate_output_bb293, 0.002); end
  def test_intermediate_output_bc293; assert_in_epsilon(1624.4019219355407, worksheet.intermediate_output_bc293, 0.002); end
  def test_intermediate_output_bd293; assert_in_epsilon(2266.021197555912, worksheet.intermediate_output_bd293, 0.002); end
  def test_intermediate_output_be293; assert_in_epsilon(3156.496453551856, worksheet.intermediate_output_be293, 0.002); end
  def test_intermediate_output_bf293; assert_in_epsilon(3956.5805691904575, worksheet.intermediate_output_bf293, 0.002); end
  def test_intermediate_output_bg293; assert_in_epsilon(4911.764530672162, worksheet.intermediate_output_bg293, 0.002); end
  def test_intermediate_output_bh293; assert_in_epsilon(5751.895286061223, worksheet.intermediate_output_bh293, 0.002); end
  def test_intermediate_output_bi293; assert_in_epsilon(6698.568659252277, worksheet.intermediate_output_bi293, 0.002); end
  def test_intermediate_output_b298; assert_equal("Emissions", worksheet.intermediate_output_b298); end
  def test_intermediate_output_c300; assert_equal("I", worksheet.intermediate_output_c300); end
  def test_intermediate_output_d300; assert_equal("Hydrocarbon fuel power generation", worksheet.intermediate_output_d300); end
  def test_intermediate_output_ay300; assert_in_epsilon(595.066185196456, worksheet.intermediate_output_ay300, 0.002); end
  def test_intermediate_output_ba300; assert_in_epsilon(784.1692596552164, worksheet.intermediate_output_ba300, 0.002); end
  def test_intermediate_output_bb300; assert_in_epsilon(1077.349471293409, worksheet.intermediate_output_bb300, 0.002); end
  def test_intermediate_output_bc300; assert_in_epsilon(1588.270202042137, worksheet.intermediate_output_bc300, 0.002); end
  def test_intermediate_output_bd300; assert_in_epsilon(2251.699064797336, worksheet.intermediate_output_bd300, 0.002); end
  def test_intermediate_output_be300; assert_in_epsilon(3180.5599379801783, worksheet.intermediate_output_be300, 0.002); end
  def test_intermediate_output_bf300; assert_in_epsilon(4005.6498956084715, worksheet.intermediate_output_bf300, 0.002); end
  def test_intermediate_output_bg300; assert_in_epsilon(4971.713715104918, worksheet.intermediate_output_bg300, 0.002); end
  def test_intermediate_output_bh300; assert_in_epsilon(5854.081712294084, worksheet.intermediate_output_bh300, 0.002); end
  def test_intermediate_output_bi300; assert_in_epsilon(6857.239724694424, worksheet.intermediate_output_bi300, 0.002); end
  def test_intermediate_output_c301; assert_equal("IX", worksheet.intermediate_output_c301); end
  def test_intermediate_output_d301; assert_equal("Buildings", worksheet.intermediate_output_d301); end
  def test_intermediate_output_ay301; assert_in_delta(0.0, (worksheet.intermediate_output_ay301||0), 0.002); end
  def test_intermediate_output_ba301; assert_in_delta(0.0, (worksheet.intermediate_output_ba301||0), 0.002); end
  def test_intermediate_output_bb301; assert_in_delta(0.0, (worksheet.intermediate_output_bb301||0), 0.002); end
  def test_intermediate_output_bc301; assert_in_delta(0.0, (worksheet.intermediate_output_bc301||0), 0.002); end
  def test_intermediate_output_bd301; assert_in_delta(0.0, (worksheet.intermediate_output_bd301||0), 0.002); end
  def test_intermediate_output_be301; assert_in_delta(0.0, (worksheet.intermediate_output_be301||0), 0.002); end
  def test_intermediate_output_bf301; assert_in_delta(0.0, (worksheet.intermediate_output_bf301||0), 0.002); end
  def test_intermediate_output_bg301; assert_in_delta(0.0, (worksheet.intermediate_output_bg301||0), 0.002); end
  def test_intermediate_output_bh301; assert_in_delta(0.0, (worksheet.intermediate_output_bh301||0), 0.002); end
  def test_intermediate_output_bi301; assert_in_delta(0.0, (worksheet.intermediate_output_bi301||0), 0.002); end
  def test_intermediate_output_c302; assert_equal("X", worksheet.intermediate_output_c302); end
  def test_intermediate_output_d302; assert_equal("Lighting and appliances", worksheet.intermediate_output_d302); end
  def test_intermediate_output_ay302; assert_in_epsilon(1.9940071140643392, worksheet.intermediate_output_ay302, 0.002); end
  def test_intermediate_output_ba302; assert_in_epsilon(1.8329576632390179, worksheet.intermediate_output_ba302, 0.002); end
  def test_intermediate_output_bb302; assert_in_epsilon(1.5593969490007227, worksheet.intermediate_output_bb302, 0.002); end
  def test_intermediate_output_bc302; assert_in_epsilon(1.2520757241189449, worksheet.intermediate_output_bc302, 0.002); end
  def test_intermediate_output_bd302; assert_in_delta(0.8996038731343545, worksheet.intermediate_output_bd302, 0.002); end
  def test_intermediate_output_be302; assert_in_delta(0.5120681719392735, worksheet.intermediate_output_be302, 0.002); end
  def test_intermediate_output_bf302; assert_in_delta(0.4107672861857, worksheet.intermediate_output_bf302, 0.002); end
  def test_intermediate_output_bg302; assert_in_delta(0.28960362076092644, worksheet.intermediate_output_bg302, 0.002); end
  def test_intermediate_output_bh302; assert_in_delta(0.1532084355621472, worksheet.intermediate_output_bh302, 0.002); end
  def test_intermediate_output_bi302; assert_in_delta(0.0, (worksheet.intermediate_output_bi302||0), 0.002); end
  def test_intermediate_output_c303; assert_equal("XI", worksheet.intermediate_output_c303); end
  def test_intermediate_output_d303; assert_equal("Industry", worksheet.intermediate_output_d303); end
  def test_intermediate_output_ay303; assert_in_epsilon(658.6277670769695, worksheet.intermediate_output_ay303, 0.002); end
  def test_intermediate_output_ba303; assert_in_epsilon(982.2829495753456, worksheet.intermediate_output_ba303, 0.002); end
  def test_intermediate_output_bb303; assert_in_epsilon(1349.3894359322871, worksheet.intermediate_output_bb303, 0.002); end
  def test_intermediate_output_bc303; assert_in_epsilon(1929.0188707797681, worksheet.intermediate_output_bc303, 0.002); end
  def test_intermediate_output_bd303; assert_in_epsilon(2590.0593835301593, worksheet.intermediate_output_bd303, 0.002); end
  def test_intermediate_output_be303; assert_in_epsilon(3324.2857122614537, worksheet.intermediate_output_be303, 0.002); end
  def test_intermediate_output_bf303; assert_in_epsilon(4109.830520443181, worksheet.intermediate_output_bf303, 0.002); end
  def test_intermediate_output_bg303; assert_in_epsilon(4854.804351102837, worksheet.intermediate_output_bg303, 0.002); end
  def test_intermediate_output_bh303; assert_in_epsilon(5532.528044278746, worksheet.intermediate_output_bh303, 0.002); end
  def test_intermediate_output_bi303; assert_in_epsilon(6218.3944071584465, worksheet.intermediate_output_bi303, 0.002); end
  def test_intermediate_output_c304; assert_equal("XII", worksheet.intermediate_output_c304); end
  def test_intermediate_output_d304; assert_equal("Transport", worksheet.intermediate_output_d304); end
  def test_intermediate_output_ay304; assert_in_epsilon(221.70597052391258, worksheet.intermediate_output_ay304, 0.002); end
  def test_intermediate_output_ba304; assert_in_epsilon(221.7059705239126, worksheet.intermediate_output_ba304, 0.002); end
  def test_intermediate_output_bb304; assert_in_epsilon(332.7234144635943, worksheet.intermediate_output_bb304, 0.002); end
  def test_intermediate_output_bc304; assert_in_epsilon(482.09772029926546, worksheet.intermediate_output_bc304, 0.002); end
  def test_intermediate_output_bd304; assert_in_epsilon(665.9782307957221, worksheet.intermediate_output_bd304, 0.002); end
  def test_intermediate_output_be304; assert_in_epsilon(892.1918472973097, worksheet.intermediate_output_be304, 0.002); end
  def test_intermediate_output_bf304; assert_in_epsilon(1159.1376075927294, worksheet.intermediate_output_bf304, 0.002); end
  def test_intermediate_output_bg304; assert_in_epsilon(1412.0431685443764, worksheet.intermediate_output_bg304, 0.002); end
  def test_intermediate_output_bh304; assert_in_epsilon(1690.8391897791685, worksheet.intermediate_output_bh304, 0.002); end
  def test_intermediate_output_bi304; assert_in_epsilon(2002.9666465322869, worksheet.intermediate_output_bi304, 0.002); end
  def test_intermediate_output_c305; assert_equal("XIII", worksheet.intermediate_output_c305); end
  def test_intermediate_output_d305; assert_equal("Cooking", worksheet.intermediate_output_d305); end
  def test_intermediate_output_ay305; assert_in_epsilon(10.704467295035755, worksheet.intermediate_output_ay305, 0.002); end
  def test_intermediate_output_ba305; assert_in_epsilon(16.26088882133183, worksheet.intermediate_output_ba305, 0.002); end
  def test_intermediate_output_bb305; assert_in_epsilon(24.23950354390121, worksheet.intermediate_output_bb305, 0.002); end
  def test_intermediate_output_bc305; assert_in_epsilon(35.93346095018956, worksheet.intermediate_output_bc305, 0.002); end
  def test_intermediate_output_bd305; assert_in_epsilon(52.75136645346924, worksheet.intermediate_output_bd305, 0.002); end
  def test_intermediate_output_be305; assert_in_epsilon(195.39740644307, worksheet.intermediate_output_be305, 0.002); end
  def test_intermediate_output_bf305; assert_in_epsilon(103.07922847908272, worksheet.intermediate_output_bf305, 0.002); end
  def test_intermediate_output_bg305; assert_in_epsilon(137.80633413788036, worksheet.intermediate_output_bg305, 0.002); end
  def test_intermediate_output_bh305; assert_in_epsilon(184.23361666422136, worksheet.intermediate_output_bh305, 0.002); end
  def test_intermediate_output_bi305; assert_in_epsilon(246.3033097633579, worksheet.intermediate_output_bi305, 0.002); end
  def test_intermediate_output_c306; assert_equal("XIV", worksheet.intermediate_output_c306); end
  def test_intermediate_output_d306; assert_equal("Agriculture", worksheet.intermediate_output_d306); end
  def test_intermediate_output_ay306; assert_in_epsilon(20.879036754401042, worksheet.intermediate_output_ay306, 0.002); end
  def test_intermediate_output_ba306; assert_in_epsilon(27.03601947205911, worksheet.intermediate_output_ba306, 0.002); end
  def test_intermediate_output_bb306; assert_in_epsilon(37.21072446431117, worksheet.intermediate_output_bb306, 0.002); end
  def test_intermediate_output_bc306; assert_in_epsilon(50.99549576692747, worksheet.intermediate_output_bc306, 0.002); end
  def test_intermediate_output_bd306; assert_in_epsilon(68.18646924899116, worksheet.intermediate_output_bd306, 0.002); end
  def test_intermediate_output_be306; assert_in_epsilon(85.70490968198598, worksheet.intermediate_output_be306, 0.002); end
  def test_intermediate_output_bf306; assert_in_epsilon(91.58709321034966, worksheet.intermediate_output_bf306, 0.002); end
  def test_intermediate_output_bg306; assert_in_epsilon(98.6987943689982, worksheet.intermediate_output_bg306, 0.002); end
  def test_intermediate_output_bh306; assert_in_epsilon(103.819221533879, worksheet.intermediate_output_bh306, 0.002); end
  def test_intermediate_output_bi306; assert_in_epsilon(109.56385666370986, worksheet.intermediate_output_bi306, 0.002); end
  def test_intermediate_output_c307; assert_equal("XVI", worksheet.intermediate_output_c307); end
  def test_intermediate_output_d307; assert_equal("Telecom", worksheet.intermediate_output_d307); end
  def test_intermediate_output_ay307; assert_in_epsilon(3.072687246913156, worksheet.intermediate_output_ay307, 0.002); end
  def test_intermediate_output_ba307; assert_in_epsilon(10.242290823043852, worksheet.intermediate_output_ba307, 0.002); end
  def test_intermediate_output_bb307; assert_in_epsilon(11.96903871423729, worksheet.intermediate_output_bb307, 0.002); end
  def test_intermediate_output_bc307; assert_in_epsilon(14.306079552899408, worksheet.intermediate_output_bc307, 0.002); end
  def test_intermediate_output_bd307; assert_in_epsilon(18.61496448419535, worksheet.intermediate_output_bd307, 0.002); end
  def test_intermediate_output_be307; assert_in_epsilon(21.940344281262913, worksheet.intermediate_output_be307, 0.002); end
  def test_intermediate_output_bf307; assert_in_epsilon(23.475215746381874, worksheet.intermediate_output_bf307, 0.002); end
  def test_intermediate_output_bg307; assert_in_epsilon(26.375105132264267, worksheet.intermediate_output_bg307, 0.002); end
  def test_intermediate_output_bh307; assert_in_epsilon(33.35927916427278, worksheet.intermediate_output_bh307, 0.002); end
  def test_intermediate_output_bi307; assert_in_epsilon(47.3207750656043, worksheet.intermediate_output_bi307, 0.002); end
  def test_intermediate_output_c308; assert_equal("V", worksheet.intermediate_output_c308); end
  def test_intermediate_output_d308; assert_equal("Bioenergy", worksheet.intermediate_output_d308); end
  def test_intermediate_output_ay308; assert_in_epsilon(-313.89366247877757, worksheet.intermediate_output_ay308, 0.002); end
  def test_intermediate_output_ba308; assert_in_epsilon(-317.7448860440523, worksheet.intermediate_output_ba308, 0.002); end
  def test_intermediate_output_bb308; assert_in_epsilon(-316.49941332858305, worksheet.intermediate_output_bb308, 0.002); end
  def test_intermediate_output_bc308; assert_in_epsilon(-315.466103215882, worksheet.intermediate_output_bc308, 0.002); end
  def test_intermediate_output_bd308; assert_in_epsilon(-314.6889283958385, worksheet.intermediate_output_bd308, 0.002); end
  def test_intermediate_output_be308; assert_in_epsilon(-314.23239533992523, worksheet.intermediate_output_be308, 0.002); end
  def test_intermediate_output_bf308; assert_in_epsilon(-313.9948136135167, worksheet.intermediate_output_bf308, 0.002); end
  def test_intermediate_output_bg308; assert_in_epsilon(-312.9238842074715, worksheet.intermediate_output_bg308, 0.002); end
  def test_intermediate_output_bh308; assert_in_epsilon(-312.1117917799598, worksheet.intermediate_output_bh308, 0.002); end
  def test_intermediate_output_bi308; assert_in_epsilon(-311.8492675268365, worksheet.intermediate_output_bi308, 0.002); end
  def test_intermediate_output_d309; assert_equal("Total", worksheet.intermediate_output_d309); end
  def test_intermediate_output_ay309; assert_in_epsilon(1198.1564587289747, worksheet.intermediate_output_ay309, 0.002); end
  def test_intermediate_output_ba309; assert_in_epsilon(1725.785450490096, worksheet.intermediate_output_ba309, 0.002); end
  def test_intermediate_output_bb309; assert_in_epsilon(2517.941572032157, worksheet.intermediate_output_bb309, 0.002); end
  def test_intermediate_output_bc309; assert_in_epsilon(3786.407801899424, worksheet.intermediate_output_bc309, 0.002); end
  def test_intermediate_output_bd309; assert_in_epsilon(5333.500154787169, worksheet.intermediate_output_bd309, 0.002); end
  def test_intermediate_output_be309; assert_in_epsilon(7386.359830777274, worksheet.intermediate_output_be309, 0.002); end
  def test_intermediate_output_bf309; assert_in_epsilon(9179.175514752866, worksheet.intermediate_output_bf309, 0.002); end
  def test_intermediate_output_bg309; assert_in_epsilon(11188.807187804565, worksheet.intermediate_output_bg309, 0.002); end
  def test_intermediate_output_bh309; assert_in_epsilon(13086.902480369974, worksheet.intermediate_output_bh309, 0.002); end
  def test_intermediate_output_bi309; assert_in_epsilon(15169.93945235099, worksheet.intermediate_output_bi309, 0.002); end
  def test_intermediate_output_c312; assert_equal("Emissions per capita", worksheet.intermediate_output_c312); end
  def test_intermediate_output_ay313; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay313, 0.002); end
  def test_intermediate_output_ba313; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba313, 0.002); end
  def test_intermediate_output_bb313; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb313, 0.002); end
  def test_intermediate_output_bc313; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc313, 0.002); end
  def test_intermediate_output_bd313; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd313, 0.002); end
  def test_intermediate_output_be313; assert_in_epsilon(2032.0, worksheet.intermediate_output_be313, 0.002); end
  def test_intermediate_output_bf313; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf313, 0.002); end
  def test_intermediate_output_bg313; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg313, 0.002); end
  def test_intermediate_output_bh313; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh313, 0.002); end
  def test_intermediate_output_bi313; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi313, 0.002); end
  def test_intermediate_output_c314; assert_equal("I", worksheet.intermediate_output_c314); end
  def test_intermediate_output_d314; assert_equal("Hydrocarbon fuel power generation", worksheet.intermediate_output_d314); end
  def test_intermediate_output_ay314; assert_in_delta(0.4893846887992602, worksheet.intermediate_output_ay314, 0.002); end
  def test_intermediate_output_ba314; assert_in_delta(0.6449037748223236, worksheet.intermediate_output_ba314, 0.002); end
  def test_intermediate_output_bb314; assert_in_delta(0.8328561039053871, worksheet.intermediate_output_bb314, 0.002); end
  def test_intermediate_output_bc314; assert_in_epsilon(1.1479325691793738, worksheet.intermediate_output_bc314, 0.002); end
  def test_intermediate_output_bd314; assert_in_epsilon(1.5491918265908193, worksheet.intermediate_output_bd314, 0.002); end
  def test_intermediate_output_be314; assert_in_epsilon(2.0734611268114485, worksheet.intermediate_output_be314, 0.002); end
  def test_intermediate_output_bf314; assert_in_epsilon(2.515875613463913, worksheet.intermediate_output_bf314, 0.002); end
  def test_intermediate_output_bg314; assert_in_epsilon(2.9957678787836337, worksheet.intermediate_output_bg314, 0.002); end
  def test_intermediate_output_bh314; assert_in_epsilon(3.435145443736701, worksheet.intermediate_output_bh314, 0.002); end
  def test_intermediate_output_bi314; assert_in_epsilon(3.900540838821322, worksheet.intermediate_output_bi314, 0.002); end
  def test_intermediate_output_c315; assert_equal("IX", worksheet.intermediate_output_c315); end
  def test_intermediate_output_d315; assert_equal("Buildings", worksheet.intermediate_output_d315); end
  def test_intermediate_output_ay315; assert_in_delta(0.0, (worksheet.intermediate_output_ay315||0), 0.002); end
  def test_intermediate_output_ba315; assert_in_delta(0.0, (worksheet.intermediate_output_ba315||0), 0.002); end
  def test_intermediate_output_bb315; assert_in_delta(0.0, (worksheet.intermediate_output_bb315||0), 0.002); end
  def test_intermediate_output_bc315; assert_in_delta(0.0, (worksheet.intermediate_output_bc315||0), 0.002); end
  def test_intermediate_output_bd315; assert_in_delta(0.0, (worksheet.intermediate_output_bd315||0), 0.002); end
  def test_intermediate_output_be315; assert_in_delta(0.0, (worksheet.intermediate_output_be315||0), 0.002); end
  def test_intermediate_output_bf315; assert_in_delta(0.0, (worksheet.intermediate_output_bf315||0), 0.002); end
  def test_intermediate_output_bg315; assert_in_delta(0.0, (worksheet.intermediate_output_bg315||0), 0.002); end
  def test_intermediate_output_bh315; assert_in_delta(0.0, (worksheet.intermediate_output_bh315||0), 0.002); end
  def test_intermediate_output_bi315; assert_in_delta(0.0, (worksheet.intermediate_output_bi315||0), 0.002); end
  def test_intermediate_output_c316; assert_equal("X", worksheet.intermediate_output_c316); end
  def test_intermediate_output_d316; assert_equal("Lighting and appliances", worksheet.intermediate_output_d316); end
  def test_intermediate_output_ay316; assert_in_delta(0.001639879017252045, worksheet.intermediate_output_ay316, 0.002); end
  def test_intermediate_output_ba316; assert_in_delta(0.001507431337760021, worksheet.intermediate_output_ba316, 0.002); end
  def test_intermediate_output_bb316; assert_in_delta(0.001205507870930196, worksheet.intermediate_output_bb316, 0.002); end
  def test_intermediate_output_bc316; assert_in_delta(0.0009049458341200142, worksheet.intermediate_output_bc316, 0.002); end
  def test_intermediate_output_bd316; assert_in_delta(0.0006189366017943532, worksheet.intermediate_output_bd316, 0.002); end
  def test_intermediate_output_be316; assert_in_delta(0.0003338259518755535, worksheet.intermediate_output_be316, 0.002); end
  def test_intermediate_output_bf316; assert_in_delta(0.00025799543770821035, worksheet.intermediate_output_bf316, 0.002); end
  def test_intermediate_output_bg316; assert_in_delta(0.00017450426037588364, worksheet.intermediate_output_bg316, 0.002); end
  def test_intermediate_output_bh316; assert_in_delta(8.990193257092328e-05, worksheet.intermediate_output_bh316, 0.002); end
  def test_intermediate_output_bi316; assert_in_delta(0.0, (worksheet.intermediate_output_bi316||0), 0.002); end
  def test_intermediate_output_c317; assert_equal("XI", worksheet.intermediate_output_c317); end
  def test_intermediate_output_d317; assert_equal("Industry", worksheet.intermediate_output_d317); end
  def test_intermediate_output_ay317; assert_in_delta(0.5416579749345065, worksheet.intermediate_output_ay317, 0.002); end
  def test_intermediate_output_ba317; assert_in_delta(0.8078332251933393, worksheet.intermediate_output_ba317, 0.002); end
  def test_intermediate_output_bb317; assert_in_epsilon(1.0431594001827662, worksheet.intermediate_output_bb317, 0.002); end
  def test_intermediate_output_bc317; assert_in_epsilon(1.3942108751285165, worksheet.intermediate_output_bc317, 0.002); end
  def test_intermediate_output_bd317; assert_in_epsilon(1.7819871625300532, worksheet.intermediate_output_bd317, 0.002); end
  def test_intermediate_output_be317; assert_in_epsilon(2.1671584039274876, worksheet.intermediate_output_be317, 0.002); end
  def test_intermediate_output_bf317; assert_in_epsilon(2.5813095630720486, worksheet.intermediate_output_bf317, 0.002); end
  def test_intermediate_output_bg317; assert_in_epsilon(2.9253226887594397, worksheet.intermediate_output_bg317, 0.002); end
  def test_intermediate_output_bh317; assert_in_epsilon(3.2464593829869868, worksheet.intermediate_output_bh317, 0.002); end
  def test_intermediate_output_bi317; assert_in_epsilon(3.5371523106698, worksheet.intermediate_output_bi317, 0.002); end
  def test_intermediate_output_c318; assert_equal("XII", worksheet.intermediate_output_c318); end
  def test_intermediate_output_d318; assert_equal("Transport", worksheet.intermediate_output_d318); end
  def test_intermediate_output_ay318; assert_in_delta(0.18233183146503737, worksheet.intermediate_output_ay318, 0.002); end
  def test_intermediate_output_ba318; assert_in_delta(0.1823318314650374, worksheet.intermediate_output_ba318, 0.002); end
  def test_intermediate_output_bb318; assert_in_delta(0.25721526211505163, worksheet.intermediate_output_bb318, 0.002); end
  def test_intermediate_output_bc318; assert_in_delta(0.3484392478981814, worksheet.intermediate_output_bc318, 0.002); end
  def test_intermediate_output_bd318; assert_in_delta(0.4581997869813067, worksheet.intermediate_output_bd318, 0.002); end
  def test_intermediate_output_be318; assert_in_delta(0.5816350419743596, worksheet.intermediate_output_be318, 0.002); end
  def test_intermediate_output_bf318; assert_in_delta(0.7280331820283716, worksheet.intermediate_output_bf318, 0.002); end
  def test_intermediate_output_bg318; assert_in_delta(0.850844157604887, worksheet.intermediate_output_bg318, 0.002); end
  def test_intermediate_output_bh318; assert_in_delta(0.9921758568322461, worksheet.intermediate_output_bh318, 0.002); end
  def test_intermediate_output_bi318; assert_in_epsilon(1.1393291641039032, worksheet.intermediate_output_bi318, 0.002); end
  def test_intermediate_output_c319; assert_equal("XIII", worksheet.intermediate_output_c319); end
  def test_intermediate_output_d319; assert_equal("Cooking", worksheet.intermediate_output_d319); end
  def test_intermediate_output_ay319; assert_in_delta(0.008803394523608248, worksheet.intermediate_output_ay319, 0.002); end
  def test_intermediate_output_ba319; assert_in_delta(0.013373016671749947, worksheet.intermediate_output_ba319, 0.002); end
  def test_intermediate_output_bb319; assert_in_delta(0.01873859784600601, worksheet.intermediate_output_bb319, 0.002); end
  def test_intermediate_output_bc319; assert_in_delta(0.025971141494073972, worksheet.intermediate_output_bc319, 0.002); end
  def test_intermediate_output_bd319; assert_in_delta(0.036293475903969016, worksheet.intermediate_output_bd319, 0.002); end
  def test_intermediate_output_be319; assert_in_delta(0.12738289308793005, worksheet.intermediate_output_be319, 0.002); end
  def test_intermediate_output_bf319; assert_in_delta(0.06474218265293635, worksheet.intermediate_output_bf319, 0.002); end
  def test_intermediate_output_bg319; assert_in_delta(0.08303691905045146, worksheet.intermediate_output_bg319, 0.002); end
  def test_intermediate_output_bh319; assert_in_delta(0.10810735141228947, worksheet.intermediate_output_bh319, 0.002); end
  def test_intermediate_output_bi319; assert_in_delta(0.14010245478353142, worksheet.intermediate_output_bi319, 0.002); end
  def test_intermediate_output_c320; assert_equal("XIV", worksheet.intermediate_output_c320); end
  def test_intermediate_output_d320; assert_equal("Agriculture", worksheet.intermediate_output_d320); end
  def test_intermediate_output_ay320; assert_in_delta(0.01717099905636131, worksheet.intermediate_output_ay320, 0.002); end
  def test_intermediate_output_ba320; assert_in_delta(0.02223452500722467, worksheet.intermediate_output_ba320, 0.002); end
  def test_intermediate_output_bb320; assert_in_delta(0.028766133763110963, worksheet.intermediate_output_bb320, 0.002); end
  def test_intermediate_output_bc320; assert_in_delta(0.036857324652340144, worksheet.intermediate_output_bc320, 0.002); end
  def test_intermediate_output_bd320; assert_in_delta(0.046912983398219296, worksheet.intermediate_output_bd320, 0.002); end
  def test_intermediate_output_be320; assert_in_delta(0.0558724885138736, worksheet.intermediate_output_be320, 0.002); end
  def test_intermediate_output_bf320; assert_in_delta(0.057524182172931315, worksheet.intermediate_output_bf320, 0.002); end
  def test_intermediate_output_bg320; assert_in_delta(0.05947218500272718, worksheet.intermediate_output_bg320, 0.002); end
  def test_intermediate_output_bh320; assert_in_delta(0.06092059239204549, worksheet.intermediate_output_bh320, 0.002); end
  def test_intermediate_output_bi320; assert_in_delta(0.06232220463819502, worksheet.intermediate_output_bi320, 0.002); end
  def test_intermediate_output_c321; assert_equal("XVI", worksheet.intermediate_output_c321); end
  def test_intermediate_output_d321; assert_equal("Telecom", worksheet.intermediate_output_d321); end
  def test_intermediate_output_ay321; assert_in_delta(0.0025269896517672373, worksheet.intermediate_output_ay321, 0.002); end
  def test_intermediate_output_ba321; assert_in_delta(0.008423298839224123, worksheet.intermediate_output_ba321, 0.002); end
  def test_intermediate_output_bb321; assert_in_delta(0.009252788641613918, worksheet.intermediate_output_bb321, 0.002); end
  def test_intermediate_output_bc321; assert_in_delta(0.010339811598132995, worksheet.intermediate_output_bc321, 0.002); end
  def test_intermediate_output_bd321; assert_in_delta(0.0128072846332107, worksheet.intermediate_output_bd321, 0.002); end
  def test_intermediate_output_be321; assert_in_delta(0.014303283655439801, worksheet.intermediate_output_be321, 0.002); end
  def test_intermediate_output_bf321; assert_in_delta(0.014744354688081067, worksheet.intermediate_output_bf321, 0.002); end
  def test_intermediate_output_bg321; assert_in_delta(0.01589264734104088, worksheet.intermediate_output_bg321, 0.002); end
  def test_intermediate_output_bh321; assert_in_delta(0.019575055740481878, worksheet.intermediate_output_bh321, 0.002); end
  def test_intermediate_output_bi321; assert_in_delta(0.02691704287417085, worksheet.intermediate_output_bi321, 0.002); end
  def test_intermediate_output_c322; assert_equal("V", worksheet.intermediate_output_c322); end
  def test_intermediate_output_d322; assert_equal("Bioenergy", worksheet.intermediate_output_d322); end
  def test_intermediate_output_ay322; assert_in_delta(-0.2581473391527398, worksheet.intermediate_output_ay322, 0.002); end
  def test_intermediate_output_ba322; assert_in_delta(-0.2613146000270342, worksheet.intermediate_output_ba322, 0.002); end
  def test_intermediate_output_bb322; assert_in_delta(-0.24467313095417595, worksheet.intermediate_output_bb322, 0.002); end
  def test_intermediate_output_bc322; assert_in_delta(-0.2280051680677476, worksheet.intermediate_output_bc322, 0.002); end
  def test_intermediate_output_bd322; assert_in_delta(-0.21650917896230293, worksheet.intermediate_output_bd322, 0.002); end
  def test_intermediate_output_be322; assert_in_delta(-0.20485344380459916, worksheet.intermediate_output_be322, 0.002); end
  def test_intermediate_output_bf322; assert_in_delta(-0.19721441336909304, worksheet.intermediate_output_bf322, 0.002); end
  def test_intermediate_output_bg322; assert_in_delta(-0.18855617489897428, worksheet.intermediate_output_bg322, 0.002); end
  def test_intermediate_output_bh322; assert_in_delta(-0.18314561568517554, worksheet.intermediate_output_bh322, 0.002); end
  def test_intermediate_output_bi322; assert_in_delta(-0.17738636133202226, worksheet.intermediate_output_bi322, 0.002); end
  def test_intermediate_output_d323; assert_equal("Total", worksheet.intermediate_output_d323); end
  def test_intermediate_output_ay323; assert_in_delta(0.9853684182950531, worksheet.intermediate_output_ay323, 0.002); end
  def test_intermediate_output_ba323; assert_in_epsilon(1.4192925033096246, worksheet.intermediate_output_ba323, 0.002); end
  def test_intermediate_output_bb323; assert_in_epsilon(1.9465206633706897, worksheet.intermediate_output_bb323, 0.002); end
  def test_intermediate_output_bc323; assert_in_epsilon(2.7366507477169906, worksheet.intermediate_output_bc323, 0.002); end
  def test_intermediate_output_bd323; assert_in_epsilon(3.6695022776770694, worksheet.intermediate_output_bd323, 0.002); end
  def test_intermediate_output_be323; assert_in_epsilon(4.8152936201178145, worksheet.intermediate_output_be323, 0.002); end
  def test_intermediate_output_bf323; assert_in_epsilon(5.765272660146897, worksheet.intermediate_output_bf323, 0.002); end
  def test_intermediate_output_bg323; assert_in_epsilon(6.741954805903582, worksheet.intermediate_output_bg323, 0.002); end
  def test_intermediate_output_bh323; assert_in_epsilon(7.679327969348146, worksheet.intermediate_output_bh323, 0.002); end
  def test_intermediate_output_bi323; assert_in_epsilon(8.628977654558899, worksheet.intermediate_output_bi323, 0.002); end
  def test_intermediate_output_cr324; assert_in_epsilon(2020.0, worksheet.intermediate_output_cr324, 0.002); end
  def test_intermediate_output_cs324; assert_in_epsilon(2025.0, worksheet.intermediate_output_cs324, 0.002); end
  def test_intermediate_output_ct324; assert_in_epsilon(2030.0, worksheet.intermediate_output_ct324, 0.002); end
  def test_intermediate_output_cu324; assert_in_epsilon(2035.0, worksheet.intermediate_output_cu324, 0.002); end
  def test_intermediate_output_cr325; assert_in_epsilon(120.0, worksheet.intermediate_output_cr325, 0.002); end
  def test_intermediate_output_cs325; assert_in_epsilon(127.0, worksheet.intermediate_output_cs325, 0.002); end
  def test_intermediate_output_ct325; assert_in_epsilon(136.0, worksheet.intermediate_output_ct325, 0.002); end
  def test_intermediate_output_cu325; assert_in_epsilon(145.0, worksheet.intermediate_output_cu325, 0.002); end
  def test_intermediate_output_cr326; assert_in_epsilon(5.2, worksheet.intermediate_output_cr326, 0.002); end
  def test_intermediate_output_cs326; assert_in_epsilon(5.8, worksheet.intermediate_output_cs326, 0.002); end
  def test_intermediate_output_ct326; assert_in_epsilon(6.2, worksheet.intermediate_output_ct326, 0.002); end
  def test_intermediate_output_cu326; assert_in_epsilon(6.9, worksheet.intermediate_output_cu326, 0.002); end
  def test_intermediate_output_cr327; assert_in_epsilon(12.4, worksheet.intermediate_output_cr327, 0.002); end
  def test_intermediate_output_cs327; assert_in_epsilon(12.9, worksheet.intermediate_output_cs327, 0.002); end
  def test_intermediate_output_ct327; assert_in_epsilon(13.4, worksheet.intermediate_output_ct327, 0.002); end
  def test_intermediate_output_cu327; assert_in_epsilon(14.0, worksheet.intermediate_output_cu327, 0.002); end
  def test_intermediate_output_cr329; assert_in_epsilon(112.0, worksheet.intermediate_output_cr329, 0.002); end
  def test_intermediate_output_cs329; assert_in_epsilon(116.0, worksheet.intermediate_output_cs329, 0.002); end
  def test_intermediate_output_ct329; assert_in_epsilon(118.0, worksheet.intermediate_output_ct329, 0.002); end
  def test_intermediate_output_cu329; assert_in_epsilon(120.0, worksheet.intermediate_output_cu329, 0.002); end
  def test_intermediate_output_b330; assert_equal("Fuel Import Costs*", worksheet.intermediate_output_b330); end
  def test_intermediate_output_b331; assert_equal("* Taken from the current policy scenario of the World Energy Outlook at $2012 prices", worksheet.intermediate_output_b331); end
  def test_intermediate_output_ay333; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay333, 0.002); end
  def test_intermediate_output_ba333; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba333, 0.002); end
  def test_intermediate_output_bb333; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb333, 0.002); end
  def test_intermediate_output_bc333; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc333, 0.002); end
  def test_intermediate_output_bd333; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd333, 0.002); end
  def test_intermediate_output_be333; assert_in_epsilon(2032.0, worksheet.intermediate_output_be333, 0.002); end
  def test_intermediate_output_bf333; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf333, 0.002); end
  def test_intermediate_output_bg333; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg333, 0.002); end
  def test_intermediate_output_bh333; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh333, 0.002); end
  def test_intermediate_output_bi333; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi333, 0.002); end
  def test_intermediate_output_d335; assert_equal("Coal Imports in TWh", worksheet.intermediate_output_d335); end
  def test_intermediate_output_ay335; assert_in_epsilon(312.87744559290513, worksheet.intermediate_output_ay335, 0.002); end
  def test_intermediate_output_ba335; assert_in_epsilon(526.8956907848014, worksheet.intermediate_output_ba335, 0.002); end
  def test_intermediate_output_bb335; assert_in_epsilon(1319.3124738576794, worksheet.intermediate_output_bb335, 0.002); end
  def test_intermediate_output_bc335; assert_in_epsilon(3014.730522878498, worksheet.intermediate_output_bc335, 0.002); end
  def test_intermediate_output_bd335; assert_in_epsilon(5379.582453613374, worksheet.intermediate_output_bd335, 0.002); end
  def test_intermediate_output_be335; assert_in_epsilon(8802.568575656194, worksheet.intermediate_output_be335, 0.002); end
  def test_intermediate_output_bf335; assert_in_epsilon(11942.655541869855, worksheet.intermediate_output_bf335, 0.002); end
  def test_intermediate_output_bg335; assert_in_epsilon(16105.085873409915, worksheet.intermediate_output_bg335, 0.002); end
  def test_intermediate_output_bh335; assert_in_epsilon(19783.852472013532, worksheet.intermediate_output_bh335, 0.002); end
  def test_intermediate_output_bi335; assert_in_epsilon(23759.648675014454, worksheet.intermediate_output_bi335, 0.002); end
  def test_intermediate_output_bk335; assert_in_epsilon(46.5364, worksheet.intermediate_output_bk335, 0.002); end
  def test_intermediate_output_d336; assert_equal("Cost of Coal Imports in INR Cr/TWh", worksheet.intermediate_output_d336); end
  def test_intermediate_output_ay336; assert_in_epsilon(127.74193548387096, worksheet.intermediate_output_ay336, 0.002); end
  def test_intermediate_output_az336; assert_in_delta(0.0, (worksheet.intermediate_output_az336||0), 0.002); end
  def test_intermediate_output_ba336; assert_in_epsilon(127.74193548387096, worksheet.intermediate_output_ba336, 0.002); end
  def test_intermediate_output_bb336; assert_in_epsilon(127.74193548387096, worksheet.intermediate_output_bb336, 0.002); end
  def test_intermediate_output_bc336; assert_in_epsilon(144.51612903225805, worksheet.intermediate_output_bc336, 0.002); end
  def test_intermediate_output_bd336; assert_in_epsilon(149.67741935483872, worksheet.intermediate_output_bd336, 0.002); end
  def test_intermediate_output_be336; assert_in_epsilon(152.25806451612902, worksheet.intermediate_output_be336, 0.002); end
  def test_intermediate_output_bf336; assert_in_epsilon(154.83870967741936, worksheet.intermediate_output_bf336, 0.002); end
  def test_intermediate_output_bg336; assert_in_epsilon(154.83870967741936, worksheet.intermediate_output_bg336, 0.002); end
  def test_intermediate_output_bh336; assert_in_epsilon(154.83870967741936, worksheet.intermediate_output_bh336, 0.002); end
  def test_intermediate_output_bi336; assert_in_epsilon(154.83870967741936, worksheet.intermediate_output_bi336, 0.002); end
  def test_intermediate_output_d337; assert_equal("Total Cost of Coal Imports INR Cr", worksheet.intermediate_output_d337); end
  def test_intermediate_output_ay337; assert_in_epsilon(39967.57046928723, worksheet.intermediate_output_ay337, 0.002); end
  def test_intermediate_output_ba337; assert_in_epsilon(67306.67533896172, worksheet.intermediate_output_ba337, 0.002); end
  def test_intermediate_output_bb337; assert_in_epsilon(168531.52891859386, worksheet.intermediate_output_bb337, 0.002); end
  def test_intermediate_output_bc337; assert_in_epsilon(435677.1852417958, worksheet.intermediate_output_bc337, 0.002); end
  def test_intermediate_output_bd337; assert_in_epsilon(805202.0188634212, worksheet.intermediate_output_bd337, 0.002); end
  def test_intermediate_output_be337; assert_in_epsilon(1340262.054099911, worksheet.intermediate_output_be337, 0.002); end
  def test_intermediate_output_bf337; assert_in_epsilon(1849185.37422501, worksheet.intermediate_output_bf337, 0.002); end
  def test_intermediate_output_bg337; assert_in_epsilon(2493690.7158828257, worksheet.intermediate_output_bg337, 0.002); end
  def test_intermediate_output_bh337; assert_in_epsilon(3063306.1892149984, worksheet.intermediate_output_bh337, 0.002); end
  def test_intermediate_output_bi337; assert_in_epsilon(3678913.3432280445, worksheet.intermediate_output_bi337, 0.002); end
  def test_intermediate_output_d339; assert_equal("Oil Imports in TWh", worksheet.intermediate_output_d339); end
  def test_intermediate_output_ay339; assert_in_epsilon(1235.4943240445418, worksheet.intermediate_output_ay339, 0.002); end
  def test_intermediate_output_ba339; assert_in_epsilon(1459.1773716311466, worksheet.intermediate_output_ba339, 0.002); end
  def test_intermediate_output_bb339; assert_in_epsilon(2094.1308465841576, worksheet.intermediate_output_bb339, 0.002); end
  def test_intermediate_output_bc339; assert_in_epsilon(3065.9673559076937, worksheet.intermediate_output_bc339, 0.002); end
  def test_intermediate_output_bd339; assert_in_epsilon(4157.631767599084, worksheet.intermediate_output_bd339, 0.002); end
  def test_intermediate_output_be339; assert_in_epsilon(5448.054666446535, worksheet.intermediate_output_be339, 0.002); end
  def test_intermediate_output_bf339; assert_in_epsilon(6933.9942488753495, worksheet.intermediate_output_bf339, 0.002); end
  def test_intermediate_output_bg339; assert_in_epsilon(8427.225528478948, worksheet.intermediate_output_bg339, 0.002); end
  def test_intermediate_output_bh339; assert_in_epsilon(10106.26043154715, worksheet.intermediate_output_bh339, 0.002); end
  def test_intermediate_output_bi339; assert_in_epsilon(12020.741898724571, worksheet.intermediate_output_bi339, 0.002); end
  def test_intermediate_output_d340; assert_equal("Cost of Oil Imports in INR Cr/TWh", worksheet.intermediate_output_d340); end
  def test_intermediate_output_ay340; assert_in_epsilon(401.6705564426975, worksheet.intermediate_output_ay340, 0.002); end
  def test_intermediate_output_az340; assert_in_delta(0.0, (worksheet.intermediate_output_az340||0), 0.002); end
  def test_intermediate_output_ba340; assert_in_epsilon(401.6705564426975, worksheet.intermediate_output_ba340, 0.002); end
  def test_intermediate_output_bb340; assert_in_epsilon(401.6705564426975, worksheet.intermediate_output_bb340, 0.002); end
  def test_intermediate_output_bc340; assert_in_epsilon(442.2061171846211, worksheet.intermediate_output_bc340, 0.002); end
  def test_intermediate_output_bd340; assert_in_epsilon(468.0014740203907, worksheet.intermediate_output_bd340, 0.002); end
  def test_intermediate_output_be340; assert_in_epsilon(501.1669328092372, worksheet.intermediate_output_be340, 0.002); end
  def test_intermediate_output_bf340; assert_in_epsilon(534.3323915980839, worksheet.intermediate_output_bf340, 0.002); end
  def test_intermediate_output_bg340; assert_in_epsilon(534.3323915980839, worksheet.intermediate_output_bg340, 0.002); end
  def test_intermediate_output_bh340; assert_in_epsilon(534.3323915980839, worksheet.intermediate_output_bh340, 0.002); end
  def test_intermediate_output_bi340; assert_in_epsilon(534.3323915980839, worksheet.intermediate_output_bi340, 0.002); end
  def test_intermediate_output_d341; assert_equal("Total Cost of Oil Imports INR Cr", worksheet.intermediate_output_d341); end
  def test_intermediate_output_ay341; assert_in_epsilon(496261.69262076553, worksheet.intermediate_output_ay341, 0.002); end
  def test_intermediate_output_ba341; assert_in_epsilon(586108.5868116755, worksheet.intermediate_output_ba341, 0.002); end
  def test_intermediate_output_bb341; assert_in_epsilon(841150.7024112757, worksheet.intermediate_output_bb341, 0.002); end
  def test_intermediate_output_bc341; assert_in_epsilon(1355789.5198707406, worksheet.intermediate_output_bc341, 0.002); end
  def test_intermediate_output_bd341; assert_in_epsilon(1945777.7956703736, worksheet.intermediate_output_bd341, 0.002); end
  def test_intermediate_output_be341; assert_in_epsilon(2730384.8469600617, worksheet.intermediate_output_be341, 0.002); end
  def test_intermediate_output_bf341; assert_in_epsilon(3705057.7303289245, worksheet.intermediate_output_bf341, 0.002); end
  def test_intermediate_output_bg341; assert_in_epsilon(4502939.571168583, worksheet.intermediate_output_bg341, 0.002); end
  def test_intermediate_output_bh341; assert_in_epsilon(5400102.306501673, worksheet.intermediate_output_bh341, 0.002); end
  def test_intermediate_output_bi341; assert_in_epsilon(6423071.767528792, worksheet.intermediate_output_bi341, 0.002); end
  def test_intermediate_output_d343; assert_equal("Gas Imports in TWh", worksheet.intermediate_output_d343); end
  def test_intermediate_output_ay343; assert_in_epsilon(134.32821625762193, worksheet.intermediate_output_ay343, 0.002); end
  def test_intermediate_output_ba343; assert_in_epsilon(132.0559696218025, worksheet.intermediate_output_ba343, 0.002); end
  def test_intermediate_output_bb343; assert_in_epsilon(414.231003015371, worksheet.intermediate_output_bb343, 0.002); end
  def test_intermediate_output_bc343; assert_in_epsilon(540.7635700654292, worksheet.intermediate_output_bc343, 0.002); end
  def test_intermediate_output_bd343; assert_in_epsilon(673.6005422237332, worksheet.intermediate_output_bd343, 0.002); end
  def test_intermediate_output_be343; assert_in_epsilon(830.478053007228, worksheet.intermediate_output_be343, 0.002); end
  def test_intermediate_output_bf343; assert_in_epsilon(1027.9601614841856, worksheet.intermediate_output_bf343, 0.002); end
  def test_intermediate_output_bg343; assert_in_epsilon(1246.6262326346414, worksheet.intermediate_output_bg343, 0.002); end
  def test_intermediate_output_bh343; assert_in_epsilon(1483.7758959320668, worksheet.intermediate_output_bh343, 0.002); end
  def test_intermediate_output_bi343; assert_in_epsilon(1774.0609355299016, worksheet.intermediate_output_bi343, 0.002); end
  def test_intermediate_output_d344; assert_equal("Cost of Gas Imports in INR Cr/TWh", worksheet.intermediate_output_d344); end
  def test_intermediate_output_ay344; assert_in_epsilon(212.92890995260666, worksheet.intermediate_output_ay344, 0.002); end
  def test_intermediate_output_az344; assert_in_delta(0.0, (worksheet.intermediate_output_az344||0), 0.002); end
  def test_intermediate_output_ba344; assert_in_epsilon(212.92890995260666, worksheet.intermediate_output_ba344, 0.002); end
  def test_intermediate_output_bb344; assert_in_epsilon(212.92890995260666, worksheet.intermediate_output_bb344, 0.002); end
  def test_intermediate_output_bc344; assert_in_epsilon(221.11848341232232, worksheet.intermediate_output_bc344, 0.002); end
  def test_intermediate_output_bd344; assert_in_epsilon(231.35545023696685, worksheet.intermediate_output_bd344, 0.002); end
  def test_intermediate_output_be344; assert_in_epsilon(241.5924170616114, worksheet.intermediate_output_be344, 0.002); end
  def test_intermediate_output_bf344; assert_in_epsilon(255.92417061611377, worksheet.intermediate_output_bf344, 0.002); end
  def test_intermediate_output_bg344; assert_in_epsilon(255.92417061611377, worksheet.intermediate_output_bg344, 0.002); end
  def test_intermediate_output_bh344; assert_in_epsilon(255.92417061611377, worksheet.intermediate_output_bh344, 0.002); end
  def test_intermediate_output_bi344; assert_in_epsilon(255.92417061611377, worksheet.intermediate_output_bi344, 0.002); end
  def test_intermediate_output_d345; assert_equal("Total Cost of Gas Imports INR Cr", worksheet.intermediate_output_d345); end
  def test_intermediate_output_ay345; assert_in_epsilon(28602.360663613454, worksheet.intermediate_output_ay345, 0.002); end
  def test_intermediate_output_ba345; assert_in_epsilon(28118.53366430494, worksheet.intermediate_output_ba345, 0.002); end
  def test_intermediate_output_bb345; assert_in_epsilon(88201.75594063787, worksheet.intermediate_output_bb345, 0.002); end
  def test_intermediate_output_bc345; assert_in_epsilon(119572.82049750081, worksheet.intermediate_output_bc345, 0.002); end
  def test_intermediate_output_bd345; assert_in_epsilon(155841.1567260368, worksheet.intermediate_output_bd345, 0.002); end
  def test_intermediate_output_be345; assert_in_epsilon(200637.20014263724, worksheet.intermediate_output_be345, 0.002); end
  def test_intermediate_output_bf345; assert_in_epsilon(263079.85175424657, worksheet.intermediate_output_bf345, 0.002); end
  def test_intermediate_output_bg345; assert_in_epsilon(319041.7846553111, worksheet.intermediate_output_bg345, 0.002); end
  def test_intermediate_output_bh345; assert_in_epsilon(379734.1155465953, worksheet.intermediate_output_bh345, 0.002); end
  def test_intermediate_output_bi345; assert_in_epsilon(454025.073547937, worksheet.intermediate_output_bi345, 0.002); end
  def test_intermediate_output_d348; assert_equal("Coal Imports", worksheet.intermediate_output_d348); end
  def test_intermediate_output_ay348; assert_in_epsilon(39967.57046928723, worksheet.intermediate_output_ay348, 0.002); end
  def test_intermediate_output_ba348; assert_in_epsilon(67306.67533896172, worksheet.intermediate_output_ba348, 0.002); end
  def test_intermediate_output_bb348; assert_in_epsilon(168531.52891859386, worksheet.intermediate_output_bb348, 0.002); end
  def test_intermediate_output_bc348; assert_in_epsilon(435677.1852417958, worksheet.intermediate_output_bc348, 0.002); end
  def test_intermediate_output_bd348; assert_in_epsilon(805202.0188634212, worksheet.intermediate_output_bd348, 0.002); end
  def test_intermediate_output_be348; assert_in_epsilon(1340262.054099911, worksheet.intermediate_output_be348, 0.002); end
  def test_intermediate_output_bf348; assert_in_epsilon(1849185.37422501, worksheet.intermediate_output_bf348, 0.002); end
  def test_intermediate_output_bg348; assert_in_epsilon(2493690.7158828257, worksheet.intermediate_output_bg348, 0.002); end
  def test_intermediate_output_bh348; assert_in_epsilon(3063306.1892149984, worksheet.intermediate_output_bh348, 0.002); end
  def test_intermediate_output_bi348; assert_in_epsilon(3678913.3432280445, worksheet.intermediate_output_bi348, 0.002); end
  def test_intermediate_output_d349; assert_equal("Oil Imports", worksheet.intermediate_output_d349); end
  def test_intermediate_output_ay349; assert_in_epsilon(496261.69262076553, worksheet.intermediate_output_ay349, 0.002); end
  def test_intermediate_output_ba349; assert_in_epsilon(586108.5868116755, worksheet.intermediate_output_ba349, 0.002); end
  def test_intermediate_output_bb349; assert_in_epsilon(841150.7024112757, worksheet.intermediate_output_bb349, 0.002); end
  def test_intermediate_output_bc349; assert_in_epsilon(1355789.5198707406, worksheet.intermediate_output_bc349, 0.002); end
  def test_intermediate_output_bd349; assert_in_epsilon(1945777.7956703736, worksheet.intermediate_output_bd349, 0.002); end
  def test_intermediate_output_be349; assert_in_epsilon(2730384.8469600617, worksheet.intermediate_output_be349, 0.002); end
  def test_intermediate_output_bf349; assert_in_epsilon(3705057.7303289245, worksheet.intermediate_output_bf349, 0.002); end
  def test_intermediate_output_bg349; assert_in_epsilon(4502939.571168583, worksheet.intermediate_output_bg349, 0.002); end
  def test_intermediate_output_bh349; assert_in_epsilon(5400102.306501673, worksheet.intermediate_output_bh349, 0.002); end
  def test_intermediate_output_bi349; assert_in_epsilon(6423071.767528792, worksheet.intermediate_output_bi349, 0.002); end
  def test_intermediate_output_d350; assert_equal("Gas Imports", worksheet.intermediate_output_d350); end
  def test_intermediate_output_ay350; assert_in_epsilon(28602.360663613454, worksheet.intermediate_output_ay350, 0.002); end
  def test_intermediate_output_ba350; assert_in_epsilon(28118.53366430494, worksheet.intermediate_output_ba350, 0.002); end
  def test_intermediate_output_bb350; assert_in_epsilon(88201.75594063787, worksheet.intermediate_output_bb350, 0.002); end
  def test_intermediate_output_bc350; assert_in_epsilon(119572.82049750081, worksheet.intermediate_output_bc350, 0.002); end
  def test_intermediate_output_bd350; assert_in_epsilon(155841.1567260368, worksheet.intermediate_output_bd350, 0.002); end
  def test_intermediate_output_be350; assert_in_epsilon(200637.20014263724, worksheet.intermediate_output_be350, 0.002); end
  def test_intermediate_output_bf350; assert_in_epsilon(263079.85175424657, worksheet.intermediate_output_bf350, 0.002); end
  def test_intermediate_output_bg350; assert_in_epsilon(319041.7846553111, worksheet.intermediate_output_bg350, 0.002); end
  def test_intermediate_output_bh350; assert_in_epsilon(379734.1155465953, worksheet.intermediate_output_bh350, 0.002); end
  def test_intermediate_output_bi350; assert_in_epsilon(454025.073547937, worksheet.intermediate_output_bi350, 0.002); end
  def test_intermediate_output_d351; assert_equal("Total Fuel Import Costs", worksheet.intermediate_output_d351); end
  def test_intermediate_output_ay351; assert_in_epsilon(564831.6237536662, worksheet.intermediate_output_ay351, 0.002); end
  def test_intermediate_output_ba351; assert_in_epsilon(681533.7958149422, worksheet.intermediate_output_ba351, 0.002); end
  def test_intermediate_output_bb351; assert_in_epsilon(1097883.9872705075, worksheet.intermediate_output_bb351, 0.002); end
  def test_intermediate_output_bc351; assert_in_epsilon(1911039.5256100371, worksheet.intermediate_output_bc351, 0.002); end
  def test_intermediate_output_bd351; assert_in_epsilon(2906820.9712598315, worksheet.intermediate_output_bd351, 0.002); end
  def test_intermediate_output_be351; assert_in_epsilon(4271284.10120261, worksheet.intermediate_output_be351, 0.002); end
  def test_intermediate_output_bf351; assert_in_epsilon(5817322.9563081805, worksheet.intermediate_output_bf351, 0.002); end
  def test_intermediate_output_bg351; assert_in_epsilon(7315672.07170672, worksheet.intermediate_output_bg351, 0.002); end
  def test_intermediate_output_bh351; assert_in_epsilon(8843142.611263266, worksheet.intermediate_output_bh351, 0.002); end
  def test_intermediate_output_bi351; assert_in_epsilon(10556010.184304774, worksheet.intermediate_output_bi351, 0.002); end
  def test_intermediate_output_d352; assert_equal("Note:", worksheet.intermediate_output_d352); end
  def test_intermediate_output_e352; assert_equal("The costs will be in INR Cr", worksheet.intermediate_output_e352); end
  def test_intermediate_output_b357; assert_equal("Electricity Generation For Webtool", worksheet.intermediate_output_b357); end
  def test_intermediate_output_c359; assert_equal("V.02", worksheet.intermediate_output_c359); end
  def test_intermediate_output_d359; assert_equal("TWh/year", worksheet.intermediate_output_d359); end
  def test_intermediate_output_ay359; assert_in_epsilon(2007.0, worksheet.intermediate_output_ay359, 0.002); end
  def test_intermediate_output_ba359; assert_in_epsilon(2012.0, worksheet.intermediate_output_ba359, 0.002); end
  def test_intermediate_output_bb359; assert_in_epsilon(2017.0, worksheet.intermediate_output_bb359, 0.002); end
  def test_intermediate_output_bc359; assert_in_epsilon(2022.0, worksheet.intermediate_output_bc359, 0.002); end
  def test_intermediate_output_bd359; assert_in_epsilon(2027.0, worksheet.intermediate_output_bd359, 0.002); end
  def test_intermediate_output_be359; assert_in_epsilon(2032.0, worksheet.intermediate_output_be359, 0.002); end
  def test_intermediate_output_bf359; assert_in_epsilon(2037.0, worksheet.intermediate_output_bf359, 0.002); end
  def test_intermediate_output_bg359; assert_in_epsilon(2042.0, worksheet.intermediate_output_bg359, 0.002); end
  def test_intermediate_output_bh359; assert_in_epsilon(2047.0, worksheet.intermediate_output_bh359, 0.002); end
  def test_intermediate_output_bi359; assert_in_epsilon(2052.0, worksheet.intermediate_output_bi359, 0.002); end
  def test_intermediate_output_c360; assert_equal("I.a", worksheet.intermediate_output_c360); end
  def test_intermediate_output_d360; assert_equal("Gas Power Stations", worksheet.intermediate_output_d360); end
  def test_intermediate_output_ah360; assert_in_epsilon(221.2, worksheet.intermediate_output_ah360, 0.002); end
  def test_intermediate_output_ai360; assert_in_epsilon(214.6, worksheet.intermediate_output_ai360, 0.002); end
  def test_intermediate_output_aj360; assert_in_epsilon(221.2, worksheet.intermediate_output_aj360, 0.002); end
  def test_intermediate_output_ak360; assert_in_epsilon(226.3, worksheet.intermediate_output_ak360, 0.002); end
  def test_intermediate_output_al360; assert_in_epsilon(241.6, worksheet.intermediate_output_al360, 0.002); end
  def test_intermediate_output_am360; assert_in_epsilon(248.5, worksheet.intermediate_output_am360, 0.002); end
  def test_intermediate_output_an360; assert_in_epsilon(250.7, worksheet.intermediate_output_an360, 0.002); end
  def test_intermediate_output_ao360; assert_in_epsilon(258.7, worksheet.intermediate_output_ao360, 0.002); end
  def test_intermediate_output_ap360; assert_in_epsilon(262.6, worksheet.intermediate_output_ap360, 0.002); end
  def test_intermediate_output_aq360; assert_in_epsilon(264.2, worksheet.intermediate_output_aq360, 0.002); end
  def test_intermediate_output_ar360; assert_in_epsilon(267.6, worksheet.intermediate_output_ar360, 0.002); end
  def test_intermediate_output_as360; assert_in_epsilon(276.5, worksheet.intermediate_output_as360, 0.002); end
  def test_intermediate_output_at360; assert_in_epsilon(279.3, worksheet.intermediate_output_at360, 0.002); end
  def test_intermediate_output_au360; assert_in_epsilon(250.1, worksheet.intermediate_output_au360, 0.002); end
  def test_intermediate_output_av360; assert_in_epsilon(263.1, worksheet.intermediate_output_av360, 0.002); end
  def test_intermediate_output_aw360; assert_equal("Dukes 5.6 sum of generation - used on works for coal, oil gas and renewables", worksheet.intermediate_output_aw360); end
  def test_intermediate_output_ay360; assert_in_epsilon(64.0088375976, worksheet.intermediate_output_ay360, 0.002); end
  def test_intermediate_output_ba360; assert_in_epsilon(96.596143677, worksheet.intermediate_output_ba360, 0.002); end
  def test_intermediate_output_bb360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bb360, 0.002); end
  def test_intermediate_output_bc360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bc360, 0.002); end
  def test_intermediate_output_bd360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bd360, 0.002); end
  def test_intermediate_output_be360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_be360, 0.002); end
  def test_intermediate_output_bf360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bf360, 0.002); end
  def test_intermediate_output_bg360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bg360, 0.002); end
  def test_intermediate_output_bh360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bh360, 0.002); end
  def test_intermediate_output_bi360; assert_in_epsilon(109.8605340414, worksheet.intermediate_output_bi360, 0.002); end
  def test_intermediate_output_c361; assert_equal("I.b", worksheet.intermediate_output_c361); end
  def test_intermediate_output_d361; assert_equal("Coal power stations", worksheet.intermediate_output_d361); end
  def test_intermediate_output_ay361; assert_in_epsilon(489.68979840000003, worksheet.intermediate_output_ay361, 0.002); end
  def test_intermediate_output_ba361; assert_in_epsilon(710.8628564490481, worksheet.intermediate_output_ba361, 0.002); end
  def test_intermediate_output_bb361; assert_in_epsilon(987.4332245612816, worksheet.intermediate_output_bb361, 0.002); end
  def test_intermediate_output_bc361; assert_in_epsilon(936.0569741896016, worksheet.intermediate_output_bc361, 0.002); end
  def test_intermediate_output_bd361; assert_in_epsilon(857.5049884456017, worksheet.intermediate_output_bd361, 0.002); end
  def test_intermediate_output_be361; assert_in_epsilon(774.0835247656017, worksheet.intermediate_output_be361, 0.002); end
  def test_intermediate_output_bf361; assert_in_epsilon(711.6980002492061, worksheet.intermediate_output_bf361, 0.002); end
  def test_intermediate_output_bg361; assert_in_epsilon(631.661702789206, worksheet.intermediate_output_bg361, 0.002); end
  def test_intermediate_output_bh361; assert_in_epsilon(563.1204539812059, worksheet.intermediate_output_bh361, 0.002); end
  def test_intermediate_output_bi361; assert_in_epsilon(336.94328475400596, worksheet.intermediate_output_bi361, 0.002); end
  def test_intermediate_output_c362; assert_equal("I.c", worksheet.intermediate_output_c362); end
  def test_intermediate_output_d362; assert_equal("Carbon Capture Storage (CCS)", worksheet.intermediate_output_d362); end
  def test_intermediate_output_ay362; assert_in_delta(0.0, (worksheet.intermediate_output_ay362||0), 0.002); end
  def test_intermediate_output_ba362; assert_in_delta(0.0, (worksheet.intermediate_output_ba362||0), 0.002); end
  def test_intermediate_output_bb362; assert_in_delta(0.0, (worksheet.intermediate_output_bb362||0), 0.002); end
  def test_intermediate_output_bc362; assert_in_delta(0.0, (worksheet.intermediate_output_bc362||0), 0.002); end
  def test_intermediate_output_bd362; assert_in_delta(0.0, (worksheet.intermediate_output_bd362||0), 0.002); end
  def test_intermediate_output_be362; assert_in_epsilon(2.577204, worksheet.intermediate_output_be362, 0.002); end
  def test_intermediate_output_bf362; assert_in_epsilon(6.1362000000000005, worksheet.intermediate_output_bf362, 0.002); end
  def test_intermediate_output_bg362; assert_in_epsilon(14.358708, worksheet.intermediate_output_bg362, 0.002); end
  def test_intermediate_output_bh362; assert_in_epsilon(19.513116000000004, worksheet.intermediate_output_bh362, 0.002); end
  def test_intermediate_output_bi362; assert_in_epsilon(27.244728000000002, worksheet.intermediate_output_bi362, 0.002); end
  def test_intermediate_output_c363; assert_equal("I.d", worksheet.intermediate_output_c363); end
  def test_intermediate_output_d363; assert_equal("Electricity Balancing Requirement", worksheet.intermediate_output_d363); end
  def test_intermediate_output_ah363; assert_in_epsilon(221.2, worksheet.intermediate_output_ah363, 0.002); end
  def test_intermediate_output_ai363; assert_in_epsilon(214.6, worksheet.intermediate_output_ai363, 0.002); end
  def test_intermediate_output_aj363; assert_in_epsilon(221.2, worksheet.intermediate_output_aj363, 0.002); end
  def test_intermediate_output_ak363; assert_in_epsilon(226.3, worksheet.intermediate_output_ak363, 0.002); end
  def test_intermediate_output_al363; assert_in_epsilon(241.6, worksheet.intermediate_output_al363, 0.002); end
  def test_intermediate_output_am363; assert_in_epsilon(248.5, worksheet.intermediate_output_am363, 0.002); end
  def test_intermediate_output_an363; assert_in_epsilon(250.7, worksheet.intermediate_output_an363, 0.002); end
  def test_intermediate_output_ao363; assert_in_epsilon(258.7, worksheet.intermediate_output_ao363, 0.002); end
  def test_intermediate_output_ap363; assert_in_epsilon(262.6, worksheet.intermediate_output_ap363, 0.002); end
  def test_intermediate_output_aq363; assert_in_epsilon(264.2, worksheet.intermediate_output_aq363, 0.002); end
  def test_intermediate_output_ar363; assert_in_epsilon(267.6, worksheet.intermediate_output_ar363, 0.002); end
  def test_intermediate_output_as363; assert_in_epsilon(276.5, worksheet.intermediate_output_as363, 0.002); end
  def test_intermediate_output_at363; assert_in_epsilon(279.3, worksheet.intermediate_output_at363, 0.002); end
  def test_intermediate_output_au363; assert_in_epsilon(250.1, worksheet.intermediate_output_au363, 0.002); end
  def test_intermediate_output_av363; assert_in_epsilon(263.1, worksheet.intermediate_output_av363, 0.002); end
  def test_intermediate_output_aw363; assert_equal("Sum of above", worksheet.intermediate_output_aw363); end
  def test_intermediate_output_ax363; assert_in_delta(0.0, (worksheet.intermediate_output_ax363||0), 0.002); end
  def test_intermediate_output_ay363; assert_in_epsilon(57.253185663040085, worksheet.intermediate_output_ay363, 0.002); end
  def test_intermediate_output_ba363; assert_in_delta(0.0, (worksheet.intermediate_output_ba363||0), 0.002); end
  def test_intermediate_output_bb363; assert_in_epsilon(15.562100389454372, worksheet.intermediate_output_bb363, 0.002); end
  def test_intermediate_output_bc363; assert_in_epsilon(614.2985882067835, worksheet.intermediate_output_bc363, 0.002); end
  def test_intermediate_output_bd363; assert_in_epsilon(1405.4268384694712, worksheet.intermediate_output_bd363, 0.002); end
  def test_intermediate_output_be363; assert_in_epsilon(2482.302109237112, worksheet.intermediate_output_be363, 0.002); end
  def test_intermediate_output_bf363; assert_in_epsilon(3425.69106697603, worksheet.intermediate_output_bf363, 0.002); end
  def test_intermediate_output_bg363; assert_in_epsilon(4535.840489654824, worksheet.intermediate_output_bg363, 0.002); end
  def test_intermediate_output_bh363; assert_in_epsilon(5546.27905775604, worksheet.intermediate_output_bh363, 0.002); end
  def test_intermediate_output_bi363; assert_in_epsilon(6862.578606936548, worksheet.intermediate_output_bi363, 0.002); end
  def test_intermediate_output_c364; assert_equal("II", worksheet.intermediate_output_c364); end
  def test_intermediate_output_d364; assert_equal("Nuclear power", worksheet.intermediate_output_d364); end
  def test_intermediate_output_ay364; assert_in_epsilon(28.331712000000003, worksheet.intermediate_output_ay364, 0.002); end
  def test_intermediate_output_ba364; assert_in_epsilon(32.819904, worksheet.intermediate_output_ba364, 0.002); end
  def test_intermediate_output_bb364; assert_in_epsilon(69.987744, worksheet.intermediate_output_bb364, 0.002); end
  def test_intermediate_output_bc364; assert_in_epsilon(67.74364800000001, worksheet.intermediate_output_bc364, 0.002); end
  def test_intermediate_output_bd364; assert_in_epsilon(67.74364800000001, worksheet.intermediate_output_bd364, 0.002); end
  def test_intermediate_output_be364; assert_in_epsilon(66.34108800000001, worksheet.intermediate_output_be364, 0.002); end
  def test_intermediate_output_bf364; assert_in_epsilon(63.255456, worksheet.intermediate_output_bf364, 0.002); end
  def test_intermediate_output_bg364; assert_in_epsilon(61.71264000000001, worksheet.intermediate_output_bg364, 0.002); end
  def test_intermediate_output_bh364; assert_in_epsilon(58.627008, worksheet.intermediate_output_bh364, 0.002); end
  def test_intermediate_output_bi364; assert_in_epsilon(58.627008, worksheet.intermediate_output_bi364, 0.002); end
  def test_intermediate_output_c365; assert_equal("III", worksheet.intermediate_output_c365); end
  def test_intermediate_output_d365; assert_equal("Hydro Power Generation", worksheet.intermediate_output_d365); end
  def test_intermediate_output_ah365; assert_in_epsilon(85.8, worksheet.intermediate_output_ah365, 0.002); end
  def test_intermediate_output_ai365; assert_in_epsilon(89.3, worksheet.intermediate_output_ai365, 0.002); end
  def test_intermediate_output_aj365; assert_in_epsilon(90.6, worksheet.intermediate_output_aj365, 0.002); end
  def test_intermediate_output_ak365; assert_in_epsilon(87.7, worksheet.intermediate_output_ak365, 0.002); end
  def test_intermediate_output_al365; assert_in_epsilon(78.3, worksheet.intermediate_output_al365, 0.002); end
  def test_intermediate_output_am365; assert_in_epsilon(83.0, worksheet.intermediate_output_am365, 0.002); end
  def test_intermediate_output_an365; assert_in_epsilon(81.1, worksheet.intermediate_output_an365, 0.002); end
  def test_intermediate_output_ao365; assert_in_epsilon(81.9, worksheet.intermediate_output_ao365, 0.002); end
  def test_intermediate_output_ap365; assert_in_epsilon(73.7, worksheet.intermediate_output_ap365, 0.002); end
  def test_intermediate_output_aq365; assert_in_epsilon(75.2, worksheet.intermediate_output_aq365, 0.002); end
  def test_intermediate_output_ar365; assert_in_epsilon(69.2, worksheet.intermediate_output_ar365, 0.002); end
  def test_intermediate_output_as365; assert_in_epsilon(57.2, worksheet.intermediate_output_as365, 0.002); end
  def test_intermediate_output_at365; assert_in_epsilon(47.7, worksheet.intermediate_output_at365, 0.002); end
  def test_intermediate_output_au365; assert_in_epsilon(62.8, worksheet.intermediate_output_au365, 0.002); end
  def test_intermediate_output_av365; assert_in_epsilon(56.5, worksheet.intermediate_output_av365, 0.002); end
  def test_intermediate_output_aw365; assert_equal("Dukes 5.6 Nuclear generation - used on works", worksheet.intermediate_output_aw365); end
  def test_intermediate_output_ay365; assert_in_epsilon(121.49676, worksheet.intermediate_output_ay365, 0.002); end
  def test_intermediate_output_ba365; assert_in_epsilon(143.7624, worksheet.intermediate_output_ba365, 0.002); end
  def test_intermediate_output_bb365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bb365, 0.002); end
  def test_intermediate_output_bc365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bc365, 0.002); end
  def test_intermediate_output_bd365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bd365, 0.002); end
  def test_intermediate_output_be365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_be365, 0.002); end
  def test_intermediate_output_bf365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bf365, 0.002); end
  def test_intermediate_output_bg365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bg365, 0.002); end
  def test_intermediate_output_bh365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bh365, 0.002); end
  def test_intermediate_output_bi365; assert_in_epsilon(171.81360000000004, worksheet.intermediate_output_bi365, 0.002); end
  def test_intermediate_output_c366; assert_equal("IV.a", worksheet.intermediate_output_c366); end
  def test_intermediate_output_d366; assert_equal("Solar PV", worksheet.intermediate_output_d366); end
  def test_intermediate_output_ar366; assert_in_epsilon(3.6, worksheet.intermediate_output_ar366, 0.002); end
  def test_intermediate_output_as366; assert_in_epsilon(4.5, worksheet.intermediate_output_as366, 0.002); end
  def test_intermediate_output_at366; assert_in_epsilon(5.8, worksheet.intermediate_output_at366, 0.002); end
  def test_intermediate_output_au366; assert_in_epsilon(7.6, worksheet.intermediate_output_au366, 0.002); end
  def test_intermediate_output_av366; assert_in_epsilon(7.1, worksheet.intermediate_output_av366, 0.002); end
  def test_intermediate_output_aw366; assert_equal("Dukes 7.4 Generation Onshore wind", worksheet.intermediate_output_aw366); end
  def test_intermediate_output_ay366; assert_in_delta(0.0, (worksheet.intermediate_output_ay366||0), 0.002); end
  def test_intermediate_output_ba366; assert_in_epsilon(1.56727314, worksheet.intermediate_output_ba366, 0.002); end
  def test_intermediate_output_bb366; assert_in_epsilon(8.272745946, worksheet.intermediate_output_bb366, 0.002); end
  def test_intermediate_output_bc366; assert_in_epsilon(18.558353960999998, worksheet.intermediate_output_bc366, 0.002); end
  def test_intermediate_output_bd366; assert_in_epsilon(32.792269185, worksheet.intermediate_output_bd366, 0.002); end
  def test_intermediate_output_be366; assert_in_epsilon(47.823373215000004, worksheet.intermediate_output_be366, 0.002); end
  def test_intermediate_output_bf366; assert_in_epsilon(60.99299523, worksheet.intermediate_output_bf366, 0.002); end
  def test_intermediate_output_bg366; assert_in_epsilon(69.11991, worksheet.intermediate_output_bg366, 0.002); end
  def test_intermediate_output_bh366; assert_in_epsilon(68.11182, worksheet.intermediate_output_bh366, 0.002); end
  def test_intermediate_output_bi366; assert_in_epsilon(59.6088, worksheet.intermediate_output_bi366, 0.002); end
  def test_intermediate_output_c367; assert_equal("IV.b", worksheet.intermediate_output_c367); end
  def test_intermediate_output_d367; assert_equal("Solar CSP", worksheet.intermediate_output_d367); end
  def test_intermediate_output_ar367; assert_in_delta(0.7, worksheet.intermediate_output_ar367, 0.002); end
  def test_intermediate_output_as367; assert_in_delta(0.8, worksheet.intermediate_output_as367, 0.002); end
  def test_intermediate_output_at367; assert_in_epsilon(1.3, worksheet.intermediate_output_at367, 0.002); end
  def test_intermediate_output_au367; assert_in_epsilon(1.7, worksheet.intermediate_output_au367, 0.002); end
  def test_intermediate_output_av367; assert_in_epsilon(3.0, worksheet.intermediate_output_av367, 0.002); end
  def test_intermediate_output_aw367; assert_equal("Dukes 7.4 Generation Offshore wind", worksheet.intermediate_output_aw367); end
  def test_intermediate_output_ay367; assert_in_delta(0.0, (worksheet.intermediate_output_ay367||0), 0.002); end
  def test_intermediate_output_ba367; assert_in_delta(0.0, (worksheet.intermediate_output_ba367||0), 0.002); end
  def test_intermediate_output_bb367; assert_in_epsilon(2.5246079999999997, worksheet.intermediate_output_bb367, 0.002); end
  def test_intermediate_output_bc367; assert_in_epsilon(8.573148, worksheet.intermediate_output_bc367, 0.002); end
  def test_intermediate_output_bd367; assert_in_epsilon(15.638544, worksheet.intermediate_output_bd367, 0.002); end
  def test_intermediate_output_be367; assert_in_epsilon(25.719444000000003, worksheet.intermediate_output_be367, 0.002); end
  def test_intermediate_output_bf367; assert_in_epsilon(33.784164, worksheet.intermediate_output_bf367, 0.002); end
  def test_intermediate_output_bg367; assert_in_epsilon(37.81652400000001, worksheet.intermediate_output_bg367, 0.002); end
  def test_intermediate_output_bh367; assert_in_epsilon(35.291916, worksheet.intermediate_output_bh367, 0.002); end
  def test_intermediate_output_bi367; assert_in_epsilon(29.243376, worksheet.intermediate_output_bi367, 0.002); end
  def test_intermediate_output_c368; assert_equal("IV.c.1", worksheet.intermediate_output_c368); end
  def test_intermediate_output_d368; assert_equal("Onshore Wind", worksheet.intermediate_output_d368); end
  def test_intermediate_output_ah368; assert_in_epsilon(2.8, worksheet.intermediate_output_ah368, 0.002); end
  def test_intermediate_output_ai368; assert_in_epsilon(3.3, worksheet.intermediate_output_ai368, 0.002); end
  def test_intermediate_output_aj368; assert_in_epsilon(4.2, worksheet.intermediate_output_aj368, 0.002); end
  def test_intermediate_output_ak368; assert_in_epsilon(4.4, worksheet.intermediate_output_ak368, 0.002); end
  def test_intermediate_output_al368; assert_in_epsilon(4.3, worksheet.intermediate_output_al368, 0.002); end
  def test_intermediate_output_am368; assert_in_epsilon(3.2, worksheet.intermediate_output_am368, 0.002); end
  def test_intermediate_output_an368; assert_in_epsilon(3.9, worksheet.intermediate_output_an368, 0.002); end
  def test_intermediate_output_ao368; assert_in_epsilon(2.6, worksheet.intermediate_output_ao368, 0.002); end
  def test_intermediate_output_ap368; assert_in_epsilon(3.9, worksheet.intermediate_output_ap368, 0.002); end
  def test_intermediate_output_aq368; assert_in_epsilon(3.8, worksheet.intermediate_output_aq368, 0.002); end
  def test_intermediate_output_ar368; assert_in_epsilon(3.7, worksheet.intermediate_output_ar368, 0.002); end
  def test_intermediate_output_as368; assert_in_epsilon(4.1, worksheet.intermediate_output_as368, 0.002); end
  def test_intermediate_output_at368; assert_in_epsilon(4.2, worksheet.intermediate_output_at368, 0.002); end
  def test_intermediate_output_au368; assert_in_epsilon(4.3, worksheet.intermediate_output_au368, 0.002); end
  def test_intermediate_output_av368; assert_in_epsilon(2.7, worksheet.intermediate_output_av368, 0.002); end
  def test_intermediate_output_aw368; assert_equal("Dukes 5.6 Hydro - natural flow generation - used on works", worksheet.intermediate_output_aw368); end
  def test_intermediate_output_ay368; assert_in_epsilon(12.437183268, worksheet.intermediate_output_ay368, 0.002); end
  def test_intermediate_output_ba368; assert_in_epsilon(18.7222492332, worksheet.intermediate_output_ba368, 0.002); end
  def test_intermediate_output_bb368; assert_in_epsilon(36.6048892332, worksheet.intermediate_output_bb368, 0.002); end
  def test_intermediate_output_bc368; assert_in_epsilon(58.5198892332, worksheet.intermediate_output_bc368, 0.002); end
  def test_intermediate_output_bd368; assert_in_epsilon(81.31148923319999, worksheet.intermediate_output_bd368, 0.002); end
  def test_intermediate_output_be368; assert_in_epsilon(110.8967392332, worksheet.intermediate_output_be368, 0.002); end
  def test_intermediate_output_bf368; assert_in_epsilon(129.14055596519998, worksheet.intermediate_output_bf368, 0.002); end
  def test_intermediate_output_bg368; assert_in_epsilon(139.86153, worksheet.intermediate_output_bg368, 0.002); end
  def test_intermediate_output_bh368; assert_in_epsilon(148.27688999999998, worksheet.intermediate_output_bh368, 0.002); end
  def test_intermediate_output_bi368; assert_in_epsilon(148.80284999999998, worksheet.intermediate_output_bi368, 0.002); end
  def test_intermediate_output_c369; assert_equal("IV.c.2", worksheet.intermediate_output_c369); end
  def test_intermediate_output_d369; assert_equal("Offshore Wind", worksheet.intermediate_output_d369); end
  def test_intermediate_output_ay369; assert_in_delta(0.0, (worksheet.intermediate_output_ay369||0), 0.002); end
  def test_intermediate_output_ba369; assert_in_delta(0.0, (worksheet.intermediate_output_ba369||0), 0.002); end
  def test_intermediate_output_bb369; assert_in_delta(0.0, (worksheet.intermediate_output_bb369||0), 0.002); end
  def test_intermediate_output_bc369; assert_in_epsilon(1.4463900000000003, worksheet.intermediate_output_bc369, 0.002); end
  def test_intermediate_output_bd369; assert_in_epsilon(3.02427, worksheet.intermediate_output_bd369, 0.002); end
  def test_intermediate_output_be369; assert_in_epsilon(4.602149999999999, worksheet.intermediate_output_be369, 0.002); end
  def test_intermediate_output_bf369; assert_in_epsilon(7.84557, worksheet.intermediate_output_bf369, 0.002); end
  def test_intermediate_output_bg369; assert_in_epsilon(11.176649999999999, worksheet.intermediate_output_bg369, 0.002); end
  def test_intermediate_output_bh369; assert_in_epsilon(12.88602, worksheet.intermediate_output_bh369, 0.002); end
  def test_intermediate_output_bi369; assert_in_epsilon(13.149, worksheet.intermediate_output_bi369, 0.002); end
  def test_intermediate_output_c370; assert_equal("IV.d", worksheet.intermediate_output_c370); end
  def test_intermediate_output_d370; assert_equal("Small Hydro", worksheet.intermediate_output_d370); end
  def test_intermediate_output_ay370; assert_in_epsilon(7.013834388000001, worksheet.intermediate_output_ay370, 0.002); end
  def test_intermediate_output_ba370; assert_in_epsilon(12.081458988000001, worksheet.intermediate_output_ba370, 0.002); end
  def test_intermediate_output_bb370; assert_in_epsilon(17.604038988000003, worksheet.intermediate_output_bb370, 0.002); end
  def test_intermediate_output_bc370; assert_in_epsilon(23.937473988000004, worksheet.intermediate_output_bc370, 0.002); end
  def test_intermediate_output_bd370; assert_in_epsilon(27.750683988000002, worksheet.intermediate_output_bd370, 0.002); end
  def test_intermediate_output_be370; assert_in_epsilon(31.651553988000003, worksheet.intermediate_output_be370, 0.002); end
  def test_intermediate_output_bf370; assert_in_epsilon(33.623903988, worksheet.intermediate_output_bf370, 0.002); end
  def test_intermediate_output_bg370; assert_in_epsilon(33.902259552000004, worksheet.intermediate_output_bg370, 0.002); end
  def test_intermediate_output_bh370; assert_in_epsilon(34.790711183999996, worksheet.intermediate_output_bh370, 0.002); end
  def test_intermediate_output_bi370; assert_in_epsilon(35.38241618399999, worksheet.intermediate_output_bi370, 0.002); end
  def test_intermediate_output_c371; assert_equal("V.a", worksheet.intermediate_output_c371); end
  def test_intermediate_output_d371; assert_equal("Biomass Based Electricity& Biogas", worksheet.intermediate_output_d371); end
  def test_intermediate_output_ay371; assert_in_epsilon(9.538388888888889, worksheet.intermediate_output_ay371, 0.002); end
  def test_intermediate_output_ba371; assert_in_epsilon(9.74545, worksheet.intermediate_output_ba371, 0.002); end
  def test_intermediate_output_bb371; assert_in_epsilon(11.119143750000001, worksheet.intermediate_output_bb371, 0.002); end
  def test_intermediate_output_bc371; assert_in_epsilon(12.4928375, worksheet.intermediate_output_bc371, 0.002); end
  def test_intermediate_output_bd371; assert_in_epsilon(13.866531250000003, worksheet.intermediate_output_bd371, 0.002); end
  def test_intermediate_output_be371; assert_in_epsilon(15.240225000000006, worksheet.intermediate_output_be371, 0.002); end
  def test_intermediate_output_bf371; assert_in_epsilon(16.613918750000003, worksheet.intermediate_output_bf371, 0.002); end
  def test_intermediate_output_bg371; assert_in_epsilon(17.987612500000004, worksheet.intermediate_output_bg371, 0.002); end
  def test_intermediate_output_bh371; assert_in_epsilon(19.361306250000005, worksheet.intermediate_output_bh371, 0.002); end
  def test_intermediate_output_bi371; assert_in_epsilon(20.735000000000003, worksheet.intermediate_output_bi371, 0.002); end
  def test_intermediate_output_c372; assert_equal("VI.a", worksheet.intermediate_output_c372); end
  def test_intermediate_output_d372; assert_equal("Waste to Electricity", worksheet.intermediate_output_d372); end
  def test_intermediate_output_ay372; assert_in_delta(0.0, (worksheet.intermediate_output_ay372||0), 0.002); end
  def test_intermediate_output_ba372; assert_in_delta(0.0, (worksheet.intermediate_output_ba372||0), 0.002); end
  def test_intermediate_output_bb372; assert_in_delta(0.0, (worksheet.intermediate_output_bb372||0), 0.002); end
  def test_intermediate_output_bc372; assert_in_delta(0.0, (worksheet.intermediate_output_bc372||0), 0.002); end
  def test_intermediate_output_bd372; assert_in_delta(0.0, (worksheet.intermediate_output_bd372||0), 0.002); end
  def test_intermediate_output_be372; assert_in_delta(0.0, (worksheet.intermediate_output_be372||0), 0.002); end
  def test_intermediate_output_bf372; assert_in_delta(0.0, (worksheet.intermediate_output_bf372||0), 0.002); end
  def test_intermediate_output_bg372; assert_in_delta(0.0, (worksheet.intermediate_output_bg372||0), 0.002); end
  def test_intermediate_output_bh372; assert_in_delta(0.0, (worksheet.intermediate_output_bh372||0), 0.002); end
  def test_intermediate_output_bi372; assert_in_delta(0.0, (worksheet.intermediate_output_bi372||0), 0.002); end
  def test_intermediate_output_c373; assert_equal("VII.a", worksheet.intermediate_output_c373); end
  def test_intermediate_output_d373; assert_equal("Electricity imports", worksheet.intermediate_output_d373); end
  def test_intermediate_output_ar373; assert_in_epsilon(7.9, worksheet.intermediate_output_ar373, 0.002); end
  def test_intermediate_output_as373; assert_in_epsilon(9.4, worksheet.intermediate_output_as373, 0.002); end
  def test_intermediate_output_at373; assert_in_epsilon(11.3, worksheet.intermediate_output_at373, 0.002); end
  def test_intermediate_output_au373; assert_in_epsilon(13.6, worksheet.intermediate_output_au373, 0.002); end
  def test_intermediate_output_av373; assert_in_epsilon(12.9, worksheet.intermediate_output_av373, 0.002); end
  def test_intermediate_output_aw373; assert_equal("Sum of above", worksheet.intermediate_output_aw373); end
  def test_intermediate_output_ay373; assert_in_delta(1.0, worksheet.intermediate_output_ay373, 0.002); end
  def test_intermediate_output_ba373; assert_in_epsilon(4.0, worksheet.intermediate_output_ba373, 0.002); end
  def test_intermediate_output_bb373; assert_in_epsilon(14.0, worksheet.intermediate_output_bb373, 0.002); end
  def test_intermediate_output_bc373; assert_in_epsilon(21.0, worksheet.intermediate_output_bc373, 0.002); end
  def test_intermediate_output_bd373; assert_in_epsilon(31.0, worksheet.intermediate_output_bd373, 0.002); end
  def test_intermediate_output_be373; assert_in_epsilon(40.0, worksheet.intermediate_output_be373, 0.002); end
  def test_intermediate_output_bf373; assert_in_epsilon(49.0, worksheet.intermediate_output_bf373, 0.002); end
  def test_intermediate_output_bg373; assert_in_epsilon(55.0, worksheet.intermediate_output_bg373, 0.002); end
  def test_intermediate_output_bh373; assert_in_epsilon(55.0, worksheet.intermediate_output_bh373, 0.002); end
  def test_intermediate_output_bi373; assert_in_epsilon(55.0, worksheet.intermediate_output_bi373, 0.002); end
  def test_intermediate_output_d374; assert_equal("Total generation supplied to grid", worksheet.intermediate_output_d374); end
  def test_intermediate_output_ar374; assert_in_epsilon(352.2, worksheet.intermediate_output_ar374, 0.002); end
  def test_intermediate_output_as374; assert_in_epsilon(348.4, worksheet.intermediate_output_as374, 0.002); end
  def test_intermediate_output_at374; assert_in_epsilon(349.3, worksheet.intermediate_output_at374, 0.002); end
  def test_intermediate_output_au374; assert_in_epsilon(329.3, worksheet.intermediate_output_au374, 0.002); end
  def test_intermediate_output_av374; assert_in_epsilon(335.1, worksheet.intermediate_output_av374, 0.002); end
  def test_intermediate_output_aw374; assert_equal("Sum of above", worksheet.intermediate_output_aw374); end
  def test_intermediate_output_ay374; assert_in_epsilon(790.769700205529, worksheet.intermediate_output_ay374, 0.002); end
  def test_intermediate_output_ba374; assert_in_epsilon(1030.1577354872481, worksheet.intermediate_output_ba374, 0.002); end
  def test_intermediate_output_bb374; assert_in_epsilon(1444.7826289093357, worksheet.intermediate_output_bb374, 0.002); end
  def test_intermediate_output_bc374; assert_in_epsilon(2044.301437119985, worksheet.intermediate_output_bc374, 0.002); end
  def test_intermediate_output_bd374; assert_in_epsilon(2817.7333966126735, worksheet.intermediate_output_bd374, 0.002); end
  def test_intermediate_output_be374; assert_in_epsilon(3882.911545480314, worksheet.intermediate_output_be374, 0.002); end
  def test_intermediate_output_bf374; assert_in_epsilon(4819.455965199837, worksheet.intermediate_output_bf374, 0.002); end
  def test_intermediate_output_bg374; assert_in_epsilon(5890.11216053743, worksheet.intermediate_output_bg374, 0.002); end
  def test_intermediate_output_bh374; assert_in_epsilon(6842.932433212647, worksheet.intermediate_output_bh374, 0.002); end
  def test_intermediate_output_bi374; assert_in_epsilon(7928.989203915955, worksheet.intermediate_output_bi374, 0.002); end
  def test_intermediate_output_b377; assert_equal("Import proportions", worksheet.intermediate_output_b377); end
  def test_intermediate_output_c378; assert_equal("Y.04", worksheet.intermediate_output_c378); end
  def test_intermediate_output_d378; assert_equal("Coal imports", worksheet.intermediate_output_d378); end
  def test_intermediate_output_h378; assert_in_epsilon(-29.52857, worksheet.intermediate_output_h378, 0.002); end
  def test_intermediate_output_i378; assert_in_epsilon(9.75757, worksheet.intermediate_output_i378, 0.002); end
  def test_intermediate_output_j378; assert_in_epsilon(22.96925, worksheet.intermediate_output_j378, 0.002); end
  def test_intermediate_output_k378; assert_in_epsilon(-10.66471, worksheet.intermediate_output_k378, 0.002); end
  def test_intermediate_output_l378; assert_in_epsilon(1.95384, worksheet.intermediate_output_l378, 0.002); end
  def test_intermediate_output_m378; assert_in_epsilon(14.35142, worksheet.intermediate_output_m378, 0.002); end
  def test_intermediate_output_n378; assert_in_epsilon(5.86152, worksheet.intermediate_output_n378, 0.002); end
  def test_intermediate_output_o378; assert_in_delta(0.09304, worksheet.intermediate_output_o378, 0.002); end
  def test_intermediate_output_p378; assert_in_epsilon(-4.97764, worksheet.intermediate_output_p378, 0.002); end
  def test_intermediate_output_q378; assert_in_epsilon(13.30472, worksheet.intermediate_output_q378, 0.002); end
  def test_intermediate_output_r378; assert_in_epsilon(19.8873, worksheet.intermediate_output_r378, 0.002); end
  def test_intermediate_output_s378; assert_in_epsilon(-42.93796, worksheet.intermediate_output_s378, 0.002); end
  def test_intermediate_output_t378; assert_in_epsilon(-27.13279, worksheet.intermediate_output_t378, 0.002); end
  def test_intermediate_output_u378; assert_in_epsilon(-13.15353, worksheet.intermediate_output_u378, 0.002); end
  def test_intermediate_output_v378; assert_in_epsilon(73.40856, worksheet.intermediate_output_v378, 0.002); end
  def test_intermediate_output_w378; assert_in_epsilon(81.88683, worksheet.intermediate_output_w378, 0.002); end
  def test_intermediate_output_x378; assert_in_epsilon(60.23177, worksheet.intermediate_output_x378, 0.002); end
  def test_intermediate_output_y378; assert_in_epsilon(63.86033, worksheet.intermediate_output_y378, 0.002); end
  def test_intermediate_output_z378; assert_in_epsilon(89.26025, worksheet.intermediate_output_z378, 0.002); end
  def test_intermediate_output_aa378; assert_in_epsilon(82.59626, worksheet.intermediate_output_aa378, 0.002); end
  def test_intermediate_output_ab378; assert_in_epsilon(97.58733, worksheet.intermediate_output_ab378, 0.002); end
  def test_intermediate_output_ac378; assert_in_epsilon(139.17621, worksheet.intermediate_output_ac378, 0.002); end
  def test_intermediate_output_ad378; assert_in_epsilon(152.36463, worksheet.intermediate_output_ad378, 0.002); end
  def test_intermediate_output_ae378; assert_in_epsilon(141.29287, worksheet.intermediate_output_ae378, 0.002); end
  def test_intermediate_output_af378; assert_in_epsilon(113.29946, worksheet.intermediate_output_af378, 0.002); end
  def test_intermediate_output_ag378; assert_in_epsilon(124.74338, worksheet.intermediate_output_ag378, 0.002); end
  def test_intermediate_output_ah378; assert_in_epsilon(142.419426770673, worksheet.intermediate_output_ah378, 0.002); end
  def test_intermediate_output_ai378; assert_in_epsilon(155.127946717844, worksheet.intermediate_output_ai378, 0.002); end
  def test_intermediate_output_aj378; assert_in_epsilon(167.939798014946, worksheet.intermediate_output_aj378, 0.002); end
  def test_intermediate_output_ak378; assert_in_epsilon(154.269390475848, worksheet.intermediate_output_ak378, 0.002); end
  def test_intermediate_output_al378; assert_in_epsilon(177.54271957614, worksheet.intermediate_output_al378, 0.002); end
  def test_intermediate_output_am378; assert_in_epsilon(266.164196212801, worksheet.intermediate_output_am378, 0.002); end
  def test_intermediate_output_an378; assert_in_epsilon(213.157281152347, worksheet.intermediate_output_an378, 0.002); end
  def test_intermediate_output_ao378; assert_in_epsilon(242.680946975591, worksheet.intermediate_output_ao378, 0.002); end
  def test_intermediate_output_ap378; assert_in_epsilon(274.594113303141, worksheet.intermediate_output_ap378, 0.002); end
  def test_intermediate_output_aq378; assert_in_epsilon(333.178454490771, worksheet.intermediate_output_aq378, 0.002); end
  def test_intermediate_output_ar378; assert_in_epsilon(382.634191991217, worksheet.intermediate_output_ar378, 0.002); end
  def test_intermediate_output_as378; assert_in_epsilon(329.578033333439, worksheet.intermediate_output_as378, 0.002); end
  def test_intermediate_output_at378; assert_in_epsilon(329.254958699124, worksheet.intermediate_output_at378, 0.002); end
  def test_intermediate_output_au378; assert_in_epsilon(281.378070222345, worksheet.intermediate_output_au378, 0.002); end
  def test_intermediate_output_av378; assert_in_epsilon(192.811684484113, worksheet.intermediate_output_av378, 0.002); end
  def test_intermediate_output_aw378; assert_equal("Dukes long-term trends 1.1.2 coal imports - coal exports", worksheet.intermediate_output_aw378); end
  def test_intermediate_output_ay378; assert_in_epsilon(312.87744559290513, worksheet.intermediate_output_ay378, 0.002); end
  def test_intermediate_output_ba378; assert_in_epsilon(526.8956907848014, worksheet.intermediate_output_ba378, 0.002); end
  def test_intermediate_output_bb378; assert_in_epsilon(1319.3124738576794, worksheet.intermediate_output_bb378, 0.002); end
  def test_intermediate_output_bc378; assert_in_epsilon(3014.730522878498, worksheet.intermediate_output_bc378, 0.002); end
  def test_intermediate_output_bd378; assert_in_epsilon(5379.582453613374, worksheet.intermediate_output_bd378, 0.002); end
  def test_intermediate_output_be378; assert_in_epsilon(8802.568575656194, worksheet.intermediate_output_be378, 0.002); end
  def test_intermediate_output_bf378; assert_in_epsilon(11942.655541869855, worksheet.intermediate_output_bf378, 0.002); end
  def test_intermediate_output_bg378; assert_in_epsilon(16105.085873409915, worksheet.intermediate_output_bg378, 0.002); end
  def test_intermediate_output_bh378; assert_in_epsilon(19783.852472013532, worksheet.intermediate_output_bh378, 0.002); end
  def test_intermediate_output_bi378; assert_in_epsilon(23759.648675014454, worksheet.intermediate_output_bi378, 0.002); end
  def test_intermediate_output_c379; assert_equal("Y.05", worksheet.intermediate_output_c379); end
  def test_intermediate_output_d379; assert_equal("Oil imports", worksheet.intermediate_output_d379); end
  def test_intermediate_output_aj379; assert_in_epsilon(-467.10732, worksheet.intermediate_output_aj379, 0.002); end
  def test_intermediate_output_ak379; assert_in_epsilon(-598.15416, worksheet.intermediate_output_ak379, 0.002); end
  def test_intermediate_output_al379; assert_in_epsilon(-491.289015345148, worksheet.intermediate_output_al379, 0.002); end
  def test_intermediate_output_am379; assert_in_epsilon(-425.923816553362, worksheet.intermediate_output_am379, 0.002); end
  def test_intermediate_output_an379; assert_in_epsilon(-385.362040231585, worksheet.intermediate_output_an379, 0.002); end
  def test_intermediate_output_ao379; assert_in_epsilon(-265.313047678547, worksheet.intermediate_output_ao379, 0.002); end
  def test_intermediate_output_ap379; assert_in_epsilon(-26.7418072519548, worksheet.intermediate_output_ap379, 0.002); end
  def test_intermediate_output_aq379; assert_in_epsilon(59.0560078145415, worksheet.intermediate_output_aq379, 0.002); end
  def test_intermediate_output_ar379; assert_in_epsilon(116.268946233383, worksheet.intermediate_output_ar379, 0.002); end
  def test_intermediate_output_as379; assert_in_epsilon(79.7439769052016, worksheet.intermediate_output_as379, 0.002); end
  def test_intermediate_output_at379; assert_in_epsilon(146.439372991402, worksheet.intermediate_output_at379, 0.002); end
  def test_intermediate_output_au379; assert_in_epsilon(115.647880946813, worksheet.intermediate_output_au379, 0.002); end
  def test_intermediate_output_av379; assert_in_epsilon(156.542161812907, worksheet.intermediate_output_av379, 0.002); end
  def test_intermediate_output_aw379; assert_equal("Dukes 1.1 Primary oils imports - exports", worksheet.intermediate_output_aw379); end
  def test_intermediate_output_ay379; assert_in_epsilon(1235.4943240445418, worksheet.intermediate_output_ay379, 0.002); end
  def test_intermediate_output_ba379; assert_in_epsilon(1459.1773716311466, worksheet.intermediate_output_ba379, 0.002); end
  def test_intermediate_output_bb379; assert_in_epsilon(2094.1308465841576, worksheet.intermediate_output_bb379, 0.002); end
  def test_intermediate_output_bc379; assert_in_epsilon(3065.9673559076937, worksheet.intermediate_output_bc379, 0.002); end
  def test_intermediate_output_bd379; assert_in_epsilon(4157.631767599084, worksheet.intermediate_output_bd379, 0.002); end
  def test_intermediate_output_be379; assert_in_epsilon(5448.054666446535, worksheet.intermediate_output_be379, 0.002); end
  def test_intermediate_output_bf379; assert_in_epsilon(6933.9942488753495, worksheet.intermediate_output_bf379, 0.002); end
  def test_intermediate_output_bg379; assert_in_epsilon(8427.225528478948, worksheet.intermediate_output_bg379, 0.002); end
  def test_intermediate_output_bh379; assert_in_epsilon(10106.26043154715, worksheet.intermediate_output_bh379, 0.002); end
  def test_intermediate_output_bi379; assert_in_epsilon(12020.741898724571, worksheet.intermediate_output_bi379, 0.002); end
  def test_intermediate_output_c380; assert_equal("Y.06", worksheet.intermediate_output_c380); end
  def test_intermediate_output_d380; assert_equal("Gas imports", worksheet.intermediate_output_d380); end
  def test_intermediate_output_h380; assert_in_epsilon(9.759, worksheet.intermediate_output_h380, 0.002); end
  def test_intermediate_output_i380; assert_in_epsilon(9.73, worksheet.intermediate_output_i380, 0.002); end
  def test_intermediate_output_j380; assert_in_epsilon(8.968, worksheet.intermediate_output_j380, 0.002); end
  def test_intermediate_output_k380; assert_in_epsilon(8.587, worksheet.intermediate_output_k380, 0.002); end
  def test_intermediate_output_l380; assert_in_epsilon(7.122, worksheet.intermediate_output_l380, 0.002); end
  def test_intermediate_output_m380; assert_in_epsilon(9.818, worksheet.intermediate_output_m380, 0.002); end
  def test_intermediate_output_n380; assert_in_epsilon(11.254, worksheet.intermediate_output_n380, 0.002); end
  def test_intermediate_output_o380; assert_in_epsilon(19.548, worksheet.intermediate_output_o380, 0.002); end
  def test_intermediate_output_p380; assert_in_epsilon(55.361, worksheet.intermediate_output_p380, 0.002); end
  def test_intermediate_output_q380; assert_in_epsilon(95.424, worksheet.intermediate_output_q380, 0.002); end
  def test_intermediate_output_r380; assert_in_epsilon(116.291, worksheet.intermediate_output_r380, 0.002); end
  def test_intermediate_output_s380; assert_in_epsilon(124.262, worksheet.intermediate_output_s380, 0.002); end
  def test_intermediate_output_t380; assert_in_epsilon(115.001, worksheet.intermediate_output_t380, 0.002); end
  def test_intermediate_output_u380; assert_in_epsilon(124.497, worksheet.intermediate_output_u380, 0.002); end
  def test_intermediate_output_v380; assert_in_epsilon(147.415, worksheet.intermediate_output_v380, 0.002); end
  def test_intermediate_output_w380; assert_in_epsilon(147.122, worksheet.intermediate_output_w380, 0.002); end
  def test_intermediate_output_x380; assert_in_epsilon(137.099, worksheet.intermediate_output_x380, 0.002); end
  def test_intermediate_output_y380; assert_in_epsilon(128.893, worksheet.intermediate_output_y380, 0.002); end
  def test_intermediate_output_z380; assert_in_epsilon(115.441, worksheet.intermediate_output_z380, 0.002); end
  def test_intermediate_output_aa380; assert_in_epsilon(113.77, worksheet.intermediate_output_aa380, 0.002); end
  def test_intermediate_output_ab380; assert_in_epsilon(79.833, worksheet.intermediate_output_ab380, 0.002); end
  def test_intermediate_output_ac380; assert_in_epsilon(72.007, worksheet.intermediate_output_ac380, 0.002); end
  def test_intermediate_output_ad380; assert_in_epsilon(60.635, worksheet.intermediate_output_ad380, 0.002); end
  def test_intermediate_output_ae380; assert_in_epsilon(41.704, worksheet.intermediate_output_ae380, 0.002); end
  def test_intermediate_output_af380; assert_in_epsilon(23.496, worksheet.intermediate_output_af380, 0.002); end
  def test_intermediate_output_ag380; assert_in_epsilon(8.225, worksheet.intermediate_output_ag380, 0.002); end
  def test_intermediate_output_ah380; assert_in_epsilon(4.601, worksheet.intermediate_output_ah380, 0.002); end
  def test_intermediate_output_ai380; assert_in_epsilon(-7.604, worksheet.intermediate_output_ai380, 0.002); end
  def test_intermediate_output_aj380; assert_in_epsilon(-21.022, worksheet.intermediate_output_aj380, 0.002); end
  def test_intermediate_output_ak380; assert_in_epsilon(-71.571, worksheet.intermediate_output_ak380, 0.002); end
  def test_intermediate_output_al380; assert_in_epsilon(-120.31, worksheet.intermediate_output_al380, 0.002); end
  def test_intermediate_output_am380; assert_in_epsilon(-107.866, worksheet.intermediate_output_am380, 0.002); end
  def test_intermediate_output_an380; assert_in_epsilon(-90.238, worksheet.intermediate_output_an380, 0.002); end
  def test_intermediate_output_ao380; assert_in_epsilon(-90.741, worksheet.intermediate_output_ao380, 0.002); end
  def test_intermediate_output_ap380; assert_in_epsilon(18.9210152317339, worksheet.intermediate_output_ap380, 0.002); end
  def test_intermediate_output_aq380; assert_in_epsilon(77.1469066294905, worksheet.intermediate_output_aq380, 0.002); end
  def test_intermediate_output_ar380; assert_in_epsilon(123.438611928566, worksheet.intermediate_output_ar380, 0.002); end
  def test_intermediate_output_as380; assert_in_epsilon(214.868653082757, worksheet.intermediate_output_as380, 0.002); end
  def test_intermediate_output_at380; assert_in_epsilon(284.384233699597, worksheet.intermediate_output_at380, 0.002); end
  def test_intermediate_output_au380; assert_in_epsilon(318.688961523769, worksheet.intermediate_output_au380, 0.002); end
  def test_intermediate_output_av380; assert_in_epsilon(413.098109925268, worksheet.intermediate_output_av380, 0.002); end
  def test_intermediate_output_aw380; assert_equal("Dukes long-term trends 4.1.1 Methane imports - exports", worksheet.intermediate_output_aw380); end
  def test_intermediate_output_ay380; assert_in_epsilon(134.32821625762193, worksheet.intermediate_output_ay380, 0.002); end
  def test_intermediate_output_ba380; assert_in_epsilon(132.0559696218025, worksheet.intermediate_output_ba380, 0.002); end
  def test_intermediate_output_bb380; assert_in_epsilon(414.231003015371, worksheet.intermediate_output_bb380, 0.002); end
  def test_intermediate_output_bc380; assert_in_epsilon(540.7635700654292, worksheet.intermediate_output_bc380, 0.002); end
  def test_intermediate_output_bd380; assert_in_epsilon(673.6005422237332, worksheet.intermediate_output_bd380, 0.002); end
  def test_intermediate_output_be380; assert_in_epsilon(830.478053007228, worksheet.intermediate_output_be380, 0.002); end
  def test_intermediate_output_bf380; assert_in_epsilon(1027.9601614841856, worksheet.intermediate_output_bf380, 0.002); end
  def test_intermediate_output_bg380; assert_in_epsilon(1246.6262326346414, worksheet.intermediate_output_bg380, 0.002); end
  def test_intermediate_output_bh380; assert_in_epsilon(1483.7758959320668, worksheet.intermediate_output_bh380, 0.002); end
  def test_intermediate_output_bi380; assert_in_epsilon(1774.0609355299016, worksheet.intermediate_output_bi380, 0.002); end
  def test_intermediate_output_d381; assert_equal("Overall imports", worksheet.intermediate_output_d381); end
  def test_intermediate_output_ay381; assert_in_epsilon(1682.699985895069, worksheet.intermediate_output_ay381, 0.002); end
  def test_intermediate_output_ba381; assert_in_epsilon(2118.1290320377507, worksheet.intermediate_output_ba381, 0.002); end
  def test_intermediate_output_bb381; assert_in_epsilon(3827.6743234572077, worksheet.intermediate_output_bb381, 0.002); end
  def test_intermediate_output_bc381; assert_in_epsilon(6621.461448851621, worksheet.intermediate_output_bc381, 0.002); end
  def test_intermediate_output_bd381; assert_in_epsilon(10210.814763436192, worksheet.intermediate_output_bd381, 0.002); end
  def test_intermediate_output_be381; assert_in_epsilon(15081.101295109956, worksheet.intermediate_output_be381, 0.002); end
  def test_intermediate_output_bf381; assert_in_epsilon(19904.60995222939, worksheet.intermediate_output_bf381, 0.002); end
  def test_intermediate_output_bg381; assert_in_epsilon(25778.937634523503, worksheet.intermediate_output_bg381, 0.002); end
  def test_intermediate_output_bh381; assert_in_epsilon(31373.88879949275, worksheet.intermediate_output_bh381, 0.002); end
  def test_intermediate_output_bi381; assert_in_epsilon(37554.451509268925, worksheet.intermediate_output_bi381, 0.002); end
  def test_intermediate_output_d396; assert_equal("Country", worksheet.intermediate_output_d396); end
  def test_intermediate_output_f396; assert_equal("Electricity demand per capita", worksheet.intermediate_output_f396); end
  def test_intermediate_output_d397; assert_equal("Iceland 2012", worksheet.intermediate_output_d397); end
  def test_intermediate_output_f397; assert_in_delta(5.262099e-05, worksheet.intermediate_output_f397, 0.002); end
  def test_intermediate_output_d398; assert_equal("US 2012", worksheet.intermediate_output_d398); end
  def test_intermediate_output_f398; assert_in_delta(1.19198e-05, worksheet.intermediate_output_f398, 0.002); end
  def test_intermediate_output_d399; assert_equal("China 2012", worksheet.intermediate_output_d399); end
  def test_intermediate_output_f399; assert_in_delta(2.55948e-06, worksheet.intermediate_output_f399, 0.002); end
  def test_intermediate_output_d400; assert_equal("UK 2012", worksheet.intermediate_output_d400); end
  def test_intermediate_output_f400; assert_in_delta(5.46734e-06, worksheet.intermediate_output_f400, 0.002); end
  def test_intermediate_output_d401; assert_equal("India 2012", worksheet.intermediate_output_d401); end
  def test_intermediate_output_f401; assert_in_delta(4.9839e-07, worksheet.intermediate_output_f401, 0.002); end
  def test_intermediate_output_d402; assert_equal("India 2047", worksheet.intermediate_output_d402); end
  def test_intermediate_output_f402; assert_in_delta(3.375182967342091e-06, worksheet.intermediate_output_f402, 0.002); end
  def test_intermediate_output_d404; assert_equal("http://www.photius.com/rankings/economy/electricity_consumption_per_capita_2012_0.html ", worksheet.intermediate_output_d404); end
  def test_intermediate_output_d405; assert_equal("SOURCE: CIA World Factbook 2012", worksheet.intermediate_output_d405); end
  def test_intermediate_output_d408; assert_equal("Population Statistics", worksheet.intermediate_output_d408); end
  def test_intermediate_output_d410; assert_equal("Year", worksheet.intermediate_output_d410); end
  def test_intermediate_output_e410; assert_equal("Population", worksheet.intermediate_output_e410); end
  def test_intermediate_output_d411; assert_in_epsilon(2007.0, worksheet.intermediate_output_d411, 0.002); end
  def test_intermediate_output_e411; assert_in_epsilon(1215947696.8037, worksheet.intermediate_output_e411, 0.002); end
  def test_intermediate_output_d412; assert_in_epsilon(2012.0, worksheet.intermediate_output_d412, 0.002); end
  def test_intermediate_output_e412; assert_in_epsilon(1215947696.8037, worksheet.intermediate_output_e412, 0.002); end
  def test_intermediate_output_d413; assert_in_epsilon(2017.0, worksheet.intermediate_output_d413, 0.002); end
  def test_intermediate_output_e413; assert_in_epsilon(1293560155.5197299, worksheet.intermediate_output_e413, 0.002); end
  def test_intermediate_output_d414; assert_in_epsilon(2022.0, worksheet.intermediate_output_d414, 0.002); end
  def test_intermediate_output_e414; assert_in_epsilon(1383591897.89131, worksheet.intermediate_output_e414, 0.002); end
  def test_intermediate_output_d415; assert_in_epsilon(2027.0, worksheet.intermediate_output_d415, 0.002); end
  def test_intermediate_output_e415; assert_in_epsilon(1453466914.90909, worksheet.intermediate_output_e415, 0.002); end
  def test_intermediate_output_d416; assert_in_epsilon(2032.0, worksheet.intermediate_output_d416, 0.002); end
  def test_intermediate_output_e416; assert_in_epsilon(1533937577.53791, worksheet.intermediate_output_e416, 0.002); end
  def test_intermediate_output_d417; assert_in_epsilon(2037.0, worksheet.intermediate_output_d417, 0.002); end
  def test_intermediate_output_e417; assert_in_epsilon(1592149418.74388, worksheet.intermediate_output_e417, 0.002); end
  def test_intermediate_output_d418; assert_in_epsilon(2042.0, worksheet.intermediate_output_d418, 0.002); end
  def test_intermediate_output_e418; assert_in_epsilon(1659579084.9869099, worksheet.intermediate_output_e418, 0.002); end
  def test_intermediate_output_d419; assert_in_epsilon(2047.0, worksheet.intermediate_output_d419, 0.002); end
  def test_intermediate_output_e419; assert_in_epsilon(1704172882.39362, worksheet.intermediate_output_e419, 0.002); end
  def test_flows_b2; assert_equal("Flows through the energy system (for producing an energy flow diagram)", worksheet.flows_b2); end
  def test_flows_q2; assert_equal("Cross check of flows through the energy system (based on the idea that energy is transformed, but not destroyed)", worksheet.flows_q2); end
  def test_flows_n4; assert_equal("TWh", worksheet.flows_n4); end
  def test_flows_s4; assert_equal("Values flowing from the transformation", worksheet.flows_s4); end
  def test_flows_ad4; assert_equal("Values flowing to the transformation", worksheet.flows_ad4); end
  def test_flows_ao4; assert_equal("Check that flows in equal flows out", worksheet.flows_ao4); end
  def test_flows_c5; assert_equal("From", worksheet.flows_c5); end
  def test_flows_d5; assert_equal("To", worksheet.flows_d5); end
  def test_flows_e5; assert_in_epsilon(2007.0, worksheet.flows_e5, 0.002); end
  def test_flows_f5; assert_in_epsilon(2012.0, worksheet.flows_f5, 0.002); end
  def test_flows_g5; assert_in_epsilon(2017.0, worksheet.flows_g5, 0.002); end
  def test_flows_h5; assert_in_epsilon(2022.0, worksheet.flows_h5, 0.002); end
  def test_flows_i5; assert_in_epsilon(2027.0, worksheet.flows_i5, 0.002); end
  def test_flows_j5; assert_in_epsilon(2032.0, worksheet.flows_j5, 0.002); end
  def test_flows_k5; assert_in_epsilon(2037.0, worksheet.flows_k5, 0.002); end
  def test_flows_l5; assert_in_epsilon(2042.0, worksheet.flows_l5, 0.002); end
  def test_flows_m5; assert_in_epsilon(2047.0, worksheet.flows_m5, 0.002); end
  def test_flows_n5; assert_in_epsilon(2052.0, worksheet.flows_n5, 0.002); end
  def test_flows_r5; assert_equal("Transformation", worksheet.flows_r5); end
  def test_flows_s5; assert_in_epsilon(2007.0, worksheet.flows_s5, 0.002); end
  def test_flows_t5; assert_in_epsilon(2012.0, worksheet.flows_t5, 0.002); end
  def test_flows_u5; assert_in_epsilon(2017.0, worksheet.flows_u5, 0.002); end
  def test_flows_v5; assert_in_epsilon(2022.0, worksheet.flows_v5, 0.002); end
  def test_flows_w5; assert_in_epsilon(2027.0, worksheet.flows_w5, 0.002); end
  def test_flows_x5; assert_in_epsilon(2032.0, worksheet.flows_x5, 0.002); end
  def test_flows_y5; assert_in_epsilon(2037.0, worksheet.flows_y5, 0.002); end
  def test_flows_z5; assert_in_epsilon(2042.0, worksheet.flows_z5, 0.002); end
  def test_flows_aa5; assert_in_epsilon(2047.0, worksheet.flows_aa5, 0.002); end
  def test_flows_ab5; assert_in_epsilon(2052.0, worksheet.flows_ab5, 0.002); end
  def test_flows_ad5; assert_in_epsilon(2007.0, worksheet.flows_ad5, 0.002); end
  def test_flows_ae5; assert_in_epsilon(2012.0, worksheet.flows_ae5, 0.002); end
  def test_flows_af5; assert_in_epsilon(2017.0, worksheet.flows_af5, 0.002); end
  def test_flows_ag5; assert_in_epsilon(2022.0, worksheet.flows_ag5, 0.002); end
  def test_flows_ah5; assert_in_epsilon(2027.0, worksheet.flows_ah5, 0.002); end
  def test_flows_ai5; assert_in_epsilon(2032.0, worksheet.flows_ai5, 0.002); end
  def test_flows_aj5; assert_in_epsilon(2037.0, worksheet.flows_aj5, 0.002); end
  def test_flows_ak5; assert_in_epsilon(2042.0, worksheet.flows_ak5, 0.002); end
  def test_flows_al5; assert_in_epsilon(2047.0, worksheet.flows_al5, 0.002); end
  def test_flows_am5; assert_in_epsilon(2052.0, worksheet.flows_am5, 0.002); end
  def test_flows_ao5; assert_in_epsilon(2007.0, worksheet.flows_ao5, 0.002); end
  def test_flows_ap5; assert_in_epsilon(2012.0, worksheet.flows_ap5, 0.002); end
  def test_flows_aq5; assert_in_epsilon(2017.0, worksheet.flows_aq5, 0.002); end
  def test_flows_ar5; assert_in_epsilon(2022.0, worksheet.flows_ar5, 0.002); end
  def test_flows_as5; assert_in_epsilon(2027.0, worksheet.flows_as5, 0.002); end
  def test_flows_at5; assert_in_epsilon(2032.0, worksheet.flows_at5, 0.002); end
  def test_flows_au5; assert_in_epsilon(2037.0, worksheet.flows_au5, 0.002); end
  def test_flows_av5; assert_in_epsilon(2042.0, worksheet.flows_av5, 0.002); end
  def test_flows_aw5; assert_in_epsilon(2047.0, worksheet.flows_aw5, 0.002); end
  def test_flows_ax5; assert_in_epsilon(2052.0, worksheet.flows_ax5, 0.002); end
  def test_flows_c6; assert_equal("coal reserves", worksheet.flows_c6); end
  def test_flows_d6; assert_equal("coal", worksheet.flows_d6); end
  def test_flows_e6; assert_in_epsilon(2003.3688000000002, worksheet.flows_e6, 0.002); end
  def test_flows_f6; assert_in_epsilon(2704.3935, worksheet.flows_f6, 0.002); end
  def test_flows_g6; assert_in_epsilon(3143.1914134327285, worksheet.flows_g6, 0.002); end
  def test_flows_h6; assert_in_epsilon(3584.150763898312, worksheet.flows_h6, 0.002); end
  def test_flows_i6; assert_in_epsilon(3874.5049279836685, worksheet.flows_i6, 0.002); end
  def test_flows_j6; assert_in_epsilon(3958.482454759453, worksheet.flows_j6, 0.002); end
  def test_flows_k6; assert_in_epsilon(4025.571481185473, worksheet.flows_k6, 0.002); end
  def test_flows_l6; assert_in_epsilon(3406.602207191723, worksheet.flows_l6, 0.002); end
  def test_flows_m6; assert_in_epsilon(2878.2636796999973, worksheet.flows_m6, 0.002); end
  def test_flows_n6; assert_in_epsilon(2435.1118288080042, worksheet.flows_n6, 0.002); end
  def test_flows_r6; assert_equal("Solar", worksheet.flows_r6); end
  def test_flows_s6; assert_in_delta(0.0, (worksheet.flows_s6||0), 0.002); end
  def test_flows_t6; assert_in_epsilon(1.56727314, worksheet.flows_t6, 0.002); end
  def test_flows_u6; assert_in_epsilon(10.911534564022219, worksheet.flows_u6, 0.002); end
  def test_flows_v6; assert_in_epsilon(27.26546309941403, worksheet.flows_v6, 0.002); end
  def test_flows_w6; assert_in_epsilon(48.89299422565567, worksheet.flows_w6, 0.002); end
  def test_flows_x6; assert_in_epsilon(74.07697845643895, worksheet.flows_x6, 0.002); end
  def test_flows_y6; assert_in_epsilon(96.03124385430904, worksheet.flows_y6, 0.002); end
  def test_flows_z6; assert_in_epsilon(108.31259745899473, worksheet.flows_z6, 0.002); end
  def test_flows_aa6; assert_in_epsilon(106.27845543771349, worksheet.flows_aa6, 0.002); end
  def test_flows_ab6; assert_in_epsilon(92.93002046477042, worksheet.flows_ab6, 0.002); end
  def test_flows_ad6; assert_in_delta(0.0, (worksheet.flows_ad6||0), 0.002); end
  def test_flows_ae6; assert_in_delta(0.0, (worksheet.flows_ae6||0), 0.002); end
  def test_flows_af6; assert_in_delta(0.0, (worksheet.flows_af6||0), 0.002); end
  def test_flows_ag6; assert_in_delta(0.0, (worksheet.flows_ag6||0), 0.002); end
  def test_flows_ah6; assert_in_delta(0.0, (worksheet.flows_ah6||0), 0.002); end
  def test_flows_ai6; assert_in_delta(0.0, (worksheet.flows_ai6||0), 0.002); end
  def test_flows_aj6; assert_in_delta(0.0, (worksheet.flows_aj6||0), 0.002); end
  def test_flows_ak6; assert_in_delta(0.0, (worksheet.flows_ak6||0), 0.002); end
  def test_flows_al6; assert_in_delta(0.0, (worksheet.flows_al6||0), 0.002); end
  def test_flows_am6; assert_in_delta(0.0, (worksheet.flows_am6||0), 0.002); end
  def test_flows_ao6; assert_in_delta(0.0, (worksheet.flows_ao6||0), 0.002); end
  def test_flows_ap6; assert_in_delta(0.0, (worksheet.flows_ap6||0), 0.002); end
  def test_flows_aq6; assert_in_delta(0.0, (worksheet.flows_aq6||0), 0.002); end
  def test_flows_ar6; assert_in_delta(0.0, (worksheet.flows_ar6||0), 0.002); end
  def test_flows_as6; assert_in_delta(0.0, (worksheet.flows_as6||0), 0.002); end
  def test_flows_at6; assert_in_delta(0.0, (worksheet.flows_at6||0), 0.002); end
  def test_flows_au6; assert_in_delta(0.0, (worksheet.flows_au6||0), 0.002); end
  def test_flows_av6; assert_in_delta(0.0, (worksheet.flows_av6||0), 0.002); end
  def test_flows_aw6; assert_in_delta(0.0, (worksheet.flows_aw6||0), 0.002); end
  def test_flows_ax6; assert_in_delta(0.0, (worksheet.flows_ax6||0), 0.002); end
  def test_flows_c7; assert_equal("coal imports", worksheet.flows_c7); end
  def test_flows_d7; assert_equal("coal", worksheet.flows_d7); end
  def test_flows_e7; assert_in_epsilon(312.87744559290513, worksheet.flows_e7, 0.002); end
  def test_flows_f7; assert_in_epsilon(526.8956907848014, worksheet.flows_f7, 0.002); end
  def test_flows_g7; assert_in_epsilon(1319.3124738576794, worksheet.flows_g7, 0.002); end
  def test_flows_h7; assert_in_epsilon(3014.730522878498, worksheet.flows_h7, 0.002); end
  def test_flows_i7; assert_in_epsilon(5379.582453613374, worksheet.flows_i7, 0.002); end
  def test_flows_j7; assert_in_epsilon(8802.568575656194, worksheet.flows_j7, 0.002); end
  def test_flows_k7; assert_in_epsilon(11942.655541869855, worksheet.flows_k7, 0.002); end
  def test_flows_l7; assert_in_epsilon(16105.085873409915, worksheet.flows_l7, 0.002); end
  def test_flows_m7; assert_in_epsilon(19783.852472013532, worksheet.flows_m7, 0.002); end
  def test_flows_n7; assert_in_epsilon(23759.648675014454, worksheet.flows_n7, 0.002); end
  def test_flows_r7; assert_equal("Solar PV", worksheet.flows_r7); end
  def test_flows_s7; assert_in_delta(0.0, (worksheet.flows_s7||0), 0.002); end
  def test_flows_t7; assert_in_epsilon(1.56727314, worksheet.flows_t7, 0.002); end
  def test_flows_u7; assert_in_epsilon(8.386926564022218, worksheet.flows_u7, 0.002); end
  def test_flows_v7; assert_in_epsilon(18.69231509941403, worksheet.flows_v7, 0.002); end
  def test_flows_w7; assert_in_epsilon(33.25445022565567, worksheet.flows_w7, 0.002); end
  def test_flows_x7; assert_in_epsilon(48.35753445643894, worksheet.flows_x7, 0.002); end
  def test_flows_y7; assert_in_epsilon(62.24707985430904, worksheet.flows_y7, 0.002); end
  def test_flows_z7; assert_in_epsilon(70.49607345899472, worksheet.flows_z7, 0.002); end
  def test_flows_aa7; assert_in_epsilon(70.98653943771349, worksheet.flows_aa7, 0.002); end
  def test_flows_ab7; assert_in_epsilon(63.68664446477042, worksheet.flows_ab7, 0.002); end
  def test_flows_ad7; assert_in_delta(0.0, (worksheet.flows_ad7||0), 0.002); end
  def test_flows_ae7; assert_in_epsilon(1.56727314, worksheet.flows_ae7, 0.002); end
  def test_flows_af7; assert_in_epsilon(8.386926564022218, worksheet.flows_af7, 0.002); end
  def test_flows_ag7; assert_in_epsilon(18.69231509941403, worksheet.flows_ag7, 0.002); end
  def test_flows_ah7; assert_in_epsilon(33.25445022565567, worksheet.flows_ah7, 0.002); end
  def test_flows_ai7; assert_in_epsilon(48.35753445643894, worksheet.flows_ai7, 0.002); end
  def test_flows_aj7; assert_in_epsilon(62.24707985430904, worksheet.flows_aj7, 0.002); end
  def test_flows_ak7; assert_in_epsilon(70.49607345899472, worksheet.flows_ak7, 0.002); end
  def test_flows_al7; assert_in_epsilon(70.98653943771349, worksheet.flows_al7, 0.002); end
  def test_flows_am7; assert_in_epsilon(63.68664446477042, worksheet.flows_am7, 0.002); end
  def test_flows_ao7; assert_in_delta(0.0, (worksheet.flows_ao7||0), 0.002); end
  def test_flows_ap7; assert_in_delta(0.0, (worksheet.flows_ap7||0), 0.002); end
  def test_flows_aq7; assert_in_delta(0.0, (worksheet.flows_aq7||0), 0.002); end
  def test_flows_ar7; assert_in_delta(0.0, (worksheet.flows_ar7||0), 0.002); end
  def test_flows_as7; assert_in_delta(0.0, (worksheet.flows_as7||0), 0.002); end
  def test_flows_at7; assert_in_delta(0.0, (worksheet.flows_at7||0), 0.002); end
  def test_flows_au7; assert_in_delta(0.0, (worksheet.flows_au7||0), 0.002); end
  def test_flows_av7; assert_in_delta(0.0, (worksheet.flows_av7||0), 0.002); end
  def test_flows_aw7; assert_in_delta(0.0, (worksheet.flows_aw7||0), 0.002); end
  def test_flows_ax7; assert_in_delta(0.0, (worksheet.flows_ax7||0), 0.002); end
  def test_flows_c8; assert_equal("oil reserves", worksheet.flows_c8); end
  def test_flows_d8; assert_equal("oil", worksheet.flows_d8); end
  def test_flows_e8; assert_in_epsilon(395.28044, worksheet.flows_e8, 0.002); end
  def test_flows_f8; assert_in_epsilon(442.9866999999999, worksheet.flows_f8, 0.002); end
  def test_flows_g8; assert_in_epsilon(480.4207945988, worksheet.flows_g8, 0.002); end
  def test_flows_h8; assert_in_epsilon(406.8218875356273, worksheet.flows_h8, 0.002); end
  def test_flows_i8; assert_in_epsilon(404.6927124317743, worksheet.flows_i8, 0.002); end
  def test_flows_j8; assert_in_epsilon(402.83638767071136, worksheet.flows_j8, 0.002); end
  def test_flows_k8; assert_in_epsilon(401.68501767071086, worksheet.flows_k8, 0.002); end
  def test_flows_l8; assert_in_epsilon(401.1302468506092, worksheet.flows_l8, 0.002); end
  def test_flows_m8; assert_in_epsilon(401.18988105870324, worksheet.flows_m8, 0.002); end
  def test_flows_n8; assert_in_epsilon(401.88812295573837, worksheet.flows_n8, 0.002); end
  def test_flows_r8; assert_equal("Solar CSP", worksheet.flows_r8); end
  def test_flows_s8; assert_in_delta(0.0, (worksheet.flows_s8||0), 0.002); end
  def test_flows_t8; assert_in_delta(0.0, (worksheet.flows_t8||0), 0.002); end
  def test_flows_u8; assert_in_epsilon(2.5246079999999997, worksheet.flows_u8, 0.002); end
  def test_flows_v8; assert_in_epsilon(8.573148, worksheet.flows_v8, 0.002); end
  def test_flows_w8; assert_in_epsilon(15.638544, worksheet.flows_w8, 0.002); end
  def test_flows_x8; assert_in_epsilon(25.719444000000003, worksheet.flows_x8, 0.002); end
  def test_flows_y8; assert_in_epsilon(33.784164, worksheet.flows_y8, 0.002); end
  def test_flows_z8; assert_in_epsilon(37.81652400000001, worksheet.flows_z8, 0.002); end
  def test_flows_aa8; assert_in_epsilon(35.291916, worksheet.flows_aa8, 0.002); end
  def test_flows_ab8; assert_in_epsilon(29.243376, worksheet.flows_ab8, 0.002); end
  def test_flows_ad8; assert_in_delta(0.0, (worksheet.flows_ad8||0), 0.002); end
  def test_flows_ae8; assert_in_delta(0.0, (worksheet.flows_ae8||0), 0.002); end
  def test_flows_af8; assert_in_epsilon(2.5246079999999997, worksheet.flows_af8, 0.002); end
  def test_flows_ag8; assert_in_epsilon(8.573148, worksheet.flows_ag8, 0.002); end
  def test_flows_ah8; assert_in_epsilon(15.638544, worksheet.flows_ah8, 0.002); end
  def test_flows_ai8; assert_in_epsilon(25.719444000000003, worksheet.flows_ai8, 0.002); end
  def test_flows_aj8; assert_in_epsilon(33.784164, worksheet.flows_aj8, 0.002); end
  def test_flows_ak8; assert_in_epsilon(37.81652400000001, worksheet.flows_ak8, 0.002); end
  def test_flows_al8; assert_in_epsilon(35.291916, worksheet.flows_al8, 0.002); end
  def test_flows_am8; assert_in_epsilon(29.243376, worksheet.flows_am8, 0.002); end
  def test_flows_ao8; assert_in_delta(0.0, (worksheet.flows_ao8||0), 0.002); end
  def test_flows_ap8; assert_in_delta(0.0, (worksheet.flows_ap8||0), 0.002); end
  def test_flows_aq8; assert_in_delta(0.0, (worksheet.flows_aq8||0), 0.002); end
  def test_flows_ar8; assert_in_delta(0.0, (worksheet.flows_ar8||0), 0.002); end
  def test_flows_as8; assert_in_delta(0.0, (worksheet.flows_as8||0), 0.002); end
  def test_flows_at8; assert_in_delta(0.0, (worksheet.flows_at8||0), 0.002); end
  def test_flows_au8; assert_in_delta(0.0, (worksheet.flows_au8||0), 0.002); end
  def test_flows_av8; assert_in_delta(0.0, (worksheet.flows_av8||0), 0.002); end
  def test_flows_aw8; assert_in_delta(0.0, (worksheet.flows_aw8||0), 0.002); end
  def test_flows_ax8; assert_in_delta(0.0, (worksheet.flows_ax8||0), 0.002); end
  def test_flows_c9; assert_equal("oil imports", worksheet.flows_c9); end
  def test_flows_d9; assert_equal("oil", worksheet.flows_d9); end
  def test_flows_e9; assert_in_epsilon(1235.4943240445418, worksheet.flows_e9, 0.002); end
  def test_flows_f9; assert_in_epsilon(1459.1773716311466, worksheet.flows_f9, 0.002); end
  def test_flows_g9; assert_in_epsilon(2094.1308465841576, worksheet.flows_g9, 0.002); end
  def test_flows_h9; assert_in_epsilon(3065.9673559076937, worksheet.flows_h9, 0.002); end
  def test_flows_i9; assert_in_epsilon(4157.631767599084, worksheet.flows_i9, 0.002); end
  def test_flows_j9; assert_in_epsilon(5448.054666446535, worksheet.flows_j9, 0.002); end
  def test_flows_k9; assert_in_epsilon(6933.9942488753495, worksheet.flows_k9, 0.002); end
  def test_flows_l9; assert_in_epsilon(8427.225528478948, worksheet.flows_l9, 0.002); end
  def test_flows_m9; assert_in_epsilon(10106.26043154715, worksheet.flows_m9, 0.002); end
  def test_flows_n9; assert_in_epsilon(12020.741898724571, worksheet.flows_n9, 0.002); end
  def test_flows_r9; assert_equal("Wind", worksheet.flows_r9); end
  def test_flows_s9; assert_in_epsilon(12.437183268, worksheet.flows_s9, 0.002); end
  def test_flows_t9; assert_in_epsilon(18.7222492332, worksheet.flows_t9, 0.002); end
  def test_flows_u9; assert_in_epsilon(36.6048892332, worksheet.flows_u9, 0.002); end
  def test_flows_v9; assert_in_epsilon(59.9662792332, worksheet.flows_v9, 0.002); end
  def test_flows_w9; assert_in_epsilon(84.3357592332, worksheet.flows_w9, 0.002); end
  def test_flows_x9; assert_in_epsilon(115.49888923319999, worksheet.flows_x9, 0.002); end
  def test_flows_y9; assert_in_epsilon(136.9861259652, worksheet.flows_y9, 0.002); end
  def test_flows_z9; assert_in_epsilon(151.03817999999998, worksheet.flows_z9, 0.002); end
  def test_flows_aa9; assert_in_epsilon(161.16290999999998, worksheet.flows_aa9, 0.002); end
  def test_flows_ab9; assert_in_epsilon(161.95184999999998, worksheet.flows_ab9, 0.002); end
  def test_flows_ad9; assert_in_delta(0.0, (worksheet.flows_ad9||0), 0.002); end
  def test_flows_ae9; assert_in_delta(0.0, (worksheet.flows_ae9||0), 0.002); end
  def test_flows_af9; assert_in_delta(0.0, (worksheet.flows_af9||0), 0.002); end
  def test_flows_ag9; assert_in_delta(0.0, (worksheet.flows_ag9||0), 0.002); end
  def test_flows_ah9; assert_in_delta(0.0, (worksheet.flows_ah9||0), 0.002); end
  def test_flows_ai9; assert_in_delta(0.0, (worksheet.flows_ai9||0), 0.002); end
  def test_flows_aj9; assert_in_delta(0.0, (worksheet.flows_aj9||0), 0.002); end
  def test_flows_ak9; assert_in_delta(0.0, (worksheet.flows_ak9||0), 0.002); end
  def test_flows_al9; assert_in_delta(0.0, (worksheet.flows_al9||0), 0.002); end
  def test_flows_am9; assert_in_delta(0.0, (worksheet.flows_am9||0), 0.002); end
  def test_flows_ao9; assert_in_delta(0.0, (worksheet.flows_ao9||0), 0.002); end
  def test_flows_ap9; assert_in_delta(0.0, (worksheet.flows_ap9||0), 0.002); end
  def test_flows_aq9; assert_in_delta(0.0, (worksheet.flows_aq9||0), 0.002); end
  def test_flows_ar9; assert_in_delta(0.0, (worksheet.flows_ar9||0), 0.002); end
  def test_flows_as9; assert_in_delta(0.0, (worksheet.flows_as9||0), 0.002); end
  def test_flows_at9; assert_in_delta(0.0, (worksheet.flows_at9||0), 0.002); end
  def test_flows_au9; assert_in_delta(0.0, (worksheet.flows_au9||0), 0.002); end
  def test_flows_av9; assert_in_delta(0.0, (worksheet.flows_av9||0), 0.002); end
  def test_flows_aw9; assert_in_delta(0.0, (worksheet.flows_aw9||0), 0.002); end
  def test_flows_ax9; assert_in_delta(0.0, (worksheet.flows_ax9||0), 0.002); end
  def test_flows_c10; assert_equal("gas reserves", worksheet.flows_c10); end
  def test_flows_d10; assert_equal("natural gas", worksheet.flows_d10); end
  def test_flows_e10; assert_in_epsilon(296.5420125, worksheet.flows_e10, 0.002); end
  def test_flows_f10; assert_in_epsilon(449.1920925, worksheet.flows_f10, 0.002); end
  def test_flows_g10; assert_in_epsilon(507.092611005, worksheet.flows_g10, 0.002); end
  def test_flows_h10; assert_in_epsilon(548.56099701, worksheet.flows_h10, 0.002); end
  def test_flows_i10; assert_in_epsilon(586.573218056151, worksheet.flows_i10, 0.002); end
  def test_flows_j10; assert_in_epsilon(641.5415598915608, worksheet.flows_j10, 0.002); end
  def test_flows_k10; assert_in_epsilon(680.5418754437976, worksheet.flows_k10, 0.002); end
  def test_flows_l10; assert_in_epsilon(722.9297284085899, worksheet.flows_l10, 0.002); end
  def test_flows_m10; assert_in_epsilon(769.0713331120461, worksheet.flows_m10, 0.002); end
  def test_flows_n10; assert_in_epsilon(803.223, worksheet.flows_n10, 0.002); end
  def test_flows_r10; assert_equal("Small Hydro", worksheet.flows_r10); end
  def test_flows_s10; assert_in_epsilon(7.013834388000001, worksheet.flows_s10, 0.002); end
  def test_flows_t10; assert_in_epsilon(12.081458988000001, worksheet.flows_t10, 0.002); end
  def test_flows_u10; assert_in_epsilon(17.604038988000003, worksheet.flows_u10, 0.002); end
  def test_flows_v10; assert_in_epsilon(23.937473988000004, worksheet.flows_v10, 0.002); end
  def test_flows_w10; assert_in_epsilon(27.750683988000002, worksheet.flows_w10, 0.002); end
  def test_flows_x10; assert_in_epsilon(31.651553988000003, worksheet.flows_x10, 0.002); end
  def test_flows_y10; assert_in_epsilon(33.623903988, worksheet.flows_y10, 0.002); end
  def test_flows_z10; assert_in_epsilon(33.902259552000004, worksheet.flows_z10, 0.002); end
  def test_flows_aa10; assert_in_epsilon(34.790711183999996, worksheet.flows_aa10, 0.002); end
  def test_flows_ab10; assert_in_epsilon(35.38241618399999, worksheet.flows_ab10, 0.002); end
  def test_flows_ad10; assert_in_delta(0.0, (worksheet.flows_ad10||0), 0.002); end
  def test_flows_ae10; assert_in_delta(0.0, (worksheet.flows_ae10||0), 0.002); end
  def test_flows_af10; assert_in_delta(0.0, (worksheet.flows_af10||0), 0.002); end
  def test_flows_ag10; assert_in_delta(0.0, (worksheet.flows_ag10||0), 0.002); end
  def test_flows_ah10; assert_in_delta(0.0, (worksheet.flows_ah10||0), 0.002); end
  def test_flows_ai10; assert_in_delta(0.0, (worksheet.flows_ai10||0), 0.002); end
  def test_flows_aj10; assert_in_delta(0.0, (worksheet.flows_aj10||0), 0.002); end
  def test_flows_ak10; assert_in_delta(0.0, (worksheet.flows_ak10||0), 0.002); end
  def test_flows_al10; assert_in_delta(0.0, (worksheet.flows_al10||0), 0.002); end
  def test_flows_am10; assert_in_delta(0.0, (worksheet.flows_am10||0), 0.002); end
  def test_flows_ao10; assert_in_delta(0.0, (worksheet.flows_ao10||0), 0.002); end
  def test_flows_ap10; assert_in_delta(0.0, (worksheet.flows_ap10||0), 0.002); end
  def test_flows_aq10; assert_in_delta(0.0, (worksheet.flows_aq10||0), 0.002); end
  def test_flows_ar10; assert_in_delta(0.0, (worksheet.flows_ar10||0), 0.002); end
  def test_flows_as10; assert_in_delta(0.0, (worksheet.flows_as10||0), 0.002); end
  def test_flows_at10; assert_in_delta(0.0, (worksheet.flows_at10||0), 0.002); end
  def test_flows_au10; assert_in_delta(0.0, (worksheet.flows_au10||0), 0.002); end
  def test_flows_av10; assert_in_delta(0.0, (worksheet.flows_av10||0), 0.002); end
  def test_flows_aw10; assert_in_delta(0.0, (worksheet.flows_aw10||0), 0.002); end
  def test_flows_ax10; assert_in_delta(0.0, (worksheet.flows_ax10||0), 0.002); end
  def test_flows_c11; assert_equal("gas imports", worksheet.flows_c11); end
  def test_flows_d11; assert_equal("natural gas", worksheet.flows_d11); end
  def test_flows_e11; assert_in_epsilon(134.32821625762193, worksheet.flows_e11, 0.002); end
  def test_flows_f11; assert_in_epsilon(132.0559696218025, worksheet.flows_f11, 0.002); end
  def test_flows_g11; assert_in_epsilon(414.231003015371, worksheet.flows_g11, 0.002); end
  def test_flows_h11; assert_in_epsilon(540.7635700654292, worksheet.flows_h11, 0.002); end
  def test_flows_i11; assert_in_epsilon(673.6005422237332, worksheet.flows_i11, 0.002); end
  def test_flows_j11; assert_in_epsilon(830.478053007228, worksheet.flows_j11, 0.002); end
  def test_flows_k11; assert_in_epsilon(1027.9601614841856, worksheet.flows_k11, 0.002); end
  def test_flows_l11; assert_in_epsilon(1246.6262326346414, worksheet.flows_l11, 0.002); end
  def test_flows_m11; assert_in_epsilon(1483.7758959320668, worksheet.flows_m11, 0.002); end
  def test_flows_n11; assert_in_epsilon(1774.0609355299016, worksheet.flows_n11, 0.002); end
  def test_flows_r11; assert_equal("Hydro", worksheet.flows_r11); end
  def test_flows_s11; assert_in_epsilon(121.49676, worksheet.flows_s11, 0.002); end
  def test_flows_t11; assert_in_epsilon(143.7624, worksheet.flows_t11, 0.002); end
  def test_flows_u11; assert_in_epsilon(171.81360000000004, worksheet.flows_u11, 0.002); end
  def test_flows_v11; assert_in_epsilon(171.81360000000004, worksheet.flows_v11, 0.002); end
  def test_flows_w11; assert_in_epsilon(171.81360000000004, worksheet.flows_w11, 0.002); end
  def test_flows_x11; assert_in_epsilon(171.81360000000004, worksheet.flows_x11, 0.002); end
  def test_flows_y11; assert_in_epsilon(171.81360000000004, worksheet.flows_y11, 0.002); end
  def test_flows_z11; assert_in_epsilon(171.81360000000004, worksheet.flows_z11, 0.002); end
  def test_flows_aa11; assert_in_epsilon(171.81360000000004, worksheet.flows_aa11, 0.002); end
  def test_flows_ab11; assert_in_epsilon(171.81360000000004, worksheet.flows_ab11, 0.002); end
  def test_flows_ad11; assert_in_delta(0.0, (worksheet.flows_ad11||0), 0.002); end
  def test_flows_ae11; assert_in_delta(0.0, (worksheet.flows_ae11||0), 0.002); end
  def test_flows_af11; assert_in_delta(0.0, (worksheet.flows_af11||0), 0.002); end
  def test_flows_ag11; assert_in_delta(0.0, (worksheet.flows_ag11||0), 0.002); end
  def test_flows_ah11; assert_in_delta(0.0, (worksheet.flows_ah11||0), 0.002); end
  def test_flows_ai11; assert_in_delta(0.0, (worksheet.flows_ai11||0), 0.002); end
  def test_flows_aj11; assert_in_delta(0.0, (worksheet.flows_aj11||0), 0.002); end
  def test_flows_ak11; assert_in_delta(0.0, (worksheet.flows_ak11||0), 0.002); end
  def test_flows_al11; assert_in_delta(0.0, (worksheet.flows_al11||0), 0.002); end
  def test_flows_am11; assert_in_delta(0.0, (worksheet.flows_am11||0), 0.002); end
  def test_flows_ao11; assert_in_delta(0.0, (worksheet.flows_ao11||0), 0.002); end
  def test_flows_ap11; assert_in_delta(0.0, (worksheet.flows_ap11||0), 0.002); end
  def test_flows_aq11; assert_in_delta(0.0, (worksheet.flows_aq11||0), 0.002); end
  def test_flows_ar11; assert_in_delta(0.0, (worksheet.flows_ar11||0), 0.002); end
  def test_flows_as11; assert_in_delta(0.0, (worksheet.flows_as11||0), 0.002); end
  def test_flows_at11; assert_in_delta(0.0, (worksheet.flows_at11||0), 0.002); end
  def test_flows_au11; assert_in_delta(0.0, (worksheet.flows_au11||0), 0.002); end
  def test_flows_av11; assert_in_delta(0.0, (worksheet.flows_av11||0), 0.002); end
  def test_flows_aw11; assert_in_delta(0.0, (worksheet.flows_aw11||0), 0.002); end
  def test_flows_ax11; assert_in_delta(0.0, (worksheet.flows_ax11||0), 0.002); end
  def test_flows_c12; assert_equal("agriculture waste/ energy crops", worksheet.flows_c12); end
  def test_flows_d12; assert_equal("bio-conversion", worksheet.flows_d12); end
  def test_flows_e12; assert_in_epsilon(946.4113333333333, worksheet.flows_e12, 0.002); end
  def test_flows_f12; assert_in_epsilon(958.8470002058194, worksheet.flows_f12, 0.002); end
  def test_flows_g12; assert_in_epsilon(961.8650189282341, worksheet.flows_g12, 0.002); end
  def test_flows_h12; assert_in_epsilon(965.6664720841875, worksheet.flows_h12, 0.002); end
  def test_flows_i12; assert_in_epsilon(970.4161012972642, worksheet.flows_i12, 0.002); end
  def test_flows_j12; assert_in_epsilon(976.3556321130858, worksheet.flows_j12, 0.002); end
  def test_flows_k12; assert_in_epsilon(982.9321780267647, worksheet.flows_k12, 0.002); end
  def test_flows_l12; assert_in_epsilon(987.4628060370934, worksheet.flows_l12, 0.002); end
  def test_flows_m12; assert_in_epsilon(993.1345340291612, worksheet.flows_m12, 0.002); end
  def test_flows_n12; assert_in_epsilon(1000.8691636138399, worksheet.flows_n12, 0.002); end
  def test_flows_r12; assert_equal("Nuclear", worksheet.flows_r12); end
  def test_flows_s12; assert_in_epsilon(80.94774857142859, worksheet.flows_s12, 0.002); end
  def test_flows_t12; assert_in_epsilon(93.77115428571429, worksheet.flows_t12, 0.002); end
  def test_flows_u12; assert_in_epsilon(199.9649828571429, worksheet.flows_u12, 0.002); end
  def test_flows_v12; assert_in_epsilon(193.55328000000003, worksheet.flows_v12, 0.002); end
  def test_flows_w12; assert_in_epsilon(193.55328000000003, worksheet.flows_w12, 0.002); end
  def test_flows_x12; assert_in_epsilon(189.54596571428576, worksheet.flows_x12, 0.002); end
  def test_flows_y12; assert_in_epsilon(180.72987428571432, worksheet.flows_y12, 0.002); end
  def test_flows_z12; assert_in_epsilon(176.3218285714286, worksheet.flows_z12, 0.002); end
  def test_flows_aa12; assert_in_epsilon(167.50573714285716, worksheet.flows_aa12, 0.002); end
  def test_flows_ab12; assert_in_epsilon(167.50573714285716, worksheet.flows_ab12, 0.002); end
  def test_flows_ad12; assert_in_delta(0.0, (worksheet.flows_ad12||0), 0.002); end
  def test_flows_ae12; assert_in_delta(0.0, (worksheet.flows_ae12||0), 0.002); end
  def test_flows_af12; assert_in_delta(0.0, (worksheet.flows_af12||0), 0.002); end
  def test_flows_ag12; assert_in_delta(0.0, (worksheet.flows_ag12||0), 0.002); end
  def test_flows_ah12; assert_in_delta(0.0, (worksheet.flows_ah12||0), 0.002); end
  def test_flows_ai12; assert_in_delta(0.0, (worksheet.flows_ai12||0), 0.002); end
  def test_flows_aj12; assert_in_delta(0.0, (worksheet.flows_aj12||0), 0.002); end
  def test_flows_ak12; assert_in_delta(0.0, (worksheet.flows_ak12||0), 0.002); end
  def test_flows_al12; assert_in_delta(0.0, (worksheet.flows_al12||0), 0.002); end
  def test_flows_am12; assert_in_delta(0.0, (worksheet.flows_am12||0), 0.002); end
  def test_flows_ao12; assert_in_delta(0.0, (worksheet.flows_ao12||0), 0.002); end
  def test_flows_ap12; assert_in_delta(0.0, (worksheet.flows_ap12||0), 0.002); end
  def test_flows_aq12; assert_in_delta(0.0, (worksheet.flows_aq12||0), 0.002); end
  def test_flows_ar12; assert_in_delta(0.0, (worksheet.flows_ar12||0), 0.002); end
  def test_flows_as12; assert_in_delta(0.0, (worksheet.flows_as12||0), 0.002); end
  def test_flows_at12; assert_in_delta(0.0, (worksheet.flows_at12||0), 0.002); end
  def test_flows_au12; assert_in_delta(0.0, (worksheet.flows_au12||0), 0.002); end
  def test_flows_av12; assert_in_delta(0.0, (worksheet.flows_av12||0), 0.002); end
  def test_flows_aw12; assert_in_delta(0.0, (worksheet.flows_aw12||0), 0.002); end
  def test_flows_ax12; assert_in_delta(0.0, (worksheet.flows_ax12||0), 0.002); end
  def test_flows_c13; assert_equal("municipal waste", worksheet.flows_c13); end
  def test_flows_d13; assert_equal("solid", worksheet.flows_d13); end
  def test_flows_e13; assert_in_delta(0.0, (worksheet.flows_e13||0), 0.002); end
  def test_flows_f13; assert_in_delta(0.0, (worksheet.flows_f13||0), 0.002); end
  def test_flows_g13; assert_in_delta(0.0, (worksheet.flows_g13||0), 0.002); end
  def test_flows_h13; assert_in_delta(0.0, (worksheet.flows_h13||0), 0.002); end
  def test_flows_i13; assert_in_delta(0.0, (worksheet.flows_i13||0), 0.002); end
  def test_flows_j13; assert_in_delta(0.0, (worksheet.flows_j13||0), 0.002); end
  def test_flows_k13; assert_in_delta(0.0, (worksheet.flows_k13||0), 0.002); end
  def test_flows_l13; assert_in_delta(0.0, (worksheet.flows_l13||0), 0.002); end
  def test_flows_m13; assert_in_delta(0.0, (worksheet.flows_m13||0), 0.002); end
  def test_flows_n13; assert_in_delta(0.0, (worksheet.flows_n13||0), 0.002); end
  def test_flows_r13; assert_equal("Electricity Imports", worksheet.flows_r13); end
  def test_flows_s13; assert_in_delta(1.0, worksheet.flows_s13, 0.002); end
  def test_flows_t13; assert_in_epsilon(4.0, worksheet.flows_t13, 0.002); end
  def test_flows_u13; assert_in_epsilon(14.0, worksheet.flows_u13, 0.002); end
  def test_flows_v13; assert_in_epsilon(21.0, worksheet.flows_v13, 0.002); end
  def test_flows_w13; assert_in_epsilon(31.0, worksheet.flows_w13, 0.002); end
  def test_flows_x13; assert_in_epsilon(40.0, worksheet.flows_x13, 0.002); end
  def test_flows_y13; assert_in_epsilon(49.0, worksheet.flows_y13, 0.002); end
  def test_flows_z13; assert_in_epsilon(55.0, worksheet.flows_z13, 0.002); end
  def test_flows_aa13; assert_in_epsilon(55.0, worksheet.flows_aa13, 0.002); end
  def test_flows_ab13; assert_in_epsilon(55.0, worksheet.flows_ab13, 0.002); end
  def test_flows_ad13; assert_in_delta(0.0, (worksheet.flows_ad13||0), 0.002); end
  def test_flows_ae13; assert_in_delta(0.0, (worksheet.flows_ae13||0), 0.002); end
  def test_flows_af13; assert_in_delta(0.0, (worksheet.flows_af13||0), 0.002); end
  def test_flows_ag13; assert_in_delta(0.0, (worksheet.flows_ag13||0), 0.002); end
  def test_flows_ah13; assert_in_delta(0.0, (worksheet.flows_ah13||0), 0.002); end
  def test_flows_ai13; assert_in_delta(0.0, (worksheet.flows_ai13||0), 0.002); end
  def test_flows_aj13; assert_in_delta(0.0, (worksheet.flows_aj13||0), 0.002); end
  def test_flows_ak13; assert_in_delta(0.0, (worksheet.flows_ak13||0), 0.002); end
  def test_flows_al13; assert_in_delta(0.0, (worksheet.flows_al13||0), 0.002); end
  def test_flows_am13; assert_in_delta(0.0, (worksheet.flows_am13||0), 0.002); end
  def test_flows_ao13; assert_in_delta(0.0, (worksheet.flows_ao13||0), 0.002); end
  def test_flows_ap13; assert_in_delta(0.0, (worksheet.flows_ap13||0), 0.002); end
  def test_flows_aq13; assert_in_delta(0.0, (worksheet.flows_aq13||0), 0.002); end
  def test_flows_ar13; assert_in_delta(0.0, (worksheet.flows_ar13||0), 0.002); end
  def test_flows_as13; assert_in_delta(0.0, (worksheet.flows_as13||0), 0.002); end
  def test_flows_at13; assert_in_delta(0.0, (worksheet.flows_at13||0), 0.002); end
  def test_flows_au13; assert_in_delta(0.0, (worksheet.flows_au13||0), 0.002); end
  def test_flows_av13; assert_in_delta(0.0, (worksheet.flows_av13||0), 0.002); end
  def test_flows_aw13; assert_in_delta(0.0, (worksheet.flows_aw13||0), 0.002); end
  def test_flows_ax13; assert_in_delta(0.0, (worksheet.flows_ax13||0), 0.002); end
  def test_flows_c14; assert_equal("municipal waste", worksheet.flows_c14); end
  def test_flows_d14; assert_equal("gas", worksheet.flows_d14); end
  def test_flows_e14; assert_in_delta(0.0, (worksheet.flows_e14||0), 0.002); end
  def test_flows_f14; assert_in_delta(0.0, (worksheet.flows_f14||0), 0.002); end
  def test_flows_g14; assert_in_delta(0.0, (worksheet.flows_g14||0), 0.002); end
  def test_flows_h14; assert_in_delta(0.0, (worksheet.flows_h14||0), 0.002); end
  def test_flows_i14; assert_in_delta(0.0, (worksheet.flows_i14||0), 0.002); end
  def test_flows_j14; assert_in_delta(0.0, (worksheet.flows_j14||0), 0.002); end
  def test_flows_k14; assert_in_delta(0.0, (worksheet.flows_k14||0), 0.002); end
  def test_flows_l14; assert_in_delta(0.0, (worksheet.flows_l14||0), 0.002); end
  def test_flows_m14; assert_in_delta(0.0, (worksheet.flows_m14||0), 0.002); end
  def test_flows_n14; assert_in_delta(0.0, (worksheet.flows_n14||0), 0.002); end
  def test_flows_r14; assert_equal("Coal reserves", worksheet.flows_r14); end
  def test_flows_s14; assert_in_epsilon(2003.3688000000002, worksheet.flows_s14, 0.002); end
  def test_flows_t14; assert_in_epsilon(2704.3935, worksheet.flows_t14, 0.002); end
  def test_flows_u14; assert_in_epsilon(3143.1914134327285, worksheet.flows_u14, 0.002); end
  def test_flows_v14; assert_in_epsilon(3584.150763898312, worksheet.flows_v14, 0.002); end
  def test_flows_w14; assert_in_epsilon(3874.5049279836685, worksheet.flows_w14, 0.002); end
  def test_flows_x14; assert_in_epsilon(3958.482454759453, worksheet.flows_x14, 0.002); end
  def test_flows_y14; assert_in_epsilon(4025.571481185473, worksheet.flows_y14, 0.002); end
  def test_flows_z14; assert_in_epsilon(3406.602207191723, worksheet.flows_z14, 0.002); end
  def test_flows_aa14; assert_in_epsilon(2878.2636796999973, worksheet.flows_aa14, 0.002); end
  def test_flows_ab14; assert_in_epsilon(2435.1118288080042, worksheet.flows_ab14, 0.002); end
  def test_flows_ad14; assert_in_delta(0.0, (worksheet.flows_ad14||0), 0.002); end
  def test_flows_ae14; assert_in_delta(0.0, (worksheet.flows_ae14||0), 0.002); end
  def test_flows_af14; assert_in_delta(0.0, (worksheet.flows_af14||0), 0.002); end
  def test_flows_ag14; assert_in_delta(0.0, (worksheet.flows_ag14||0), 0.002); end
  def test_flows_ah14; assert_in_delta(0.0, (worksheet.flows_ah14||0), 0.002); end
  def test_flows_ai14; assert_in_delta(0.0, (worksheet.flows_ai14||0), 0.002); end
  def test_flows_aj14; assert_in_delta(0.0, (worksheet.flows_aj14||0), 0.002); end
  def test_flows_ak14; assert_in_delta(0.0, (worksheet.flows_ak14||0), 0.002); end
  def test_flows_al14; assert_in_delta(0.0, (worksheet.flows_al14||0), 0.002); end
  def test_flows_am14; assert_in_delta(0.0, (worksheet.flows_am14||0), 0.002); end
  def test_flows_ao14; assert_in_delta(0.0, (worksheet.flows_ao14||0), 0.002); end
  def test_flows_ap14; assert_in_delta(0.0, (worksheet.flows_ap14||0), 0.002); end
  def test_flows_aq14; assert_in_delta(0.0, (worksheet.flows_aq14||0), 0.002); end
  def test_flows_ar14; assert_in_delta(0.0, (worksheet.flows_ar14||0), 0.002); end
  def test_flows_as14; assert_in_delta(0.0, (worksheet.flows_as14||0), 0.002); end
  def test_flows_at14; assert_in_delta(0.0, (worksheet.flows_at14||0), 0.002); end
  def test_flows_au14; assert_in_delta(0.0, (worksheet.flows_au14||0), 0.002); end
  def test_flows_av14; assert_in_delta(0.0, (worksheet.flows_av14||0), 0.002); end
  def test_flows_aw14; assert_in_delta(0.0, (worksheet.flows_aw14||0), 0.002); end
  def test_flows_ax14; assert_in_delta(0.0, (worksheet.flows_ax14||0), 0.002); end
  def test_flows_c15; assert_equal("municipal waste", worksheet.flows_c15); end
  def test_flows_d15; assert_equal("thermal generation", worksheet.flows_d15); end
  def test_flows_e15; assert_in_delta(0.0, (worksheet.flows_e15||0), 0.002); end
  def test_flows_f15; assert_in_delta(0.0, (worksheet.flows_f15||0), 0.002); end
  def test_flows_g15; assert_in_delta(0.0, (worksheet.flows_g15||0), 0.002); end
  def test_flows_h15; assert_in_delta(0.0, (worksheet.flows_h15||0), 0.002); end
  def test_flows_i15; assert_in_delta(0.0, (worksheet.flows_i15||0), 0.002); end
  def test_flows_j15; assert_in_delta(0.0, (worksheet.flows_j15||0), 0.002); end
  def test_flows_k15; assert_in_delta(0.0, (worksheet.flows_k15||0), 0.002); end
  def test_flows_l15; assert_in_delta(0.0, (worksheet.flows_l15||0), 0.002); end
  def test_flows_m15; assert_in_delta(0.0, (worksheet.flows_m15||0), 0.002); end
  def test_flows_n15; assert_in_delta(0.0, (worksheet.flows_n15||0), 0.002); end
  def test_flows_r15; assert_equal("Coal Imports", worksheet.flows_r15); end
  def test_flows_s15; assert_in_epsilon(312.87744559290513, worksheet.flows_s15, 0.002); end
  def test_flows_t15; assert_in_epsilon(526.8956907848014, worksheet.flows_t15, 0.002); end
  def test_flows_u15; assert_in_epsilon(1319.3124738576794, worksheet.flows_u15, 0.002); end
  def test_flows_v15; assert_in_epsilon(3014.730522878498, worksheet.flows_v15, 0.002); end
  def test_flows_w15; assert_in_epsilon(5379.582453613374, worksheet.flows_w15, 0.002); end
  def test_flows_x15; assert_in_epsilon(8802.568575656194, worksheet.flows_x15, 0.002); end
  def test_flows_y15; assert_in_epsilon(11942.655541869855, worksheet.flows_y15, 0.002); end
  def test_flows_z15; assert_in_epsilon(16105.085873409915, worksheet.flows_z15, 0.002); end
  def test_flows_aa15; assert_in_epsilon(19783.852472013532, worksheet.flows_aa15, 0.002); end
  def test_flows_ab15; assert_in_epsilon(23759.648675014454, worksheet.flows_ab15, 0.002); end
  def test_flows_ad15; assert_in_delta(0.0, (worksheet.flows_ad15||0), 0.002); end
  def test_flows_ae15; assert_in_delta(0.0, (worksheet.flows_ae15||0), 0.002); end
  def test_flows_af15; assert_in_delta(0.0, (worksheet.flows_af15||0), 0.002); end
  def test_flows_ag15; assert_in_delta(0.0, (worksheet.flows_ag15||0), 0.002); end
  def test_flows_ah15; assert_in_delta(0.0, (worksheet.flows_ah15||0), 0.002); end
  def test_flows_ai15; assert_in_delta(0.0, (worksheet.flows_ai15||0), 0.002); end
  def test_flows_aj15; assert_in_delta(0.0, (worksheet.flows_aj15||0), 0.002); end
  def test_flows_ak15; assert_in_delta(0.0, (worksheet.flows_ak15||0), 0.002); end
  def test_flows_al15; assert_in_delta(0.0, (worksheet.flows_al15||0), 0.002); end
  def test_flows_am15; assert_in_delta(0.0, (worksheet.flows_am15||0), 0.002); end
  def test_flows_ao15; assert_in_delta(0.0, (worksheet.flows_ao15||0), 0.002); end
  def test_flows_ap15; assert_in_delta(0.0, (worksheet.flows_ap15||0), 0.002); end
  def test_flows_aq15; assert_in_delta(0.0, (worksheet.flows_aq15||0), 0.002); end
  def test_flows_ar15; assert_in_delta(0.0, (worksheet.flows_ar15||0), 0.002); end
  def test_flows_as15; assert_in_delta(0.0, (worksheet.flows_as15||0), 0.002); end
  def test_flows_at15; assert_in_delta(0.0, (worksheet.flows_at15||0), 0.002); end
  def test_flows_au15; assert_in_delta(0.0, (worksheet.flows_au15||0), 0.002); end
  def test_flows_av15; assert_in_delta(0.0, (worksheet.flows_av15||0), 0.002); end
  def test_flows_aw15; assert_in_delta(0.0, (worksheet.flows_aw15||0), 0.002); end
  def test_flows_ax15; assert_in_delta(0.0, (worksheet.flows_ax15||0), 0.002); end
  def test_flows_c16; assert_equal("solar", worksheet.flows_c16); end
  def test_flows_d16; assert_equal("solar pv", worksheet.flows_d16); end
  def test_flows_e16; assert_in_delta(0.0, (worksheet.flows_e16||0), 0.002); end
  def test_flows_f16; assert_in_epsilon(1.56727314, worksheet.flows_f16, 0.002); end
  def test_flows_g16; assert_in_epsilon(8.386926564022218, worksheet.flows_g16, 0.002); end
  def test_flows_h16; assert_in_epsilon(18.69231509941403, worksheet.flows_h16, 0.002); end
  def test_flows_i16; assert_in_epsilon(33.25445022565567, worksheet.flows_i16, 0.002); end
  def test_flows_j16; assert_in_epsilon(48.35753445643894, worksheet.flows_j16, 0.002); end
  def test_flows_k16; assert_in_epsilon(62.24707985430904, worksheet.flows_k16, 0.002); end
  def test_flows_l16; assert_in_epsilon(70.49607345899472, worksheet.flows_l16, 0.002); end
  def test_flows_m16; assert_in_epsilon(70.98653943771349, worksheet.flows_m16, 0.002); end
  def test_flows_n16; assert_in_epsilon(63.68664446477042, worksheet.flows_n16, 0.002); end
  def test_flows_r16; assert_equal("Oil Reserves", worksheet.flows_r16); end
  def test_flows_s16; assert_in_epsilon(395.28044, worksheet.flows_s16, 0.002); end
  def test_flows_t16; assert_in_epsilon(442.9866999999999, worksheet.flows_t16, 0.002); end
  def test_flows_u16; assert_in_epsilon(480.4207945988, worksheet.flows_u16, 0.002); end
  def test_flows_v16; assert_in_epsilon(406.8218875356273, worksheet.flows_v16, 0.002); end
  def test_flows_w16; assert_in_epsilon(404.6927124317743, worksheet.flows_w16, 0.002); end
  def test_flows_x16; assert_in_epsilon(402.83638767071136, worksheet.flows_x16, 0.002); end
  def test_flows_y16; assert_in_epsilon(401.68501767071086, worksheet.flows_y16, 0.002); end
  def test_flows_z16; assert_in_epsilon(401.1302468506092, worksheet.flows_z16, 0.002); end
  def test_flows_aa16; assert_in_epsilon(401.18988105870324, worksheet.flows_aa16, 0.002); end
  def test_flows_ab16; assert_in_epsilon(401.88812295573837, worksheet.flows_ab16, 0.002); end
  def test_flows_ad16; assert_in_delta(0.0, (worksheet.flows_ad16||0), 0.002); end
  def test_flows_ae16; assert_in_delta(0.0, (worksheet.flows_ae16||0), 0.002); end
  def test_flows_af16; assert_in_delta(0.0, (worksheet.flows_af16||0), 0.002); end
  def test_flows_ag16; assert_in_delta(0.0, (worksheet.flows_ag16||0), 0.002); end
  def test_flows_ah16; assert_in_delta(0.0, (worksheet.flows_ah16||0), 0.002); end
  def test_flows_ai16; assert_in_delta(0.0, (worksheet.flows_ai16||0), 0.002); end
  def test_flows_aj16; assert_in_delta(0.0, (worksheet.flows_aj16||0), 0.002); end
  def test_flows_ak16; assert_in_delta(0.0, (worksheet.flows_ak16||0), 0.002); end
  def test_flows_al16; assert_in_delta(0.0, (worksheet.flows_al16||0), 0.002); end
  def test_flows_am16; assert_in_delta(0.0, (worksheet.flows_am16||0), 0.002); end
  def test_flows_ao16; assert_in_delta(0.0, (worksheet.flows_ao16||0), 0.002); end
  def test_flows_ap16; assert_in_delta(0.0, (worksheet.flows_ap16||0), 0.002); end
  def test_flows_aq16; assert_in_delta(0.0, (worksheet.flows_aq16||0), 0.002); end
  def test_flows_ar16; assert_in_delta(0.0, (worksheet.flows_ar16||0), 0.002); end
  def test_flows_as16; assert_in_delta(0.0, (worksheet.flows_as16||0), 0.002); end
  def test_flows_at16; assert_in_delta(0.0, (worksheet.flows_at16||0), 0.002); end
  def test_flows_au16; assert_in_delta(0.0, (worksheet.flows_au16||0), 0.002); end
  def test_flows_av16; assert_in_delta(0.0, (worksheet.flows_av16||0), 0.002); end
  def test_flows_aw16; assert_in_delta(0.0, (worksheet.flows_aw16||0), 0.002); end
  def test_flows_ax16; assert_in_delta(0.0, (worksheet.flows_ax16||0), 0.002); end
  def test_flows_c17; assert_equal("solar pv", worksheet.flows_c17); end
  def test_flows_d17; assert_equal("electricity grid", worksheet.flows_d17); end
  def test_flows_e17; assert_in_delta(0.0, (worksheet.flows_e17||0), 0.002); end
  def test_flows_f17; assert_in_epsilon(1.56727314, worksheet.flows_f17, 0.002); end
  def test_flows_g17; assert_in_epsilon(8.272745946, worksheet.flows_g17, 0.002); end
  def test_flows_h17; assert_in_epsilon(18.558353960999998, worksheet.flows_h17, 0.002); end
  def test_flows_i17; assert_in_epsilon(32.792269185, worksheet.flows_i17, 0.002); end
  def test_flows_j17; assert_in_epsilon(47.823373215000004, worksheet.flows_j17, 0.002); end
  def test_flows_k17; assert_in_epsilon(60.99299523, worksheet.flows_k17, 0.002); end
  def test_flows_l17; assert_in_epsilon(69.11991, worksheet.flows_l17, 0.002); end
  def test_flows_m17; assert_in_epsilon(68.11182, worksheet.flows_m17, 0.002); end
  def test_flows_n17; assert_in_epsilon(59.6088, worksheet.flows_n17, 0.002); end
  def test_flows_r17; assert_equal("Oil Imports", worksheet.flows_r17); end
  def test_flows_s17; assert_in_epsilon(1235.4943240445418, worksheet.flows_s17, 0.002); end
  def test_flows_t17; assert_in_epsilon(1459.1773716311466, worksheet.flows_t17, 0.002); end
  def test_flows_u17; assert_in_epsilon(2094.1308465841576, worksheet.flows_u17, 0.002); end
  def test_flows_v17; assert_in_epsilon(3065.9673559076937, worksheet.flows_v17, 0.002); end
  def test_flows_w17; assert_in_epsilon(4157.631767599084, worksheet.flows_w17, 0.002); end
  def test_flows_x17; assert_in_epsilon(5448.054666446535, worksheet.flows_x17, 0.002); end
  def test_flows_y17; assert_in_epsilon(6933.9942488753495, worksheet.flows_y17, 0.002); end
  def test_flows_z17; assert_in_epsilon(8427.225528478948, worksheet.flows_z17, 0.002); end
  def test_flows_aa17; assert_in_epsilon(10106.26043154715, worksheet.flows_aa17, 0.002); end
  def test_flows_ab17; assert_in_epsilon(12020.741898724571, worksheet.flows_ab17, 0.002); end
  def test_flows_ad17; assert_in_delta(0.0, (worksheet.flows_ad17||0), 0.002); end
  def test_flows_ae17; assert_in_delta(0.0, (worksheet.flows_ae17||0), 0.002); end
  def test_flows_af17; assert_in_delta(0.0, (worksheet.flows_af17||0), 0.002); end
  def test_flows_ag17; assert_in_delta(0.0, (worksheet.flows_ag17||0), 0.002); end
  def test_flows_ah17; assert_in_delta(0.0, (worksheet.flows_ah17||0), 0.002); end
  def test_flows_ai17; assert_in_delta(0.0, (worksheet.flows_ai17||0), 0.002); end
  def test_flows_aj17; assert_in_delta(0.0, (worksheet.flows_aj17||0), 0.002); end
  def test_flows_ak17; assert_in_delta(0.0, (worksheet.flows_ak17||0), 0.002); end
  def test_flows_al17; assert_in_delta(0.0, (worksheet.flows_al17||0), 0.002); end
  def test_flows_am17; assert_in_delta(0.0, (worksheet.flows_am17||0), 0.002); end
  def test_flows_ao17; assert_in_delta(0.0, (worksheet.flows_ao17||0), 0.002); end
  def test_flows_ap17; assert_in_delta(0.0, (worksheet.flows_ap17||0), 0.002); end
  def test_flows_aq17; assert_in_delta(0.0, (worksheet.flows_aq17||0), 0.002); end
  def test_flows_ar17; assert_in_delta(0.0, (worksheet.flows_ar17||0), 0.002); end
  def test_flows_as17; assert_in_delta(0.0, (worksheet.flows_as17||0), 0.002); end
  def test_flows_at17; assert_in_delta(0.0, (worksheet.flows_at17||0), 0.002); end
  def test_flows_au17; assert_in_delta(0.0, (worksheet.flows_au17||0), 0.002); end
  def test_flows_av17; assert_in_delta(0.0, (worksheet.flows_av17||0), 0.002); end
  def test_flows_aw17; assert_in_delta(0.0, (worksheet.flows_aw17||0), 0.002); end
  def test_flows_ax17; assert_in_delta(0.0, (worksheet.flows_ax17||0), 0.002); end
  def test_flows_c18; assert_equal("solar", worksheet.flows_c18); end
  def test_flows_d18; assert_equal("solar csp", worksheet.flows_d18); end
  def test_flows_e18; assert_in_delta(0.0, (worksheet.flows_e18||0), 0.002); end
  def test_flows_f18; assert_in_delta(0.0, (worksheet.flows_f18||0), 0.002); end
  def test_flows_g18; assert_in_epsilon(2.5246079999999997, worksheet.flows_g18, 0.002); end
  def test_flows_h18; assert_in_epsilon(8.573148, worksheet.flows_h18, 0.002); end
  def test_flows_i18; assert_in_epsilon(15.638544, worksheet.flows_i18, 0.002); end
  def test_flows_j18; assert_in_epsilon(25.719444000000003, worksheet.flows_j18, 0.002); end
  def test_flows_k18; assert_in_epsilon(33.784164, worksheet.flows_k18, 0.002); end
  def test_flows_l18; assert_in_epsilon(37.81652400000001, worksheet.flows_l18, 0.002); end
  def test_flows_m18; assert_in_epsilon(35.291916, worksheet.flows_m18, 0.002); end
  def test_flows_n18; assert_in_epsilon(29.243376, worksheet.flows_n18, 0.002); end
  def test_flows_r18; assert_equal("Gas Reserves", worksheet.flows_r18); end
  def test_flows_s18; assert_in_epsilon(296.5420125, worksheet.flows_s18, 0.002); end
  def test_flows_t18; assert_in_epsilon(449.1920925, worksheet.flows_t18, 0.002); end
  def test_flows_u18; assert_in_epsilon(507.092611005, worksheet.flows_u18, 0.002); end
  def test_flows_v18; assert_in_epsilon(548.56099701, worksheet.flows_v18, 0.002); end
  def test_flows_w18; assert_in_epsilon(586.573218056151, worksheet.flows_w18, 0.002); end
  def test_flows_x18; assert_in_epsilon(641.5415598915608, worksheet.flows_x18, 0.002); end
  def test_flows_y18; assert_in_epsilon(680.5418754437976, worksheet.flows_y18, 0.002); end
  def test_flows_z18; assert_in_epsilon(722.9297284085899, worksheet.flows_z18, 0.002); end
  def test_flows_aa18; assert_in_epsilon(769.0713331120461, worksheet.flows_aa18, 0.002); end
  def test_flows_ab18; assert_in_epsilon(803.223, worksheet.flows_ab18, 0.002); end
  def test_flows_ad18; assert_in_delta(0.0, (worksheet.flows_ad18||0), 0.002); end
  def test_flows_ae18; assert_in_delta(0.0, (worksheet.flows_ae18||0), 0.002); end
  def test_flows_af18; assert_in_delta(0.0, (worksheet.flows_af18||0), 0.002); end
  def test_flows_ag18; assert_in_delta(0.0, (worksheet.flows_ag18||0), 0.002); end
  def test_flows_ah18; assert_in_delta(0.0, (worksheet.flows_ah18||0), 0.002); end
  def test_flows_ai18; assert_in_delta(0.0, (worksheet.flows_ai18||0), 0.002); end
  def test_flows_aj18; assert_in_delta(0.0, (worksheet.flows_aj18||0), 0.002); end
  def test_flows_ak18; assert_in_delta(0.0, (worksheet.flows_ak18||0), 0.002); end
  def test_flows_al18; assert_in_delta(0.0, (worksheet.flows_al18||0), 0.002); end
  def test_flows_am18; assert_in_delta(0.0, (worksheet.flows_am18||0), 0.002); end
  def test_flows_ao18; assert_in_delta(0.0, (worksheet.flows_ao18||0), 0.002); end
  def test_flows_ap18; assert_in_delta(0.0, (worksheet.flows_ap18||0), 0.002); end
  def test_flows_aq18; assert_in_delta(0.0, (worksheet.flows_aq18||0), 0.002); end
  def test_flows_ar18; assert_in_delta(0.0, (worksheet.flows_ar18||0), 0.002); end
  def test_flows_as18; assert_in_delta(0.0, (worksheet.flows_as18||0), 0.002); end
  def test_flows_at18; assert_in_delta(0.0, (worksheet.flows_at18||0), 0.002); end
  def test_flows_au18; assert_in_delta(0.0, (worksheet.flows_au18||0), 0.002); end
  def test_flows_av18; assert_in_delta(0.0, (worksheet.flows_av18||0), 0.002); end
  def test_flows_aw18; assert_in_delta(0.0, (worksheet.flows_aw18||0), 0.002); end
  def test_flows_ax18; assert_in_delta(0.0, (worksheet.flows_ax18||0), 0.002); end
  def test_flows_c19; assert_equal("solar csp", worksheet.flows_c19); end
  def test_flows_d19; assert_equal("electricity grid", worksheet.flows_d19); end
  def test_flows_e19; assert_in_delta(0.0, (worksheet.flows_e19||0), 0.002); end
  def test_flows_f19; assert_in_delta(0.0, (worksheet.flows_f19||0), 0.002); end
  def test_flows_g19; assert_in_epsilon(2.5246079999999997, worksheet.flows_g19, 0.002); end
  def test_flows_h19; assert_in_epsilon(8.573148, worksheet.flows_h19, 0.002); end
  def test_flows_i19; assert_in_epsilon(15.638544, worksheet.flows_i19, 0.002); end
  def test_flows_j19; assert_in_epsilon(25.719444000000003, worksheet.flows_j19, 0.002); end
  def test_flows_k19; assert_in_epsilon(33.784164, worksheet.flows_k19, 0.002); end
  def test_flows_l19; assert_in_epsilon(37.81652400000001, worksheet.flows_l19, 0.002); end
  def test_flows_m19; assert_in_epsilon(35.291916, worksheet.flows_m19, 0.002); end
  def test_flows_n19; assert_in_epsilon(29.243376, worksheet.flows_n19, 0.002); end
  def test_flows_r19; assert_equal("Gas Imports", worksheet.flows_r19); end
  def test_flows_s19; assert_in_epsilon(134.32821625762193, worksheet.flows_s19, 0.002); end
  def test_flows_t19; assert_in_epsilon(132.0559696218025, worksheet.flows_t19, 0.002); end
  def test_flows_u19; assert_in_epsilon(414.231003015371, worksheet.flows_u19, 0.002); end
  def test_flows_v19; assert_in_epsilon(540.7635700654292, worksheet.flows_v19, 0.002); end
  def test_flows_w19; assert_in_epsilon(673.6005422237332, worksheet.flows_w19, 0.002); end
  def test_flows_x19; assert_in_epsilon(830.478053007228, worksheet.flows_x19, 0.002); end
  def test_flows_y19; assert_in_epsilon(1027.9601614841856, worksheet.flows_y19, 0.002); end
  def test_flows_z19; assert_in_epsilon(1246.6262326346414, worksheet.flows_z19, 0.002); end
  def test_flows_aa19; assert_in_epsilon(1483.7758959320668, worksheet.flows_aa19, 0.002); end
  def test_flows_ab19; assert_in_epsilon(1774.0609355299016, worksheet.flows_ab19, 0.002); end
  def test_flows_ad19; assert_in_delta(0.0, (worksheet.flows_ad19||0), 0.002); end
  def test_flows_ae19; assert_in_delta(0.0, (worksheet.flows_ae19||0), 0.002); end
  def test_flows_af19; assert_in_delta(0.0, (worksheet.flows_af19||0), 0.002); end
  def test_flows_ag19; assert_in_delta(0.0, (worksheet.flows_ag19||0), 0.002); end
  def test_flows_ah19; assert_in_delta(0.0, (worksheet.flows_ah19||0), 0.002); end
  def test_flows_ai19; assert_in_delta(0.0, (worksheet.flows_ai19||0), 0.002); end
  def test_flows_aj19; assert_in_delta(0.0, (worksheet.flows_aj19||0), 0.002); end
  def test_flows_ak19; assert_in_delta(0.0, (worksheet.flows_ak19||0), 0.002); end
  def test_flows_al19; assert_in_delta(0.0, (worksheet.flows_al19||0), 0.002); end
  def test_flows_am19; assert_in_delta(0.0, (worksheet.flows_am19||0), 0.002); end
  def test_flows_ao19; assert_in_delta(0.0, (worksheet.flows_ao19||0), 0.002); end
  def test_flows_ap19; assert_in_delta(0.0, (worksheet.flows_ap19||0), 0.002); end
  def test_flows_aq19; assert_in_delta(0.0, (worksheet.flows_aq19||0), 0.002); end
  def test_flows_ar19; assert_in_delta(0.0, (worksheet.flows_ar19||0), 0.002); end
  def test_flows_as19; assert_in_delta(0.0, (worksheet.flows_as19||0), 0.002); end
  def test_flows_at19; assert_in_delta(0.0, (worksheet.flows_at19||0), 0.002); end
  def test_flows_au19; assert_in_delta(0.0, (worksheet.flows_au19||0), 0.002); end
  def test_flows_av19; assert_in_delta(0.0, (worksheet.flows_av19||0), 0.002); end
  def test_flows_aw19; assert_in_delta(0.0, (worksheet.flows_aw19||0), 0.002); end
  def test_flows_ax19; assert_in_delta(0.0, (worksheet.flows_ax19||0), 0.002); end
  def test_flows_c20; assert_equal("wind", worksheet.flows_c20); end
  def test_flows_d20; assert_equal("onshore wind", worksheet.flows_d20); end
  def test_flows_e20; assert_in_epsilon(12.437183268, worksheet.flows_e20, 0.002); end
  def test_flows_f20; assert_in_epsilon(18.7222492332, worksheet.flows_f20, 0.002); end
  def test_flows_g20; assert_in_epsilon(36.6048892332, worksheet.flows_g20, 0.002); end
  def test_flows_h20; assert_in_epsilon(58.5198892332, worksheet.flows_h20, 0.002); end
  def test_flows_i20; assert_in_epsilon(81.31148923319999, worksheet.flows_i20, 0.002); end
  def test_flows_j20; assert_in_epsilon(110.8967392332, worksheet.flows_j20, 0.002); end
  def test_flows_k20; assert_in_epsilon(129.14055596519998, worksheet.flows_k20, 0.002); end
  def test_flows_l20; assert_in_epsilon(139.86153, worksheet.flows_l20, 0.002); end
  def test_flows_m20; assert_in_epsilon(148.27688999999998, worksheet.flows_m20, 0.002); end
  def test_flows_n20; assert_in_epsilon(148.80284999999998, worksheet.flows_n20, 0.002); end
  def test_flows_r20; assert_equal("Onshore Wind", worksheet.flows_r20); end
  def test_flows_s20; assert_in_epsilon(12.437183268, worksheet.flows_s20, 0.002); end
  def test_flows_t20; assert_in_epsilon(18.7222492332, worksheet.flows_t20, 0.002); end
  def test_flows_u20; assert_in_epsilon(36.6048892332, worksheet.flows_u20, 0.002); end
  def test_flows_v20; assert_in_epsilon(58.5198892332, worksheet.flows_v20, 0.002); end
  def test_flows_w20; assert_in_epsilon(81.31148923319999, worksheet.flows_w20, 0.002); end
  def test_flows_x20; assert_in_epsilon(110.8967392332, worksheet.flows_x20, 0.002); end
  def test_flows_y20; assert_in_epsilon(129.14055596519998, worksheet.flows_y20, 0.002); end
  def test_flows_z20; assert_in_epsilon(139.86153, worksheet.flows_z20, 0.002); end
  def test_flows_aa20; assert_in_epsilon(148.27688999999998, worksheet.flows_aa20, 0.002); end
  def test_flows_ab20; assert_in_epsilon(148.80284999999998, worksheet.flows_ab20, 0.002); end
  def test_flows_ad20; assert_in_epsilon(12.437183268, worksheet.flows_ad20, 0.002); end
  def test_flows_ae20; assert_in_epsilon(18.7222492332, worksheet.flows_ae20, 0.002); end
  def test_flows_af20; assert_in_epsilon(36.6048892332, worksheet.flows_af20, 0.002); end
  def test_flows_ag20; assert_in_epsilon(58.5198892332, worksheet.flows_ag20, 0.002); end
  def test_flows_ah20; assert_in_epsilon(81.31148923319999, worksheet.flows_ah20, 0.002); end
  def test_flows_ai20; assert_in_epsilon(110.8967392332, worksheet.flows_ai20, 0.002); end
  def test_flows_aj20; assert_in_epsilon(129.14055596519998, worksheet.flows_aj20, 0.002); end
  def test_flows_ak20; assert_in_epsilon(139.86153, worksheet.flows_ak20, 0.002); end
  def test_flows_al20; assert_in_epsilon(148.27688999999998, worksheet.flows_al20, 0.002); end
  def test_flows_am20; assert_in_epsilon(148.80284999999998, worksheet.flows_am20, 0.002); end
  def test_flows_ao20; assert_in_delta(0.0, (worksheet.flows_ao20||0), 0.002); end
  def test_flows_ap20; assert_in_delta(0.0, (worksheet.flows_ap20||0), 0.002); end
  def test_flows_aq20; assert_in_delta(0.0, (worksheet.flows_aq20||0), 0.002); end
  def test_flows_ar20; assert_in_delta(0.0, (worksheet.flows_ar20||0), 0.002); end
  def test_flows_as20; assert_in_delta(0.0, (worksheet.flows_as20||0), 0.002); end
  def test_flows_at20; assert_in_delta(0.0, (worksheet.flows_at20||0), 0.002); end
  def test_flows_au20; assert_in_delta(0.0, (worksheet.flows_au20||0), 0.002); end
  def test_flows_av20; assert_in_delta(0.0, (worksheet.flows_av20||0), 0.002); end
  def test_flows_aw20; assert_in_delta(0.0, (worksheet.flows_aw20||0), 0.002); end
  def test_flows_ax20; assert_in_delta(0.0, (worksheet.flows_ax20||0), 0.002); end
  def test_flows_c21; assert_equal("wind", worksheet.flows_c21); end
  def test_flows_d21; assert_equal("offshore wind", worksheet.flows_d21); end
  def test_flows_e21; assert_in_delta(0.0, (worksheet.flows_e21||0), 0.002); end
  def test_flows_f21; assert_in_delta(0.0, (worksheet.flows_f21||0), 0.002); end
  def test_flows_g21; assert_in_delta(0.0, (worksheet.flows_g21||0), 0.002); end
  def test_flows_h21; assert_in_epsilon(1.4463900000000003, worksheet.flows_h21, 0.002); end
  def test_flows_i21; assert_in_epsilon(3.02427, worksheet.flows_i21, 0.002); end
  def test_flows_j21; assert_in_epsilon(4.602149999999999, worksheet.flows_j21, 0.002); end
  def test_flows_k21; assert_in_epsilon(7.84557, worksheet.flows_k21, 0.002); end
  def test_flows_l21; assert_in_epsilon(11.176649999999999, worksheet.flows_l21, 0.002); end
  def test_flows_m21; assert_in_epsilon(12.88602, worksheet.flows_m21, 0.002); end
  def test_flows_n21; assert_in_epsilon(13.149, worksheet.flows_n21, 0.002); end
  def test_flows_r21; assert_equal("Offshore Wind", worksheet.flows_r21); end
  def test_flows_s21; assert_in_delta(0.0, (worksheet.flows_s21||0), 0.002); end
  def test_flows_t21; assert_in_delta(0.0, (worksheet.flows_t21||0), 0.002); end
  def test_flows_u21; assert_in_delta(0.0, (worksheet.flows_u21||0), 0.002); end
  def test_flows_v21; assert_in_epsilon(1.4463900000000003, worksheet.flows_v21, 0.002); end
  def test_flows_w21; assert_in_epsilon(3.02427, worksheet.flows_w21, 0.002); end
  def test_flows_x21; assert_in_epsilon(4.602149999999999, worksheet.flows_x21, 0.002); end
  def test_flows_y21; assert_in_epsilon(7.84557, worksheet.flows_y21, 0.002); end
  def test_flows_z21; assert_in_epsilon(11.176649999999999, worksheet.flows_z21, 0.002); end
  def test_flows_aa21; assert_in_epsilon(12.88602, worksheet.flows_aa21, 0.002); end
  def test_flows_ab21; assert_in_epsilon(13.149, worksheet.flows_ab21, 0.002); end
  def test_flows_ad21; assert_in_delta(0.0, (worksheet.flows_ad21||0), 0.002); end
  def test_flows_ae21; assert_in_delta(0.0, (worksheet.flows_ae21||0), 0.002); end
  def test_flows_af21; assert_in_delta(0.0, (worksheet.flows_af21||0), 0.002); end
  def test_flows_ag21; assert_in_epsilon(1.4463900000000003, worksheet.flows_ag21, 0.002); end
  def test_flows_ah21; assert_in_epsilon(3.02427, worksheet.flows_ah21, 0.002); end
  def test_flows_ai21; assert_in_epsilon(4.602149999999999, worksheet.flows_ai21, 0.002); end
  def test_flows_aj21; assert_in_epsilon(7.84557, worksheet.flows_aj21, 0.002); end
  def test_flows_ak21; assert_in_epsilon(11.176649999999999, worksheet.flows_ak21, 0.002); end
  def test_flows_al21; assert_in_epsilon(12.88602, worksheet.flows_al21, 0.002); end
  def test_flows_am21; assert_in_epsilon(13.149, worksheet.flows_am21, 0.002); end
  def test_flows_ao21; assert_in_delta(0.0, (worksheet.flows_ao21||0), 0.002); end
  def test_flows_ap21; assert_in_delta(0.0, (worksheet.flows_ap21||0), 0.002); end
  def test_flows_aq21; assert_in_delta(0.0, (worksheet.flows_aq21||0), 0.002); end
  def test_flows_ar21; assert_in_delta(0.0, (worksheet.flows_ar21||0), 0.002); end
  def test_flows_as21; assert_in_delta(0.0, (worksheet.flows_as21||0), 0.002); end
  def test_flows_at21; assert_in_delta(0.0, (worksheet.flows_at21||0), 0.002); end
  def test_flows_au21; assert_in_delta(0.0, (worksheet.flows_au21||0), 0.002); end
  def test_flows_av21; assert_in_delta(0.0, (worksheet.flows_av21||0), 0.002); end
  def test_flows_aw21; assert_in_delta(0.0, (worksheet.flows_aw21||0), 0.002); end
  def test_flows_ax21; assert_in_delta(0.0, (worksheet.flows_ax21||0), 0.002); end
  def test_flows_c22; assert_equal("onshore wind", worksheet.flows_c22); end
  def test_flows_d22; assert_equal("electricity grid", worksheet.flows_d22); end
  def test_flows_e22; assert_in_epsilon(12.437183268, worksheet.flows_e22, 0.002); end
  def test_flows_f22; assert_in_epsilon(18.7222492332, worksheet.flows_f22, 0.002); end
  def test_flows_g22; assert_in_epsilon(36.6048892332, worksheet.flows_g22, 0.002); end
  def test_flows_h22; assert_in_epsilon(58.5198892332, worksheet.flows_h22, 0.002); end
  def test_flows_i22; assert_in_epsilon(81.31148923319999, worksheet.flows_i22, 0.002); end
  def test_flows_j22; assert_in_epsilon(110.8967392332, worksheet.flows_j22, 0.002); end
  def test_flows_k22; assert_in_epsilon(129.14055596519998, worksheet.flows_k22, 0.002); end
  def test_flows_l22; assert_in_epsilon(139.86153, worksheet.flows_l22, 0.002); end
  def test_flows_m22; assert_in_epsilon(148.27688999999998, worksheet.flows_m22, 0.002); end
  def test_flows_n22; assert_in_epsilon(148.80284999999998, worksheet.flows_n22, 0.002); end
  def test_flows_r22; assert_equal("Bio-conversion", worksheet.flows_r22); end
  def test_flows_s22; assert_in_epsilon(946.4113333333333, worksheet.flows_s22, 0.002); end
  def test_flows_t22; assert_in_epsilon(958.8470002058194, worksheet.flows_t22, 0.002); end
  def test_flows_u22; assert_in_epsilon(961.8650189282341, worksheet.flows_u22, 0.002); end
  def test_flows_v22; assert_in_epsilon(965.6664720841875, worksheet.flows_v22, 0.002); end
  def test_flows_w22; assert_in_epsilon(970.4161012972642, worksheet.flows_w22, 0.002); end
  def test_flows_x22; assert_in_epsilon(976.3556321130858, worksheet.flows_x22, 0.002); end
  def test_flows_y22; assert_in_epsilon(982.9321780267647, worksheet.flows_y22, 0.002); end
  def test_flows_z22; assert_in_epsilon(987.4628060370934, worksheet.flows_z22, 0.002); end
  def test_flows_aa22; assert_in_epsilon(993.1345340291612, worksheet.flows_aa22, 0.002); end
  def test_flows_ab22; assert_in_epsilon(1000.8691636138399, worksheet.flows_ab22, 0.002); end
  def test_flows_ad22; assert_in_epsilon(946.4113333333333, worksheet.flows_ad22, 0.002); end
  def test_flows_ae22; assert_in_epsilon(958.8470002058194, worksheet.flows_ae22, 0.002); end
  def test_flows_af22; assert_in_epsilon(961.8650189282341, worksheet.flows_af22, 0.002); end
  def test_flows_ag22; assert_in_epsilon(965.6664720841875, worksheet.flows_ag22, 0.002); end
  def test_flows_ah22; assert_in_epsilon(970.4161012972642, worksheet.flows_ah22, 0.002); end
  def test_flows_ai22; assert_in_epsilon(976.3556321130858, worksheet.flows_ai22, 0.002); end
  def test_flows_aj22; assert_in_epsilon(982.9321780267647, worksheet.flows_aj22, 0.002); end
  def test_flows_ak22; assert_in_epsilon(987.4628060370934, worksheet.flows_ak22, 0.002); end
  def test_flows_al22; assert_in_epsilon(993.1345340291612, worksheet.flows_al22, 0.002); end
  def test_flows_am22; assert_in_epsilon(1000.8691636138399, worksheet.flows_am22, 0.002); end
  def test_flows_ao22; assert_in_delta(0.0, (worksheet.flows_ao22||0), 0.002); end
  def test_flows_ap22; assert_in_delta(0.0, (worksheet.flows_ap22||0), 0.002); end
  def test_flows_aq22; assert_in_delta(0.0, (worksheet.flows_aq22||0), 0.002); end
  def test_flows_ar22; assert_in_delta(0.0, (worksheet.flows_ar22||0), 0.002); end
  def test_flows_as22; assert_in_delta(0.0, (worksheet.flows_as22||0), 0.002); end
  def test_flows_at22; assert_in_delta(0.0, (worksheet.flows_at22||0), 0.002); end
  def test_flows_au22; assert_in_delta(0.0, (worksheet.flows_au22||0), 0.002); end
  def test_flows_av22; assert_in_delta(0.0, (worksheet.flows_av22||0), 0.002); end
  def test_flows_aw22; assert_in_delta(0.0, (worksheet.flows_aw22||0), 0.002); end
  def test_flows_ax22; assert_in_delta(0.0, (worksheet.flows_ax22||0), 0.002); end
  def test_flows_c23; assert_equal("offshore wind", worksheet.flows_c23); end
  def test_flows_d23; assert_equal("electricity grid", worksheet.flows_d23); end
  def test_flows_e23; assert_in_delta(0.0, (worksheet.flows_e23||0), 0.002); end
  def test_flows_f23; assert_in_delta(0.0, (worksheet.flows_f23||0), 0.002); end
  def test_flows_g23; assert_in_delta(0.0, (worksheet.flows_g23||0), 0.002); end
  def test_flows_h23; assert_in_epsilon(1.4463900000000003, worksheet.flows_h23, 0.002); end
  def test_flows_i23; assert_in_epsilon(3.02427, worksheet.flows_i23, 0.002); end
  def test_flows_j23; assert_in_epsilon(4.602149999999999, worksheet.flows_j23, 0.002); end
  def test_flows_k23; assert_in_epsilon(7.84557, worksheet.flows_k23, 0.002); end
  def test_flows_l23; assert_in_epsilon(11.176649999999999, worksheet.flows_l23, 0.002); end
  def test_flows_m23; assert_in_epsilon(12.88602, worksheet.flows_m23, 0.002); end
  def test_flows_n23; assert_in_epsilon(13.149, worksheet.flows_n23, 0.002); end
  def test_flows_r23; assert_equal("Agriculture Waste/ Energy Crops", worksheet.flows_r23); end
  def test_flows_s23; assert_in_epsilon(946.4113333333333, worksheet.flows_s23, 0.002); end
  def test_flows_t23; assert_in_epsilon(958.8470002058194, worksheet.flows_t23, 0.002); end
  def test_flows_u23; assert_in_epsilon(961.8650189282341, worksheet.flows_u23, 0.002); end
  def test_flows_v23; assert_in_epsilon(965.6664720841875, worksheet.flows_v23, 0.002); end
  def test_flows_w23; assert_in_epsilon(970.4161012972642, worksheet.flows_w23, 0.002); end
  def test_flows_x23; assert_in_epsilon(976.3556321130858, worksheet.flows_x23, 0.002); end
  def test_flows_y23; assert_in_epsilon(982.9321780267647, worksheet.flows_y23, 0.002); end
  def test_flows_z23; assert_in_epsilon(987.4628060370934, worksheet.flows_z23, 0.002); end
  def test_flows_aa23; assert_in_epsilon(993.1345340291612, worksheet.flows_aa23, 0.002); end
  def test_flows_ab23; assert_in_epsilon(1000.8691636138399, worksheet.flows_ab23, 0.002); end
  def test_flows_ad23; assert_in_delta(0.0, (worksheet.flows_ad23||0), 0.002); end
  def test_flows_ae23; assert_in_delta(0.0, (worksheet.flows_ae23||0), 0.002); end
  def test_flows_af23; assert_in_delta(0.0, (worksheet.flows_af23||0), 0.002); end
  def test_flows_ag23; assert_in_delta(0.0, (worksheet.flows_ag23||0), 0.002); end
  def test_flows_ah23; assert_in_delta(0.0, (worksheet.flows_ah23||0), 0.002); end
  def test_flows_ai23; assert_in_delta(0.0, (worksheet.flows_ai23||0), 0.002); end
  def test_flows_aj23; assert_in_delta(0.0, (worksheet.flows_aj23||0), 0.002); end
  def test_flows_ak23; assert_in_delta(0.0, (worksheet.flows_ak23||0), 0.002); end
  def test_flows_al23; assert_in_delta(0.0, (worksheet.flows_al23||0), 0.002); end
  def test_flows_am23; assert_in_delta(0.0, (worksheet.flows_am23||0), 0.002); end
  def test_flows_ao23; assert_in_delta(0.0, (worksheet.flows_ao23||0), 0.002); end
  def test_flows_ap23; assert_in_delta(0.0, (worksheet.flows_ap23||0), 0.002); end
  def test_flows_aq23; assert_in_delta(0.0, (worksheet.flows_aq23||0), 0.002); end
  def test_flows_ar23; assert_in_delta(0.0, (worksheet.flows_ar23||0), 0.002); end
  def test_flows_as23; assert_in_delta(0.0, (worksheet.flows_as23||0), 0.002); end
  def test_flows_at23; assert_in_delta(0.0, (worksheet.flows_at23||0), 0.002); end
  def test_flows_au23; assert_in_delta(0.0, (worksheet.flows_au23||0), 0.002); end
  def test_flows_av23; assert_in_delta(0.0, (worksheet.flows_av23||0), 0.002); end
  def test_flows_aw23; assert_in_delta(0.0, (worksheet.flows_aw23||0), 0.002); end
  def test_flows_ax23; assert_in_delta(0.0, (worksheet.flows_ax23||0), 0.002); end
  def test_flows_c24; assert_equal("small hydro", worksheet.flows_c24); end
  def test_flows_d24; assert_equal("electricity grid", worksheet.flows_d24); end
  def test_flows_e24; assert_in_epsilon(7.013834388000001, worksheet.flows_e24, 0.002); end
  def test_flows_f24; assert_in_epsilon(12.081458988000001, worksheet.flows_f24, 0.002); end
  def test_flows_g24; assert_in_epsilon(17.604038988000003, worksheet.flows_g24, 0.002); end
  def test_flows_h24; assert_in_epsilon(23.937473988000004, worksheet.flows_h24, 0.002); end
  def test_flows_i24; assert_in_epsilon(27.750683988000002, worksheet.flows_i24, 0.002); end
  def test_flows_j24; assert_in_epsilon(31.651553988000003, worksheet.flows_j24, 0.002); end
  def test_flows_k24; assert_in_epsilon(33.623903988, worksheet.flows_k24, 0.002); end
  def test_flows_l24; assert_in_epsilon(33.902259552000004, worksheet.flows_l24, 0.002); end
  def test_flows_m24; assert_in_epsilon(34.790711183999996, worksheet.flows_m24, 0.002); end
  def test_flows_n24; assert_in_epsilon(35.38241618399999, worksheet.flows_n24, 0.002); end
  def test_flows_r24; assert_equal("Municipal Waste", worksheet.flows_r24); end
  def test_flows_s24; assert_in_delta(0.0, (worksheet.flows_s24||0), 0.002); end
  def test_flows_t24; assert_in_delta(0.0, (worksheet.flows_t24||0), 0.002); end
  def test_flows_u24; assert_in_delta(0.0, (worksheet.flows_u24||0), 0.002); end
  def test_flows_v24; assert_in_delta(0.0, (worksheet.flows_v24||0), 0.002); end
  def test_flows_w24; assert_in_delta(0.0, (worksheet.flows_w24||0), 0.002); end
  def test_flows_x24; assert_in_delta(0.0, (worksheet.flows_x24||0), 0.002); end
  def test_flows_y24; assert_in_delta(0.0, (worksheet.flows_y24||0), 0.002); end
  def test_flows_z24; assert_in_delta(0.0, (worksheet.flows_z24||0), 0.002); end
  def test_flows_aa24; assert_in_delta(0.0, (worksheet.flows_aa24||0), 0.002); end
  def test_flows_ab24; assert_in_delta(0.0, (worksheet.flows_ab24||0), 0.002); end
  def test_flows_ad24; assert_in_delta(0.0, (worksheet.flows_ad24||0), 0.002); end
  def test_flows_ae24; assert_in_delta(0.0, (worksheet.flows_ae24||0), 0.002); end
  def test_flows_af24; assert_in_delta(0.0, (worksheet.flows_af24||0), 0.002); end
  def test_flows_ag24; assert_in_delta(0.0, (worksheet.flows_ag24||0), 0.002); end
  def test_flows_ah24; assert_in_delta(0.0, (worksheet.flows_ah24||0), 0.002); end
  def test_flows_ai24; assert_in_delta(0.0, (worksheet.flows_ai24||0), 0.002); end
  def test_flows_aj24; assert_in_delta(0.0, (worksheet.flows_aj24||0), 0.002); end
  def test_flows_ak24; assert_in_delta(0.0, (worksheet.flows_ak24||0), 0.002); end
  def test_flows_al24; assert_in_delta(0.0, (worksheet.flows_al24||0), 0.002); end
  def test_flows_am24; assert_in_delta(0.0, (worksheet.flows_am24||0), 0.002); end
  def test_flows_ao24; assert_in_delta(0.0, (worksheet.flows_ao24||0), 0.002); end
  def test_flows_ap24; assert_in_delta(0.0, (worksheet.flows_ap24||0), 0.002); end
  def test_flows_aq24; assert_in_delta(0.0, (worksheet.flows_aq24||0), 0.002); end
  def test_flows_ar24; assert_in_delta(0.0, (worksheet.flows_ar24||0), 0.002); end
  def test_flows_as24; assert_in_delta(0.0, (worksheet.flows_as24||0), 0.002); end
  def test_flows_at24; assert_in_delta(0.0, (worksheet.flows_at24||0), 0.002); end
  def test_flows_au24; assert_in_delta(0.0, (worksheet.flows_au24||0), 0.002); end
  def test_flows_av24; assert_in_delta(0.0, (worksheet.flows_av24||0), 0.002); end
  def test_flows_aw24; assert_in_delta(0.0, (worksheet.flows_aw24||0), 0.002); end
  def test_flows_ax24; assert_in_delta(0.0, (worksheet.flows_ax24||0), 0.002); end
  def test_flows_c25; assert_equal("hydro", worksheet.flows_c25); end
  def test_flows_d25; assert_equal("electricity grid", worksheet.flows_d25); end
  def test_flows_e25; assert_in_epsilon(121.49676, worksheet.flows_e25, 0.002); end
  def test_flows_f25; assert_in_epsilon(143.7624, worksheet.flows_f25, 0.002); end
  def test_flows_g25; assert_in_epsilon(171.81360000000004, worksheet.flows_g25, 0.002); end
  def test_flows_h25; assert_in_epsilon(171.81360000000004, worksheet.flows_h25, 0.002); end
  def test_flows_i25; assert_in_epsilon(171.81360000000004, worksheet.flows_i25, 0.002); end
  def test_flows_j25; assert_in_epsilon(171.81360000000004, worksheet.flows_j25, 0.002); end
  def test_flows_k25; assert_in_epsilon(171.81360000000004, worksheet.flows_k25, 0.002); end
  def test_flows_l25; assert_in_epsilon(171.81360000000004, worksheet.flows_l25, 0.002); end
  def test_flows_m25; assert_in_epsilon(171.81360000000004, worksheet.flows_m25, 0.002); end
  def test_flows_n25; assert_in_epsilon(171.81360000000004, worksheet.flows_n25, 0.002); end
  def test_flows_r25; assert_equal("Oil Reserves", worksheet.flows_r25); end
  def test_flows_s25; assert_in_epsilon(395.28044, worksheet.flows_s25, 0.002); end
  def test_flows_t25; assert_in_epsilon(442.9866999999999, worksheet.flows_t25, 0.002); end
  def test_flows_u25; assert_in_epsilon(480.4207945988, worksheet.flows_u25, 0.002); end
  def test_flows_v25; assert_in_epsilon(406.8218875356273, worksheet.flows_v25, 0.002); end
  def test_flows_w25; assert_in_epsilon(404.6927124317743, worksheet.flows_w25, 0.002); end
  def test_flows_x25; assert_in_epsilon(402.83638767071136, worksheet.flows_x25, 0.002); end
  def test_flows_y25; assert_in_epsilon(401.68501767071086, worksheet.flows_y25, 0.002); end
  def test_flows_z25; assert_in_epsilon(401.1302468506092, worksheet.flows_z25, 0.002); end
  def test_flows_aa25; assert_in_epsilon(401.18988105870324, worksheet.flows_aa25, 0.002); end
  def test_flows_ab25; assert_in_epsilon(401.88812295573837, worksheet.flows_ab25, 0.002); end
  def test_flows_ad25; assert_in_delta(0.0, (worksheet.flows_ad25||0), 0.002); end
  def test_flows_ae25; assert_in_delta(0.0, (worksheet.flows_ae25||0), 0.002); end
  def test_flows_af25; assert_in_delta(0.0, (worksheet.flows_af25||0), 0.002); end
  def test_flows_ag25; assert_in_delta(0.0, (worksheet.flows_ag25||0), 0.002); end
  def test_flows_ah25; assert_in_delta(0.0, (worksheet.flows_ah25||0), 0.002); end
  def test_flows_ai25; assert_in_delta(0.0, (worksheet.flows_ai25||0), 0.002); end
  def test_flows_aj25; assert_in_delta(0.0, (worksheet.flows_aj25||0), 0.002); end
  def test_flows_ak25; assert_in_delta(0.0, (worksheet.flows_ak25||0), 0.002); end
  def test_flows_al25; assert_in_delta(0.0, (worksheet.flows_al25||0), 0.002); end
  def test_flows_am25; assert_in_delta(0.0, (worksheet.flows_am25||0), 0.002); end
  def test_flows_ao25; assert_in_delta(0.0, (worksheet.flows_ao25||0), 0.002); end
  def test_flows_ap25; assert_in_delta(0.0, (worksheet.flows_ap25||0), 0.002); end
  def test_flows_aq25; assert_in_delta(0.0, (worksheet.flows_aq25||0), 0.002); end
  def test_flows_ar25; assert_in_delta(0.0, (worksheet.flows_ar25||0), 0.002); end
  def test_flows_as25; assert_in_delta(0.0, (worksheet.flows_as25||0), 0.002); end
  def test_flows_at25; assert_in_delta(0.0, (worksheet.flows_at25||0), 0.002); end
  def test_flows_au25; assert_in_delta(0.0, (worksheet.flows_au25||0), 0.002); end
  def test_flows_av25; assert_in_delta(0.0, (worksheet.flows_av25||0), 0.002); end
  def test_flows_aw25; assert_in_delta(0.0, (worksheet.flows_aw25||0), 0.002); end
  def test_flows_ax25; assert_in_delta(0.0, (worksheet.flows_ax25||0), 0.002); end
  def test_flows_c26; assert_equal("nuclear", worksheet.flows_c26); end
  def test_flows_d26; assert_equal("thermal generation", worksheet.flows_d26); end
  def test_flows_e26; assert_in_epsilon(80.94774857142859, worksheet.flows_e26, 0.002); end
  def test_flows_f26; assert_in_epsilon(93.77115428571429, worksheet.flows_f26, 0.002); end
  def test_flows_g26; assert_in_epsilon(199.9649828571429, worksheet.flows_g26, 0.002); end
  def test_flows_h26; assert_in_epsilon(193.55328000000003, worksheet.flows_h26, 0.002); end
  def test_flows_i26; assert_in_epsilon(193.55328000000003, worksheet.flows_i26, 0.002); end
  def test_flows_j26; assert_in_epsilon(189.54596571428576, worksheet.flows_j26, 0.002); end
  def test_flows_k26; assert_in_epsilon(180.72987428571432, worksheet.flows_k26, 0.002); end
  def test_flows_l26; assert_in_epsilon(176.3218285714286, worksheet.flows_l26, 0.002); end
  def test_flows_m26; assert_in_epsilon(167.50573714285716, worksheet.flows_m26, 0.002); end
  def test_flows_n26; assert_in_epsilon(167.50573714285716, worksheet.flows_n26, 0.002); end
  def test_flows_r26; assert_equal("Oil Imports", worksheet.flows_r26); end
  def test_flows_s26; assert_in_epsilon(1235.4943240445418, worksheet.flows_s26, 0.002); end
  def test_flows_t26; assert_in_epsilon(1459.1773716311466, worksheet.flows_t26, 0.002); end
  def test_flows_u26; assert_in_epsilon(2094.1308465841576, worksheet.flows_u26, 0.002); end
  def test_flows_v26; assert_in_epsilon(3065.9673559076937, worksheet.flows_v26, 0.002); end
  def test_flows_w26; assert_in_epsilon(4157.631767599084, worksheet.flows_w26, 0.002); end
  def test_flows_x26; assert_in_epsilon(5448.054666446535, worksheet.flows_x26, 0.002); end
  def test_flows_y26; assert_in_epsilon(6933.9942488753495, worksheet.flows_y26, 0.002); end
  def test_flows_z26; assert_in_epsilon(8427.225528478948, worksheet.flows_z26, 0.002); end
  def test_flows_aa26; assert_in_epsilon(10106.26043154715, worksheet.flows_aa26, 0.002); end
  def test_flows_ab26; assert_in_epsilon(12020.741898724571, worksheet.flows_ab26, 0.002); end
  def test_flows_ad26; assert_in_delta(0.0, (worksheet.flows_ad26||0), 0.002); end
  def test_flows_ae26; assert_in_delta(0.0, (worksheet.flows_ae26||0), 0.002); end
  def test_flows_af26; assert_in_delta(0.0, (worksheet.flows_af26||0), 0.002); end
  def test_flows_ag26; assert_in_delta(0.0, (worksheet.flows_ag26||0), 0.002); end
  def test_flows_ah26; assert_in_delta(0.0, (worksheet.flows_ah26||0), 0.002); end
  def test_flows_ai26; assert_in_delta(0.0, (worksheet.flows_ai26||0), 0.002); end
  def test_flows_aj26; assert_in_delta(0.0, (worksheet.flows_aj26||0), 0.002); end
  def test_flows_ak26; assert_in_delta(0.0, (worksheet.flows_ak26||0), 0.002); end
  def test_flows_al26; assert_in_delta(0.0, (worksheet.flows_al26||0), 0.002); end
  def test_flows_am26; assert_in_delta(0.0, (worksheet.flows_am26||0), 0.002); end
  def test_flows_ao26; assert_in_delta(0.0, (worksheet.flows_ao26||0), 0.002); end
  def test_flows_ap26; assert_in_delta(0.0, (worksheet.flows_ap26||0), 0.002); end
  def test_flows_aq26; assert_in_delta(0.0, (worksheet.flows_aq26||0), 0.002); end
  def test_flows_ar26; assert_in_delta(0.0, (worksheet.flows_ar26||0), 0.002); end
  def test_flows_as26; assert_in_delta(0.0, (worksheet.flows_as26||0), 0.002); end
  def test_flows_at26; assert_in_delta(0.0, (worksheet.flows_at26||0), 0.002); end
  def test_flows_au26; assert_in_delta(0.0, (worksheet.flows_au26||0), 0.002); end
  def test_flows_av26; assert_in_delta(0.0, (worksheet.flows_av26||0), 0.002); end
  def test_flows_aw26; assert_in_delta(0.0, (worksheet.flows_aw26||0), 0.002); end
  def test_flows_ax26; assert_in_delta(0.0, (worksheet.flows_ax26||0), 0.002); end
  def test_flows_c27; assert_equal("solar pv", worksheet.flows_c27); end
  def test_flows_d27; assert_equal("off grid renewables", worksheet.flows_d27); end
  def test_flows_e27; assert_in_delta(0.0, (worksheet.flows_e27||0), 0.002); end
  def test_flows_f27; assert_in_delta(0.0, (worksheet.flows_f27||0), 0.002); end
  def test_flows_g27; assert_in_delta(0.11418061802221828, worksheet.flows_g27, 0.002); end
  def test_flows_h27; assert_in_delta(0.13396113841403443, worksheet.flows_h27, 0.002); end
  def test_flows_i27; assert_in_delta(0.4621810406556616, worksheet.flows_i27, 0.002); end
  def test_flows_j27; assert_in_delta(0.5341612414389386, worksheet.flows_j27, 0.002); end
  def test_flows_k27; assert_in_epsilon(1.254084624309047, worksheet.flows_k27, 0.002); end
  def test_flows_l27; assert_in_epsilon(1.3761634589947083, worksheet.flows_l27, 0.002); end
  def test_flows_m27; assert_in_epsilon(2.8747194377134955, worksheet.flows_m27, 0.002); end
  def test_flows_n27; assert_in_epsilon(4.077844464770415, worksheet.flows_n27, 0.002); end
  def test_flows_r27; assert_equal("Thermal Generation", worksheet.flows_r27); end
  def test_flows_s27; assert_in_epsilon(1899.1797688959064, worksheet.flows_s27, 0.002); end
  def test_flows_t27; assert_in_epsilon(2491.0773355555457, worksheet.flows_t27, 0.002); end
  def test_flows_u27; assert_in_epsilon(3461.0384256486004, worksheet.flows_u27, 0.002); end
  def test_flows_v27; assert_in_epsilon(4932.105015747831, worksheet.flows_v27, 0.002); end
  def test_flows_w27; assert_in_epsilon(6848.965473406863, worksheet.flows_w27, 0.002); end
  def test_flows_x27; assert_in_epsilon(9543.797155419299, worksheet.flows_x27, 0.002); end
  def test_flows_y27; assert_in_epsilon(11934.851809155884, worksheet.flows_y27, 0.002); end
  def test_flows_z27; assert_in_epsilon(14768.367236424772, worksheet.flows_z27, 0.002); end
  def test_flows_aa27; assert_in_epsilon(17340.65438367908, worksheet.flows_aa27, 0.002); end
  def test_flows_ab27; assert_in_epsilon(20281.571600901596, worksheet.flows_ab27, 0.002); end
  def test_flows_ad27; assert_in_epsilon(1899.1797688959064, worksheet.flows_ad27, 0.002); end
  def test_flows_ae27; assert_in_epsilon(2491.0773355555457, worksheet.flows_ae27, 0.002); end
  def test_flows_af27; assert_in_epsilon(3461.0384256486004, worksheet.flows_af27, 0.002); end
  def test_flows_ag27; assert_in_epsilon(4932.105015747831, worksheet.flows_ag27, 0.002); end
  def test_flows_ah27; assert_in_epsilon(6848.965473406862, worksheet.flows_ah27, 0.002); end
  def test_flows_ai27; assert_in_epsilon(9543.797155419297, worksheet.flows_ai27, 0.002); end
  def test_flows_aj27; assert_in_epsilon(11934.851809155882, worksheet.flows_aj27, 0.002); end
  def test_flows_ak27; assert_in_epsilon(14768.367236424772, worksheet.flows_ak27, 0.002); end
  def test_flows_al27; assert_in_epsilon(17340.654383679077, worksheet.flows_al27, 0.002); end
  def test_flows_am27; assert_in_epsilon(20281.571600901592, worksheet.flows_am27, 0.002); end
  def test_flows_ao27; assert_in_delta(0.0, (worksheet.flows_ao27||0), 0.002); end
  def test_flows_ap27; assert_in_delta(0.0, (worksheet.flows_ap27||0), 0.002); end
  def test_flows_aq27; assert_in_delta(0.0, (worksheet.flows_aq27||0), 0.002); end
  def test_flows_ar27; assert_in_delta(0.0, (worksheet.flows_ar27||0), 0.002); end
  def test_flows_as27; assert_in_delta(9.094947017729282e-13, worksheet.flows_as27, 0.002); end
  def test_flows_at27; assert_in_delta(1.8189894035458565e-12, worksheet.flows_at27, 0.002); end
  def test_flows_au27; assert_in_delta(1.8189894035458565e-12, worksheet.flows_au27, 0.002); end
  def test_flows_av27; assert_in_delta(0.0, (worksheet.flows_av27||0), 0.002); end
  def test_flows_aw27; assert_in_delta(3.637978807091713e-12, worksheet.flows_aw27, 0.002); end
  def test_flows_ax27; assert_in_delta(3.637978807091713e-12, worksheet.flows_ax27, 0.002); end
  def test_flows_c28; assert_equal("electricity imports", worksheet.flows_c28); end
  def test_flows_d28; assert_equal("electricity grid", worksheet.flows_d28); end
  def test_flows_e28; assert_in_delta(1.0, worksheet.flows_e28, 0.002); end
  def test_flows_f28; assert_in_epsilon(4.0, worksheet.flows_f28, 0.002); end
  def test_flows_g28; assert_in_epsilon(14.0, worksheet.flows_g28, 0.002); end
  def test_flows_h28; assert_in_epsilon(21.0, worksheet.flows_h28, 0.002); end
  def test_flows_i28; assert_in_epsilon(31.0, worksheet.flows_i28, 0.002); end
  def test_flows_j28; assert_in_epsilon(40.0, worksheet.flows_j28, 0.002); end
  def test_flows_k28; assert_in_epsilon(49.0, worksheet.flows_k28, 0.002); end
  def test_flows_l28; assert_in_epsilon(55.0, worksheet.flows_l28, 0.002); end
  def test_flows_m28; assert_in_epsilon(55.0, worksheet.flows_m28, 0.002); end
  def test_flows_n28; assert_in_epsilon(55.0, worksheet.flows_n28, 0.002); end
  def test_flows_r28; assert_equal("Electricity Grid", worksheet.flows_r28); end
  def test_flows_s28; assert_in_epsilon(790.769700205529, worksheet.flows_s28, 0.002); end
  def test_flows_t28; assert_in_epsilon(1030.157735487248, worksheet.flows_t28, 0.002); end
  def test_flows_u28; assert_in_epsilon(1444.7826289093362, worksheet.flows_u28, 0.002); end
  def test_flows_v28; assert_in_epsilon(2044.3014371199854, worksheet.flows_v28, 0.002); end
  def test_flows_w28; assert_in_epsilon(2817.7333966126735, worksheet.flows_w28, 0.002); end
  def test_flows_x28; assert_in_epsilon(3882.9115454803136, worksheet.flows_x28, 0.002); end
  def test_flows_y28; assert_in_epsilon(4819.455965199836, worksheet.flows_y28, 0.002); end
  def test_flows_z28; assert_in_epsilon(5890.112160537429, worksheet.flows_z28, 0.002); end
  def test_flows_aa28; assert_in_epsilon(6842.932433212647, worksheet.flows_aa28, 0.002); end
  def test_flows_ab28; assert_in_epsilon(7928.989203915954, worksheet.flows_ab28, 0.002); end
  def test_flows_ad28; assert_in_epsilon(790.769700205529, worksheet.flows_ad28, 0.002); end
  def test_flows_ae28; assert_in_epsilon(1030.157735487248, worksheet.flows_ae28, 0.002); end
  def test_flows_af28; assert_in_epsilon(1444.782628909336, worksheet.flows_af28, 0.002); end
  def test_flows_ag28; assert_in_epsilon(2044.3014371199856, worksheet.flows_ag28, 0.002); end
  def test_flows_ah28; assert_in_epsilon(2817.7333966126735, worksheet.flows_ah28, 0.002); end
  def test_flows_ai28; assert_in_epsilon(3882.9115454803136, worksheet.flows_ai28, 0.002); end
  def test_flows_aj28; assert_in_epsilon(4819.455965199836, worksheet.flows_aj28, 0.002); end
  def test_flows_ak28; assert_in_epsilon(5890.112160537429, worksheet.flows_ak28, 0.002); end
  def test_flows_al28; assert_in_epsilon(6842.932433212646, worksheet.flows_al28, 0.002); end
  def test_flows_am28; assert_in_epsilon(7928.989203915953, worksheet.flows_am28, 0.002); end
  def test_flows_ao28; assert_in_delta(0.0, (worksheet.flows_ao28||0), 0.002); end
  def test_flows_ap28; assert_in_delta(0.0, (worksheet.flows_ap28||0), 0.002); end
  def test_flows_aq28; assert_in_delta(2.2737367544323206e-13, worksheet.flows_aq28, 0.002); end
  def test_flows_ar28; assert_in_delta(-2.2737367544323206e-13, worksheet.flows_ar28, 0.002); end
  def test_flows_as28; assert_in_delta(0.0, (worksheet.flows_as28||0), 0.002); end
  def test_flows_at28; assert_in_delta(0.0, (worksheet.flows_at28||0), 0.002); end
  def test_flows_au28; assert_in_delta(0.0, (worksheet.flows_au28||0), 0.002); end
  def test_flows_av28; assert_in_delta(0.0, (worksheet.flows_av28||0), 0.002); end
  def test_flows_aw28; assert_in_delta(9.094947017729282e-13, worksheet.flows_aw28, 0.002); end
  def test_flows_ax28; assert_in_delta(9.094947017729282e-13, worksheet.flows_ax28, 0.002); end
  def test_flows_c29; assert_equal("bio-conversion", worksheet.flows_c29); end
  def test_flows_d29; assert_equal("solid", worksheet.flows_d29); end
  def test_flows_e29; assert_in_epsilon(937.2335555555555, worksheet.flows_e29, 0.002); end
  def test_flows_f29; assert_in_epsilon(948.4098, worksheet.flows_f29, 0.002); end
  def test_flows_g29; assert_in_epsilon(947.5049146476287, worksheet.flows_g29, 0.002); end
  def test_flows_h29; assert_in_epsilon(946.6398667230644, worksheet.flows_h29, 0.002); end
  def test_flows_i29; assert_in_epsilon(945.8150561972723, worksheet.flows_i29, 0.002); end
  def test_flows_j29; assert_in_epsilon(945.0308870569582, worksheet.flows_j29, 0.002); end
  def test_flows_k29; assert_in_epsilon(944.2877673448872, worksheet.flows_k29, 0.002); end
  def test_flows_l29; assert_in_epsilon(939.9734500000004, worksheet.flows_l29, 0.002); end
  def test_flows_m29; assert_in_epsilon(935.1007250000002, worksheet.flows_m29, 0.002); end
  def test_flows_n29; assert_in_epsilon(930.2280000000001, worksheet.flows_n29, 0.002); end
  def test_flows_r29; assert_equal("Green Building Savings", worksheet.flows_r29); end
  def test_flows_s29; assert_in_delta(0.01878235138385134, worksheet.flows_s29, 0.002); end
  def test_flows_t29; assert_in_delta(0.018835814608099886, worksheet.flows_t29, 0.002); end
  def test_flows_u29; assert_in_delta(0.033534846536453375, worksheet.flows_u29, 0.002); end
  def test_flows_v29; assert_in_delta(0.060794893445987486, worksheet.flows_v29, 0.002); end
  def test_flows_w29; assert_in_delta(0.11024317342605544, worksheet.flows_w29, 0.002); end
  def test_flows_x29; assert_in_delta(0.20356103070805628, worksheet.flows_x29, 0.002); end
  def test_flows_y29; assert_in_delta(0.2702004695738901, worksheet.flows_y29, 0.002); end
  def test_flows_z29; assert_in_delta(0.35871092809590743, worksheet.flows_z29, 0.002); end
  def test_flows_aa29; assert_in_delta(0.38321313705787546, worksheet.flows_aa29, 0.002); end
  def test_flows_ab29; assert_in_delta(0.4094456973387999, worksheet.flows_ab29, 0.002); end
  def test_flows_ad29; assert_in_delta(0.0, (worksheet.flows_ad29||0), 0.002); end
  def test_flows_ae29; assert_in_delta(0.0, (worksheet.flows_ae29||0), 0.002); end
  def test_flows_af29; assert_in_delta(0.0, (worksheet.flows_af29||0), 0.002); end
  def test_flows_ag29; assert_in_delta(0.0, (worksheet.flows_ag29||0), 0.002); end
  def test_flows_ah29; assert_in_delta(0.0, (worksheet.flows_ah29||0), 0.002); end
  def test_flows_ai29; assert_in_delta(0.0, (worksheet.flows_ai29||0), 0.002); end
  def test_flows_aj29; assert_in_delta(0.0, (worksheet.flows_aj29||0), 0.002); end
  def test_flows_ak29; assert_in_delta(0.0, (worksheet.flows_ak29||0), 0.002); end
  def test_flows_al29; assert_in_delta(0.0, (worksheet.flows_al29||0), 0.002); end
  def test_flows_am29; assert_in_delta(0.0, (worksheet.flows_am29||0), 0.002); end
  def test_flows_ao29; assert_in_delta(0.0, (worksheet.flows_ao29||0), 0.002); end
  def test_flows_ap29; assert_in_delta(0.0, (worksheet.flows_ap29||0), 0.002); end
  def test_flows_aq29; assert_in_delta(0.0, (worksheet.flows_aq29||0), 0.002); end
  def test_flows_ar29; assert_in_delta(0.0, (worksheet.flows_ar29||0), 0.002); end
  def test_flows_as29; assert_in_delta(0.0, (worksheet.flows_as29||0), 0.002); end
  def test_flows_at29; assert_in_delta(0.0, (worksheet.flows_at29||0), 0.002); end
  def test_flows_au29; assert_in_delta(0.0, (worksheet.flows_au29||0), 0.002); end
  def test_flows_av29; assert_in_delta(0.0, (worksheet.flows_av29||0), 0.002); end
  def test_flows_aw29; assert_in_delta(0.0, (worksheet.flows_aw29||0), 0.002); end
  def test_flows_ax29; assert_in_delta(0.0, (worksheet.flows_ax29||0), 0.002); end
  def test_flows_c30; assert_equal("bio-conversion", worksheet.flows_c30); end
  def test_flows_d30; assert_equal("liquid", worksheet.flows_d30); end
  def test_flows_e30; assert_in_delta(0.0, (worksheet.flows_e30||0), 0.002); end
  def test_flows_f30; assert_in_delta(0.13142242804166665, worksheet.flows_f30, 0.002); end
  def test_flows_g30; assert_in_epsilon(3.0140876139388606, worksheet.flows_g30, 0.002); end
  def test_flows_h30; assert_in_epsilon(6.640349805567526, worksheet.flows_h30, 0.002); end
  def test_flows_i30; assert_in_epsilon(11.174550655547504, worksheet.flows_i30, 0.002); end
  def test_flows_j30; assert_in_epsilon(16.858011722794185, worksheet.flows_j30, 0.002); end
  def test_flows_k30; assert_in_epsilon(23.81237420320716, worksheet.flows_k30, 0.002); end
  def test_flows_l30; assert_in_epsilon(32.28279205089418, worksheet.flows_l30, 0.002); end
  def test_flows_m30; assert_in_epsilon(42.4432602465375, worksheet.flows_m30, 0.002); end
  def test_flows_n30; assert_in_epsilon(54.65693393750001, worksheet.flows_n30, 0.002); end
  def test_flows_r30; assert_equal("Losses", worksheet.flows_r30); end
  def test_flows_s30; assert_in_delta(0.0, (worksheet.flows_s30||0), 0.002); end
  def test_flows_t30; assert_in_delta(0.0, (worksheet.flows_t30||0), 0.002); end
  def test_flows_u30; assert_in_delta(0.0, (worksheet.flows_u30||0), 0.002); end
  def test_flows_v30; assert_in_delta(0.0, (worksheet.flows_v30||0), 0.002); end
  def test_flows_w30; assert_in_delta(0.0, (worksheet.flows_w30||0), 0.002); end
  def test_flows_x30; assert_in_delta(0.0, (worksheet.flows_x30||0), 0.002); end
  def test_flows_y30; assert_in_delta(0.0, (worksheet.flows_y30||0), 0.002); end
  def test_flows_z30; assert_in_delta(0.0, (worksheet.flows_z30||0), 0.002); end
  def test_flows_aa30; assert_in_delta(0.0, (worksheet.flows_aa30||0), 0.002); end
  def test_flows_ab30; assert_in_delta(0.0, (worksheet.flows_ab30||0), 0.002); end
  def test_flows_ad30; assert_in_epsilon(1413.2445104838694, worksheet.flows_ad30, 0.002); end
  def test_flows_ae30; assert_in_epsilon(1841.308586254249, worksheet.flows_ae30, 0.002); end
  def test_flows_af30; assert_in_epsilon(2555.676936253476, worksheet.flows_af30, 0.002); end
  def test_flows_ag30; assert_in_epsilon(3560.930066571357, worksheet.flows_ag30, 0.002); end
  def test_flows_ah30; assert_in_epsilon(4857.40324946809, worksheet.flows_ah30, 0.002); end
  def test_flows_ai30; assert_in_epsilon(6668.163602213213, worksheet.flows_ai30, 0.002); end
  def test_flows_aj30; assert_in_epsilon(8304.348975994915, worksheet.flows_aj30, 0.002); end
  def test_flows_ak30; assert_in_epsilon(10231.40013835561, worksheet.flows_ak30, 0.002); end
  def test_flows_al30; assert_in_epsilon(12005.145837700293, worksheet.flows_al30, 0.002); end
  def test_flows_am30; assert_in_epsilon(14014.445331000454, worksheet.flows_am30, 0.002); end
  def test_flows_ao30; assert_in_delta(0.0, (worksheet.flows_ao30||0), 0.002); end
  def test_flows_ap30; assert_in_delta(0.0, (worksheet.flows_ap30||0), 0.002); end
  def test_flows_aq30; assert_in_delta(0.0, (worksheet.flows_aq30||0), 0.002); end
  def test_flows_ar30; assert_in_delta(0.0, (worksheet.flows_ar30||0), 0.002); end
  def test_flows_as30; assert_in_delta(0.0, (worksheet.flows_as30||0), 0.002); end
  def test_flows_at30; assert_in_delta(0.0, (worksheet.flows_at30||0), 0.002); end
  def test_flows_au30; assert_in_delta(0.0, (worksheet.flows_au30||0), 0.002); end
  def test_flows_av30; assert_in_delta(0.0, (worksheet.flows_av30||0), 0.002); end
  def test_flows_aw30; assert_in_delta(0.0, (worksheet.flows_aw30||0), 0.002); end
  def test_flows_ax30; assert_in_delta(0.0, (worksheet.flows_ax30||0), 0.002); end
  def test_flows_c31; assert_equal("bio-conversion", worksheet.flows_c31); end
  def test_flows_d31; assert_equal("gas", worksheet.flows_d31); end
  def test_flows_e31; assert_in_epsilon(9.177777777777777, worksheet.flows_e31, 0.002); end
  def test_flows_f31; assert_in_epsilon(10.305777777777783, worksheet.flows_f31, 0.002); end
  def test_flows_g31; assert_in_epsilon(11.34601666666667, worksheet.flows_g31, 0.002); end
  def test_flows_h31; assert_in_epsilon(12.38625555555556, worksheet.flows_h31, 0.002); end
  def test_flows_i31; assert_in_epsilon(13.426494444444447, worksheet.flows_i31, 0.002); end
  def test_flows_j31; assert_in_epsilon(14.466733333333337, worksheet.flows_j31, 0.002); end
  def test_flows_k31; assert_in_epsilon(14.832036478670412, worksheet.flows_k31, 0.002); end
  def test_flows_l31; assert_in_epsilon(15.206563986198885, worksheet.flows_l31, 0.002); end
  def test_flows_m31; assert_in_epsilon(15.590548782623422, worksheet.flows_m31, 0.002); end
  def test_flows_n31; assert_in_epsilon(15.984229676339865, worksheet.flows_n31, 0.002); end
  def test_flows_r31; assert_equal("Gas", worksheet.flows_r31); end
  def test_flows_s31; assert_in_epsilon(440.0480065353997, worksheet.flows_s31, 0.002); end
  def test_flows_t31; assert_in_epsilon(591.5538398995802, worksheet.flows_t31, 0.002); end
  def test_flows_u31; assert_in_epsilon(932.6696306870377, worksheet.flows_u31, 0.002); end
  def test_flows_v31; assert_in_epsilon(1101.7108226309847, worksheet.flows_v31, 0.002); end
  def test_flows_w31; assert_in_epsilon(1273.6002547243288, worksheet.flows_w31, 0.002); end
  def test_flows_x31; assert_in_epsilon(1486.4863462321223, worksheet.flows_x31, 0.002); end
  def test_flows_y31; assert_in_epsilon(1723.3340734066537, worksheet.flows_y31, 0.002); end
  def test_flows_z31; assert_in_epsilon(1984.76252502943, worksheet.flows_z31, 0.002); end
  def test_flows_aa31; assert_in_epsilon(2268.4377778267362, worksheet.flows_aa31, 0.002); end
  def test_flows_ab31; assert_in_epsilon(2593.2681652062415, worksheet.flows_ab31, 0.002); end
  def test_flows_ad31; assert_in_epsilon(440.04800653539974, worksheet.flows_ad31, 0.002); end
  def test_flows_ae31; assert_in_epsilon(591.5538398995802, worksheet.flows_ae31, 0.002); end
  def test_flows_af31; assert_in_epsilon(932.6696306870376, worksheet.flows_af31, 0.002); end
  def test_flows_ag31; assert_in_epsilon(1101.710822630985, worksheet.flows_ag31, 0.002); end
  def test_flows_ah31; assert_in_epsilon(1273.6002547243286, worksheet.flows_ah31, 0.002); end
  def test_flows_ai31; assert_in_epsilon(1486.4863462321223, worksheet.flows_ai31, 0.002); end
  def test_flows_aj31; assert_in_epsilon(1723.3340734066537, worksheet.flows_aj31, 0.002); end
  def test_flows_ak31; assert_in_epsilon(1984.7625250294302, worksheet.flows_ak31, 0.002); end
  def test_flows_al31; assert_in_epsilon(2268.4377778267362, worksheet.flows_al31, 0.002); end
  def test_flows_am31; assert_in_epsilon(2593.2681652062415, worksheet.flows_am31, 0.002); end
  def test_flows_ao31; assert_in_delta(-5.684341886080802e-14, worksheet.flows_ao31, 0.002); end
  def test_flows_ap31; assert_in_delta(0.0, (worksheet.flows_ap31||0), 0.002); end
  def test_flows_aq31; assert_in_delta(1.1368683772161603e-13, worksheet.flows_aq31, 0.002); end
  def test_flows_ar31; assert_in_delta(-2.2737367544323206e-13, worksheet.flows_ar31, 0.002); end
  def test_flows_as31; assert_in_delta(2.2737367544323206e-13, worksheet.flows_as31, 0.002); end
  def test_flows_at31; assert_in_delta(0.0, (worksheet.flows_at31||0), 0.002); end
  def test_flows_au31; assert_in_delta(0.0, (worksheet.flows_au31||0), 0.002); end
  def test_flows_av31; assert_in_delta(-2.2737367544323206e-13, worksheet.flows_av31, 0.002); end
  def test_flows_aw31; assert_in_delta(0.0, (worksheet.flows_aw31||0), 0.002); end
  def test_flows_ax31; assert_in_delta(0.0, (worksheet.flows_ax31||0), 0.002); end
  def test_flows_c32; assert_equal("gas", worksheet.flows_c32); end
  def test_flows_d32; assert_equal("thermal generation", worksheet.flows_d32); end
  def test_flows_e32; assert_in_epsilon(126.8156145541828, worksheet.flows_e32, 0.002); end
  def test_flows_f32; assert_in_epsilon(191.37825, worksheet.flows_f32, 0.002); end
  def test_flows_g32; assert_in_epsilon(217.65793072663513, worksheet.flows_g32, 0.002); end
  def test_flows_h32; assert_in_epsilon(217.65793072663513, worksheet.flows_h32, 0.002); end
  def test_flows_i32; assert_in_epsilon(217.65793072663513, worksheet.flows_i32, 0.002); end
  def test_flows_j32; assert_in_epsilon(217.65793072663513, worksheet.flows_j32, 0.002); end
  def test_flows_k32; assert_in_epsilon(217.65793072663513, worksheet.flows_k32, 0.002); end
  def test_flows_l32; assert_in_epsilon(217.65793072663513, worksheet.flows_l32, 0.002); end
  def test_flows_m32; assert_in_epsilon(217.65793072663513, worksheet.flows_m32, 0.002); end
  def test_flows_n32; assert_in_epsilon(217.65793072663513, worksheet.flows_n32, 0.002); end
  def test_flows_r32; assert_equal("Solid", worksheet.flows_r32); end
  def test_flows_s32; assert_in_epsilon(3253.4798011484613, worksheet.flows_s32, 0.002); end
  def test_flows_t32; assert_in_epsilon(4179.698990784802, worksheet.flows_t32, 0.002); end
  def test_flows_u32; assert_in_epsilon(5410.0088019380355, worksheet.flows_u32, 0.002); end
  def test_flows_v32; assert_in_epsilon(7545.521153499874, worksheet.flows_v32, 0.002); end
  def test_flows_w32; assert_in_epsilon(10199.902437794315, worksheet.flows_w32, 0.002); end
  def test_flows_x32; assert_in_epsilon(13706.081917472606, worksheet.flows_x32, 0.002); end
  def test_flows_y32; assert_in_epsilon(16912.514790400215, worksheet.flows_y32, 0.002); end
  def test_flows_z32; assert_in_epsilon(20451.66153060164, worksheet.flows_z32, 0.002); end
  def test_flows_aa32; assert_in_epsilon(23597.216876713534, worksheet.flows_aa32, 0.002); end
  def test_flows_ab32; assert_in_epsilon(27124.988503822457, worksheet.flows_ab32, 0.002); end
  def test_flows_ad32; assert_in_epsilon(3253.479801148461, worksheet.flows_ad32, 0.002); end
  def test_flows_ae32; assert_in_epsilon(4179.698990784802, worksheet.flows_ae32, 0.002); end
  def test_flows_af32; assert_in_epsilon(5410.008801938036, worksheet.flows_af32, 0.002); end
  def test_flows_ag32; assert_in_epsilon(7545.521153499874, worksheet.flows_ag32, 0.002); end
  def test_flows_ah32; assert_in_epsilon(10199.902437794315, worksheet.flows_ah32, 0.002); end
  def test_flows_ai32; assert_in_epsilon(13706.081917472606, worksheet.flows_ai32, 0.002); end
  def test_flows_aj32; assert_in_epsilon(16912.514790400215, worksheet.flows_aj32, 0.002); end
  def test_flows_ak32; assert_in_epsilon(20451.66153060164, worksheet.flows_ak32, 0.002); end
  def test_flows_al32; assert_in_epsilon(23597.21687671353, worksheet.flows_al32, 0.002); end
  def test_flows_am32; assert_in_epsilon(27124.988503822457, worksheet.flows_am32, 0.002); end
  def test_flows_ao32; assert_in_delta(4.547473508864641e-13, worksheet.flows_ao32, 0.002); end
  def test_flows_ap32; assert_in_delta(0.0, (worksheet.flows_ap32||0), 0.002); end
  def test_flows_aq32; assert_in_delta(-9.094947017729282e-13, worksheet.flows_aq32, 0.002); end
  def test_flows_ar32; assert_in_delta(0.0, (worksheet.flows_ar32||0), 0.002); end
  def test_flows_as32; assert_in_delta(0.0, (worksheet.flows_as32||0), 0.002); end
  def test_flows_at32; assert_in_delta(0.0, (worksheet.flows_at32||0), 0.002); end
  def test_flows_au32; assert_in_delta(0.0, (worksheet.flows_au32||0), 0.002); end
  def test_flows_av32; assert_in_delta(0.0, (worksheet.flows_av32||0), 0.002); end
  def test_flows_aw32; assert_in_delta(3.637978807091713e-12, worksheet.flows_aw32, 0.002); end
  def test_flows_ax32; assert_in_delta(0.0, (worksheet.flows_ax32||0), 0.002); end
  def test_flows_c33; assert_equal("solid", worksheet.flows_c33); end
  def test_flows_d33; assert_equal("thermal generation", worksheet.flows_d33); end
  def test_flows_e33; assert_in_epsilon(1691.416405770295, worksheet.flows_e33, 0.002); end
  def test_flows_f33; assert_in_epsilon(2205.9279312698313, worksheet.flows_f33, 0.002); end
  def test_flows_g33; assert_in_epsilon(3043.4155120648225, worksheet.flows_g33, 0.002); end
  def test_flows_h33; assert_in_epsilon(4520.893805021196, worksheet.flows_h33, 0.002); end
  def test_flows_i33; assert_in_epsilon(6437.754262680227, worksheet.flows_i33, 0.002); end
  def test_flows_j33; assert_in_epsilon(9136.593258978377, worksheet.flows_j33, 0.002); end
  def test_flows_k33; assert_in_epsilon(11536.464004143532, worksheet.flows_k33, 0.002); end
  def test_flows_l33; assert_in_epsilon(14374.38747712671, worksheet.flows_l33, 0.002); end
  def test_flows_m33; assert_in_epsilon(16955.490715809585, worksheet.flows_m33, 0.002); end
  def test_flows_n33; assert_in_epsilon(19896.4079330321, worksheet.flows_n33, 0.002); end
  def test_flows_r33; assert_equal("Liquid", worksheet.flows_r33); end
  def test_flows_s33; assert_in_epsilon(1630.7747640445418, worksheet.flows_s33, 0.002); end
  def test_flows_t33; assert_in_epsilon(1902.295494059188, worksheet.flows_t33, 0.002); end
  def test_flows_u33; assert_in_epsilon(2577.565728796896, worksheet.flows_u33, 0.002); end
  def test_flows_v33; assert_in_epsilon(3479.4295932488885, worksheet.flows_v33, 0.002); end
  def test_flows_w33; assert_in_epsilon(4573.499030686405, worksheet.flows_w33, 0.002); end
  def test_flows_x33; assert_in_epsilon(5867.749065840041, worksheet.flows_x33, 0.002); end
  def test_flows_y33; assert_in_epsilon(7359.491640749268, worksheet.flows_y33, 0.002); end
  def test_flows_z33; assert_in_epsilon(8860.63856738045, worksheet.flows_z33, 0.002); end
  def test_flows_aa33; assert_in_epsilon(10549.893572852392, worksheet.flows_aa33, 0.002); end
  def test_flows_ab33; assert_in_epsilon(12477.28695561781, worksheet.flows_ab33, 0.002); end
  def test_flows_ad33; assert_in_epsilon(1630.7747640445418, worksheet.flows_ad33, 0.002); end
  def test_flows_ae33; assert_in_epsilon(1902.295494059188, worksheet.flows_ae33, 0.002); end
  def test_flows_af33; assert_in_epsilon(2577.5657287968966, worksheet.flows_af33, 0.002); end
  def test_flows_ag33; assert_in_epsilon(3479.4295932488885, worksheet.flows_ag33, 0.002); end
  def test_flows_ah33; assert_in_epsilon(4573.499030686406, worksheet.flows_ah33, 0.002); end
  def test_flows_ai33; assert_in_epsilon(5867.74906584004, worksheet.flows_ai33, 0.002); end
  def test_flows_aj33; assert_in_epsilon(7359.491640749268, worksheet.flows_aj33, 0.002); end
  def test_flows_ak33; assert_in_epsilon(8860.63856738045, worksheet.flows_ak33, 0.002); end
  def test_flows_al33; assert_in_epsilon(10549.89357285239, worksheet.flows_al33, 0.002); end
  def test_flows_am33; assert_in_epsilon(12477.28695561781, worksheet.flows_am33, 0.002); end
  def test_flows_ao33; assert_in_delta(0.0, (worksheet.flows_ao33||0), 0.002); end
  def test_flows_ap33; assert_in_delta(0.0, (worksheet.flows_ap33||0), 0.002); end
  def test_flows_aq33; assert_in_delta(-4.547473508864641e-13, worksheet.flows_aq33, 0.002); end
  def test_flows_ar33; assert_in_delta(0.0, (worksheet.flows_ar33||0), 0.002); end
  def test_flows_as33; assert_in_delta(-9.094947017729282e-13, worksheet.flows_as33, 0.002); end
  def test_flows_at33; assert_in_delta(9.094947017729282e-13, worksheet.flows_at33, 0.002); end
  def test_flows_au33; assert_in_delta(0.0, (worksheet.flows_au33||0), 0.002); end
  def test_flows_av33; assert_in_delta(0.0, (worksheet.flows_av33||0), 0.002); end
  def test_flows_aw33; assert_in_delta(1.8189894035458565e-12, worksheet.flows_aw33, 0.002); end
  def test_flows_ax33; assert_in_delta(0.0, (worksheet.flows_ax33||0), 0.002); end
  def test_flows_c34; assert_equal("thermal generation", worksheet.flows_c34); end
  def test_flows_d34; assert_equal("electricity grid", worksheet.flows_d34); end
  def test_flows_e34; assert_in_epsilon(648.8219225495291, worksheet.flows_e34, 0.002); end
  def test_flows_f34; assert_in_epsilon(850.024354126048, worksheet.flows_f34, 0.002); end
  def test_flows_g34; assert_in_epsilon(1193.962746742136, worksheet.flows_g34, 0.002); end
  def test_flows_h34; assert_in_epsilon(1740.4525819377855, worksheet.flows_h34, 0.002); end
  def test_flows_i34; assert_in_epsilon(2454.4025402064735, worksheet.flows_i34, 0.002); end
  def test_flows_j34; assert_in_epsilon(3450.4046850441136, worksheet.flows_j34, 0.002); end
  def test_flows_k34; assert_in_epsilon(4333.255176016636, worksheet.flows_k34, 0.002); end
  def test_flows_l34; assert_in_epsilon(5371.421686985429, worksheet.flows_l34, 0.002); end
  def test_flows_m34; assert_in_epsilon(6316.761476028646, worksheet.flows_m34, 0.002); end
  def test_flows_n34; assert_in_epsilon(7415.989161731954, worksheet.flows_n34, 0.002); end
  def test_flows_r34; assert_equal("Off Grid Renewables", worksheet.flows_r34); end
  def test_flows_s34; assert_in_delta(0.0, (worksheet.flows_s34||0), 0.002); end
  def test_flows_t34; assert_in_delta(0.0, (worksheet.flows_t34||0), 0.002); end
  def test_flows_u34; assert_in_delta(0.11418061802221828, worksheet.flows_u34, 0.002); end
  def test_flows_v34; assert_in_delta(0.13396113841403443, worksheet.flows_v34, 0.002); end
  def test_flows_w34; assert_in_delta(0.4621810406556616, worksheet.flows_w34, 0.002); end
  def test_flows_x34; assert_in_delta(0.5341612414389386, worksheet.flows_x34, 0.002); end
  def test_flows_y34; assert_in_epsilon(1.254084624309047, worksheet.flows_y34, 0.002); end
  def test_flows_z34; assert_in_epsilon(1.3761634589947083, worksheet.flows_z34, 0.002); end
  def test_flows_aa34; assert_in_epsilon(2.8747194377134955, worksheet.flows_aa34, 0.002); end
  def test_flows_ab34; assert_in_epsilon(4.077844464770415, worksheet.flows_ab34, 0.002); end
  def test_flows_ad34; assert_in_delta(0.0, (worksheet.flows_ad34||0), 0.002); end
  def test_flows_ae34; assert_in_delta(0.0, (worksheet.flows_ae34||0), 0.002); end
  def test_flows_af34; assert_in_delta(0.11418061802221828, worksheet.flows_af34, 0.002); end
  def test_flows_ag34; assert_in_delta(0.13396113841403443, worksheet.flows_ag34, 0.002); end
  def test_flows_ah34; assert_in_delta(0.4621810406556616, worksheet.flows_ah34, 0.002); end
  def test_flows_ai34; assert_in_delta(0.5341612414389386, worksheet.flows_ai34, 0.002); end
  def test_flows_aj34; assert_in_epsilon(1.254084624309047, worksheet.flows_aj34, 0.002); end
  def test_flows_ak34; assert_in_epsilon(1.3761634589947083, worksheet.flows_ak34, 0.002); end
  def test_flows_al34; assert_in_epsilon(2.8747194377134955, worksheet.flows_al34, 0.002); end
  def test_flows_am34; assert_in_epsilon(4.077844464770415, worksheet.flows_am34, 0.002); end
  def test_flows_ao34; assert_in_delta(0.0, (worksheet.flows_ao34||0), 0.002); end
  def test_flows_ap34; assert_in_delta(0.0, (worksheet.flows_ap34||0), 0.002); end
  def test_flows_aq34; assert_in_delta(0.0, (worksheet.flows_aq34||0), 0.002); end
  def test_flows_ar34; assert_in_delta(0.0, (worksheet.flows_ar34||0), 0.002); end
  def test_flows_as34; assert_in_delta(0.0, (worksheet.flows_as34||0), 0.002); end
  def test_flows_at34; assert_in_delta(0.0, (worksheet.flows_at34||0), 0.002); end
  def test_flows_au34; assert_in_delta(0.0, (worksheet.flows_au34||0), 0.002); end
  def test_flows_av34; assert_in_delta(0.0, (worksheet.flows_av34||0), 0.002); end
  def test_flows_aw34; assert_in_delta(0.0, (worksheet.flows_aw34||0), 0.002); end
  def test_flows_ax34; assert_in_delta(0.0, (worksheet.flows_ax34||0), 0.002); end
  def test_flows_c35; assert_equal("thermal generation", worksheet.flows_c35); end
  def test_flows_d35; assert_equal("losses", worksheet.flows_d35); end
  def test_flows_e35; assert_in_epsilon(1250.3578463463773, worksheet.flows_e35, 0.002); end
  def test_flows_f35; assert_in_epsilon(1641.0529814294975, worksheet.flows_f35, 0.002); end
  def test_flows_g35; assert_in_epsilon(2267.0756789064644, worksheet.flows_g35, 0.002); end
  def test_flows_h35; assert_in_epsilon(3191.6524338100457, worksheet.flows_h35, 0.002); end
  def test_flows_i35; assert_in_epsilon(4394.562933200389, worksheet.flows_i35, 0.002); end
  def test_flows_j35; assert_in_epsilon(6093.3924703751845, worksheet.flows_j35, 0.002); end
  def test_flows_k35; assert_in_epsilon(7601.5966331392465, worksheet.flows_k35, 0.002); end
  def test_flows_l35; assert_in_epsilon(9396.945549439342, worksheet.flows_l35, 0.002); end
  def test_flows_m35; assert_in_epsilon(11023.892907650434, worksheet.flows_m35, 0.002); end
  def test_flows_n35; assert_in_epsilon(12865.58243916964, worksheet.flows_n35, 0.002); end
  def test_flows_r35; assert_equal("Over Generation/Exports", worksheet.flows_r35); end
  def test_flows_s35; assert_in_delta(0.0, (worksheet.flows_s35||0), 0.002); end
  def test_flows_t35; assert_in_delta(0.0, (worksheet.flows_t35||0), 0.002); end
  def test_flows_u35; assert_in_delta(0.0, (worksheet.flows_u35||0), 0.002); end
  def test_flows_v35; assert_in_delta(0.0, (worksheet.flows_v35||0), 0.002); end
  def test_flows_w35; assert_in_delta(0.0, (worksheet.flows_w35||0), 0.002); end
  def test_flows_x35; assert_in_delta(0.0, (worksheet.flows_x35||0), 0.002); end
  def test_flows_y35; assert_in_delta(0.0, (worksheet.flows_y35||0), 0.002); end
  def test_flows_z35; assert_in_delta(0.0, (worksheet.flows_z35||0), 0.002); end
  def test_flows_aa35; assert_in_delta(0.0, (worksheet.flows_aa35||0), 0.002); end
  def test_flows_ab35; assert_in_delta(0.0, (worksheet.flows_ab35||0), 0.002); end
  def test_flows_ad35; assert_in_delta(0.0, (worksheet.flows_ad35||0), 0.002); end
  def test_flows_ae35; assert_in_epsilon(5.463970885452454, worksheet.flows_ae35, 0.002); end
  def test_flows_af35; assert_in_delta(0.0, (worksheet.flows_af35||0), 0.002); end
  def test_flows_ag35; assert_in_delta(0.0, (worksheet.flows_ag35||0), 0.002); end
  def test_flows_ah35; assert_in_delta(4.547473508864641e-13, worksheet.flows_ah35, 0.002); end
  def test_flows_ai35; assert_in_delta(4.547473508864641e-13, worksheet.flows_ai35, 0.002); end
  def test_flows_aj35; assert_in_delta(0.0, (worksheet.flows_aj35||0), 0.002); end
  def test_flows_ak35; assert_in_delta(0.0, (worksheet.flows_ak35||0), 0.002); end
  def test_flows_al35; assert_in_delta(0.0, (worksheet.flows_al35||0), 0.002); end
  def test_flows_am35; assert_in_delta(0.0, (worksheet.flows_am35||0), 0.002); end
  def test_flows_ao35; assert_in_delta(0.0, (worksheet.flows_ao35||0), 0.002); end
  def test_flows_ap35; assert_in_delta(0.0, (worksheet.flows_ap35||0), 0.002); end
  def test_flows_aq35; assert_in_delta(0.0, (worksheet.flows_aq35||0), 0.002); end
  def test_flows_ar35; assert_in_delta(0.0, (worksheet.flows_ar35||0), 0.002); end
  def test_flows_as35; assert_in_delta(0.0, (worksheet.flows_as35||0), 0.002); end
  def test_flows_at35; assert_in_delta(0.0, (worksheet.flows_at35||0), 0.002); end
  def test_flows_au35; assert_in_delta(0.0, (worksheet.flows_au35||0), 0.002); end
  def test_flows_av35; assert_in_delta(0.0, (worksheet.flows_av35||0), 0.002); end
  def test_flows_aw35; assert_in_delta(0.0, (worksheet.flows_aw35||0), 0.002); end
  def test_flows_ax35; assert_in_delta(0.0, (worksheet.flows_ax35||0), 0.002); end
  def test_flows_c36; assert_equal("electricity grid", worksheet.flows_c36); end
  def test_flows_d36; assert_equal("T&D losses", worksheet.flows_d36); end
  def test_flows_e36; assert_in_epsilon(195.082885040704, worksheet.flows_e36, 0.002); end
  def test_flows_f36; assert_in_epsilon(232.5030151881474, worksheet.flows_f36, 0.002); end
  def test_flows_g36; assert_in_epsilon(310.6571608680854, worksheet.flows_g36, 0.002); end
  def test_flows_h36; assert_in_epsilon(419.89951518444514, worksheet.flows_h36, 0.002); end
  def test_flows_i36; assert_in_epsilon(551.7121990567612, worksheet.flows_i36, 0.002); end
  def test_flows_j36; assert_in_epsilon(726.4150919284571, worksheet.flows_j36, 0.002); end
  def test_flows_k36; assert_in_epsilon(862.8753960093786, worksheet.flows_k36, 0.002); end
  def test_flows_l36; assert_in_epsilon(978.3476298652677, worksheet.flows_l36, 0.002); end
  def test_flows_m36; assert_in_epsilon(1091.0371471514245, worksheet.flows_m36, 0.002); end
  def test_flows_n36; assert_in_epsilon(1230.420544663678, worksheet.flows_n36, 0.002); end
  def test_flows_r36; assert_equal("Coal", worksheet.flows_r36); end
  def test_flows_s36; assert_in_epsilon(2316.2462455929053, worksheet.flows_s36, 0.002); end
  def test_flows_t36; assert_in_epsilon(3231.2891907848016, worksheet.flows_t36, 0.002); end
  def test_flows_u36; assert_in_epsilon(4462.503887290408, worksheet.flows_u36, 0.002); end
  def test_flows_v36; assert_in_epsilon(6598.88128677681, worksheet.flows_v36, 0.002); end
  def test_flows_w36; assert_in_epsilon(9254.087381597043, worksheet.flows_w36, 0.002); end
  def test_flows_x36; assert_in_epsilon(12761.051030415647, worksheet.flows_x36, 0.002); end
  def test_flows_y36; assert_in_epsilon(15968.22702305533, worksheet.flows_y36, 0.002); end
  def test_flows_z36; assert_in_epsilon(19511.688080601638, worksheet.flows_z36, 0.002); end
  def test_flows_aa36; assert_in_epsilon(22662.11615171353, worksheet.flows_aa36, 0.002); end
  def test_flows_ab36; assert_in_epsilon(26194.760503822457, worksheet.flows_ab36, 0.002); end
  def test_flows_ad36; assert_in_epsilon(2316.2462455929053, worksheet.flows_ad36, 0.002); end
  def test_flows_ae36; assert_in_epsilon(3231.2891907848016, worksheet.flows_ae36, 0.002); end
  def test_flows_af36; assert_in_epsilon(4462.503887290408, worksheet.flows_af36, 0.002); end
  def test_flows_ag36; assert_in_epsilon(6598.88128677681, worksheet.flows_ag36, 0.002); end
  def test_flows_ah36; assert_in_epsilon(9254.087381597043, worksheet.flows_ah36, 0.002); end
  def test_flows_ai36; assert_in_epsilon(12761.051030415647, worksheet.flows_ai36, 0.002); end
  def test_flows_aj36; assert_in_epsilon(15968.22702305533, worksheet.flows_aj36, 0.002); end
  def test_flows_ak36; assert_in_epsilon(19511.688080601638, worksheet.flows_ak36, 0.002); end
  def test_flows_al36; assert_in_epsilon(22662.11615171353, worksheet.flows_al36, 0.002); end
  def test_flows_am36; assert_in_epsilon(26194.760503822457, worksheet.flows_am36, 0.002); end
  def test_flows_ao36; assert_in_delta(0.0, (worksheet.flows_ao36||0), 0.002); end
  def test_flows_ap36; assert_in_delta(0.0, (worksheet.flows_ap36||0), 0.002); end
  def test_flows_aq36; assert_in_delta(0.0, (worksheet.flows_aq36||0), 0.002); end
  def test_flows_ar36; assert_in_delta(0.0, (worksheet.flows_ar36||0), 0.002); end
  def test_flows_as36; assert_in_delta(0.0, (worksheet.flows_as36||0), 0.002); end
  def test_flows_at36; assert_in_delta(0.0, (worksheet.flows_at36||0), 0.002); end
  def test_flows_au36; assert_in_delta(0.0, (worksheet.flows_au36||0), 0.002); end
  def test_flows_av36; assert_in_delta(0.0, (worksheet.flows_av36||0), 0.002); end
  def test_flows_aw36; assert_in_delta(0.0, (worksheet.flows_aw36||0), 0.002); end
  def test_flows_ax36; assert_in_delta(0.0, (worksheet.flows_ax36||0), 0.002); end
  def test_flows_c37; assert_equal("electricity grid", worksheet.flows_c37); end
  def test_flows_d37; assert_equal("passenger transport", worksheet.flows_d37); end
  def test_flows_e37; assert_in_epsilon(7.804557892034429, worksheet.flows_e37, 0.002); end
  def test_flows_f37; assert_in_epsilon(7.804557892034429, worksheet.flows_f37, 0.002); end
  def test_flows_g37; assert_in_epsilon(9.98120573742474, worksheet.flows_g37, 0.002); end
  def test_flows_h37; assert_in_epsilon(12.677744583468431, worksheet.flows_h37, 0.002); end
  def test_flows_i37; assert_in_epsilon(15.183119042462815, worksheet.flows_i37, 0.002); end
  def test_flows_j37; assert_in_epsilon(17.97800145980359, worksheet.flows_j37, 0.002); end
  def test_flows_k37; assert_in_epsilon(20.996398618954622, worksheet.flows_k37, 0.002); end
  def test_flows_l37; assert_in_epsilon(23.918000610343412, worksheet.flows_l37, 0.002); end
  def test_flows_m37; assert_in_epsilon(26.47001683994065, worksheet.flows_m37, 0.002); end
  def test_flows_n37; assert_in_epsilon(28.239990009727272, worksheet.flows_n37, 0.002); end
  def test_flows_r37; assert_equal("Oil", worksheet.flows_r37); end
  def test_flows_s37; assert_in_epsilon(1630.7747640445418, worksheet.flows_s37, 0.002); end
  def test_flows_t37; assert_in_epsilon(1902.1640716311465, worksheet.flows_t37, 0.002); end
  def test_flows_u37; assert_in_epsilon(2574.5516411829576, worksheet.flows_u37, 0.002); end
  def test_flows_v37; assert_in_epsilon(3472.789243443321, worksheet.flows_v37, 0.002); end
  def test_flows_w37; assert_in_epsilon(4562.3244800308585, worksheet.flows_w37, 0.002); end
  def test_flows_x37; assert_in_epsilon(5850.891054117246, worksheet.flows_x37, 0.002); end
  def test_flows_y37; assert_in_epsilon(7335.679266546061, worksheet.flows_y37, 0.002); end
  def test_flows_z37; assert_in_epsilon(8828.355775329557, worksheet.flows_z37, 0.002); end
  def test_flows_aa37; assert_in_epsilon(10507.450312605853, worksheet.flows_aa37, 0.002); end
  def test_flows_ab37; assert_in_epsilon(12422.63002168031, worksheet.flows_ab37, 0.002); end
  def test_flows_ad37; assert_in_epsilon(1630.7747640445418, worksheet.flows_ad37, 0.002); end
  def test_flows_ae37; assert_in_epsilon(1902.1640716311465, worksheet.flows_ae37, 0.002); end
  def test_flows_af37; assert_in_epsilon(2574.5516411829576, worksheet.flows_af37, 0.002); end
  def test_flows_ag37; assert_in_epsilon(3472.789243443321, worksheet.flows_ag37, 0.002); end
  def test_flows_ah37; assert_in_epsilon(4562.3244800308585, worksheet.flows_ah37, 0.002); end
  def test_flows_ai37; assert_in_epsilon(5850.891054117246, worksheet.flows_ai37, 0.002); end
  def test_flows_aj37; assert_in_epsilon(7335.679266546061, worksheet.flows_aj37, 0.002); end
  def test_flows_ak37; assert_in_epsilon(8828.355775329557, worksheet.flows_ak37, 0.002); end
  def test_flows_al37; assert_in_epsilon(10507.450312605853, worksheet.flows_al37, 0.002); end
  def test_flows_am37; assert_in_epsilon(12422.63002168031, worksheet.flows_am37, 0.002); end
  def test_flows_ao37; assert_in_delta(0.0, (worksheet.flows_ao37||0), 0.002); end
  def test_flows_ap37; assert_in_delta(0.0, (worksheet.flows_ap37||0), 0.002); end
  def test_flows_aq37; assert_in_delta(0.0, (worksheet.flows_aq37||0), 0.002); end
  def test_flows_ar37; assert_in_delta(0.0, (worksheet.flows_ar37||0), 0.002); end
  def test_flows_as37; assert_in_delta(0.0, (worksheet.flows_as37||0), 0.002); end
  def test_flows_at37; assert_in_delta(0.0, (worksheet.flows_at37||0), 0.002); end
  def test_flows_au37; assert_in_delta(0.0, (worksheet.flows_au37||0), 0.002); end
  def test_flows_av37; assert_in_delta(0.0, (worksheet.flows_av37||0), 0.002); end
  def test_flows_aw37; assert_in_delta(0.0, (worksheet.flows_aw37||0), 0.002); end
  def test_flows_ax37; assert_in_delta(0.0, (worksheet.flows_ax37||0), 0.002); end
  def test_flows_c38; assert_equal("electricity grid", worksheet.flows_c38); end
  def test_flows_d38; assert_equal("freight transport", worksheet.flows_d38); end
  def test_flows_e38; assert_in_epsilon(6.371041500000006, worksheet.flows_e38, 0.002); end
  def test_flows_f38; assert_in_epsilon(6.371041500000006, worksheet.flows_f38, 0.002); end
  def test_flows_g38; assert_in_epsilon(9.40687970251694, worksheet.flows_g38, 0.002); end
  def test_flows_h38; assert_in_epsilon(13.140797584316113, worksheet.flows_h38, 0.002); end
  def test_flows_i38; assert_in_epsilon(17.610110958084224, worksheet.flows_i38, 0.002); end
  def test_flows_j38; assert_in_epsilon(22.892634286083435, worksheet.flows_j38, 0.002); end
  def test_flows_k38; assert_in_epsilon(28.404926019576415, worksheet.flows_k38, 0.002); end
  def test_flows_l38; assert_in_epsilon(30.876418737637415, worksheet.flows_l38, 0.002); end
  def test_flows_m38; assert_in_epsilon(33.48478498636817, worksheet.flows_m38, 0.002); end
  def test_flows_n38; assert_in_epsilon(35.94665822824585, worksheet.flows_n38, 0.002); end
  def test_flows_r38; assert_equal("Natural Gas", worksheet.flows_r38); end
  def test_flows_s38; assert_in_epsilon(430.87022875762193, worksheet.flows_s38, 0.002); end
  def test_flows_t38; assert_in_epsilon(581.2480621218025, worksheet.flows_t38, 0.002); end
  def test_flows_u38; assert_in_epsilon(921.323614020371, worksheet.flows_u38, 0.002); end
  def test_flows_v38; assert_in_epsilon(1089.3245670754293, worksheet.flows_v38, 0.002); end
  def test_flows_w38; assert_in_epsilon(1260.1737602798842, worksheet.flows_w38, 0.002); end
  def test_flows_x38; assert_in_epsilon(1472.0196128987889, worksheet.flows_x38, 0.002); end
  def test_flows_y38; assert_in_epsilon(1708.5020369279832, worksheet.flows_y38, 0.002); end
  def test_flows_z38; assert_in_epsilon(1969.5559610432313, worksheet.flows_z38, 0.002); end
  def test_flows_aa38; assert_in_epsilon(2252.8472290441127, worksheet.flows_aa38, 0.002); end
  def test_flows_ab38; assert_in_epsilon(2577.2839355299016, worksheet.flows_ab38, 0.002); end
  def test_flows_ad38; assert_in_epsilon(430.87022875762193, worksheet.flows_ad38, 0.002); end
  def test_flows_ae38; assert_in_epsilon(581.2480621218025, worksheet.flows_ae38, 0.002); end
  def test_flows_af38; assert_in_epsilon(921.323614020371, worksheet.flows_af38, 0.002); end
  def test_flows_ag38; assert_in_epsilon(1089.3245670754293, worksheet.flows_ag38, 0.002); end
  def test_flows_ah38; assert_in_epsilon(1260.1737602798842, worksheet.flows_ah38, 0.002); end
  def test_flows_ai38; assert_in_epsilon(1472.0196128987889, worksheet.flows_ai38, 0.002); end
  def test_flows_aj38; assert_in_epsilon(1708.5020369279832, worksheet.flows_aj38, 0.002); end
  def test_flows_ak38; assert_in_epsilon(1969.5559610432313, worksheet.flows_ak38, 0.002); end
  def test_flows_al38; assert_in_epsilon(2252.8472290441127, worksheet.flows_al38, 0.002); end
  def test_flows_am38; assert_in_epsilon(2577.2839355299016, worksheet.flows_am38, 0.002); end
  def test_flows_ao38; assert_in_delta(0.0, (worksheet.flows_ao38||0), 0.002); end
  def test_flows_ap38; assert_in_delta(0.0, (worksheet.flows_ap38||0), 0.002); end
  def test_flows_aq38; assert_in_delta(0.0, (worksheet.flows_aq38||0), 0.002); end
  def test_flows_ar38; assert_in_delta(0.0, (worksheet.flows_ar38||0), 0.002); end
  def test_flows_as38; assert_in_delta(0.0, (worksheet.flows_as38||0), 0.002); end
  def test_flows_at38; assert_in_delta(0.0, (worksheet.flows_at38||0), 0.002); end
  def test_flows_au38; assert_in_delta(0.0, (worksheet.flows_au38||0), 0.002); end
  def test_flows_av38; assert_in_delta(0.0, (worksheet.flows_av38||0), 0.002); end
  def test_flows_aw38; assert_in_delta(0.0, (worksheet.flows_aw38||0), 0.002); end
  def test_flows_ax38; assert_in_delta(0.0, (worksheet.flows_ax38||0), 0.002); end
  def test_flows_c39; assert_equal("electricity grid", worksheet.flows_c39); end
  def test_flows_d39; assert_equal("industry", worksheet.flows_d39); end
  def test_flows_e39; assert_in_epsilon(291.7178485116746, worksheet.flows_e39, 0.002); end
  def test_flows_f39; assert_in_epsilon(401.235, worksheet.flows_f39, 0.002); end
  def test_flows_g39; assert_in_epsilon(503.1177061491396, worksheet.flows_g39, 0.002); end
  def test_flows_h39; assert_in_epsilon(638.2062218628469, worksheet.flows_h39, 0.002); end
  def test_flows_i39; assert_in_epsilon(792.4818867749141, worksheet.flows_i39, 0.002); end
  def test_flows_j39; assert_in_epsilon(966.17848871674, worksheet.flows_j39, 0.002); end
  def test_flows_k39; assert_in_epsilon(1200.6228340761327, worksheet.flows_k39, 0.002); end
  def test_flows_l39; assert_in_epsilon(1462.2792945499318, worksheet.flows_l39, 0.002); end
  def test_flows_m39; assert_in_epsilon(1752.1756493279522, worksheet.flows_m39, 0.002); end
  def test_flows_n39; assert_in_epsilon(2061.261323802787, worksheet.flows_n39, 0.002); end
  def test_flows_r39; assert_equal("Passenger Transport", worksheet.flows_r39); end
  def test_flows_s39; assert_in_delta(0.0, (worksheet.flows_s39||0), 0.002); end
  def test_flows_t39; assert_in_delta(0.0, (worksheet.flows_t39||0), 0.002); end
  def test_flows_u39; assert_in_delta(0.0, (worksheet.flows_u39||0), 0.002); end
  def test_flows_v39; assert_in_delta(0.0, (worksheet.flows_v39||0), 0.002); end
  def test_flows_w39; assert_in_delta(0.0, (worksheet.flows_w39||0), 0.002); end
  def test_flows_x39; assert_in_delta(0.0, (worksheet.flows_x39||0), 0.002); end
  def test_flows_y39; assert_in_delta(0.0, (worksheet.flows_y39||0), 0.002); end
  def test_flows_z39; assert_in_delta(0.0, (worksheet.flows_z39||0), 0.002); end
  def test_flows_aa39; assert_in_delta(0.0, (worksheet.flows_aa39||0), 0.002); end
  def test_flows_ab39; assert_in_delta(0.0, (worksheet.flows_ab39||0), 0.002); end
  def test_flows_ad39; assert_in_epsilon(505.5107723131398, worksheet.flows_ad39, 0.002); end
  def test_flows_ae39; assert_in_epsilon(505.51077231313985, worksheet.flows_ae39, 0.002); end
  def test_flows_af39; assert_in_epsilon(756.6892590327086, worksheet.flows_af39, 0.002); end
  def test_flows_ag39; assert_in_epsilon(1096.4808383845784, worksheet.flows_ag39, 0.002); end
  def test_flows_ah39; assert_in_epsilon(1494.8975122489044, worksheet.flows_ah39, 0.002); end
  def test_flows_ai39; assert_in_epsilon(1969.0313158996844, worksheet.flows_ai39, 0.002); end
  def test_flows_aj39; assert_in_epsilon(2511.579615387234, worksheet.flows_aj39, 0.002); end
  def test_flows_ak39; assert_in_epsilon(3073.7620097680133, worksheet.flows_ak39, 0.002); end
  def test_flows_al39; assert_in_epsilon(3696.3913108059724, worksheet.flows_al39, 0.002); end
  def test_flows_am39; assert_in_epsilon(4426.729879459741, worksheet.flows_am39, 0.002); end
  def test_flows_ao39; assert_in_delta(0.0, (worksheet.flows_ao39||0), 0.002); end
  def test_flows_ap39; assert_in_delta(0.0, (worksheet.flows_ap39||0), 0.002); end
  def test_flows_aq39; assert_in_delta(0.0, (worksheet.flows_aq39||0), 0.002); end
  def test_flows_ar39; assert_in_delta(0.0, (worksheet.flows_ar39||0), 0.002); end
  def test_flows_as39; assert_in_delta(0.0, (worksheet.flows_as39||0), 0.002); end
  def test_flows_at39; assert_in_delta(0.0, (worksheet.flows_at39||0), 0.002); end
  def test_flows_au39; assert_in_delta(0.0, (worksheet.flows_au39||0), 0.002); end
  def test_flows_av39; assert_in_delta(0.0, (worksheet.flows_av39||0), 0.002); end
  def test_flows_aw39; assert_in_delta(0.0, (worksheet.flows_aw39||0), 0.002); end
  def test_flows_ax39; assert_in_delta(0.0, (worksheet.flows_ax39||0), 0.002); end
  def test_flows_c40; assert_equal("electricity grid", worksheet.flows_c40); end
  def test_flows_d40; assert_equal("household cooking", worksheet.flows_d40); end
  def test_flows_e40; assert_in_delta(0.30660334104356374, worksheet.flows_e40, 0.002); end
  def test_flows_f40; assert_in_delta(0.4056812477360954, worksheet.flows_f40, 0.002); end
  def test_flows_g40; assert_in_epsilon(1.9119107308416539, worksheet.flows_g40, 0.002); end
  def test_flows_h40; assert_in_epsilon(3.0737404888957927, worksheet.flows_h40, 0.002); end
  def test_flows_i40; assert_in_epsilon(5.987845305057132, worksheet.flows_i40, 0.002); end
  def test_flows_j40; assert_in_epsilon(10.924338830969084, worksheet.flows_j40, 0.002); end
  def test_flows_k40; assert_in_epsilon(14.605179460099949, worksheet.flows_k40, 0.002); end
  def test_flows_l40; assert_in_epsilon(19.221420721203312, worksheet.flows_l40, 0.002); end
  def test_flows_m40; assert_in_epsilon(25.37842895536987, worksheet.flows_m40, 0.002); end
  def test_flows_n40; assert_in_epsilon(29.2476501509129, worksheet.flows_n40, 0.002); end
  def test_flows_r40; assert_equal("Freight Transport", worksheet.flows_r40); end
  def test_flows_s40; assert_in_delta(0.0, (worksheet.flows_s40||0), 0.002); end
  def test_flows_t40; assert_in_delta(0.0, (worksheet.flows_t40||0), 0.002); end
  def test_flows_u40; assert_in_delta(0.0, (worksheet.flows_u40||0), 0.002); end
  def test_flows_v40; assert_in_delta(0.0, (worksheet.flows_v40||0), 0.002); end
  def test_flows_w40; assert_in_delta(0.0, (worksheet.flows_w40||0), 0.002); end
  def test_flows_x40; assert_in_delta(0.0, (worksheet.flows_x40||0), 0.002); end
  def test_flows_y40; assert_in_delta(0.0, (worksheet.flows_y40||0), 0.002); end
  def test_flows_z40; assert_in_delta(0.0, (worksheet.flows_z40||0), 0.002); end
  def test_flows_aa40; assert_in_delta(0.0, (worksheet.flows_aa40||0), 0.002); end
  def test_flows_ab40; assert_in_delta(0.0, (worksheet.flows_ab40||0), 0.002); end
  def test_flows_ad40; assert_in_epsilon(342.36168551728827, worksheet.flows_ad40, 0.002); end
  def test_flows_ae40; assert_in_epsilon(342.36168551728827, worksheet.flows_ae40, 0.002); end
  def test_flows_af40; assert_in_epsilon(514.8251293446688, worksheet.flows_af40, 0.002); end
  def test_flows_ag40; assert_in_epsilon(745.0962652828532, worksheet.flows_ag40, 0.002); end
  def test_flows_ah40; assert_in_epsilon(1048.250892658704, worksheet.flows_ah40, 0.002); end
  def test_flows_ai40; assert_in_epsilon(1437.3785290842018, worksheet.flows_ai40, 0.002); end
  def test_flows_aj40; assert_in_epsilon(1912.6843855001264, worksheet.flows_aj40, 0.002); end
  def test_flows_ak40; assert_in_epsilon(2313.717182252903, worksheet.flows_ak40, 0.002); end
  def test_flows_al40; assert_in_epsilon(2752.7741845851738, worksheet.flows_al40, 0.002); end
  def test_flows_am40; assert_in_epsilon(3210.243362216601, worksheet.flows_am40, 0.002); end
  def test_flows_ao40; assert_in_delta(0.0, (worksheet.flows_ao40||0), 0.002); end
  def test_flows_ap40; assert_in_delta(0.0, (worksheet.flows_ap40||0), 0.002); end
  def test_flows_aq40; assert_in_delta(0.0, (worksheet.flows_aq40||0), 0.002); end
  def test_flows_ar40; assert_in_delta(0.0, (worksheet.flows_ar40||0), 0.002); end
  def test_flows_as40; assert_in_delta(0.0, (worksheet.flows_as40||0), 0.002); end
  def test_flows_at40; assert_in_delta(0.0, (worksheet.flows_at40||0), 0.002); end
  def test_flows_au40; assert_in_delta(0.0, (worksheet.flows_au40||0), 0.002); end
  def test_flows_av40; assert_in_delta(0.0, (worksheet.flows_av40||0), 0.002); end
  def test_flows_aw40; assert_in_delta(0.0, (worksheet.flows_aw40||0), 0.002); end
  def test_flows_ax40; assert_in_delta(0.0, (worksheet.flows_ax40||0), 0.002); end
  def test_flows_c41; assert_equal("electricity grid", worksheet.flows_c41); end
  def test_flows_d41; assert_equal("household lighting & appliances", worksheet.flows_d41); end
  def test_flows_e41; assert_in_epsilon(117.7523722493629, worksheet.flows_e41, 0.002); end
  def test_flows_f41; assert_in_epsilon(162.8229405663922, worksheet.flows_f41, 0.002); end
  def test_flows_g41; assert_in_epsilon(294.1978328715296, worksheet.flows_g41, 0.002); end
  def test_flows_h41; assert_in_epsilon(488.120152658904, worksheet.flows_h41, 0.002); end
  def test_flows_i41; assert_in_epsilon(762.138273505526, worksheet.flows_i41, 0.002); end
  def test_flows_j41; assert_in_epsilon(1157.9120424167459, worksheet.flows_j41, 0.002); end
  def test_flows_k41; assert_in_epsilon(1452.2441557318687, worksheet.flows_k41, 0.002); end
  def test_flows_l41; assert_in_epsilon(1803.3634131162555, worksheet.flows_l41, 0.002); end
  def test_flows_m41; assert_in_epsilon(2203.893791654689, worksheet.flows_m41, 0.002); end
  def test_flows_n41; assert_in_epsilon(2671.8455088986316, worksheet.flows_n41, 0.002); end
  def test_flows_r41; assert_equal("Industry", worksheet.flows_r41); end
  def test_flows_s41; assert_in_delta(0.0, (worksheet.flows_s41||0), 0.002); end
  def test_flows_t41; assert_in_delta(0.0, (worksheet.flows_t41||0), 0.002); end
  def test_flows_u41; assert_in_delta(0.0, (worksheet.flows_u41||0), 0.002); end
  def test_flows_v41; assert_in_delta(0.0, (worksheet.flows_v41||0), 0.002); end
  def test_flows_w41; assert_in_delta(0.0, (worksheet.flows_w41||0), 0.002); end
  def test_flows_x41; assert_in_delta(0.0, (worksheet.flows_x41||0), 0.002); end
  def test_flows_y41; assert_in_delta(0.0, (worksheet.flows_y41||0), 0.002); end
  def test_flows_z41; assert_in_delta(0.0, (worksheet.flows_z41||0), 0.002); end
  def test_flows_aa41; assert_in_delta(0.0, (worksheet.flows_aa41||0), 0.002); end
  def test_flows_ab41; assert_in_delta(0.0, (worksheet.flows_ab41||0), 0.002); end
  def test_flows_ad41; assert_in_epsilon(1615.7381002510185, worksheet.flows_ad41, 0.002); end
  def test_flows_ae41; assert_in_epsilon(2278.7991580746866, worksheet.flows_ae41, 0.002); end
  def test_flows_af41; assert_in_epsilon(3188.0989682873605, worksheet.flows_af41, 0.002); end
  def test_flows_ag41; assert_in_epsilon(4295.4614477243695, worksheet.flows_ag41, 0.002); end
  def test_flows_ah41; assert_in_epsilon(5520.882023743752, worksheet.flows_ah41, 0.002); end
  def test_flows_ai41; assert_in_epsilon(6883.469231943256, worksheet.flows_ai41, 0.002); end
  def test_flows_aj41; assert_in_epsilon(8404.590855504404, worksheet.flows_aj41, 0.002); end
  def test_flows_ak41; assert_in_epsilon(9897.385275988245, worksheet.flows_ak41, 0.002); end
  def test_flows_al41; assert_in_epsilon(11326.434333202773, worksheet.flows_al41, 0.002); end
  def test_flows_am41; assert_in_epsilon(12793.27183131085, worksheet.flows_am41, 0.002); end
  def test_flows_ao41; assert_in_delta(0.0, (worksheet.flows_ao41||0), 0.002); end
  def test_flows_ap41; assert_in_delta(0.0, (worksheet.flows_ap41||0), 0.002); end
  def test_flows_aq41; assert_in_delta(0.0, (worksheet.flows_aq41||0), 0.002); end
  def test_flows_ar41; assert_in_delta(0.0, (worksheet.flows_ar41||0), 0.002); end
  def test_flows_as41; assert_in_delta(0.0, (worksheet.flows_as41||0), 0.002); end
  def test_flows_at41; assert_in_delta(0.0, (worksheet.flows_at41||0), 0.002); end
  def test_flows_au41; assert_in_delta(0.0, (worksheet.flows_au41||0), 0.002); end
  def test_flows_av41; assert_in_delta(0.0, (worksheet.flows_av41||0), 0.002); end
  def test_flows_aw41; assert_in_delta(0.0, (worksheet.flows_aw41||0), 0.002); end
  def test_flows_ax41; assert_in_delta(0.0, (worksheet.flows_ax41||0), 0.002); end
  def test_flows_c42; assert_equal("electricity grid", worksheet.flows_c42); end
  def test_flows_d42; assert_equal("commercial lighting & appliances", worksheet.flows_d42); end
  def test_flows_e42; assert_in_epsilon(69.81857167070955, worksheet.flows_e42, 0.002); end
  def test_flows_f42; assert_in_epsilon(69.8185182074853, worksheet.flows_f42, 0.002); end
  def test_flows_g42; assert_in_epsilon(115.39506380103352, worksheet.flows_g42, 0.002); end
  def test_flows_h42; assert_in_epsilon(190.7403546122752, worksheet.flows_h42, 0.002); end
  def test_flows_i42; assert_in_epsilon(315.3108276463584, worksheet.flows_i42, 0.002); end
  def test_flows_j42; assert_in_epsilon(521.2826104810658, worksheet.flows_j42, 0.002); end
  def test_flows_k42; assert_in_epsilon(689.4051063589067, worksheet.flows_k42, 0.002); end
  def test_flows_l42; assert_in_epsilon(911.749902556425, worksheet.flows_l42, 0.002); end
  def test_flows_m42; assert_in_epsilon(970.175284639915, worksheet.flows_m42, 0.002); end
  def test_flows_n42; assert_in_epsilon(1032.3445308366922, worksheet.flows_n42, 0.002); end
  def test_flows_r42; assert_equal("Household Cooking", worksheet.flows_r42); end
  def test_flows_s42; assert_in_delta(0.0, (worksheet.flows_s42||0), 0.002); end
  def test_flows_t42; assert_in_delta(0.0, (worksheet.flows_t42||0), 0.002); end
  def test_flows_u42; assert_in_delta(0.0, (worksheet.flows_u42||0), 0.002); end
  def test_flows_v42; assert_in_delta(0.0, (worksheet.flows_v42||0), 0.002); end
  def test_flows_w42; assert_in_delta(0.0, (worksheet.flows_w42||0), 0.002); end
  def test_flows_x42; assert_in_delta(0.0, (worksheet.flows_x42||0), 0.002); end
  def test_flows_y42; assert_in_delta(0.0, (worksheet.flows_y42||0), 0.002); end
  def test_flows_z42; assert_in_delta(0.0, (worksheet.flows_z42||0), 0.002); end
  def test_flows_aa42; assert_in_delta(0.0, (worksheet.flows_aa42||0), 0.002); end
  def test_flows_ab42; assert_in_delta(0.0, (worksheet.flows_ab42||0), 0.002); end
  def test_flows_ad42; assert_in_epsilon(1045.8611113960574, worksheet.flows_ad42, 0.002); end
  def test_flows_ae42; assert_in_epsilon(1153.7282449630281, worksheet.flows_ae42, 0.002); end
  def test_flows_af42; assert_in_epsilon(1148.4989388784086, worksheet.flows_af42, 0.002); end
  def test_flows_ag42; assert_in_epsilon(1155.9568110410034, worksheet.flows_ag42, 0.002); end
  def test_flows_ah42; assert_in_epsilon(1156.4277437769354, worksheet.flows_ah42, 0.002); end
  def test_flows_ai42; assert_in_epsilon(1145.5431763602155, worksheet.flows_ai42, 0.002); end
  def test_flows_aj42; assert_in_epsilon(1128.6766748639811, worksheet.flows_aj42, 0.002); end
  def test_flows_ak42; assert_in_epsilon(1099.7850738372154, worksheet.flows_ak42, 0.002); end
  def test_flows_al42; assert_in_epsilon(1069.20950579284, worksheet.flows_al42, 0.002); end
  def test_flows_am42; assert_in_epsilon(1079.9753438946818, worksheet.flows_am42, 0.002); end
  def test_flows_ao42; assert_in_delta(0.0, (worksheet.flows_ao42||0), 0.002); end
  def test_flows_ap42; assert_in_delta(0.0, (worksheet.flows_ap42||0), 0.002); end
  def test_flows_aq42; assert_in_delta(0.0, (worksheet.flows_aq42||0), 0.002); end
  def test_flows_ar42; assert_in_delta(0.0, (worksheet.flows_ar42||0), 0.002); end
  def test_flows_as42; assert_in_delta(0.0, (worksheet.flows_as42||0), 0.002); end
  def test_flows_at42; assert_in_delta(0.0, (worksheet.flows_at42||0), 0.002); end
  def test_flows_au42; assert_in_delta(0.0, (worksheet.flows_au42||0), 0.002); end
  def test_flows_av42; assert_in_delta(0.0, (worksheet.flows_av42||0), 0.002); end
  def test_flows_aw42; assert_in_delta(0.0, (worksheet.flows_aw42||0), 0.002); end
  def test_flows_ax42; assert_in_delta(0.0, (worksheet.flows_ax42||0), 0.002); end
  def test_flows_c43; assert_equal("electricity grid", worksheet.flows_c43); end
  def test_flows_d43; assert_equal("agriculture", worksheet.flows_d43); end
  def test_flows_e43; assert_in_epsilon(99.549, worksheet.flows_e43, 0.002); end
  def test_flows_f43; assert_in_epsilon(135.84360999999998, worksheet.flows_f43, 0.002); end
  def test_flows_g43; assert_in_epsilon(188.7750131492979, worksheet.flows_g43, 0.002); end
  def test_flows_h43; assert_in_epsilon(262.3257106793957, worksheet.flows_h43, 0.002); end
  def test_flows_i43; assert_in_epsilon(335.74068575957824, worksheet.flows_i43, 0.002); end
  def test_flows_j43; assert_in_epsilon(428.7780628500808, worksheet.flows_j43, 0.002); end
  def test_flows_k43; assert_in_epsilon(506.9106409238258, worksheet.flows_k43, 0.002); end
  def test_flows_l43; assert_in_epsilon(599.267848785967, worksheet.flows_l43, 0.002); end
  def test_flows_m43; assert_in_epsilon(658.5674956470099, worksheet.flows_m43, 0.002); end
  def test_flows_n43; assert_in_epsilon(723.7192953583711, worksheet.flows_n43, 0.002); end
  def test_flows_r43; assert_equal("Commercial Cooking", worksheet.flows_r43); end
  def test_flows_s43; assert_in_delta(0.0, (worksheet.flows_s43||0), 0.002); end
  def test_flows_t43; assert_in_delta(0.0, (worksheet.flows_t43||0), 0.002); end
  def test_flows_u43; assert_in_delta(0.0, (worksheet.flows_u43||0), 0.002); end
  def test_flows_v43; assert_in_delta(0.0, (worksheet.flows_v43||0), 0.002); end
  def test_flows_w43; assert_in_delta(0.0, (worksheet.flows_w43||0), 0.002); end
  def test_flows_x43; assert_in_delta(0.0, (worksheet.flows_x43||0), 0.002); end
  def test_flows_y43; assert_in_delta(0.0, (worksheet.flows_y43||0), 0.002); end
  def test_flows_z43; assert_in_delta(0.0, (worksheet.flows_z43||0), 0.002); end
  def test_flows_aa43; assert_in_delta(0.0, (worksheet.flows_aa43||0), 0.002); end
  def test_flows_ab43; assert_in_delta(0.0, (worksheet.flows_ab43||0), 0.002); end
  def test_flows_ad43; assert_in_epsilon(42.63668783708186, worksheet.flows_ad43, 0.002); end
  def test_flows_ae43; assert_in_epsilon(64.76722458582496, worksheet.flows_ae43, 0.002); end
  def test_flows_af43; assert_in_epsilon(96.64390987736526, worksheet.flows_af43, 0.002); end
  def test_flows_ag43; assert_in_epsilon(143.41278923679616, worksheet.flows_ag43, 0.002); end
  def test_flows_ah43; assert_in_epsilon(210.74579320156334, worksheet.flows_ah43, 0.002); end
  def test_flows_ai43; assert_in_epsilon(308.34342741085425, worksheet.flows_ai43, 0.002); end
  def test_flows_aj43; assert_in_epsilon(412.63306124605424, worksheet.flows_aj43, 0.002); end
  def test_flows_ak43; assert_in_epsilon(552.1961167228573, worksheet.flows_ak43, 0.002); end
  def test_flows_al43; assert_in_epsilon(738.9629672499229, worksheet.flows_al43, 0.002); end
  def test_flows_am43; assert_in_epsilon(988.8991436730385, worksheet.flows_am43, 0.002); end
  def test_flows_ao43; assert_in_delta(0.0, (worksheet.flows_ao43||0), 0.002); end
  def test_flows_ap43; assert_in_delta(0.0, (worksheet.flows_ap43||0), 0.002); end
  def test_flows_aq43; assert_in_delta(0.0, (worksheet.flows_aq43||0), 0.002); end
  def test_flows_ar43; assert_in_delta(0.0, (worksheet.flows_ar43||0), 0.002); end
  def test_flows_as43; assert_in_delta(0.0, (worksheet.flows_as43||0), 0.002); end
  def test_flows_at43; assert_in_delta(0.0, (worksheet.flows_at43||0), 0.002); end
  def test_flows_au43; assert_in_delta(0.0, (worksheet.flows_au43||0), 0.002); end
  def test_flows_av43; assert_in_delta(0.0, (worksheet.flows_av43||0), 0.002); end
  def test_flows_aw43; assert_in_delta(0.0, (worksheet.flows_aw43||0), 0.002); end
  def test_flows_ax43; assert_in_delta(0.0, (worksheet.flows_ax43||0), 0.002); end
  def test_flows_c44; assert_equal("electricity grid", worksheet.flows_c44); end
  def test_flows_d44; assert_equal("telecom", worksheet.flows_d44); end
  def test_flows_e44; assert_in_epsilon(2.3668199999999997, worksheet.flows_e44, 0.002); end
  def test_flows_f44; assert_in_epsilon(7.8894, worksheet.flows_f44, 0.002); end
  def test_flows_g44; assert_in_epsilon(11.339855899466881, worksheet.flows_g44, 0.002); end
  def test_flows_h44; assert_in_epsilon(16.117199465438524, worksheet.flows_h44, 0.002); end
  def test_flows_i44; assert_in_epsilon(21.568448563930875, worksheet.flows_i44, 0.002); end
  def test_flows_j44; assert_in_epsilon(30.55027451036736, worksheet.flows_j44, 0.002); end
  def test_flows_k44; assert_in_epsilon(43.39132800109303, worksheet.flows_k44, 0.002); end
  def test_flows_l44; assert_in_epsilon(61.08823159439924, worksheet.flows_l44, 0.002); end
  def test_flows_m44; assert_in_epsilon(81.74983400997752, worksheet.flows_m44, 0.002); end
  def test_flows_n44; assert_in_epsilon(115.96370196690869, worksheet.flows_n44, 0.002); end
  def test_flows_r44; assert_equal("Agriculture", worksheet.flows_r44); end
  def test_flows_s44; assert_in_delta(0.0, (worksheet.flows_s44||0), 0.002); end
  def test_flows_t44; assert_in_delta(0.0, (worksheet.flows_t44||0), 0.002); end
  def test_flows_u44; assert_in_delta(0.0, (worksheet.flows_u44||0), 0.002); end
  def test_flows_v44; assert_in_delta(0.0, (worksheet.flows_v44||0), 0.002); end
  def test_flows_w44; assert_in_delta(0.0, (worksheet.flows_w44||0), 0.002); end
  def test_flows_x44; assert_in_delta(0.0, (worksheet.flows_x44||0), 0.002); end
  def test_flows_y44; assert_in_delta(0.0, (worksheet.flows_y44||0), 0.002); end
  def test_flows_z44; assert_in_delta(0.0, (worksheet.flows_z44||0), 0.002); end
  def test_flows_aa44; assert_in_delta(0.0, (worksheet.flows_aa44||0), 0.002); end
  def test_flows_ab44; assert_in_delta(0.0, (worksheet.flows_ab44||0), 0.002); end
  def test_flows_ad44; assert_in_epsilon(177.82856075231598, worksheet.flows_ad44, 0.002); end
  def test_flows_ae44; assert_in_epsilon(237.20689383625, worksheet.flows_ae44, 0.002); end
  def test_flows_af44; assert_in_epsilon(328.2852405896393, worksheet.flows_af44, 0.002); end
  def test_flows_ag44; assert_in_epsilon(453.517720920971, worksheet.flows_ag44, 0.002); end
  def test_flows_ah44; assert_in_epsilon(591.3849918091486, worksheet.flows_ah44, 0.002); end
  def test_flows_ai44; assert_in_epsilon(750.1024018576557, worksheet.flows_ai44, 0.002); end
  def test_flows_aj44; assert_in_epsilon(850.2884275248466, worksheet.flows_aj44, 0.002); end
  def test_flows_ak44; assert_in_epsilon(969.308783186821, worksheet.flows_ak44, 0.002); end
  def test_flows_al44; assert_in_epsilon(1047.8059052018175, worksheet.flows_al44, 0.002); end
  def test_flows_am44; assert_in_epsilon(1134.4954568667354, worksheet.flows_am44, 0.002); end
  def test_flows_ao44; assert_in_delta(0.0, (worksheet.flows_ao44||0), 0.002); end
  def test_flows_ap44; assert_in_delta(0.0, (worksheet.flows_ap44||0), 0.002); end
  def test_flows_aq44; assert_in_delta(0.0, (worksheet.flows_aq44||0), 0.002); end
  def test_flows_ar44; assert_in_delta(0.0, (worksheet.flows_ar44||0), 0.002); end
  def test_flows_as44; assert_in_delta(0.0, (worksheet.flows_as44||0), 0.002); end
  def test_flows_at44; assert_in_delta(0.0, (worksheet.flows_at44||0), 0.002); end
  def test_flows_au44; assert_in_delta(0.0, (worksheet.flows_au44||0), 0.002); end
  def test_flows_av44; assert_in_delta(0.0, (worksheet.flows_av44||0), 0.002); end
  def test_flows_aw44; assert_in_delta(0.0, (worksheet.flows_aw44||0), 0.002); end
  def test_flows_ax44; assert_in_delta(0.0, (worksheet.flows_ax44||0), 0.002); end
  def test_flows_c45; assert_equal("green building savings", worksheet.flows_c45); end
  def test_flows_d45; assert_equal("household lighting & appliances", worksheet.flows_d45); end
  def test_flows_e45; assert_in_delta(0.0, (worksheet.flows_e45||0), 0.002); end
  def test_flows_f45; assert_in_delta(0.0, (worksheet.flows_f45||0), 0.002); end
  def test_flows_g45; assert_in_delta(-5.919080879191843e-13, worksheet.flows_g45, 0.002); end
  def test_flows_h45; assert_in_delta(0.0, (worksheet.flows_h45||0), 0.002); end
  def test_flows_i45; assert_in_delta(-5.414542277970094e-13, worksheet.flows_i45, 0.002); end
  def test_flows_j45; assert_in_delta(0.0, (worksheet.flows_j45||0), 0.002); end
  def test_flows_k45; assert_in_delta(1.641352825785818e-12, worksheet.flows_k45, 0.002); end
  def test_flows_l45; assert_in_delta(-2.670345944343897e-12, worksheet.flows_l45, 0.002); end
  def test_flows_m45; assert_in_delta(3.0901058749774097e-12, worksheet.flows_m45, 0.002); end
  def test_flows_n45; assert_in_delta(-5.511013559759109e-12, worksheet.flows_n45, 0.002); end
  def test_flows_r45; assert_equal("Telecom", worksheet.flows_r45); end
  def test_flows_s45; assert_in_delta(0.0, (worksheet.flows_s45||0), 0.002); end
  def test_flows_t45; assert_in_delta(0.0, (worksheet.flows_t45||0), 0.002); end
  def test_flows_u45; assert_in_delta(0.0, (worksheet.flows_u45||0), 0.002); end
  def test_flows_v45; assert_in_delta(0.0, (worksheet.flows_v45||0), 0.002); end
  def test_flows_w45; assert_in_delta(0.0, (worksheet.flows_w45||0), 0.002); end
  def test_flows_x45; assert_in_delta(0.0, (worksheet.flows_x45||0), 0.002); end
  def test_flows_y45; assert_in_delta(0.0, (worksheet.flows_y45||0), 0.002); end
  def test_flows_z45; assert_in_delta(0.0, (worksheet.flows_z45||0), 0.002); end
  def test_flows_aa45; assert_in_delta(0.0, (worksheet.flows_aa45||0), 0.002); end
  def test_flows_ab45; assert_in_delta(0.0, (worksheet.flows_ab45||0), 0.002); end
  def test_flows_ad45; assert_in_epsilon(13.886920800000002, worksheet.flows_ad45, 0.002); end
  def test_flows_ae45; assert_in_epsilon(46.289736000000005, worksheet.flows_ae45, 0.002); end
  def test_flows_af45; assert_in_epsilon(56.32828546867533, worksheet.flows_af45, 0.002); end
  def test_flows_ag45; assert_in_epsilon(69.88742920482616, worksheet.flows_ag45, 0.002); end
  def test_flows_ah45; assert_in_epsilon(91.82174403114745, worksheet.flows_ah45, 0.002); end
  def test_flows_ai45; assert_in_epsilon(113.34304438852058, worksheet.flows_ai45, 0.002); end
  def test_flows_aj45; assert_in_epsilon(132.65855225480934, worksheet.flows_aj45, 0.002); end
  def test_flows_ak45; assert_in_epsilon(161.3497827672023, worksheet.flows_ak45, 0.002); end
  def test_flows_al45; assert_in_epsilon(209.69496501458093, worksheet.flows_al45, 0.002); end
  def test_flows_am45; assert_in_epsilon(297.4563156170363, worksheet.flows_am45, 0.002); end
  def test_flows_ao45; assert_in_delta(0.0, (worksheet.flows_ao45||0), 0.002); end
  def test_flows_ap45; assert_in_delta(0.0, (worksheet.flows_ap45||0), 0.002); end
  def test_flows_aq45; assert_in_delta(0.0, (worksheet.flows_aq45||0), 0.002); end
  def test_flows_ar45; assert_in_delta(0.0, (worksheet.flows_ar45||0), 0.002); end
  def test_flows_as45; assert_in_delta(0.0, (worksheet.flows_as45||0), 0.002); end
  def test_flows_at45; assert_in_delta(0.0, (worksheet.flows_at45||0), 0.002); end
  def test_flows_au45; assert_in_delta(0.0, (worksheet.flows_au45||0), 0.002); end
  def test_flows_av45; assert_in_delta(0.0, (worksheet.flows_av45||0), 0.002); end
  def test_flows_aw45; assert_in_delta(0.0, (worksheet.flows_aw45||0), 0.002); end
  def test_flows_ax45; assert_in_delta(0.0, (worksheet.flows_ax45||0), 0.002); end
  def test_flows_c46; assert_equal("green building savings", worksheet.flows_c46); end
  def test_flows_d46; assert_equal("commercial lighting & appliances", worksheet.flows_d46); end
  def test_flows_e46; assert_in_delta(0.01878235138385134, worksheet.flows_e46, 0.002); end
  def test_flows_f46; assert_in_delta(0.018835814608099886, worksheet.flows_f46, 0.002); end
  def test_flows_g46; assert_in_delta(0.03353484653704528, worksheet.flows_g46, 0.002); end
  def test_flows_h46; assert_in_delta(0.060794893445987486, worksheet.flows_h46, 0.002); end
  def test_flows_i46; assert_in_delta(0.1102431734265969, worksheet.flows_i46, 0.002); end
  def test_flows_j46; assert_in_delta(0.20356103070805628, worksheet.flows_j46, 0.002); end
  def test_flows_k46; assert_in_delta(0.27020046957224875, worksheet.flows_k46, 0.002); end
  def test_flows_l46; assert_in_delta(0.3587109280985778, worksheet.flows_l46, 0.002); end
  def test_flows_m46; assert_in_delta(0.3832131370547854, worksheet.flows_m46, 0.002); end
  def test_flows_n46; assert_in_delta(0.4094456973443109, worksheet.flows_n46, 0.002); end
  def test_flows_r46; assert_equal("Household Lighting & Appliances", worksheet.flows_r46); end
  def test_flows_s46; assert_in_delta(0.0, (worksheet.flows_s46||0), 0.002); end
  def test_flows_t46; assert_in_delta(0.0, (worksheet.flows_t46||0), 0.002); end
  def test_flows_u46; assert_in_delta(0.0, (worksheet.flows_u46||0), 0.002); end
  def test_flows_v46; assert_in_delta(0.0, (worksheet.flows_v46||0), 0.002); end
  def test_flows_w46; assert_in_delta(0.0, (worksheet.flows_w46||0), 0.002); end
  def test_flows_x46; assert_in_delta(0.0, (worksheet.flows_x46||0), 0.002); end
  def test_flows_y46; assert_in_delta(0.0, (worksheet.flows_y46||0), 0.002); end
  def test_flows_z46; assert_in_delta(0.0, (worksheet.flows_z46||0), 0.002); end
  def test_flows_aa46; assert_in_delta(0.0, (worksheet.flows_aa46||0), 0.002); end
  def test_flows_ab46; assert_in_delta(0.0, (worksheet.flows_ab46||0), 0.002); end
  def test_flows_ad46; assert_in_epsilon(125.22829189364668, worksheet.flows_ad46, 0.002); end
  def test_flows_ae46; assert_in_epsilon(169.69505456493178, worksheet.flows_ae46, 0.002); end
  def test_flows_af46; assert_in_epsilon(300.04431466291476, worksheet.flows_af46, 0.002); end
  def test_flows_ag46; assert_in_epsilon(492.814427536887, worksheet.flows_ag46, 0.002); end
  def test_flows_ah46; assert_in_epsilon(765.5110630105391, worksheet.flows_ah46, 0.002); end
  def test_flows_ai46; assert_in_epsilon(1159.8318853695678, worksheet.flows_ai46, 0.002); end
  def test_flows_aj46; assert_in_epsilon(1453.7842020047071, worksheet.flows_aj46, 0.002); end
  def test_flows_ak46; assert_in_epsilon(1804.4491932933804, worksheet.flows_ak46, 0.002); end
  def test_flows_al46; assert_in_epsilon(2204.4681998125216, worksheet.flows_al46, 0.002); end
  def test_flows_am46; assert_in_epsilon(2671.845508898626, worksheet.flows_am46, 0.002); end
  def test_flows_ao46; assert_in_delta(0.0, (worksheet.flows_ao46||0), 0.002); end
  def test_flows_ap46; assert_in_delta(0.0, (worksheet.flows_ap46||0), 0.002); end
  def test_flows_aq46; assert_in_delta(0.0, (worksheet.flows_aq46||0), 0.002); end
  def test_flows_ar46; assert_in_delta(0.0, (worksheet.flows_ar46||0), 0.002); end
  def test_flows_as46; assert_in_delta(0.0, (worksheet.flows_as46||0), 0.002); end
  def test_flows_at46; assert_in_delta(0.0, (worksheet.flows_at46||0), 0.002); end
  def test_flows_au46; assert_in_delta(0.0, (worksheet.flows_au46||0), 0.002); end
  def test_flows_av46; assert_in_delta(0.0, (worksheet.flows_av46||0), 0.002); end
  def test_flows_aw46; assert_in_delta(0.0, (worksheet.flows_aw46||0), 0.002); end
  def test_flows_ax46; assert_in_delta(0.0, (worksheet.flows_ax46||0), 0.002); end
  def test_flows_c47; assert_equal("electricity grid", worksheet.flows_c47); end
  def test_flows_d47; assert_equal("over generation/exports", worksheet.flows_d47); end
  def test_flows_e47; assert_in_delta(0.0, (worksheet.flows_e47||0), 0.002); end
  def test_flows_f47; assert_in_epsilon(5.463970885452454, worksheet.flows_f47, 0.002); end
  def test_flows_g47; assert_in_delta(0.0, (worksheet.flows_g47||0), 0.002); end
  def test_flows_h47; assert_in_delta(0.0, (worksheet.flows_h47||0), 0.002); end
  def test_flows_i47; assert_in_delta(4.547473508864641e-13, worksheet.flows_i47, 0.002); end
  def test_flows_j47; assert_in_delta(4.547473508864641e-13, worksheet.flows_j47, 0.002); end
  def test_flows_k47; assert_in_delta(0.0, (worksheet.flows_k47||0), 0.002); end
  def test_flows_l47; assert_in_delta(0.0, (worksheet.flows_l47||0), 0.002); end
  def test_flows_m47; assert_in_delta(0.0, (worksheet.flows_m47||0), 0.002); end
  def test_flows_n47; assert_in_delta(0.0, (worksheet.flows_n47||0), 0.002); end
  def test_flows_r47; assert_equal("Commercial Lighting & Appliances", worksheet.flows_r47); end
  def test_flows_s47; assert_in_delta(0.0, (worksheet.flows_s47||0), 0.002); end
  def test_flows_t47; assert_in_delta(0.0, (worksheet.flows_t47||0), 0.002); end
  def test_flows_u47; assert_in_delta(0.0, (worksheet.flows_u47||0), 0.002); end
  def test_flows_v47; assert_in_delta(0.0, (worksheet.flows_v47||0), 0.002); end
  def test_flows_w47; assert_in_delta(0.0, (worksheet.flows_w47||0), 0.002); end
  def test_flows_x47; assert_in_delta(0.0, (worksheet.flows_x47||0), 0.002); end
  def test_flows_y47; assert_in_delta(0.0, (worksheet.flows_y47||0), 0.002); end
  def test_flows_z47; assert_in_delta(0.0, (worksheet.flows_z47||0), 0.002); end
  def test_flows_aa47; assert_in_delta(0.0, (worksheet.flows_aa47||0), 0.002); end
  def test_flows_ab47; assert_in_delta(0.0, (worksheet.flows_ab47||0), 0.002); end
  def test_flows_ad47; assert_in_epsilon(69.8373540220934, worksheet.flows_ad47, 0.002); end
  def test_flows_ae47; assert_in_epsilon(69.8373540220934, worksheet.flows_ae47, 0.002); end
  def test_flows_af47; assert_in_epsilon(115.42859864757057, worksheet.flows_af47, 0.002); end
  def test_flows_ag47; assert_in_epsilon(190.8011495057212, worksheet.flows_ag47, 0.002); end
  def test_flows_ah47; assert_in_epsilon(315.42107081978503, worksheet.flows_ah47, 0.002); end
  def test_flows_ai47; assert_in_epsilon(521.4861715117739, worksheet.flows_ai47, 0.002); end
  def test_flows_aj47; assert_in_epsilon(689.6753068284789, worksheet.flows_aj47, 0.002); end
  def test_flows_ak47; assert_in_epsilon(912.1086134845236, worksheet.flows_ak47, 0.002); end
  def test_flows_al47; assert_in_epsilon(970.5584977769698, worksheet.flows_al47, 0.002); end
  def test_flows_am47; assert_in_epsilon(1032.7539765340366, worksheet.flows_am47, 0.002); end
  def test_flows_ao47; assert_in_delta(0.0, (worksheet.flows_ao47||0), 0.002); end
  def test_flows_ap47; assert_in_delta(0.0, (worksheet.flows_ap47||0), 0.002); end
  def test_flows_aq47; assert_in_delta(0.0, (worksheet.flows_aq47||0), 0.002); end
  def test_flows_ar47; assert_in_delta(0.0, (worksheet.flows_ar47||0), 0.002); end
  def test_flows_as47; assert_in_delta(0.0, (worksheet.flows_as47||0), 0.002); end
  def test_flows_at47; assert_in_delta(0.0, (worksheet.flows_at47||0), 0.002); end
  def test_flows_au47; assert_in_delta(0.0, (worksheet.flows_au47||0), 0.002); end
  def test_flows_av47; assert_in_delta(0.0, (worksheet.flows_av47||0), 0.002); end
  def test_flows_aw47; assert_in_delta(0.0, (worksheet.flows_aw47||0), 0.002); end
  def test_flows_ax47; assert_in_delta(0.0, (worksheet.flows_ax47||0), 0.002); end
  def test_flows_c48; assert_equal("liquid", worksheet.flows_c48); end
  def test_flows_d48; assert_equal("passenger transport", worksheet.flows_d48); end
  def test_flows_e48; assert_in_epsilon(487.9538583474254, worksheet.flows_e48, 0.002); end
  def test_flows_f48; assert_in_epsilon(487.95385834742547, worksheet.flows_f48, 0.002); end
  def test_flows_g48; assert_in_epsilon(728.2841688017311, worksheet.flows_g48, 0.002); end
  def test_flows_h48; assert_in_epsilon(1051.215934957481, worksheet.flows_h48, 0.002); end
  def test_flows_i48; assert_in_epsilon(1426.6914347417926, worksheet.flows_i48, 0.002); end
  def test_flows_j48; assert_in_epsilon(1870.2260628084935, worksheet.flows_j48, 0.002); end
  def test_flows_k48; assert_in_epsilon(2376.337041869568, worksheet.flows_k48, 0.002); end
  def test_flows_l48; assert_in_epsilon(2897.7002529949527, worksheet.flows_l48, 0.002); end
  def test_flows_m48; assert_in_epsilon(3473.443849698204, worksheet.flows_m48, 0.002); end
  def test_flows_n48; assert_in_epsilon(4149.477673070388, worksheet.flows_n48, 0.002); end
  def test_flows_r48; assert_equal("T&D losses", worksheet.flows_r48); end
  def test_flows_s48; assert_in_delta(0.0, (worksheet.flows_s48||0), 0.002); end
  def test_flows_t48; assert_in_delta(0.0, (worksheet.flows_t48||0), 0.002); end
  def test_flows_u48; assert_in_delta(0.0, (worksheet.flows_u48||0), 0.002); end
  def test_flows_v48; assert_in_delta(0.0, (worksheet.flows_v48||0), 0.002); end
  def test_flows_w48; assert_in_delta(0.0, (worksheet.flows_w48||0), 0.002); end
  def test_flows_x48; assert_in_delta(0.0, (worksheet.flows_x48||0), 0.002); end
  def test_flows_y48; assert_in_delta(0.0, (worksheet.flows_y48||0), 0.002); end
  def test_flows_z48; assert_in_delta(0.0, (worksheet.flows_z48||0), 0.002); end
  def test_flows_aa48; assert_in_delta(0.0, (worksheet.flows_aa48||0), 0.002); end
  def test_flows_ab48; assert_in_delta(0.0, (worksheet.flows_ab48||0), 0.002); end
  def test_flows_ad48; assert_in_epsilon(195.082885040704, worksheet.flows_ad48, 0.002); end
  def test_flows_ae48; assert_in_epsilon(232.5030151881474, worksheet.flows_ae48, 0.002); end
  def test_flows_af48; assert_in_epsilon(310.6571608680854, worksheet.flows_af48, 0.002); end
  def test_flows_ag48; assert_in_epsilon(419.89951518444514, worksheet.flows_ag48, 0.002); end
  def test_flows_ah48; assert_in_epsilon(551.7121990567612, worksheet.flows_ah48, 0.002); end
  def test_flows_ai48; assert_in_epsilon(726.4150919284571, worksheet.flows_ai48, 0.002); end
  def test_flows_aj48; assert_in_epsilon(862.8753960093786, worksheet.flows_aj48, 0.002); end
  def test_flows_ak48; assert_in_epsilon(978.3476298652677, worksheet.flows_ak48, 0.002); end
  def test_flows_al48; assert_in_epsilon(1091.0371471514245, worksheet.flows_al48, 0.002); end
  def test_flows_am48; assert_in_epsilon(1230.420544663678, worksheet.flows_am48, 0.002); end
  def test_flows_ao48; assert_in_delta(0.0, (worksheet.flows_ao48||0), 0.002); end
  def test_flows_ap48; assert_in_delta(0.0, (worksheet.flows_ap48||0), 0.002); end
  def test_flows_aq48; assert_in_delta(0.0, (worksheet.flows_aq48||0), 0.002); end
  def test_flows_ar48; assert_in_delta(0.0, (worksheet.flows_ar48||0), 0.002); end
  def test_flows_as48; assert_in_delta(0.0, (worksheet.flows_as48||0), 0.002); end
  def test_flows_at48; assert_in_delta(0.0, (worksheet.flows_at48||0), 0.002); end
  def test_flows_au48; assert_in_delta(0.0, (worksheet.flows_au48||0), 0.002); end
  def test_flows_av48; assert_in_delta(0.0, (worksheet.flows_av48||0), 0.002); end
  def test_flows_aw48; assert_in_delta(0.0, (worksheet.flows_aw48||0), 0.002); end
  def test_flows_ax48; assert_in_delta(0.0, (worksheet.flows_ax48||0), 0.002); end
  def test_flows_c49; assert_equal("liquid", worksheet.flows_c49); end
  def test_flows_d49; assert_equal("freight transport", worksheet.flows_d49); end
  def test_flows_e49; assert_in_epsilon(335.9906440172883, worksheet.flows_e49, 0.002); end
  def test_flows_f49; assert_in_epsilon(335.9906440172883, worksheet.flows_f49, 0.002); end
  def test_flows_g49; assert_in_epsilon(505.4182496421518, worksheet.flows_g49, 0.002); end
  def test_flows_h49; assert_in_epsilon(731.9554676985371, worksheet.flows_h49, 0.002); end
  def test_flows_i49; assert_in_epsilon(1030.6407817006198, worksheet.flows_i49, 0.002); end
  def test_flows_j49; assert_in_epsilon(1414.4858947981184, worksheet.flows_j49, 0.002); end
  def test_flows_k49; assert_in_epsilon(1884.27945948055, worksheet.flows_k49, 0.002); end
  def test_flows_l49; assert_in_epsilon(2282.8407635152657, worksheet.flows_l49, 0.002); end
  def test_flows_m49; assert_in_epsilon(2719.2893995988056, worksheet.flows_m49, 0.002); end
  def test_flows_n49; assert_in_epsilon(3174.296703988355, worksheet.flows_n49, 0.002); end
  def test_flows_s49; assert_in_delta(0.0, (worksheet.flows_s49||0), 0.002); end
  def test_flows_t49; assert_in_delta(0.0, (worksheet.flows_t49||0), 0.002); end
  def test_flows_u49; assert_in_delta(0.0, (worksheet.flows_u49||0), 0.002); end
  def test_flows_v49; assert_in_delta(0.0, (worksheet.flows_v49||0), 0.002); end
  def test_flows_w49; assert_in_delta(0.0, (worksheet.flows_w49||0), 0.002); end
  def test_flows_x49; assert_in_delta(0.0, (worksheet.flows_x49||0), 0.002); end
  def test_flows_y49; assert_in_delta(0.0, (worksheet.flows_y49||0), 0.002); end
  def test_flows_z49; assert_in_delta(0.0, (worksheet.flows_z49||0), 0.002); end
  def test_flows_aa49; assert_in_delta(0.0, (worksheet.flows_aa49||0), 0.002); end
  def test_flows_ab49; assert_in_delta(0.0, (worksheet.flows_ab49||0), 0.002); end
  def test_flows_ad49; assert_in_delta(0.0, (worksheet.flows_ad49||0), 0.002); end
  def test_flows_ae49; assert_in_delta(0.0, (worksheet.flows_ae49||0), 0.002); end
  def test_flows_af49; assert_in_delta(0.0, (worksheet.flows_af49||0), 0.002); end
  def test_flows_ag49; assert_in_delta(0.0, (worksheet.flows_ag49||0), 0.002); end
  def test_flows_ah49; assert_in_delta(0.0, (worksheet.flows_ah49||0), 0.002); end
  def test_flows_ai49; assert_in_delta(0.0, (worksheet.flows_ai49||0), 0.002); end
  def test_flows_aj49; assert_in_delta(0.0, (worksheet.flows_aj49||0), 0.002); end
  def test_flows_ak49; assert_in_delta(0.0, (worksheet.flows_ak49||0), 0.002); end
  def test_flows_al49; assert_in_delta(0.0, (worksheet.flows_al49||0), 0.002); end
  def test_flows_am49; assert_in_delta(0.0, (worksheet.flows_am49||0), 0.002); end
  def test_flows_ao49; assert_in_delta(0.0, (worksheet.flows_ao49||0), 0.002); end
  def test_flows_ap49; assert_in_delta(0.0, (worksheet.flows_ap49||0), 0.002); end
  def test_flows_aq49; assert_in_delta(0.0, (worksheet.flows_aq49||0), 0.002); end
  def test_flows_ar49; assert_in_delta(0.0, (worksheet.flows_ar49||0), 0.002); end
  def test_flows_as49; assert_in_delta(0.0, (worksheet.flows_as49||0), 0.002); end
  def test_flows_at49; assert_in_delta(0.0, (worksheet.flows_at49||0), 0.002); end
  def test_flows_au49; assert_in_delta(0.0, (worksheet.flows_au49||0), 0.002); end
  def test_flows_av49; assert_in_delta(0.0, (worksheet.flows_av49||0), 0.002); end
  def test_flows_aw49; assert_in_delta(0.0, (worksheet.flows_aw49||0), 0.002); end
  def test_flows_ax49; assert_in_delta(0.0, (worksheet.flows_ax49||0), 0.002); end
  def test_flows_c50; assert_equal("liquid", worksheet.flows_c50); end
  def test_flows_d50; assert_equal("industry", worksheet.flows_d50); end
  def test_flows_e50; assert_in_epsilon(485.7164758011532, worksheet.flows_e50, 0.002); end
  def test_flows_f50; assert_in_epsilon(642.2086, worksheet.flows_f50, 0.002); end
  def test_flows_g50; assert_in_epsilon(789.3310822930243, worksheet.flows_g50, 0.002); end
  def test_flows_h50; assert_in_epsilon(976.3434271299116, worksheet.flows_h50, 0.002); end
  def test_flows_i50; assert_in_epsilon(1185.3290589230705, worksheet.flows_i50, 0.002); end
  def test_flows_j50; assert_in_epsilon(1416.6218204344993, worksheet.flows_j50, 0.002); end
  def test_flows_k50; assert_in_epsilon(1724.8037896313724, worksheet.flows_k50, 0.002); end
  def test_flows_l50; assert_in_epsilon(2065.436658385264, worksheet.flows_l50, 0.002); end
  def test_flows_m50; assert_in_epsilon(2442.950249659729, worksheet.flows_m50, 0.002); end
  def test_flows_n50; assert_in_epsilon(2845.128658899325, worksheet.flows_n50, 0.002); end
  def test_flows_s50; assert_in_delta(0.0, (worksheet.flows_s50||0), 0.002); end
  def test_flows_t50; assert_in_delta(0.0, (worksheet.flows_t50||0), 0.002); end
  def test_flows_u50; assert_in_delta(0.0, (worksheet.flows_u50||0), 0.002); end
  def test_flows_v50; assert_in_delta(0.0, (worksheet.flows_v50||0), 0.002); end
  def test_flows_w50; assert_in_delta(0.0, (worksheet.flows_w50||0), 0.002); end
  def test_flows_x50; assert_in_delta(0.0, (worksheet.flows_x50||0), 0.002); end
  def test_flows_y50; assert_in_delta(0.0, (worksheet.flows_y50||0), 0.002); end
  def test_flows_z50; assert_in_delta(0.0, (worksheet.flows_z50||0), 0.002); end
  def test_flows_aa50; assert_in_delta(0.0, (worksheet.flows_aa50||0), 0.002); end
  def test_flows_ab50; assert_in_delta(0.0, (worksheet.flows_ab50||0), 0.002); end
  def test_flows_ad50; assert_in_delta(0.0, (worksheet.flows_ad50||0), 0.002); end
  def test_flows_ae50; assert_in_delta(0.0, (worksheet.flows_ae50||0), 0.002); end
  def test_flows_af50; assert_in_delta(0.0, (worksheet.flows_af50||0), 0.002); end
  def test_flows_ag50; assert_in_delta(0.0, (worksheet.flows_ag50||0), 0.002); end
  def test_flows_ah50; assert_in_delta(0.0, (worksheet.flows_ah50||0), 0.002); end
  def test_flows_ai50; assert_in_delta(0.0, (worksheet.flows_ai50||0), 0.002); end
  def test_flows_aj50; assert_in_delta(0.0, (worksheet.flows_aj50||0), 0.002); end
  def test_flows_ak50; assert_in_delta(0.0, (worksheet.flows_ak50||0), 0.002); end
  def test_flows_al50; assert_in_delta(0.0, (worksheet.flows_al50||0), 0.002); end
  def test_flows_am50; assert_in_delta(0.0, (worksheet.flows_am50||0), 0.002); end
  def test_flows_ao50; assert_in_delta(0.0, (worksheet.flows_ao50||0), 0.002); end
  def test_flows_ap50; assert_in_delta(0.0, (worksheet.flows_ap50||0), 0.002); end
  def test_flows_aq50; assert_in_delta(0.0, (worksheet.flows_aq50||0), 0.002); end
  def test_flows_ar50; assert_in_delta(0.0, (worksheet.flows_ar50||0), 0.002); end
  def test_flows_as50; assert_in_delta(0.0, (worksheet.flows_as50||0), 0.002); end
  def test_flows_at50; assert_in_delta(0.0, (worksheet.flows_at50||0), 0.002); end
  def test_flows_au50; assert_in_delta(0.0, (worksheet.flows_au50||0), 0.002); end
  def test_flows_av50; assert_in_delta(0.0, (worksheet.flows_av50||0), 0.002); end
  def test_flows_aw50; assert_in_delta(0.0, (worksheet.flows_aw50||0), 0.002); end
  def test_flows_ax50; assert_in_delta(0.0, (worksheet.flows_ax50||0), 0.002); end
  def test_flows_c51; assert_equal("liquid", worksheet.flows_c51); end
  def test_flows_d51; assert_equal("household cooking", worksheet.flows_d51); end
  def test_flows_e51; assert_in_epsilon(84.36768499214196, worksheet.flows_e51, 0.002); end
  def test_flows_f51; assert_in_epsilon(115.26093934117897, worksheet.flows_f51, 0.002); end
  def test_flows_g51; assert_in_epsilon(121.91718607358239, worksheet.flows_g51, 0.002); end
  def test_flows_h51; assert_in_epsilon(133.9906980644434, worksheet.flows_h51, 0.002); end
  def test_flows_i51; assert_in_epsilon(143.85796267118636, worksheet.flows_i51, 0.002); end
  def test_flows_j51; assert_in_epsilon(145.62250980264776, worksheet.flows_j51, 0.002); end
  def test_flows_k51; assert_in_epsilon(151.58706976333906, worksheet.flows_k51, 0.002); end
  def test_flows_l51; assert_in_epsilon(154.7327706546887, worksheet.flows_l51, 0.002); end
  def test_flows_m51; assert_in_epsilon(162.78318176908735, worksheet.flows_m51, 0.002); end
  def test_flows_n51; assert_in_epsilon(176.20665024072537, worksheet.flows_n51, 0.002); end
  def test_flows_s51; assert_in_delta(0.0, (worksheet.flows_s51||0), 0.002); end
  def test_flows_t51; assert_in_delta(0.0, (worksheet.flows_t51||0), 0.002); end
  def test_flows_u51; assert_in_delta(0.0, (worksheet.flows_u51||0), 0.002); end
  def test_flows_v51; assert_in_delta(0.0, (worksheet.flows_v51||0), 0.002); end
  def test_flows_w51; assert_in_delta(0.0, (worksheet.flows_w51||0), 0.002); end
  def test_flows_x51; assert_in_delta(0.0, (worksheet.flows_x51||0), 0.002); end
  def test_flows_y51; assert_in_delta(0.0, (worksheet.flows_y51||0), 0.002); end
  def test_flows_z51; assert_in_delta(0.0, (worksheet.flows_z51||0), 0.002); end
  def test_flows_aa51; assert_in_delta(0.0, (worksheet.flows_aa51||0), 0.002); end
  def test_flows_ab51; assert_in_delta(0.0, (worksheet.flows_ab51||0), 0.002); end
  def test_flows_ad51; assert_in_delta(0.0, (worksheet.flows_ad51||0), 0.002); end
  def test_flows_ae51; assert_in_delta(0.0, (worksheet.flows_ae51||0), 0.002); end
  def test_flows_af51; assert_in_delta(0.0, (worksheet.flows_af51||0), 0.002); end
  def test_flows_ag51; assert_in_delta(0.0, (worksheet.flows_ag51||0), 0.002); end
  def test_flows_ah51; assert_in_delta(0.0, (worksheet.flows_ah51||0), 0.002); end
  def test_flows_ai51; assert_in_delta(0.0, (worksheet.flows_ai51||0), 0.002); end
  def test_flows_aj51; assert_in_delta(0.0, (worksheet.flows_aj51||0), 0.002); end
  def test_flows_ak51; assert_in_delta(0.0, (worksheet.flows_ak51||0), 0.002); end
  def test_flows_al51; assert_in_delta(0.0, (worksheet.flows_al51||0), 0.002); end
  def test_flows_am51; assert_in_delta(0.0, (worksheet.flows_am51||0), 0.002); end
  def test_flows_ao51; assert_in_delta(0.0, (worksheet.flows_ao51||0), 0.002); end
  def test_flows_ap51; assert_in_delta(0.0, (worksheet.flows_ap51||0), 0.002); end
  def test_flows_aq51; assert_in_delta(0.0, (worksheet.flows_aq51||0), 0.002); end
  def test_flows_ar51; assert_in_delta(0.0, (worksheet.flows_ar51||0), 0.002); end
  def test_flows_as51; assert_in_delta(0.0, (worksheet.flows_as51||0), 0.002); end
  def test_flows_at51; assert_in_delta(0.0, (worksheet.flows_at51||0), 0.002); end
  def test_flows_au51; assert_in_delta(0.0, (worksheet.flows_au51||0), 0.002); end
  def test_flows_av51; assert_in_delta(0.0, (worksheet.flows_av51||0), 0.002); end
  def test_flows_aw51; assert_in_delta(0.0, (worksheet.flows_aw51||0), 0.002); end
  def test_flows_ax51; assert_in_delta(0.0, (worksheet.flows_ax51||0), 0.002); end
  def test_flows_c52; assert_equal("liquid", worksheet.flows_c52); end
  def test_flows_d52; assert_equal("commercial cooking", worksheet.flows_d52); end
  def test_flows_e52; assert_in_epsilon(32.784320173000594, worksheet.flows_e52, 0.002); end
  def test_flows_f52; assert_in_epsilon(49.80507831833721, worksheet.flows_f52, 0.002); end
  def test_flows_g52; assert_in_epsilon(73.95547176348747, worksheet.flows_g52, 0.002); end
  def test_flows_h52; assert_in_epsilon(109.20969201346757, worksheet.flows_h52, 0.002); end
  def test_flows_i52; assert_in_epsilon(159.70175687218008, worksheet.flows_i52, 0.002); end
  def test_flows_j52; assert_in_epsilon(232.52141376533132, worksheet.flows_j52, 0.002); end
  def test_flows_k52; assert_in_epsilon(309.6490564187214, worksheet.flows_k52, 0.002); end
  def test_flows_l52; assert_in_epsilon(412.3600342365563, worksheet.flows_l52, 0.002); end
  def test_flows_m52; assert_in_epsilon(549.14037136815, worksheet.flows_m52, 0.002); end
  def test_flows_n52; assert_in_epsilon(731.29091674621, worksheet.flows_n52, 0.002); end
  def test_flows_c53; assert_equal("liquid", worksheet.flows_c53); end
  def test_flows_d53; assert_equal("agriculture", worksheet.flows_d53); end
  def test_flows_e53; assert_in_epsilon(78.27956075231597, worksheet.flows_e53, 0.002); end
  def test_flows_f53; assert_in_epsilon(101.36328383625, worksheet.flows_f53, 0.002); end
  def test_flows_g53; assert_in_epsilon(139.51022744034137, worksheet.flows_g53, 0.002); end
  def test_flows_h53; assert_in_epsilon(191.19201024157528, worksheet.flows_h53, 0.002); end
  def test_flows_i53; assert_in_epsilon(255.64430604957033, worksheet.flows_i53, 0.002); end
  def test_flows_j53; assert_in_epsilon(321.32433900757485, worksheet.flows_j53, 0.002); end
  def test_flows_k53; assert_in_epsilon(343.3777866010209, worksheet.flows_k53, 0.002); end
  def test_flows_l53; assert_in_epsilon(370.040934400854, worksheet.flows_l53, 0.002); end
  def test_flows_m53; assert_in_epsilon(389.2384095548075, worksheet.flows_m53, 0.002); end
  def test_flows_n53; assert_in_epsilon(410.7761615083642, worksheet.flows_n53, 0.002); end
  def test_flows_c54; assert_equal("liquid", worksheet.flows_c54); end
  def test_flows_d54; assert_equal("telecom", worksheet.flows_d54); end
  def test_flows_e54; assert_in_epsilon(11.520100800000002, worksheet.flows_e54, 0.002); end
  def test_flows_f54; assert_in_epsilon(38.400336, worksheet.flows_f54, 0.002); end
  def test_flows_g54; assert_in_epsilon(44.87424895118623, worksheet.flows_g54, 0.002); end
  def test_flows_h54; assert_in_epsilon(53.63626860097361, worksheet.flows_h54, 0.002); end
  def test_flows_i54; assert_in_epsilon(69.79111442656091, worksheet.flows_i54, 0.002); end
  def test_flows_j54; assert_in_epsilon(82.25860863671429, worksheet.flows_j54, 0.002); end
  def test_flows_k54; assert_in_epsilon(88.01313962940723, worksheet.flows_k54, 0.002); end
  def test_flows_l54; assert_in_epsilon(98.88538771380834, worksheet.flows_l54, 0.002); end
  def test_flows_m54; assert_in_epsilon(125.07041156688989, worksheet.flows_m54, 0.002); end
  def test_flows_n54; assert_in_epsilon(177.41476918535722, worksheet.flows_n54, 0.002); end
  def test_flows_c55; assert_equal("liquid", worksheet.flows_c55); end
  def test_flows_d55; assert_equal("over generation/exports", worksheet.flows_d55); end
  def test_flows_e55; assert_in_delta(0.0, (worksheet.flows_e55||0), 0.002); end
  def test_flows_f55; assert_in_delta(0.0, (worksheet.flows_f55||0), 0.002); end
  def test_flows_g55; assert_in_delta(0.0, (worksheet.flows_g55||0), 0.002); end
  def test_flows_h55; assert_in_delta(0.0, (worksheet.flows_h55||0), 0.002); end
  def test_flows_i55; assert_in_delta(0.0, (worksheet.flows_i55||0), 0.002); end
  def test_flows_j55; assert_in_delta(0.0, (worksheet.flows_j55||0), 0.002); end
  def test_flows_k55; assert_in_delta(0.0, (worksheet.flows_k55||0), 0.002); end
  def test_flows_l55; assert_in_delta(0.0, (worksheet.flows_l55||0), 0.002); end
  def test_flows_m55; assert_in_delta(0.0, (worksheet.flows_m55||0), 0.002); end
  def test_flows_n55; assert_in_delta(0.0, (worksheet.flows_n55||0), 0.002); end
  def test_flows_c56; assert_equal("liquid", worksheet.flows_c56); end
  def test_flows_d56; assert_equal("household lighting & appliances", worksheet.flows_d56); end
  def test_flows_e56; assert_in_epsilon(7.47591964428378, worksheet.flows_e56, 0.002); end
  def test_flows_f56; assert_in_epsilon(6.872113998539587, worksheet.flows_f56, 0.002); end
  def test_flows_g56; assert_in_epsilon(5.846481791385694, worksheet.flows_g56, 0.002); end
  def test_flows_h56; assert_in_epsilon(4.694274877983025, worksheet.flows_h56, 0.002); end
  def test_flows_i56; assert_in_epsilon(3.372789505013718, worksheet.flows_i56, 0.002); end
  def test_flows_j56; assert_in_epsilon(1.9198429528219716, worksheet.flows_j56, 0.002); end
  def test_flows_k56; assert_in_epsilon(1.5400462728367814, worksheet.flows_k56, 0.002); end
  def test_flows_l56; assert_in_epsilon(1.0857801771275235, worksheet.flows_l56, 0.002); end
  def test_flows_m56; assert_in_delta(0.5744081578297142, worksheet.flows_m56, 0.002); end
  def test_flows_n56; assert_in_delta(0.0, (worksheet.flows_n56||0), 0.002); end
  def test_flows_c57; assert_equal("gas", worksheet.flows_c57); end
  def test_flows_d57; assert_equal("passenger transport", worksheet.flows_d57); end
  def test_flows_e57; assert_in_epsilon(9.75235607367995, worksheet.flows_e57, 0.002); end
  def test_flows_f57; assert_in_epsilon(9.75235607367995, worksheet.flows_f57, 0.002); end
  def test_flows_g57; assert_in_epsilon(18.423884493552833, worksheet.flows_g57, 0.002); end
  def test_flows_h57; assert_in_epsilon(32.587158843629, worksheet.flows_h57, 0.002); end
  def test_flows_i57; assert_in_epsilon(53.02295846464904, worksheet.flows_i57, 0.002); end
  def test_flows_j57; assert_in_epsilon(80.82725163138724, worksheet.flows_j57, 0.002); end
  def test_flows_k57; assert_in_epsilon(114.24617489871126, worksheet.flows_k57, 0.002); end
  def test_flows_l57; assert_in_epsilon(152.1437561627171, worksheet.flows_l57, 0.002); end
  def test_flows_m57; assert_in_epsilon(196.4774442678278, worksheet.flows_m57, 0.002); end
  def test_flows_n57; assert_in_epsilon(249.01221637962595, worksheet.flows_n57, 0.002); end
  def test_flows_c58; assert_equal("gas", worksheet.flows_c58); end
  def test_flows_d58; assert_equal("industry", worksheet.flows_d58); end
  def test_flows_e58; assert_in_epsilon(225.8095814305987, worksheet.flows_e58, 0.002); end
  def test_flows_f58; assert_in_epsilon(281.6955580746867, worksheet.flows_f58, 0.002); end
  def test_flows_g58; assert_in_epsilon(530.9935643322933, worksheet.flows_g58, 0.002); end
  def test_flows_h58; assert_in_epsilon(640.0271131243979, worksheet.flows_h58, 0.002); end
  def test_flows_i58; assert_in_epsilon(731.7257645643008, worksheet.flows_i58, 0.002); end
  def test_flows_j58; assert_in_epsilon(836.8192896040772, worksheet.flows_j58, 0.002); end
  def test_flows_k58; assert_in_epsilon(956.6884970831882, worksheet.flows_k58, 0.002); end
  def test_flows_l58; assert_in_epsilon(1076.097810080029, worksheet.flows_l58, 0.002); end
  def test_flows_m58; assert_in_epsilon(1193.0891487431725, worksheet.flows_m58, 0.002); end
  def test_flows_n58; assert_in_epsilon(1313.4819074707107, worksheet.flows_n58, 0.002); end
  def test_flows_c59; assert_equal("gas", worksheet.flows_c59); end
  def test_flows_d59; assert_equal("household cooking", worksheet.flows_d59); end
  def test_flows_e59; assert_in_epsilon(11.61762219229757, worksheet.flows_e59, 0.002); end
  def test_flows_f59; assert_in_epsilon(17.950564859142954, worksheet.flows_f59, 0.002); end
  def test_flows_g59; assert_in_epsilon(22.73316771367366, worksheet.flows_g59, 0.002); end
  def test_flows_h59; assert_in_epsilon(35.14970961619912, worksheet.flows_h59, 0.002); end
  def test_flows_i59; assert_in_epsilon(55.77907416807117, worksheet.flows_i59, 0.002); end
  def test_flows_j59; assert_in_epsilon(83.35730242030988, worksheet.flows_j59, 0.002); end
  def test_flows_k59; assert_in_epsilon(108.90937409757123, worksheet.flows_k59, 0.002); end
  def test_flows_l59; assert_in_epsilon(142.1283419594134, worksheet.flows_l59, 0.002); end
  def test_flows_m59; assert_in_epsilon(177.5410196363566, worksheet.flows_m59, 0.002); end
  def test_flows_n59; assert_in_epsilon(219.3404138507149, worksheet.flows_n59, 0.002); end
  def test_flows_ao59; assert_in_delta(0.0, (worksheet.flows_ao59||0), 0.002); end
  def test_flows_ap59; assert_in_delta(0.0, (worksheet.flows_ap59||0), 0.002); end
  def test_flows_aq59; assert_in_delta(0.0, (worksheet.flows_aq59||0), 0.002); end
  def test_flows_ar59; assert_in_delta(0.0, (worksheet.flows_ar59||0), 0.002); end
  def test_flows_as59; assert_in_delta(0.0, (worksheet.flows_as59||0), 0.002); end
  def test_flows_at59; assert_in_delta(0.0, (worksheet.flows_at59||0), 0.002); end
  def test_flows_au59; assert_in_delta(0.0, (worksheet.flows_au59||0), 0.002); end
  def test_flows_av59; assert_in_delta(0.0, (worksheet.flows_av59||0), 0.002); end
  def test_flows_aw59; assert_in_delta(0.0, (worksheet.flows_aw59||0), 0.002); end
  def test_flows_ax59; assert_in_delta(0.0, (worksheet.flows_ax59||0), 0.002); end
  def test_flows_c60; assert_equal("gas", worksheet.flows_c60); end
  def test_flows_d60; assert_equal("commercial cooking", worksheet.flows_d60); end
  def test_flows_e60; assert_in_epsilon(9.852367664081264, worksheet.flows_e60, 0.002); end
  def test_flows_f60; assert_in_epsilon(14.962146267487753, worksheet.flows_f60, 0.002); end
  def test_flows_g60; assert_in_epsilon(22.688438113877794, worksheet.flows_g60, 0.002); end
  def test_flows_h60; assert_in_epsilon(34.203097223328584, worksheet.flows_h60, 0.002); end
  def test_flows_i60; assert_in_epsilon(51.044036329383246, worksheet.flows_i60, 0.002); end
  def test_flows_j60; assert_in_epsilon(75.82201364552293, worksheet.flows_j60, 0.002); end
  def test_flows_k60; assert_in_epsilon(102.98400482733283, worksheet.flows_k60, 0.002); end
  def test_flows_l60; assert_in_epsilon(139.83608248630094, worksheet.flows_l60, 0.002); end
  def test_flows_m60; assert_in_epsilon(189.82259588177294, worksheet.flows_m60, 0.002); end
  def test_flows_n60; assert_in_epsilon(257.6082269268285, worksheet.flows_n60, 0.002); end
  def test_flows_ao60; assert_in_delta(0.0, (worksheet.flows_ao60||0), 0.002); end
  def test_flows_ap60; assert_in_delta(0.0, (worksheet.flows_ap60||0), 0.002); end
  def test_flows_aq60; assert_in_delta(0.0, (worksheet.flows_aq60||0), 0.002); end
  def test_flows_ar60; assert_in_delta(0.0, (worksheet.flows_ar60||0), 0.002); end
  def test_flows_as60; assert_in_delta(0.0, (worksheet.flows_as60||0), 0.002); end
  def test_flows_at60; assert_in_delta(0.0, (worksheet.flows_at60||0), 0.002); end
  def test_flows_au60; assert_in_delta(0.0, (worksheet.flows_au60||0), 0.002); end
  def test_flows_av60; assert_in_delta(0.0, (worksheet.flows_av60||0), 0.002); end
  def test_flows_aw60; assert_in_delta(0.0, (worksheet.flows_aw60||0), 0.002); end
  def test_flows_ax60; assert_in_delta(0.0, (worksheet.flows_ax60||0), 0.002); end
  def test_flows_c61; assert_equal("off grid renewables", worksheet.flows_c61); end
  def test_flows_d61; assert_equal("agriculture", worksheet.flows_d61); end
  def test_flows_e61; assert_in_delta(0.0, (worksheet.flows_e61||0), 0.002); end
  def test_flows_f61; assert_in_delta(0.0, (worksheet.flows_f61||0), 0.002); end
  def test_flows_g61; assert_in_delta(0.0, (worksheet.flows_g61||0), 0.002); end
  def test_flows_h61; assert_in_delta(0.0, (worksheet.flows_h61||0), 0.002); end
  def test_flows_i61; assert_in_delta(0.0, (worksheet.flows_i61||0), 0.002); end
  def test_flows_j61; assert_in_delta(0.0, (worksheet.flows_j61||0), 0.002); end
  def test_flows_k61; assert_in_delta(0.0, (worksheet.flows_k61||0), 0.002); end
  def test_flows_l61; assert_in_delta(0.0, (worksheet.flows_l61||0), 0.002); end
  def test_flows_m61; assert_in_delta(0.0, (worksheet.flows_m61||0), 0.002); end
  def test_flows_n61; assert_in_delta(0.0, (worksheet.flows_n61||0), 0.002); end
  def test_flows_ao61; assert_in_delta(0.0, (worksheet.flows_ao61||0), 0.002); end
  def test_flows_ap61; assert_in_delta(0.0, (worksheet.flows_ap61||0), 0.002); end
  def test_flows_aq61; assert_in_delta(0.0, (worksheet.flows_aq61||0), 0.002); end
  def test_flows_ar61; assert_in_delta(0.0, (worksheet.flows_ar61||0), 0.002); end
  def test_flows_as61; assert_in_delta(0.0, (worksheet.flows_as61||0), 0.002); end
  def test_flows_at61; assert_in_delta(0.0, (worksheet.flows_at61||0), 0.002); end
  def test_flows_au61; assert_in_delta(0.0, (worksheet.flows_au61||0), 0.002); end
  def test_flows_av61; assert_in_delta(0.0, (worksheet.flows_av61||0), 0.002); end
  def test_flows_aw61; assert_in_delta(0.0, (worksheet.flows_aw61||0), 0.002); end
  def test_flows_ax61; assert_in_delta(0.0, (worksheet.flows_ax61||0), 0.002); end
  def test_flows_c62; assert_equal("off grid renewables", worksheet.flows_c62); end
  def test_flows_d62; assert_equal("telecom", worksheet.flows_d62); end
  def test_flows_e62; assert_in_delta(0.0, (worksheet.flows_e62||0), 0.002); end
  def test_flows_f62; assert_in_delta(0.0, (worksheet.flows_f62||0), 0.002); end
  def test_flows_g62; assert_in_delta(0.11418061802221828, worksheet.flows_g62, 0.002); end
  def test_flows_h62; assert_in_delta(0.13396113841403443, worksheet.flows_h62, 0.002); end
  def test_flows_i62; assert_in_delta(0.4621810406556616, worksheet.flows_i62, 0.002); end
  def test_flows_j62; assert_in_delta(0.5341612414389386, worksheet.flows_j62, 0.002); end
  def test_flows_k62; assert_in_epsilon(1.254084624309047, worksheet.flows_k62, 0.002); end
  def test_flows_l62; assert_in_epsilon(1.3761634589947083, worksheet.flows_l62, 0.002); end
  def test_flows_m62; assert_in_epsilon(2.8747194377134955, worksheet.flows_m62, 0.002); end
  def test_flows_n62; assert_in_epsilon(4.077844464770415, worksheet.flows_n62, 0.002); end
  def test_flows_ao62; assert_in_delta(0.0, (worksheet.flows_ao62||0), 0.002); end
  def test_flows_ap62; assert_in_delta(0.0, (worksheet.flows_ap62||0), 0.002); end
  def test_flows_aq62; assert_in_delta(0.0, (worksheet.flows_aq62||0), 0.002); end
  def test_flows_ar62; assert_in_delta(0.0, (worksheet.flows_ar62||0), 0.002); end
  def test_flows_as62; assert_in_delta(0.0, (worksheet.flows_as62||0), 0.002); end
  def test_flows_at62; assert_in_delta(0.0, (worksheet.flows_at62||0), 0.002); end
  def test_flows_au62; assert_in_delta(0.0, (worksheet.flows_au62||0), 0.002); end
  def test_flows_av62; assert_in_delta(0.0, (worksheet.flows_av62||0), 0.002); end
  def test_flows_aw62; assert_in_delta(0.0, (worksheet.flows_aw62||0), 0.002); end
  def test_flows_ax62; assert_in_delta(0.0, (worksheet.flows_ax62||0), 0.002); end
  def test_flows_c63; assert_equal("gas", worksheet.flows_c63); end
  def test_flows_d63; assert_equal("over generation/exports", worksheet.flows_d63); end
  def test_flows_e63; assert_in_delta(0.0, (worksheet.flows_e63||0), 0.002); end
  def test_flows_f63; assert_in_delta(0.0, (worksheet.flows_f63||0), 0.002); end
  def test_flows_g63; assert_in_delta(0.0, (worksheet.flows_g63||0), 0.002); end
  def test_flows_h63; assert_in_delta(0.0, (worksheet.flows_h63||0), 0.002); end
  def test_flows_i63; assert_in_delta(0.0, (worksheet.flows_i63||0), 0.002); end
  def test_flows_j63; assert_in_delta(0.0, (worksheet.flows_j63||0), 0.002); end
  def test_flows_k63; assert_in_delta(0.0, (worksheet.flows_k63||0), 0.002); end
  def test_flows_l63; assert_in_delta(0.0, (worksheet.flows_l63||0), 0.002); end
  def test_flows_m63; assert_in_delta(0.0, (worksheet.flows_m63||0), 0.002); end
  def test_flows_n63; assert_in_delta(0.0, (worksheet.flows_n63||0), 0.002); end
  def test_flows_c64; assert_equal("solid", worksheet.flows_c64); end
  def test_flows_d64; assert_equal("industry", worksheet.flows_d64); end
  def test_flows_e64; assert_in_epsilon(612.494194507592, worksheet.flows_e64, 0.002); end
  def test_flows_f64; assert_in_epsilon(953.6600000000001, worksheet.flows_f64, 0.002); end
  def test_flows_g64; assert_in_epsilon(1364.656615512903, worksheet.flows_g64, 0.002); end
  def test_flows_h64; assert_in_epsilon(2040.8846856072132, worksheet.flows_h64, 0.002); end
  def test_flows_i64; assert_in_epsilon(2811.345313481467, worksheet.flows_i64, 0.002); end
  def test_flows_j64; assert_in_epsilon(3663.849633187939, worksheet.flows_j64, 0.002); end
  def test_flows_k64; assert_in_epsilon(4522.475734713711, worksheet.flows_k64, 0.002); end
  def test_flows_l64; assert_in_epsilon(5293.57151297302, worksheet.flows_l64, 0.002); end
  def test_flows_m64; assert_in_epsilon(5938.21928547192, worksheet.flows_m64, 0.002); end
  def test_flows_n64; assert_in_epsilon(6573.399941138028, worksheet.flows_n64, 0.002); end
  def test_flows_c65; assert_equal("solid", worksheet.flows_c65); end
  def test_flows_d65; assert_equal("household cooking", worksheet.flows_d65); end
  def test_flows_e65; assert_in_epsilon(949.5692008705742, worksheet.flows_e65, 0.002); end
  def test_flows_f65; assert_in_epsilon(1020.1110595149701, worksheet.flows_f65, 0.002); end
  def test_flows_g65; assert_in_epsilon(1001.9366743603108, worksheet.flows_g65, 0.002); end
  def test_flows_h65; assert_in_epsilon(983.7426628714651, worksheet.flows_h65, 0.002); end
  def test_flows_i65; assert_in_epsilon(950.8028616326208, worksheet.flows_i65, 0.002); end
  def test_flows_j65; assert_in_epsilon(905.6390253062888, worksheet.flows_j65, 0.002); end
  def test_flows_k65; assert_in_epsilon(853.5750515429709, worksheet.flows_k65, 0.002); end
  def test_flows_l65; assert_in_epsilon(783.70254050191, worksheet.flows_l65, 0.002); end
  def test_flows_m65; assert_in_epsilon(703.506875432026, worksheet.flows_m65, 0.002); end
  def test_flows_n65; assert_in_epsilon(655.1806296523285, worksheet.flows_n65, 0.002); end
  def test_flows_c66; assert_equal("solid", worksheet.flows_c66); end
  def test_flows_d66; assert_equal("over generation/exports", worksheet.flows_d66); end
  def test_flows_e66; assert_in_delta(0.0, (worksheet.flows_e66||0), 0.002); end
  def test_flows_f66; assert_in_delta(0.0, (worksheet.flows_f66||0), 0.002); end
  def test_flows_g66; assert_in_delta(0.0, (worksheet.flows_g66||0), 0.002); end
  def test_flows_h66; assert_in_delta(0.0, (worksheet.flows_h66||0), 0.002); end
  def test_flows_i66; assert_in_delta(0.0, (worksheet.flows_i66||0), 0.002); end
  def test_flows_j66; assert_in_delta(0.0, (worksheet.flows_j66||0), 0.002); end
  def test_flows_k66; assert_in_delta(0.0, (worksheet.flows_k66||0), 0.002); end
  def test_flows_l66; assert_in_delta(0.0, (worksheet.flows_l66||0), 0.002); end
  def test_flows_m66; assert_in_delta(0.0, (worksheet.flows_m66||0), 0.002); end
  def test_flows_n66; assert_in_delta(0.0, (worksheet.flows_n66||0), 0.002); end
  def test_flows_c67; assert_equal("coal", worksheet.flows_c67); end
  def test_flows_d67; assert_equal("solid", worksheet.flows_d67); end
  def test_flows_e67; assert_in_epsilon(2316.2462455929053, worksheet.flows_e67, 0.002); end
  def test_flows_f67; assert_in_epsilon(3231.2891907848016, worksheet.flows_f67, 0.002); end
  def test_flows_g67; assert_in_epsilon(4462.503887290408, worksheet.flows_g67, 0.002); end
  def test_flows_h67; assert_in_epsilon(6598.88128677681, worksheet.flows_h67, 0.002); end
  def test_flows_i67; assert_in_epsilon(9254.087381597043, worksheet.flows_i67, 0.002); end
  def test_flows_j67; assert_in_epsilon(12761.051030415647, worksheet.flows_j67, 0.002); end
  def test_flows_k67; assert_in_epsilon(15968.22702305533, worksheet.flows_k67, 0.002); end
  def test_flows_l67; assert_in_epsilon(19511.688080601638, worksheet.flows_l67, 0.002); end
  def test_flows_m67; assert_in_epsilon(22662.11615171353, worksheet.flows_m67, 0.002); end
  def test_flows_n67; assert_in_epsilon(26194.760503822457, worksheet.flows_n67, 0.002); end
  def test_flows_c68; assert_equal("oil", worksheet.flows_c68); end
  def test_flows_d68; assert_equal("liquid", worksheet.flows_d68); end
  def test_flows_e68; assert_in_epsilon(1630.7747640445418, worksheet.flows_e68, 0.002); end
  def test_flows_f68; assert_in_epsilon(1902.1640716311465, worksheet.flows_f68, 0.002); end
  def test_flows_g68; assert_in_epsilon(2574.5516411829576, worksheet.flows_g68, 0.002); end
  def test_flows_h68; assert_in_epsilon(3472.789243443321, worksheet.flows_h68, 0.002); end
  def test_flows_i68; assert_in_epsilon(4562.3244800308585, worksheet.flows_i68, 0.002); end
  def test_flows_j68; assert_in_epsilon(5850.891054117246, worksheet.flows_j68, 0.002); end
  def test_flows_k68; assert_in_epsilon(7335.679266546061, worksheet.flows_k68, 0.002); end
  def test_flows_l68; assert_in_epsilon(8828.355775329557, worksheet.flows_l68, 0.002); end
  def test_flows_m68; assert_in_epsilon(10507.450312605853, worksheet.flows_m68, 0.002); end
  def test_flows_n68; assert_in_epsilon(12422.63002168031, worksheet.flows_n68, 0.002); end
  def test_flows_c69; assert_equal("natural gas", worksheet.flows_c69); end
  def test_flows_d69; assert_equal("gas", worksheet.flows_d69); end
  def test_flows_e69; assert_in_epsilon(430.87022875762193, worksheet.flows_e69, 0.002); end
  def test_flows_f69; assert_in_epsilon(581.2480621218025, worksheet.flows_f69, 0.002); end
  def test_flows_g69; assert_in_epsilon(921.323614020371, worksheet.flows_g69, 0.002); end
  def test_flows_h69; assert_in_epsilon(1089.3245670754293, worksheet.flows_h69, 0.002); end
  def test_flows_i69; assert_in_epsilon(1260.1737602798842, worksheet.flows_i69, 0.002); end
  def test_flows_j69; assert_in_epsilon(1472.0196128987889, worksheet.flows_j69, 0.002); end
  def test_flows_k69; assert_in_epsilon(1708.5020369279832, worksheet.flows_k69, 0.002); end
  def test_flows_l69; assert_in_epsilon(1969.5559610432313, worksheet.flows_l69, 0.002); end
  def test_flows_m69; assert_in_epsilon(2252.8472290441127, worksheet.flows_m69, 0.002); end
  def test_flows_n69; assert_in_epsilon(2577.2839355299016, worksheet.flows_n69, 0.002); end
  def test_flows_c70; assert_equal("gas", worksheet.flows_c70); end
  def test_flows_d70; assert_equal("losses", worksheet.flows_d70); end
  def test_flows_e70; assert_in_epsilon(56.20046462055939, worksheet.flows_e70, 0.002); end
  def test_flows_f70; assert_in_epsilon(75.8149646245829, worksheet.flows_f70, 0.002); end
  def test_flows_g70; assert_in_epsilon(120.17264530700493, worksheet.flows_g70, 0.002); end
  def test_flows_h70; assert_in_epsilon(142.08581309679505, worksheet.flows_h70, 0.002); end
  def test_flows_i70; assert_in_epsilon(164.37049047128926, worksheet.flows_i70, 0.002); end
  def test_flows_j70; assert_in_epsilon(192.00255820418988, worksheet.flows_j70, 0.002); end
  def test_flows_k70; assert_in_epsilon(222.84809177321517, worksheet.flows_k70, 0.002); end
  def test_flows_l70; assert_in_epsilon(256.89860361433443, worksheet.flows_l70, 0.002); end
  def test_flows_m70; assert_in_epsilon(293.84963857097114, worksheet.flows_m70, 0.002); end
  def test_flows_n70; assert_in_epsilon(336.1674698517263, worksheet.flows_n70, 0.002); end
  def test_flows_c71; assert_equal("liquid", worksheet.flows_c71); end
  def test_flows_d71; assert_equal("losses", worksheet.flows_d71); end
  def test_flows_e71; assert_in_epsilon(106.68619951693267, worksheet.flows_e71, 0.002); end
  def test_flows_f71; assert_in_epsilon(124.44064020016845, worksheet.flows_f71, 0.002); end
  def test_flows_g71; assert_in_epsilon(168.42861204000656, worksheet.flows_g71, 0.002); end
  def test_flows_h71; assert_in_epsilon(227.19181966451652, worksheet.flows_h71, 0.002); end
  def test_flows_i71; assert_in_epsilon(298.469825796411, worksheet.flows_i71, 0.002); end
  def test_flows_j71; assert_in_epsilon(382.76857363383897, worksheet.flows_j71, 0.002); end
  def test_flows_k71; assert_in_epsilon(479.9042510824529, worksheet.flows_k71, 0.002); end
  def test_flows_l71; assert_in_epsilon(577.5559853019331, worksheet.flows_l71, 0.002); end
  def test_flows_m71; assert_in_epsilon(687.4032914788877, worksheet.flows_m71, 0.002); end
  def test_flows_n71; assert_in_epsilon(812.695421979086, worksheet.flows_n71, 0.002); end
  def test_land_use_b2; assert_equal("Land use implications", worksheet.land_use_b2); end
  def test_land_use_c4; assert_equal("B.01", worksheet.land_use_c4); end
  def test_land_use_d4; assert_equal("India Land area", worksheet.land_use_d4); end
  def test_land_use_h4; assert_in_epsilon(2007.0, worksheet.land_use_h4, 0.002); end
  def test_land_use_i4; assert_in_epsilon(2012.0, worksheet.land_use_i4, 0.002); end
  def test_land_use_j4; assert_in_epsilon(2017.0, worksheet.land_use_j4, 0.002); end
  def test_land_use_k4; assert_in_epsilon(2022.0, worksheet.land_use_k4, 0.002); end
  def test_land_use_l4; assert_in_epsilon(2027.0, worksheet.land_use_l4, 0.002); end
  def test_land_use_m4; assert_in_epsilon(2032.0, worksheet.land_use_m4, 0.002); end
  def test_land_use_n4; assert_in_epsilon(2037.0, worksheet.land_use_n4, 0.002); end
  def test_land_use_o4; assert_in_epsilon(2042.0, worksheet.land_use_o4, 0.002); end
  def test_land_use_p4; assert_in_epsilon(2047.0, worksheet.land_use_p4, 0.002); end
  def test_land_use_q4; assert_in_epsilon(2052.0, worksheet.land_use_q4, 0.002); end
  def test_land_use_r4; assert_equal("ha", worksheet.land_use_r4); end
  def test_land_use_c6; assert_equal("I.a", worksheet.land_use_c6); end
  def test_land_use_d6; assert_equal("Gas Power Stations", worksheet.land_use_d6); end
  def test_land_use_h6; assert_in_epsilon(498.6860232195073, worksheet.land_use_h6, 0.002); end
  def test_land_use_i6; assert_in_epsilon(669.4674111012098, worksheet.land_use_i6, 0.002); end
  def test_land_use_j6; assert_in_epsilon(761.9057055016706, worksheet.land_use_j6, 0.002); end
  def test_land_use_k6; assert_in_epsilon(761.9057055016706, worksheet.land_use_k6, 0.002); end
  def test_land_use_l6; assert_in_epsilon(761.9057055016706, worksheet.land_use_l6, 0.002); end
  def test_land_use_m6; assert_in_epsilon(761.9057055016706, worksheet.land_use_m6, 0.002); end
  def test_land_use_n6; assert_in_epsilon(761.9057055016706, worksheet.land_use_n6, 0.002); end
  def test_land_use_o6; assert_in_epsilon(761.9057055016706, worksheet.land_use_o6, 0.002); end
  def test_land_use_p6; assert_in_epsilon(761.9057055016706, worksheet.land_use_p6, 0.002); end
  def test_land_use_q6; assert_in_epsilon(761.9057055016706, worksheet.land_use_q6, 0.002); end
  def test_land_use_c7; assert_equal("I.b", worksheet.land_use_c7); end
  def test_land_use_d7; assert_equal("Coal power stations", worksheet.land_use_d7); end
  def test_land_use_h7; assert_in_epsilon(22714.0, worksheet.land_use_h7, 0.002); end
  def test_land_use_i7; assert_in_epsilon(34631.4541, worksheet.land_use_i7, 0.002); end
  def test_land_use_j7; assert_in_epsilon(48555.728530489076, worksheet.land_use_j7, 0.002); end
  def test_land_use_k7; assert_in_epsilon(45960.84793048908, worksheet.land_use_k7, 0.002); end
  def test_land_use_l7; assert_in_epsilon(42210.26793048908, worksheet.land_use_l7, 0.002); end
  def test_land_use_m7; assert_in_epsilon(38138.367930489076, worksheet.land_use_m7, 0.002); end
  def test_land_use_n7; assert_in_epsilon(34604.540430489076, worksheet.land_use_n7, 0.002); end
  def test_land_use_o7; assert_in_epsilon(30341.233430489076, worksheet.land_use_o7, 0.002); end
  def test_land_use_p7; assert_in_epsilon(27159.888430489078, worksheet.land_use_p7, 0.002); end
  def test_land_use_q7; assert_in_epsilon(16661.86543048908, worksheet.land_use_q7, 0.002); end
  def test_land_use_c8; assert_equal("I.c", worksheet.land_use_c8); end
  def test_land_use_d8; assert_equal("Carbon Capture Storage (CCS)", worksheet.land_use_d8); end
  def test_land_use_h8; assert_in_delta(0.0, (worksheet.land_use_h8||0), 0.002); end
  def test_land_use_i8; assert_in_delta(0.0, (worksheet.land_use_i8||0), 0.002); end
  def test_land_use_j8; assert_in_delta(0.0, (worksheet.land_use_j8||0), 0.002); end
  def test_land_use_k8; assert_in_delta(0.0, (worksheet.land_use_k8||0), 0.002); end
  def test_land_use_l8; assert_in_delta(0.0, (worksheet.land_use_l8||0), 0.002); end
  def test_land_use_m8; assert_in_delta(0.0, (worksheet.land_use_m8||0), 0.002); end
  def test_land_use_n8; assert_in_delta(0.0, (worksheet.land_use_n8||0), 0.002); end
  def test_land_use_o8; assert_in_delta(0.0, (worksheet.land_use_o8||0), 0.002); end
  def test_land_use_p8; assert_in_delta(0.0, (worksheet.land_use_p8||0), 0.002); end
  def test_land_use_q8; assert_in_delta(0.0, (worksheet.land_use_q8||0), 0.002); end
  def test_land_use_c9; assert_equal("I.d", worksheet.land_use_c9); end
  def test_land_use_d9; assert_equal("Electricity Balancing Requirement", worksheet.land_use_d9); end
  def test_land_use_h9; assert_in_epsilon(1748.9798963623177, worksheet.land_use_h9, 0.002); end
  def test_land_use_i9; assert_in_delta(0.0, (worksheet.land_use_i9||0), 0.002); end
  def test_land_use_j9; assert_in_epsilon(404.76373360661614, worksheet.land_use_j9, 0.002); end
  def test_land_use_k9; assert_in_epsilon(13980.443571441168, worksheet.land_use_k9, 0.002); end
  def test_land_use_l9; assert_in_epsilon(31985.244612669343, worksheet.land_use_l9, 0.002); end
  def test_land_use_m9; assert_in_epsilon(56493.18626429429, worksheet.land_use_m9, 0.002); end
  def test_land_use_n9; assert_in_epsilon(77963.19505609377, worksheet.land_use_n9, 0.002); end
  def test_land_use_o9; assert_in_epsilon(103228.40265641538, worksheet.land_use_o9, 0.002); end
  def test_land_use_p9; assert_in_epsilon(126224.35227268192, worksheet.land_use_p9, 0.002); end
  def test_land_use_q9; assert_in_epsilon(156181.20375129377, worksheet.land_use_q9, 0.002); end
  def test_land_use_c10; assert_equal("II", worksheet.land_use_c10); end
  def test_land_use_d10; assert_equal("Nuclear power", worksheet.land_use_d10); end
  def test_land_use_h10; assert_in_epsilon(10504.0, worksheet.land_use_h10, 0.002); end
  def test_land_use_i10; assert_in_epsilon(12168.0, worksheet.land_use_i10, 0.002); end
  def test_land_use_j10; assert_in_epsilon(25948.0, worksheet.land_use_j10, 0.002); end
  def test_land_use_k10; assert_in_epsilon(25116.0, worksheet.land_use_k10, 0.002); end
  def test_land_use_l10; assert_in_epsilon(25116.0, worksheet.land_use_l10, 0.002); end
  def test_land_use_m10; assert_in_epsilon(24596.000000000004, worksheet.land_use_m10, 0.002); end
  def test_land_use_n10; assert_in_epsilon(23452.0, worksheet.land_use_n10, 0.002); end
  def test_land_use_o10; assert_in_epsilon(22880.000000000004, worksheet.land_use_o10, 0.002); end
  def test_land_use_p10; assert_in_epsilon(21736.0, worksheet.land_use_p10, 0.002); end
  def test_land_use_q10; assert_in_epsilon(21736.0, worksheet.land_use_q10, 0.002); end
  def test_land_use_c11; assert_equal("III", worksheet.land_use_c11); end
  def test_land_use_d11; assert_equal("Hydro Power Generation", worksheet.land_use_d11); end
  def test_land_use_h11; assert_in_epsilon(27027.0, worksheet.land_use_h11, 0.002); end
  def test_land_use_i11; assert_in_epsilon(31980.0, worksheet.land_use_i11, 0.002); end
  def test_land_use_j11; assert_in_epsilon(38220.0, worksheet.land_use_j11, 0.002); end
  def test_land_use_k11; assert_in_epsilon(38220.0, worksheet.land_use_k11, 0.002); end
  def test_land_use_l11; assert_in_epsilon(38220.0, worksheet.land_use_l11, 0.002); end
  def test_land_use_m11; assert_in_epsilon(38220.0, worksheet.land_use_m11, 0.002); end
  def test_land_use_n11; assert_in_epsilon(38220.0, worksheet.land_use_n11, 0.002); end
  def test_land_use_o11; assert_in_epsilon(38220.0, worksheet.land_use_o11, 0.002); end
  def test_land_use_p11; assert_in_epsilon(38220.0, worksheet.land_use_p11, 0.002); end
  def test_land_use_q11; assert_in_epsilon(38220.0, worksheet.land_use_q11, 0.002); end
  def test_land_use_d12; assert_equal("Conventional Generation", worksheet.land_use_d12); end
  def test_land_use_h12; assert_in_epsilon(62492.66591958182, worksheet.land_use_h12, 0.002); end
  def test_land_use_i12; assert_in_epsilon(79448.92151110122, worksheet.land_use_i12, 0.002); end
  def test_land_use_j12; assert_in_epsilon(113890.39796959737, worksheet.land_use_j12, 0.002); end
  def test_land_use_k12; assert_in_epsilon(124039.19720743192, worksheet.land_use_k12, 0.002); end
  def test_land_use_l12; assert_in_epsilon(138293.4182486601, worksheet.land_use_l12, 0.002); end
  def test_land_use_m12; assert_in_epsilon(158209.45990028503, worksheet.land_use_m12, 0.002); end
  def test_land_use_n12; assert_in_epsilon(175001.64119208453, worksheet.land_use_n12, 0.002); end
  def test_land_use_o12; assert_in_epsilon(195431.54179240612, worksheet.land_use_o12, 0.002); end
  def test_land_use_p12; assert_in_epsilon(214102.14640867268, worksheet.land_use_p12, 0.002); end
  def test_land_use_q12; assert_in_epsilon(233560.9748872845, worksheet.land_use_q12, 0.002); end
  def test_land_use_c13; assert_equal("IV.a", worksheet.land_use_c13); end
  def test_land_use_d13; assert_equal("Solar PV", worksheet.land_use_d13); end
  def test_land_use_h13; assert_in_delta(0.0, (worksheet.land_use_h13||0), 0.002); end
  def test_land_use_i13; assert_in_epsilon(1808.8436494022403, worksheet.land_use_i13, 0.002); end
  def test_land_use_j13; assert_in_epsilon(8939.172566552703, worksheet.land_use_j13, 0.002); end
  def test_land_use_k13; assert_in_epsilon(18629.90098230235, worksheet.land_use_k13, 0.002); end
  def test_land_use_l13; assert_in_epsilon(30460.206900640853, worksheet.land_use_l13, 0.002); end
  def test_land_use_m13; assert_in_epsilon(41045.21745915421, worksheet.land_use_m13, 0.002); end
  def test_land_use_n13; assert_in_epsilon(46785.12444272738, worksheet.land_use_n13, 0.002); end
  def test_land_use_o13; assert_in_epsilon(49999.23571290351, worksheet.land_use_o13, 0.002); end
  def test_land_use_p13; assert_in_epsilon(46566.793901949066, worksheet.land_use_p13, 0.002); end
  def test_land_use_q13; assert_in_epsilon(38595.90125206595, worksheet.land_use_q13, 0.002); end
  def test_land_use_c14; assert_equal("IV.b", worksheet.land_use_c14); end
  def test_land_use_d14; assert_equal("Solar CSP", worksheet.land_use_d14); end
  def test_land_use_h14; assert_in_delta(0.0, (worksheet.land_use_h14||0), 0.002); end
  def test_land_use_i14; assert_in_delta(0.0, (worksheet.land_use_i14||0), 0.002); end
  def test_land_use_j14; assert_in_epsilon(2428.11385344, worksheet.land_use_j14, 0.002); end
  def test_land_use_k14; assert_in_epsilon(6677.313096960001, worksheet.land_use_k14, 0.002); end
  def test_land_use_l14; assert_in_epsilon(11128.855161600002, worksheet.land_use_l14, 0.002); end
  def test_land_use_m14; assert_in_epsilon(15175.711584000002, worksheet.land_use_m14, 0.002); end
  def test_land_use_n14; assert_in_epsilon(19222.568006400004, worksheet.land_use_n14, 0.002); end
  def test_land_use_o14; assert_in_epsilon(21245.996217600004, worksheet.land_use_o14, 0.002); end
  def test_land_use_p14; assert_in_epsilon(19222.568006400004, worksheet.land_use_p14, 0.002); end
  def test_land_use_q14; assert_in_epsilon(15175.711584000002, worksheet.land_use_q14, 0.002); end
  def test_land_use_c15; assert_equal("IV.c.1", worksheet.land_use_c15); end
  def test_land_use_d15; assert_equal("Onshore Wind", worksheet.land_use_d15); end
  def test_land_use_h15; assert_in_epsilon(4306.253848791207, worksheet.land_use_h15, 0.002); end
  def test_land_use_i15; assert_in_epsilon(6284.56568116608, worksheet.land_use_i15, 0.002); end
  def test_land_use_j15; assert_in_epsilon(11444.307619726082, worksheet.land_use_j15, 0.002); end
  def test_land_use_k15; assert_in_epsilon(17514.592253326082, worksheet.land_use_k15, 0.002); end
  def test_land_use_l15; assert_in_epsilon(23584.876886926082, worksheet.land_use_l15, 0.002); end
  def test_land_use_m15; assert_in_epsilon(31172.732678926084, worksheet.land_use_m15, 0.002); end
  def test_land_use_n15; assert_in_epsilon(34454.33462213488, worksheet.land_use_n15, 0.002); end
  def test_land_use_o15; assert_in_epsilon(35511.16510656, worksheet.land_use_o15, 0.002); end
  def test_land_use_p15; assert_in_epsilon(36421.7078016, worksheet.land_use_p15, 0.002); end
  def test_land_use_q15; assert_in_epsilon(35207.650874880004, worksheet.land_use_q15, 0.002); end
  def test_land_use_c16; assert_equal("IV.d", worksheet.land_use_c16); end
  def test_land_use_d16; assert_equal("Small Hydro", worksheet.land_use_d16); end
  def test_land_use_h16; assert_in_epsilon(2398.490864428032, worksheet.land_use_h16, 0.002); end
  def test_land_use_i16; assert_in_epsilon(4110.311131103233, worksheet.land_use_i16, 0.002); end
  def test_land_use_j16; assert_in_epsilon(5931.396521183233, worksheet.land_use_j16, 0.002); end
  def test_land_use_k16; assert_in_epsilon(7995.293296607233, worksheet.land_use_k16, 0.002); end
  def test_land_use_l16; assert_in_epsilon(9209.350223327234, worksheet.land_use_l16, 0.002); end
  def test_land_use_m16; assert_in_epsilon(10423.407150047233, worksheet.land_use_m16, 0.002); end
  def test_land_use_n16; assert_in_epsilon(11030.435613407231, worksheet.land_use_n16, 0.002); end
  def test_land_use_o16; assert_in_epsilon(10877.9500634112, worksheet.land_use_o16, 0.002); end
  def test_land_use_p16; assert_in_epsilon(10975.803051704832, worksheet.land_use_p16, 0.002); end
  def test_land_use_q16; assert_in_epsilon(10975.803051704832, worksheet.land_use_q16, 0.002); end
  def test_land_use_d17; assert_equal("Renewables", worksheet.land_use_d17); end
  def test_land_use_h17; assert_in_epsilon(6704.744713219239, worksheet.land_use_h17, 0.002); end
  def test_land_use_i17; assert_in_epsilon(12203.720461671553, worksheet.land_use_i17, 0.002); end
  def test_land_use_j17; assert_in_epsilon(28742.990560902017, worksheet.land_use_j17, 0.002); end
  def test_land_use_k17; assert_in_epsilon(50817.09962919567, worksheet.land_use_k17, 0.002); end
  def test_land_use_l17; assert_in_epsilon(74383.28917249417, worksheet.land_use_l17, 0.002); end
  def test_land_use_m17; assert_in_epsilon(97817.06887212754, worksheet.land_use_m17, 0.002); end
  def test_land_use_n17; assert_in_epsilon(111492.46268466949, worksheet.land_use_n17, 0.002); end
  def test_land_use_o17; assert_in_epsilon(117634.34710047471, worksheet.land_use_o17, 0.002); end
  def test_land_use_p17; assert_in_epsilon(113186.8727616539, worksheet.land_use_p17, 0.002); end
  def test_land_use_q17; assert_in_epsilon(99955.0667626508, worksheet.land_use_q17, 0.002); end
  def test_land_use_c18; assert_equal("V.a", worksheet.land_use_c18); end
  def test_land_use_d18; assert_equal("Biomass Based Electricity& Biogas", worksheet.land_use_d18); end
  def test_land_use_h18; assert_in_epsilon(4087.891025367391, worksheet.land_use_h18, 0.002); end
  def test_land_use_i18; assert_in_epsilon(5623.778935899794, worksheet.land_use_i18, 0.002); end
  def test_land_use_j18; assert_in_epsilon(6416.492456119713, worksheet.land_use_j18, 0.002); end
  def test_land_use_k18; assert_in_epsilon(7209.205976339629, worksheet.land_use_k18, 0.002); end
  def test_land_use_l18; assert_in_epsilon(8001.91949655955, worksheet.land_use_l18, 0.002); end
  def test_land_use_m18; assert_in_epsilon(8794.633016779468, worksheet.land_use_m18, 0.002); end
  def test_land_use_n18; assert_in_epsilon(9587.346536999383, worksheet.land_use_n18, 0.002); end
  def test_land_use_o18; assert_in_epsilon(10380.060057219305, worksheet.land_use_o18, 0.002); end
  def test_land_use_p18; assert_in_epsilon(11172.773577439222, worksheet.land_use_p18, 0.002); end
  def test_land_use_q18; assert_in_epsilon(11965.48709765914, worksheet.land_use_q18, 0.002); end
  def test_land_use_c19; assert_equal("V.b", worksheet.land_use_c19); end
  def test_land_use_d19; assert_equal("First & Second Generation Bio Fuels", worksheet.land_use_d19); end
  def test_land_use_h19; assert_in_delta(0.0, (worksheet.land_use_h19||0), 0.002); end
  def test_land_use_i19; assert_in_epsilon(150000.0, worksheet.land_use_i19, 0.002); end
  def test_land_use_j19; assert_in_epsilon(177777.777777778, worksheet.land_use_j19, 0.002); end
  def test_land_use_k19; assert_in_epsilon(200000.0, worksheet.land_use_k19, 0.002); end
  def test_land_use_l19; assert_in_epsilon(250000.0, worksheet.land_use_l19, 0.002); end
  def test_land_use_m19; assert_in_epsilon(300000.0, worksheet.land_use_m19, 0.002); end
  def test_land_use_n19; assert_in_epsilon(350000.0, worksheet.land_use_n19, 0.002); end
  def test_land_use_o19; assert_in_epsilon(400000.0, worksheet.land_use_o19, 0.002); end
  def test_land_use_p19; assert_in_epsilon(450000.0, worksheet.land_use_p19, 0.002); end
  def test_land_use_q19; assert_in_epsilon(500000.0, worksheet.land_use_q19, 0.002); end
  def test_land_use_c20; assert_equal("V.c", worksheet.land_use_c20); end
  def test_land_use_d20; assert_equal("Advanced Bio Fuels", worksheet.land_use_d20); end
  def test_land_use_h20; assert_in_delta(0.0, (worksheet.land_use_h20||0), 0.002); end
  def test_land_use_i20; assert_in_delta(0.0, (worksheet.land_use_i20||0), 0.002); end
  def test_land_use_j20; assert_in_delta(0.0, (worksheet.land_use_j20||0), 0.002); end
  def test_land_use_k20; assert_in_delta(0.0, (worksheet.land_use_k20||0), 0.002); end
  def test_land_use_l20; assert_in_epsilon(8.0, worksheet.land_use_l20, 0.002); end
  def test_land_use_m20; assert_in_epsilon(80.0, worksheet.land_use_m20, 0.002); end
  def test_land_use_n20; assert_in_epsilon(160.0, worksheet.land_use_n20, 0.002); end
  def test_land_use_o20; assert_in_epsilon(240.0, worksheet.land_use_o20, 0.002); end
  def test_land_use_p20; assert_in_epsilon(320.0, worksheet.land_use_p20, 0.002); end
  def test_land_use_q20; assert_in_epsilon(400.0, worksheet.land_use_q20, 0.002); end
  def test_land_use_c21; assert_equal("VI.a", worksheet.land_use_c21); end
  def test_land_use_d21; assert_equal("Waste to Electricity", worksheet.land_use_d21); end
  def test_land_use_h21; assert_in_delta(0.0, (worksheet.land_use_h21||0), 0.002); end
  def test_land_use_i21; assert_in_delta(0.0, (worksheet.land_use_i21||0), 0.002); end
  def test_land_use_j21; assert_in_delta(0.0, (worksheet.land_use_j21||0), 0.002); end
  def test_land_use_k21; assert_in_delta(0.0, (worksheet.land_use_k21||0), 0.002); end
  def test_land_use_l21; assert_in_delta(0.0, (worksheet.land_use_l21||0), 0.002); end
  def test_land_use_m21; assert_in_delta(0.0, (worksheet.land_use_m21||0), 0.002); end
  def test_land_use_n21; assert_in_delta(0.0, (worksheet.land_use_n21||0), 0.002); end
  def test_land_use_o21; assert_in_delta(0.0, (worksheet.land_use_o21||0), 0.002); end
  def test_land_use_p21; assert_in_delta(0.0, (worksheet.land_use_p21||0), 0.002); end
  def test_land_use_q21; assert_in_delta(0.0, (worksheet.land_use_q21||0), 0.002); end
  def test_land_use_d22; assert_equal("Bio Energy", worksheet.land_use_d22); end
  def test_land_use_h22; assert_in_epsilon(4087.891025367391, worksheet.land_use_h22, 0.002); end
  def test_land_use_i22; assert_in_epsilon(155623.77893589978, worksheet.land_use_i22, 0.002); end
  def test_land_use_j22; assert_in_epsilon(184194.27023389773, worksheet.land_use_j22, 0.002); end
  def test_land_use_k22; assert_in_epsilon(207209.20597633964, worksheet.land_use_k22, 0.002); end
  def test_land_use_l22; assert_in_epsilon(258009.91949655954, worksheet.land_use_l22, 0.002); end
  def test_land_use_m22; assert_in_epsilon(308874.6330167795, worksheet.land_use_m22, 0.002); end
  def test_land_use_n22; assert_in_epsilon(359747.3465369994, worksheet.land_use_n22, 0.002); end
  def test_land_use_o22; assert_in_epsilon(410620.0600572193, worksheet.land_use_o22, 0.002); end
  def test_land_use_p22; assert_in_epsilon(461492.77357743925, worksheet.land_use_p22, 0.002); end
  def test_land_use_q22; assert_in_epsilon(512365.48709765915, worksheet.land_use_q22, 0.002); end
  def test_land_use_d23; assert_equal("India Land Requirement", worksheet.land_use_d23); end
  def test_land_use_h23; assert_in_epsilon(73285.30165816846, worksheet.land_use_h23, 0.002); end
  def test_land_use_i23; assert_in_epsilon(247276.42090867256, worksheet.land_use_i23, 0.002); end
  def test_land_use_j23; assert_in_epsilon(326827.65876439714, worksheet.land_use_j23, 0.002); end
  def test_land_use_k23; assert_in_epsilon(382065.5028129672, worksheet.land_use_k23, 0.002); end
  def test_land_use_l23; assert_in_epsilon(470686.6269177138, worksheet.land_use_l23, 0.002); end
  def test_land_use_m23; assert_in_epsilon(564901.1617891921, worksheet.land_use_m23, 0.002); end
  def test_land_use_n23; assert_in_epsilon(646241.4504137534, worksheet.land_use_n23, 0.002); end
  def test_land_use_o23; assert_in_epsilon(723685.9489501001, worksheet.land_use_o23, 0.002); end
  def test_land_use_p23; assert_in_epsilon(788781.7927477658, worksheet.land_use_p23, 0.002); end
  def test_land_use_q23; assert_in_epsilon(845881.5287475944, worksheet.land_use_q23, 0.002); end
  def test_land_use_c26; assert_equal("B.04", worksheet.land_use_c26); end
  def test_land_use_d26; assert_equal("India Sea area", worksheet.land_use_d26); end
  def test_land_use_h26; assert_in_epsilon(2007.0, worksheet.land_use_h26, 0.002); end
  def test_land_use_i26; assert_in_epsilon(2012.0, worksheet.land_use_i26, 0.002); end
  def test_land_use_j26; assert_in_epsilon(2017.0, worksheet.land_use_j26, 0.002); end
  def test_land_use_k26; assert_in_epsilon(2022.0, worksheet.land_use_k26, 0.002); end
  def test_land_use_l26; assert_in_epsilon(2027.0, worksheet.land_use_l26, 0.002); end
  def test_land_use_m26; assert_in_epsilon(2032.0, worksheet.land_use_m26, 0.002); end
  def test_land_use_n26; assert_in_epsilon(2037.0, worksheet.land_use_n26, 0.002); end
  def test_land_use_o26; assert_in_epsilon(2042.0, worksheet.land_use_o26, 0.002); end
  def test_land_use_p26; assert_in_epsilon(2047.0, worksheet.land_use_p26, 0.002); end
  def test_land_use_q26; assert_in_epsilon(2052.0, worksheet.land_use_q26, 0.002); end
  def test_land_use_r26; assert_equal("ha", worksheet.land_use_r26); end
  def test_land_use_c28; assert_equal("IV.c.2", worksheet.land_use_c28); end
  def test_land_use_d28; assert_equal("Offshore Wind", worksheet.land_use_d28); end
  def test_land_use_h28; assert_in_delta(0.0, (worksheet.land_use_h28||0), 0.002); end
  def test_land_use_i28; assert_in_delta(0.0, (worksheet.land_use_i28||0), 0.002); end
  def test_land_use_j28; assert_in_delta(0.0, (worksheet.land_use_j28||0), 0.002); end
  def test_land_use_k28; assert_in_delta(0.0, (worksheet.land_use_k28||0), 0.002); end
  def test_land_use_l28; assert_in_delta(0.0, (worksheet.land_use_l28||0), 0.002); end
  def test_land_use_m28; assert_in_delta(0.0, (worksheet.land_use_m28||0), 0.002); end
  def test_land_use_n28; assert_in_delta(0.0, (worksheet.land_use_n28||0), 0.002); end
  def test_land_use_o28; assert_in_delta(0.0, (worksheet.land_use_o28||0), 0.002); end
  def test_land_use_p28; assert_in_delta(0.0, (worksheet.land_use_p28||0), 0.002); end
  def test_land_use_q28; assert_in_delta(0.0, (worksheet.land_use_q28||0), 0.002); end
  def test_land_use_c29; assert_equal("v.c", worksheet.land_use_c29); end
  def test_land_use_d29; assert_equal("Advanced Bio Fuels", worksheet.land_use_d29); end
  def test_land_use_h29; assert_in_delta(0.0, (worksheet.land_use_h29||0), 0.002); end
  def test_land_use_i29; assert_in_delta(0.0, (worksheet.land_use_i29||0), 0.002); end
  def test_land_use_j29; assert_in_delta(0.0, (worksheet.land_use_j29||0), 0.002); end
  def test_land_use_k29; assert_in_delta(0.0, (worksheet.land_use_k29||0), 0.002); end
  def test_land_use_l29; assert_in_epsilon(400.0, worksheet.land_use_l29, 0.002); end
  def test_land_use_m29; assert_in_epsilon(800.0, worksheet.land_use_m29, 0.002); end
  def test_land_use_n29; assert_in_epsilon(1600.0, worksheet.land_use_n29, 0.002); end
  def test_land_use_o29; assert_in_epsilon(2400.0, worksheet.land_use_o29, 0.002); end
  def test_land_use_p29; assert_in_epsilon(3200.0, worksheet.land_use_p29, 0.002); end
  def test_land_use_q29; assert_in_epsilon(4000.0, worksheet.land_use_q29, 0.002); end
  def test_land_use_d31; assert_equal("Total India Off Shore area Requirement", worksheet.land_use_d31); end
  def test_land_use_h31; assert_in_delta(0.0, (worksheet.land_use_h31||0), 0.002); end
  def test_land_use_i31; assert_in_delta(0.0, (worksheet.land_use_i31||0), 0.002); end
  def test_land_use_j31; assert_in_delta(0.0, (worksheet.land_use_j31||0), 0.002); end
  def test_land_use_k31; assert_in_delta(0.0, (worksheet.land_use_k31||0), 0.002); end
  def test_land_use_l31; assert_in_epsilon(400.0, worksheet.land_use_l31, 0.002); end
  def test_land_use_m31; assert_in_epsilon(800.0, worksheet.land_use_m31, 0.002); end
  def test_land_use_n31; assert_in_epsilon(1600.0, worksheet.land_use_n31, 0.002); end
  def test_land_use_o31; assert_in_epsilon(2400.0, worksheet.land_use_o31, 0.002); end
  def test_land_use_p31; assert_in_epsilon(3200.0, worksheet.land_use_p31, 0.002); end
  def test_land_use_q31; assert_in_epsilon(4000.0, worksheet.land_use_q31, 0.002); end
  def test_land_use_d36; assert_equal("Area in ha", worksheet.land_use_d36); end
  def test_land_use_j36; assert_equal("Least Effort Pathway", worksheet.land_use_j36); end
  def test_land_use_k36; assert_equal("Your Pathway", worksheet.land_use_k36); end
  def test_land_use_l36; assert_equal("Change", worksheet.land_use_l36); end
  def test_land_use_d37; assert_equal("Conventional", worksheet.land_use_d37); end
  def test_land_use_j37; assert_in_epsilon(214102.146408673, worksheet.land_use_j37, 0.002); end
  def test_land_use_k37; assert_in_epsilon(214102.14640867268, worksheet.land_use_k37, 0.002); end
  def test_land_use_l37; assert_in_delta(-3.2014213502407074e-10, worksheet.land_use_l37, 0.002); end
  def test_land_use_d38; assert_equal("Renewables", worksheet.land_use_d38); end
  def test_land_use_j38; assert_in_epsilon(113186.872761654, worksheet.land_use_j38, 0.002); end
  def test_land_use_k38; assert_in_epsilon(113186.8727616539, worksheet.land_use_k38, 0.002); end
  def test_land_use_l38; assert_in_delta(0.0, (worksheet.land_use_l38||0), 0.002); end
  def test_land_use_d39; assert_equal("Bio Energy", worksheet.land_use_d39); end
  def test_land_use_j39; assert_in_epsilon(461492.773577439, worksheet.land_use_j39, 0.002); end
  def test_land_use_k39; assert_in_epsilon(461492.77357743925, worksheet.land_use_k39, 0.002); end
  def test_land_use_l39; assert_in_delta(0.0, (worksheet.land_use_l39||0), 0.002); end
  def test_land_use_d40; assert_equal("Total", worksheet.land_use_d40); end
  def test_land_use_j40; assert_in_epsilon(788781.792747766, worksheet.land_use_j40, 0.002); end
  def test_land_use_k40; assert_in_epsilon(788781.7927477658, worksheet.land_use_k40, 0.002); end
  def test_land_use_l40; assert_in_delta(0.0, (worksheet.land_use_l40||0), 0.002); end
  def test_land_use_d41; assert_equal("India's Land Area", worksheet.land_use_d41); end
  def test_land_use_k41; assert_in_epsilon(328700000.0, worksheet.land_use_k41, 0.002); end
  def test_land_use_d42; assert_equal("Land Area as % India's area", worksheet.land_use_d42); end
  def test_land_use_j42; assert_in_delta(0.002399701225274615, worksheet.land_use_j42, 0.002); end
  def test_land_use_k42; assert_in_delta(0.0023997012252746147, worksheet.land_use_k42, 0.002); end
end
